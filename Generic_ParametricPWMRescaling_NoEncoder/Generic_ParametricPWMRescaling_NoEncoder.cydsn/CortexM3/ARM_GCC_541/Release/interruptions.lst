ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10464
 458 01dc 04000000 		.word	rx_queue.10468
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10466
 461 01e8 08000000 		.word	data_packet_index.10465
 462 01ec 0C000000 		.word	data_packet_buffer.10467
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.section	.rodata
 468 001d 000000   		.align	2
 469              	.LC0:
 470 0020 00       		.ascii	"\000"
 471              		.global	__aeabi_i2f
 472              		.global	__aeabi_fdiv
 473              		.section	.text.function_scheduler,"ax",%progbits
 474              		.align	2
 475              		.global	function_scheduler
 476              		.thumb
 477              		.thumb_func
 478              		.type	function_scheduler, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 14


 479              	function_scheduler:
 480              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 481              		.loc 1 268 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 17504
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 B0B5     		push	{r4, r5, r7, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 4, -16
 488              		.cfi_offset 5, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 ADF5884D 		sub	sp, sp, #17408
 492              		.cfi_def_cfa_offset 17424
 493 0006 98B0     		sub	sp, sp, #96
 494              		.cfi_def_cfa_offset 17520
 495 0008 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 497              		.loc 1 272 0
 498 000a 07F56A53 		add	r3, r7, #14976
 499 000e 03F11803 		add	r3, r3, #24
 500 0012 0022     		movs	r2, #0
 501 0014 1A60     		str	r2, [r3]
 502 0016 0433     		adds	r3, r3, #4
 503 0018 4FF41C62 		mov	r2, #2496
 504 001c 0021     		movs	r1, #0
 505 001e 1846     		mov	r0, r3
 506 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 507              		.loc 1 274 0
 508 0024 0023     		movs	r3, #0
 509 0026 07F58842 		add	r2, r7, #17408
 510 002a 02F15E02 		add	r2, r2, #94
 511 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 512              		.loc 1 275 0
 513 0030 0123     		movs	r3, #1
 514 0032 07F58842 		add	r2, r7, #17408
 515 0036 02F15D02 		add	r2, r2, #93
 516 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 15


 518 003c 0020     		movs	r0, #0
 519 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0046 0346     		mov	r3, r0
 523 0048 1A46     		mov	r2, r3
 524 004a 804B     		ldr	r3, .L84
 525 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 280:..\src/interruptions.c **** 
 281:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 281 0
 527 004e 0120     		movs	r0, #1
 528 0050 FFF7FEFF 		bl	ADC_SOC_Write
 282:..\src/interruptions.c ****     
 283:..\src/interruptions.c ****     // Check Interrupt 
 284:..\src/interruptions.c **** 
 285:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 285 0
 530 0054 7E4B     		ldr	r3, .L84+4
 531 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0058 002B     		cmp	r3, #0
 533 005a 04D0     		beq	.L34
 286:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 286 0
 535 005c 7C4B     		ldr	r3, .L84+4
 536 005e 0022     		movs	r2, #0
 537 0060 1A70     		strb	r2, [r3]
 287:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 287 0
 539 0062 FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 288:..\src/interruptions.c ****     }
 289:..\src/interruptions.c ****     
 290:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 290 0
 542 0066 7B4B     		ldr	r3, .L84+8
 543 0068 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 006c 042B     		cmp	r3, #4
 545 006e 00F23C82 		bhi	.L35
 546 0072 01A2     		adr	r2, .L37
 547 0074 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0078 8D000000 		.word	.L36+1
 551 007c 8F010000 		.word	.L38+1
 552 0080 CF030000 		.word	.L39+1
 553 0084 CF030000 		.word	.L39+1
 554 0088 8F010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 291:..\src/interruptions.c ****         case SOFTHAND_PRO:
 292:..\src/interruptions.c ****         
 293:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 294:..\src/interruptions.c ****             
 295:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 16


 296:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 296 0
 558 008c 07F58843 		add	r3, r7, #17408
 559 0090 03F15E03 		add	r3, r3, #94
 560 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 561 0096 6F4A     		ldr	r2, .L84+8
 562 0098 7421     		movs	r1, #116
 563 009a 01FB03F3 		mul	r3, r1, r3
 564 009e 1344     		add	r3, r3, r2
 565 00a0 03F58873 		add	r3, r3, #272
 566 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 567 00a6 1A46     		mov	r2, r3
 568 00a8 6B4B     		ldr	r3, .L84+12
 569 00aa 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 570 00ac 002B     		cmp	r3, #0
 571 00ae 29D0     		beq	.L40
 297:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 298:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 572              		.loc 1 298 0
 573 00b0 07F58843 		add	r3, r7, #17408
 574 00b4 03F15E03 		add	r3, r3, #94
 575 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 576 00ba 664A     		ldr	r2, .L84+8
 577 00bc 7421     		movs	r1, #116
 578 00be 01FB03F3 		mul	r3, r1, r3
 579 00c2 1344     		add	r3, r3, r2
 580 00c4 03F58873 		add	r3, r3, #272
 581 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 582 00ca 1846     		mov	r0, r3
 583 00cc FFF7FEFF 		bl	Change_CS_EncoderLine
 299:..\src/interruptions.c ****                 
 300:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 584              		.loc 1 300 0
 585 00d0 07F58843 		add	r3, r7, #17408
 586 00d4 03F15E03 		add	r3, r3, #94
 587 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 00da 5E4A     		ldr	r2, .L84+8
 589 00dc 7421     		movs	r1, #116
 590 00de 01FB03F3 		mul	r3, r1, r3
 591 00e2 1344     		add	r3, r3, r2
 592 00e4 03F58873 		add	r3, r3, #272
 593 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 594 00ea 0021     		movs	r1, #0
 595 00ec 1846     		mov	r0, r3
 596 00ee FFF7FEFF 		bl	encoder_reading_SPI
 301:..\src/interruptions.c **** 
 302:..\src/interruptions.c ****                 // Check Interrupt     
 303:..\src/interruptions.c ****                 
 304:..\src/interruptions.c ****                 if (interrupt_flag){
 597              		.loc 1 304 0
 598 00f2 574B     		ldr	r3, .L84+4
 599 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00f6 002B     		cmp	r3, #0
 601 00f8 04D0     		beq	.L40
 305:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 602              		.loc 1 305 0
 603 00fa 554B     		ldr	r3, .L84+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 17


 604 00fc 0022     		movs	r2, #0
 605 00fe 1A70     		strb	r2, [r3]
 306:..\src/interruptions.c ****                     interrupt_manager();
 606              		.loc 1 306 0
 607 0100 FFF7FEFF 		bl	interrupt_manager
 608              	.L40:
 307:..\src/interruptions.c ****                 }
 308:..\src/interruptions.c ****             }
 309:..\src/interruptions.c ****             
 310:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 311:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 609              		.loc 1 311 0
 610 0104 07F58843 		add	r3, r7, #17408
 611 0108 03F15E03 		add	r3, r3, #94
 612 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 613 010e 514A     		ldr	r2, .L84+8
 614 0110 7421     		movs	r1, #116
 615 0112 01FB03F3 		mul	r3, r1, r3
 616 0116 1344     		add	r3, r3, r2
 617 0118 03F58873 		add	r3, r3, #272
 618 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 619 011e 1A46     		mov	r2, r3
 620 0120 4E4B     		ldr	r3, .L84+16
 621 0122 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 622 0124 002B     		cmp	r3, #0
 623 0126 27D0     		beq	.L41
 312:..\src/interruptions.c ****                 motor_control_SH();
 624              		.loc 1 312 0
 625 0128 FFF7FEFF 		bl	motor_control_SH
 313:..\src/interruptions.c ****                 
 314:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 315:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 626              		.loc 1 315 0
 627 012c 07F58843 		add	r3, r7, #17408
 628 0130 03F15E03 		add	r3, r3, #94
 629 0134 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 630 0136 474A     		ldr	r2, .L84+8
 631 0138 7421     		movs	r1, #116
 632 013a 01FB03F3 		mul	r3, r1, r3
 633 013e 1344     		add	r3, r3, r2
 634 0140 03F58973 		add	r3, r3, #274
 635 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 636 0146 012B     		cmp	r3, #1
 637 0148 16D1     		bne	.L41
 316:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 638              		.loc 1 316 0
 639 014a 07F58843 		add	r3, r7, #17408
 640 014e 03F15E03 		add	r3, r3, #94
 641 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 642 0154 3F4A     		ldr	r2, .L84+8
 643 0156 7421     		movs	r1, #116
 644 0158 01FB03F3 		mul	r3, r1, r3
 645 015c 1344     		add	r3, r3, r2
 646 015e 03F58773 		add	r3, r3, #270
 647 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 648 0164 002B     		cmp	r3, #0
 649 0166 07D1     		bne	.L41
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 18


 317:..\src/interruptions.c ****                         change_ext_ref_flag[MOTOR_IDX] = FALSE;
 650              		.loc 1 317 0
 651 0168 07F58843 		add	r3, r7, #17408
 652 016c 03F15E03 		add	r3, r3, #94
 653 0170 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 654 0172 3B4A     		ldr	r2, .L84+20
 655 0174 0021     		movs	r1, #0
 656 0176 D154     		strb	r1, [r2, r3]
 657              	.L41:
 318:..\src/interruptions.c ****                     }   
 319:..\src/interruptions.c ****                 }
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 658              		.loc 1 324 0
 659 0178 354B     		ldr	r3, .L84+4
 660 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 661 017c 002B     		cmp	r3, #0
 662 017e 00F0A081 		beq	.L81
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 663              		.loc 1 325 0
 664 0182 334B     		ldr	r3, .L84+4
 665 0184 0022     		movs	r2, #0
 666 0186 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 667              		.loc 1 326 0
 668 0188 FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
 328:..\src/interruptions.c ****             break;
 669              		.loc 1 328 0
 670 018c 99E1     		b	.L81
 671              	.L38:
 672              	.LBB2:
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 673              		.loc 1 333 0
 674 018e 0023     		movs	r3, #0
 675 0190 07F58842 		add	r2, r7, #17408
 676 0194 02F15F02 		add	r2, r2, #95
 677 0198 1370     		strb	r3, [r2]
 678 019a 88E0     		b	.L43
 679              	.L48:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 680              		.loc 1 334 0
 681 019c 07F58843 		add	r3, r7, #17408
 682 01a0 03F15F03 		add	r3, r3, #95
 683 01a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 01a6 2C4A     		ldr	r2, .L84+12
 685 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 686 01aa 002B     		cmp	r3, #0
 687 01ac 74D0     		beq	.L44
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 19


 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 688              		.loc 1 336 0
 689 01ae 07F58843 		add	r3, r7, #17408
 690 01b2 03F15F03 		add	r3, r3, #95
 691 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 692 01b8 1846     		mov	r0, r3
 693 01ba FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 694              		.loc 1 338 0
 695 01be 07F58843 		add	r3, r7, #17408
 696 01c2 03F15E03 		add	r3, r3, #94
 697 01c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 698 01c8 224A     		ldr	r2, .L84+8
 699 01ca 7421     		movs	r1, #116
 700 01cc 01FB03F3 		mul	r3, r1, r3
 701 01d0 1344     		add	r3, r3, r2
 702 01d2 03F58873 		add	r3, r3, #272
 703 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 704 01d8 07F58842 		add	r2, r7, #17408
 705 01dc 02F15F02 		add	r2, r2, #95
 706 01e0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 707 01e2 9A42     		cmp	r2, r3
 708 01e4 0ED1     		bne	.L45
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 709              		.loc 1 340 0
 710 01e6 07F58843 		add	r3, r7, #17408
 711 01ea 03F15E03 		add	r3, r3, #94
 712 01ee 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 713 01f0 07F58843 		add	r3, r7, #17408
 714 01f4 03F15F03 		add	r3, r3, #95
 715 01f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 716 01fa 1146     		mov	r1, r2
 717 01fc 1846     		mov	r0, r3
 718 01fe FFF7FEFF 		bl	encoder_reading_SPI
 719 0202 40E0     		b	.L46
 720              	.L45:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 721              		.loc 1 343 0
 722 0204 07F58843 		add	r3, r7, #17408
 723 0208 03F15D03 		add	r3, r3, #93
 724 020c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 725 020e 114A     		ldr	r2, .L84+8
 726 0210 7421     		movs	r1, #116
 727 0212 01FB03F3 		mul	r3, r1, r3
 728 0216 1344     		add	r3, r3, r2
 729 0218 03F58873 		add	r3, r3, #272
 730 021c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 731 021e 07F58842 		add	r2, r7, #17408
 732 0222 02F15F02 		add	r2, r2, #95
 733 0226 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 734 0228 9A42     		cmp	r2, r3
 735 022a 1BD1     		bne	.L47
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 20


 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 736              		.loc 1 345 0
 737 022c 07F58843 		add	r3, r7, #17408
 738 0230 03F15D03 		add	r3, r3, #93
 739 0234 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 740 0236 07F58843 		add	r3, r7, #17408
 741 023a 03F15F03 		add	r3, r3, #95
 742 023e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 743 0240 1146     		mov	r1, r2
 744 0242 1846     		mov	r0, r3
 745 0244 FFF7FEFF 		bl	encoder_reading_SPI
 746 0248 1DE0     		b	.L46
 747              	.L85:
 748 024a 00BF     		.align	2
 749              	.L84:
 750 024c 00000000 		.word	timer_value0
 751 0250 00000000 		.word	interrupt_flag
 752 0254 00000000 		.word	c_mem
 753 0258 00000000 		.word	N_Encoder_Line_Connected
 754 025c 00000000 		.word	pos_reconstruct
 755 0260 00000000 		.word	change_ext_ref_flag
 756              	.L47:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 757              		.loc 1 349 0
 758 0264 07F58843 		add	r3, r7, #17408
 759 0268 03F15F03 		add	r3, r3, #95
 760 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 761 026e 974A     		ldr	r2, .L86
 762 0270 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 763 0272 1A46     		mov	r2, r3
 764 0274 07F58843 		add	r3, r7, #17408
 765 0278 03F15F03 		add	r3, r3, #95
 766 027c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 767 027e 1946     		mov	r1, r3
 768 0280 1046     		mov	r0, r2
 769 0282 FFF7FEFF 		bl	ReadEncoderLine
 770              	.L46:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 771              		.loc 1 356 0
 772 0286 924B     		ldr	r3, .L86+4
 773 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 028a 002B     		cmp	r3, #0
 775 028c 04D0     		beq	.L44
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 776              		.loc 1 357 0
 777 028e 904B     		ldr	r3, .L86+4
 778 0290 0022     		movs	r2, #0
 779 0292 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 21


 358:..\src/interruptions.c ****                         interrupt_manager();
 780              		.loc 1 358 0
 781 0294 FFF7FEFF 		bl	interrupt_manager
 782              	.L44:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 783              		.loc 1 333 0 discriminator 2
 784 0298 07F58843 		add	r3, r7, #17408
 785 029c 03F15F03 		add	r3, r3, #95
 786 02a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 787 02a2 0133     		adds	r3, r3, #1
 788 02a4 07F58842 		add	r2, r7, #17408
 789 02a8 02F15F02 		add	r2, r2, #95
 790 02ac 1370     		strb	r3, [r2]
 791              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 792              		.loc 1 333 0 is_stmt 0 discriminator 1
 793 02ae 07F58843 		add	r3, r7, #17408
 794 02b2 03F15F03 		add	r3, r3, #95
 795 02b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 796 02b8 012B     		cmp	r3, #1
 797 02ba 7FF66FAF 		bls	.L48
 798              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             
 365:..\src/interruptions.c ****             // Removed Encoder check to use PWM control without connecting Encoders.
 366:..\src/interruptions.c ****             // ONLY TO BE USED WITH PWM CONTROL
 367:..\src/interruptions.c ****             
 368:..\src/interruptions.c ****             //if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line 
 369:..\src/interruptions.c ****                 // Control MOTOR_IDX motor (always active) according to motor driver type
 370:..\src/interruptions.c ****                 motor_control_generic(MOTOR_IDX);
 799              		.loc 1 370 0 is_stmt 1
 800 02be 07F58843 		add	r3, r7, #17408
 801 02c2 03F15E03 		add	r3, r3, #94
 802 02c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 803 02c8 1846     		mov	r0, r3
 804 02ca FFF7FEFF 		bl	motor_control_generic
 371:..\src/interruptions.c ****                 
 372:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 373:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 805              		.loc 1 373 0
 806 02ce 07F58843 		add	r3, r7, #17408
 807 02d2 03F15E03 		add	r3, r3, #94
 808 02d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 809 02d8 7E4A     		ldr	r2, .L86+8
 810 02da 7421     		movs	r1, #116
 811 02dc 01FB03F3 		mul	r3, r1, r3
 812 02e0 1344     		add	r3, r3, r2
 813 02e2 03F58973 		add	r3, r3, #274
 814 02e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 815 02e8 012B     		cmp	r3, #1
 816 02ea 16D1     		bne	.L49
 374:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 817              		.loc 1 374 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 22


 818 02ec 07F58843 		add	r3, r7, #17408
 819 02f0 03F15E03 		add	r3, r3, #94
 820 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 821 02f6 774A     		ldr	r2, .L86+8
 822 02f8 7421     		movs	r1, #116
 823 02fa 01FB03F3 		mul	r3, r1, r3
 824 02fe 1344     		add	r3, r3, r2
 825 0300 03F58773 		add	r3, r3, #270
 826 0304 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 827 0306 002B     		cmp	r3, #0
 828 0308 07D1     		bne	.L49
 375:..\src/interruptions.c ****                         change_ext_ref_flag[MOTOR_IDX] = FALSE;
 829              		.loc 1 375 0
 830 030a 07F58843 		add	r3, r7, #17408
 831 030e 03F15E03 		add	r3, r3, #94
 832 0312 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 0314 704A     		ldr	r2, .L86+12
 834 0316 0021     		movs	r1, #0
 835 0318 D154     		strb	r1, [r2, r3]
 836              	.L49:
 376:..\src/interruptions.c ****                     }   
 377:..\src/interruptions.c ****                 }
 378:..\src/interruptions.c ****                      
 379:..\src/interruptions.c ****                 
 380:..\src/interruptions.c ****            // }
 381:..\src/interruptions.c ****             
 382:..\src/interruptions.c ****             // Check Interrupt 
 383:..\src/interruptions.c **** 
 384:..\src/interruptions.c ****             if (interrupt_flag){
 837              		.loc 1 384 0
 838 031a 6D4B     		ldr	r3, .L86+4
 839 031c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 840 031e 002B     		cmp	r3, #0
 841 0320 04D0     		beq	.L50
 385:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 842              		.loc 1 385 0
 843 0322 6B4B     		ldr	r3, .L86+4
 844 0324 0022     		movs	r2, #0
 845 0326 1A70     		strb	r2, [r3]
 386:..\src/interruptions.c ****                 interrupt_manager();
 846              		.loc 1 386 0
 847 0328 FFF7FEFF 		bl	interrupt_manager
 848              	.L50:
 387:..\src/interruptions.c ****             }
 388:..\src/interruptions.c ****             
 389:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
 390:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 849              		.loc 1 390 0
 850 032c 694B     		ldr	r3, .L86+8
 851 032e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 852 0332 012B     		cmp	r3, #1
 853 0334 40F0C780 		bne	.L82
 391:..\src/interruptions.c ****                 if (pos_reconstruct[c_mem.motor[SECOND_MOTOR_IDX].encoder_line]){      // Once enco
 854              		.loc 1 391 0
 855 0338 07F58843 		add	r3, r7, #17408
 856 033c 03F15D03 		add	r3, r3, #93
 857 0340 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 23


 858 0342 644A     		ldr	r2, .L86+8
 859 0344 7421     		movs	r1, #116
 860 0346 01FB03F3 		mul	r3, r1, r3
 861 034a 1344     		add	r3, r3, r2
 862 034c 03F58873 		add	r3, r3, #272
 863 0350 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 864 0352 1A46     		mov	r2, r3
 865 0354 614B     		ldr	r3, .L86+16
 866 0356 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 867 0358 002B     		cmp	r3, #0
 868 035a 2DD0     		beq	.L52
 392:..\src/interruptions.c ****                     motor_control_generic(SECOND_MOTOR_IDX);
 869              		.loc 1 392 0
 870 035c 07F58843 		add	r3, r7, #17408
 871 0360 03F15D03 		add	r3, r3, #93
 872 0364 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 873 0366 1846     		mov	r0, r3
 874 0368 FFF7FEFF 		bl	motor_control_generic
 393:..\src/interruptions.c ****                     
 394:..\src/interruptions.c ****                     // Check external reference before processing other serial data and right after
 395:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 875              		.loc 1 395 0
 876 036c 07F58843 		add	r3, r7, #17408
 877 0370 03F15D03 		add	r3, r3, #93
 878 0374 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 879 0376 574A     		ldr	r2, .L86+8
 880 0378 7421     		movs	r1, #116
 881 037a 01FB03F3 		mul	r3, r1, r3
 882 037e 1344     		add	r3, r3, r2
 883 0380 03F58973 		add	r3, r3, #274
 884 0384 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 885 0386 012B     		cmp	r3, #1
 886 0388 16D1     		bne	.L52
 396:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 887              		.loc 1 396 0
 888 038a 07F58843 		add	r3, r7, #17408
 889 038e 03F15D03 		add	r3, r3, #93
 890 0392 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 891 0394 4F4A     		ldr	r2, .L86+8
 892 0396 7421     		movs	r1, #116
 893 0398 01FB03F3 		mul	r3, r1, r3
 894 039c 1344     		add	r3, r3, r2
 895 039e 03F58773 		add	r3, r3, #270
 896 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 897 03a4 002B     		cmp	r3, #0
 898 03a6 07D1     		bne	.L52
 397:..\src/interruptions.c ****                             change_ext_ref_flag[SECOND_MOTOR_IDX] = FALSE;
 899              		.loc 1 397 0
 900 03a8 07F58843 		add	r3, r7, #17408
 901 03ac 03F15D03 		add	r3, r3, #93
 902 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 903 03b2 494A     		ldr	r2, .L86+12
 904 03b4 0021     		movs	r1, #0
 905 03b6 D154     		strb	r1, [r2, r3]
 906              	.L52:
 398:..\src/interruptions.c ****                         }   
 399:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 24


 400:..\src/interruptions.c ****                     
 401:..\src/interruptions.c ****                   
 402:..\src/interruptions.c ****                 }
 403:..\src/interruptions.c ****                 // Check Interrupt 
 404:..\src/interruptions.c **** 
 405:..\src/interruptions.c ****                 if (interrupt_flag){
 907              		.loc 1 405 0
 908 03b8 454B     		ldr	r3, .L86+4
 909 03ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 910 03bc 002B     		cmp	r3, #0
 911 03be 00F08280 		beq	.L82
 406:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 912              		.loc 1 406 0
 913 03c2 434B     		ldr	r3, .L86+4
 914 03c4 0022     		movs	r2, #0
 915 03c6 1A70     		strb	r2, [r3]
 407:..\src/interruptions.c ****                     interrupt_manager();
 916              		.loc 1 407 0
 917 03c8 FFF7FEFF 		bl	interrupt_manager
 408:..\src/interruptions.c ****                 }
 409:..\src/interruptions.c ****             }  
 410:..\src/interruptions.c ****             break;
 918              		.loc 1 410 0
 919 03cc 7BE0     		b	.L82
 920              	.L39:
 411:..\src/interruptions.c ****             
 412:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 413:..\src/interruptions.c ****             
 414:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 415:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 921              		.loc 1 415 0
 922 03ce 444B     		ldr	r3, .L86+20
 923 03d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 924 03d2 002B     		cmp	r3, #0
 925 03d4 38D0     		beq	.L53
 926              		.loc 1 415 0 is_stmt 0 discriminator 1
 927 03d6 3F4B     		ldr	r3, .L86+8
 928 03d8 93F8C832 		ldrb	r3, [r3, #712]	@ zero_extendqisi2
 929 03dc 002B     		cmp	r3, #0
 930 03de 33D0     		beq	.L53
 416:..\src/interruptions.c ****                 
 417:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 931              		.loc 1 417 0 is_stmt 1
 932 03e0 3C4B     		ldr	r3, .L86+8
 933 03e2 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 934 03e6 022B     		cmp	r3, #2
 935 03e8 08D1     		bne	.L54
 418:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 936              		.loc 1 418 0
 937 03ea 07F58843 		add	r3, r7, #17408
 938 03ee 03F15D03 		add	r3, r3, #93
 939 03f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 940 03f4 1846     		mov	r0, r3
 941 03f6 FFF7FEFF 		bl	air_chambers_control
 942 03fa 07E0     		b	.L55
 943              	.L54:
 419:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 25


 420:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 421:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 944              		.loc 1 421 0
 945 03fc 07F58843 		add	r3, r7, #17408
 946 0400 03F15D03 		add	r3, r3, #93
 947 0404 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 948 0406 1846     		mov	r0, r3
 949 0408 FFF7FEFF 		bl	otbk_act_wrist_control
 950              	.L55:
 422:..\src/interruptions.c ****                 }
 423:..\src/interruptions.c **** 
 424:..\src/interruptions.c ****                 // Check Interrupt 
 425:..\src/interruptions.c **** 
 426:..\src/interruptions.c ****                 if (interrupt_flag){
 951              		.loc 1 426 0
 952 040c 304B     		ldr	r3, .L86+4
 953 040e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 954 0410 002B     		cmp	r3, #0
 955 0412 04D0     		beq	.L56
 427:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 956              		.loc 1 427 0
 957 0414 2E4B     		ldr	r3, .L86+4
 958 0416 0022     		movs	r2, #0
 959 0418 1A70     		strb	r2, [r3]
 428:..\src/interruptions.c ****                     interrupt_manager();
 960              		.loc 1 428 0
 961 041a FFF7FEFF 		bl	interrupt_manager
 962              	.L56:
 429:..\src/interruptions.c ****                 }
 430:..\src/interruptions.c ****             
 431:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 963              		.loc 1 431 0
 964 041e 2D4B     		ldr	r3, .L86+8
 965 0420 93F8C922 		ldrb	r2, [r3, #713]	@ zero_extendqisi2
 966 0424 07F58843 		add	r3, r7, #17408
 967 0428 03F15D03 		add	r3, r3, #93
 968 042c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 969 042e 1146     		mov	r1, r2
 970 0430 1846     		mov	r0, r3
 971 0432 FFF7FEFF 		bl	drive_slave
 432:..\src/interruptions.c ****             
 433:..\src/interruptions.c ****                 // Check Interrupt 
 434:..\src/interruptions.c **** 
 435:..\src/interruptions.c ****                 if (interrupt_flag){
 972              		.loc 1 435 0
 973 0436 264B     		ldr	r3, .L86+4
 974 0438 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 975 043a 002B     		cmp	r3, #0
 976 043c 04D0     		beq	.L53
 436:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 977              		.loc 1 436 0
 978 043e 244B     		ldr	r3, .L86+4
 979 0440 0022     		movs	r2, #0
 980 0442 1A70     		strb	r2, [r3]
 437:..\src/interruptions.c ****                     interrupt_manager();
 981              		.loc 1 437 0
 982 0444 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 26


 983              	.L53:
 438:..\src/interruptions.c ****                 }
 439:..\src/interruptions.c ****             }
 440:..\src/interruptions.c ****             if (!master_mode){
 984              		.loc 1 440 0
 985 0448 254B     		ldr	r3, .L86+20
 986 044a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 987 044c 002B     		cmp	r3, #0
 988 044e 11D1     		bne	.L57
 441:..\src/interruptions.c ****                 
 442:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 989              		.loc 1 442 0
 990 0450 204B     		ldr	r3, .L86+8
 991 0452 93F8C832 		ldrb	r3, [r3, #712]	@ zero_extendqisi2
 992 0456 002B     		cmp	r3, #0
 993 0458 01D0     		beq	.L58
 443:..\src/interruptions.c ****                     // Stop feedback motors
 444:..\src/interruptions.c ****                     stop_master_device();
 994              		.loc 1 444 0
 995 045a FFF7FEFF 		bl	stop_master_device
 996              	.L58:
 445:..\src/interruptions.c ****                 }
 446:..\src/interruptions.c ****                 // Disable slave or motors
 447:..\src/interruptions.c ****                 deactivate_slaves();
 997              		.loc 1 447 0
 998 045e FFF7FEFF 		bl	deactivate_slaves
 448:..\src/interruptions.c ****                         
 449:..\src/interruptions.c ****                 // Check Interrupt 
 450:..\src/interruptions.c ****                 if (interrupt_flag){
 999              		.loc 1 450 0
 1000 0462 1B4B     		ldr	r3, .L86+4
 1001 0464 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1002 0466 002B     		cmp	r3, #0
 1003 0468 04D0     		beq	.L57
 451:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1004              		.loc 1 451 0
 1005 046a 194B     		ldr	r3, .L86+4
 1006 046c 0022     		movs	r2, #0
 1007 046e 1A70     		strb	r2, [r3]
 452:..\src/interruptions.c ****                     interrupt_manager();
 1008              		.loc 1 452 0
 1009 0470 FFF7FEFF 		bl	interrupt_manager
 1010              	.L57:
 453:..\src/interruptions.c ****                 } 
 454:..\src/interruptions.c ****             }
 455:..\src/interruptions.c ****     
 456:..\src/interruptions.c ****             // Control Master device main motor 
 457:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 458:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 1011              		.loc 1 458 0
 1012 0474 07F58843 		add	r3, r7, #17408
 1013 0478 03F15E03 		add	r3, r3, #94
 1014 047c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1015 047e 1846     		mov	r0, r3
 1016 0480 FFF7FEFF 		bl	motor_control_generic
 459:..\src/interruptions.c ****                         
 460:..\src/interruptions.c ****             // Always limit output voltage on the wrist
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 27


 461:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 1017              		.loc 1 461 0
 1018 0484 134B     		ldr	r3, .L86+8
 1019 0486 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1020 048a 032B     		cmp	r3, #3
 1021 048c 0FD1     		bne	.L59
 462:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 1022              		.loc 1 462 0
 1023 048e 154B     		ldr	r3, .L86+24
 1024 0490 9B68     		ldr	r3, [r3, #8]
 1025 0492 432B     		cmp	r3, #67
 1026 0494 02DD     		ble	.L60
 463:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 1027              		.loc 1 463 0
 1028 0496 134B     		ldr	r3, .L86+24
 1029 0498 4322     		movs	r2, #67
 1030 049a 9A60     		str	r2, [r3, #8]
 1031              	.L60:
 464:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 1032              		.loc 1 464 0
 1033 049c 114B     		ldr	r3, .L86+24
 1034 049e 9B68     		ldr	r3, [r3, #8]
 1035 04a0 13F1430F 		cmn	r3, #67
 1036 04a4 03DA     		bge	.L59
 465:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 1037              		.loc 1 465 0
 1038 04a6 0F4B     		ldr	r3, .L86+24
 1039 04a8 6FF04202 		mvn	r2, #66
 1040 04ac 9A60     		str	r2, [r3, #8]
 1041              	.L59:
 466:..\src/interruptions.c ****             }
 467:..\src/interruptions.c ****             
 468:..\src/interruptions.c ****             // Check Interrupt 
 469:..\src/interruptions.c **** 
 470:..\src/interruptions.c ****             if (interrupt_flag){
 1042              		.loc 1 470 0
 1043 04ae 084B     		ldr	r3, .L86+4
 1044 04b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1045 04b2 002B     		cmp	r3, #0
 1046 04b4 18D0     		beq	.L83
 471:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1047              		.loc 1 471 0
 1048 04b6 064B     		ldr	r3, .L86+4
 1049 04b8 0022     		movs	r2, #0
 1050 04ba 1A70     		strb	r2, [r3]
 472:..\src/interruptions.c ****                 interrupt_manager();
 1051              		.loc 1 472 0
 1052 04bc FFF7FEFF 		bl	interrupt_manager
 473:..\src/interruptions.c ****             }
 474:..\src/interruptions.c ****             
 475:..\src/interruptions.c ****             break;
 1053              		.loc 1 475 0
 1054 04c0 12E0     		b	.L83
 1055              	.L81:
 328:..\src/interruptions.c ****             
 1056              		.loc 1 328 0
 1057 04c2 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 28


 1058 04c4 11E0     		b	.L35
 1059              	.L82:
 410:..\src/interruptions.c ****             
 1060              		.loc 1 410 0
 1061 04c6 00BF     		nop
 1062 04c8 0FE0     		b	.L35
 1063              	.L87:
 1064 04ca 00BF     		.align	2
 1065              	.L86:
 1066 04cc 00000000 		.word	N_Encoder_Line_Connected
 1067 04d0 00000000 		.word	interrupt_flag
 1068 04d4 00000000 		.word	c_mem
 1069 04d8 00000000 		.word	change_ext_ref_flag
 1070 04dc 00000000 		.word	pos_reconstruct
 1071 04e0 00000000 		.word	master_mode
 1072 04e4 00000000 		.word	g_refNew
 1073              	.L83:
 1074              		.loc 1 475 0
 1075 04e8 00BF     		nop
 1076              	.L35:
 476:..\src/interruptions.c ****     }
 477:..\src/interruptions.c **** 
 478:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 479:..\src/interruptions.c **** 
 480:..\src/interruptions.c ****     analog_read_end();
 1077              		.loc 1 480 0
 1078 04ea FFF7FEFF 		bl	analog_read_end
 481:..\src/interruptions.c **** 
 482:..\src/interruptions.c ****     if (interrupt_flag){
 1079              		.loc 1 482 0
 1080 04ee 714B     		ldr	r3, .L88
 1081 04f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1082 04f2 002B     		cmp	r3, #0
 1083 04f4 04D0     		beq	.L62
 483:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1084              		.loc 1 483 0
 1085 04f6 6F4B     		ldr	r3, .L88
 1086 04f8 0022     		movs	r2, #0
 1087 04fa 1A70     		strb	r2, [r3]
 484:..\src/interruptions.c ****         interrupt_manager();
 1088              		.loc 1 484 0
 1089 04fc FFF7FEFF 		bl	interrupt_manager
 1090              	.L62:
 485:..\src/interruptions.c ****     }
 486:..\src/interruptions.c **** 
 487:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
 488:..\src/interruptions.c **** 
 489:..\src/interruptions.c ****     overcurrent_control();
 1091              		.loc 1 489 0
 1092 0500 FFF7FEFF 		bl	overcurrent_control
 490:..\src/interruptions.c ****     
 491:..\src/interruptions.c ****     // Check Interrupt 
 492:..\src/interruptions.c ****     
 493:..\src/interruptions.c ****     if (interrupt_flag){
 1093              		.loc 1 493 0
 1094 0504 6B4B     		ldr	r3, .L88
 1095 0506 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 29


 1096 0508 002B     		cmp	r3, #0
 1097 050a 04D0     		beq	.L63
 494:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1098              		.loc 1 494 0
 1099 050c 694B     		ldr	r3, .L88
 1100 050e 0022     		movs	r2, #0
 1101 0510 1A70     		strb	r2, [r3]
 495:..\src/interruptions.c ****         interrupt_manager();
 1102              		.loc 1 495 0
 1103 0512 FFF7FEFF 		bl	interrupt_manager
 1104              	.L63:
 496:..\src/interruptions.c ****     }
 497:..\src/interruptions.c **** 
 498:..\src/interruptions.c ****     //---------------------------------- Calibration 
 499:..\src/interruptions.c **** 
 500:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 501:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1105              		.loc 1 501 0
 1106 0516 684B     		ldr	r3, .L88+4
 1107 0518 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1108 051a 012B     		cmp	r3, #1
 1109 051c 0ED1     		bne	.L64
 502:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1110              		.loc 1 502 0
 1111 051e 674B     		ldr	r3, .L88+8
 1112 0520 1B88     		ldrh	r3, [r3]
 1113 0522 0A2B     		cmp	r3, #10
 1114 0524 04D1     		bne	.L65
 503:..\src/interruptions.c ****             calibration();
 1115              		.loc 1 503 0
 1116 0526 FFF7FEFF 		bl	calibration
 504:..\src/interruptions.c ****             counter_calibration = 0;
 1117              		.loc 1 504 0
 1118 052a 644B     		ldr	r3, .L88+8
 1119 052c 0022     		movs	r2, #0
 1120 052e 1A80     		strh	r2, [r3]	@ movhi
 1121              	.L65:
 505:..\src/interruptions.c ****         }
 506:..\src/interruptions.c ****         counter_calibration++;
 1122              		.loc 1 506 0
 1123 0530 624B     		ldr	r3, .L88+8
 1124 0532 1B88     		ldrh	r3, [r3]
 1125 0534 0133     		adds	r3, r3, #1
 1126 0536 9AB2     		uxth	r2, r3
 1127 0538 604B     		ldr	r3, .L88+8
 1128 053a 1A80     		strh	r2, [r3]	@ movhi
 1129              	.L64:
 507:..\src/interruptions.c ****     }
 508:..\src/interruptions.c **** 
 509:..\src/interruptions.c ****     // Check Interrupt 
 510:..\src/interruptions.c ****     
 511:..\src/interruptions.c ****     if (interrupt_flag){
 1130              		.loc 1 511 0
 1131 053c 5D4B     		ldr	r3, .L88
 1132 053e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1133 0540 002B     		cmp	r3, #0
 1134 0542 04D0     		beq	.L66
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 30


 512:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1135              		.loc 1 512 0
 1136 0544 5B4B     		ldr	r3, .L88
 1137 0546 0022     		movs	r2, #0
 1138 0548 1A70     		strb	r2, [r3]
 513:..\src/interruptions.c ****         interrupt_manager();
 1139              		.loc 1 513 0
 1140 054a FFF7FEFF 		bl	interrupt_manager
 1141              	.L66:
 514:..\src/interruptions.c ****     }
 515:..\src/interruptions.c ****     
 516:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1142              		.loc 1 516 0
 1143 054e 5C4B     		ldr	r3, .L88+12
 1144 0550 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1145 0554 002B     		cmp	r3, #0
 1146 0556 1CD1     		bne	.L67
 517:..\src/interruptions.c ****     
 518:..\src/interruptions.c ****         //---------------------------------- Rest position check
 519:..\src/interruptions.c **** 
 520:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 521:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1147              		.loc 1 521 0
 1148 0558 594B     		ldr	r3, .L88+12
 1149 055a 93F8B432 		ldrb	r3, [r3, #692]	@ zero_extendqisi2
 1150 055e 012B     		cmp	r3, #1
 1151 0560 17D1     		bne	.L67
 522:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1152              		.loc 1 522 0
 1153 0562 564B     		ldr	r3, .L88+8
 1154 0564 1B88     		ldrh	r3, [r3]
 1155 0566 0A2B     		cmp	r3, #10
 1156 0568 04D1     		bne	.L68
 523:..\src/interruptions.c ****                     check_rest_position();
 1157              		.loc 1 523 0
 1158 056a FFF7FEFF 		bl	check_rest_position
 524:..\src/interruptions.c ****                     counter_calibration = 0;
 1159              		.loc 1 524 0
 1160 056e 534B     		ldr	r3, .L88+8
 1161 0570 0022     		movs	r2, #0
 1162 0572 1A80     		strh	r2, [r3]	@ movhi
 1163              	.L68:
 525:..\src/interruptions.c ****             }
 526:..\src/interruptions.c ****             counter_calibration++;
 1164              		.loc 1 526 0
 1165 0574 514B     		ldr	r3, .L88+8
 1166 0576 1B88     		ldrh	r3, [r3]
 1167 0578 0133     		adds	r3, r3, #1
 1168 057a 9AB2     		uxth	r2, r3
 1169 057c 4F4B     		ldr	r3, .L88+8
 1170 057e 1A80     		strh	r2, [r3]	@ movhi
 527:..\src/interruptions.c **** 
 528:..\src/interruptions.c ****             // Check Interrupt     
 529:..\src/interruptions.c ****             if (interrupt_flag){
 1171              		.loc 1 529 0
 1172 0580 4C4B     		ldr	r3, .L88
 1173 0582 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 31


 1174 0584 002B     		cmp	r3, #0
 1175 0586 04D0     		beq	.L67
 530:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1176              		.loc 1 530 0
 1177 0588 4A4B     		ldr	r3, .L88
 1178 058a 0022     		movs	r2, #0
 1179 058c 1A70     		strb	r2, [r3]
 531:..\src/interruptions.c ****                 interrupt_manager();
 1180              		.loc 1 531 0
 1181 058e FFF7FEFF 		bl	interrupt_manager
 1182              	.L67:
 532:..\src/interruptions.c ****             }
 533:..\src/interruptions.c ****         }
 534:..\src/interruptions.c ****         
 535:..\src/interruptions.c ****     }
 536:..\src/interruptions.c ****     
 537:..\src/interruptions.c ****      
 538:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 539:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 1183              		.loc 1 539 0
 1184 0592 4B4B     		ldr	r3, .L88+12
 1185 0594 93F83C32 		ldrb	r3, [r3, #572]	@ zero_extendqisi2
 1186 0598 002B     		cmp	r3, #0
 1187 059a 0AD0     		beq	.L69
 540:..\src/interruptions.c ****         
 541:..\src/interruptions.c ****         update_EMG_history();
 1188              		.loc 1 541 0
 1189 059c FFF7FEFF 		bl	update_EMG_history
 542:..\src/interruptions.c **** 
 543:..\src/interruptions.c ****         // Check Interrupt 
 544:..\src/interruptions.c **** 
 545:..\src/interruptions.c ****         if (interrupt_flag){
 1190              		.loc 1 545 0
 1191 05a0 444B     		ldr	r3, .L88
 1192 05a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1193 05a4 002B     		cmp	r3, #0
 1194 05a6 04D0     		beq	.L69
 546:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1195              		.loc 1 546 0
 1196 05a8 424B     		ldr	r3, .L88
 1197 05aa 0022     		movs	r2, #0
 1198 05ac 1A70     		strb	r2, [r3]
 547:..\src/interruptions.c ****             interrupt_manager();
 1199              		.loc 1 547 0
 1200 05ae FFF7FEFF 		bl	interrupt_manager
 1201              	.L69:
 548:..\src/interruptions.c ****         }
 549:..\src/interruptions.c ****     }
 550:..\src/interruptions.c **** 
 551:..\src/interruptions.c ****     
 552:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 553:..\src/interruptions.c **** 
 554:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 1202              		.loc 1 554 0
 1203 05b2 434B     		ldr	r3, .L88+12
 1204 05b4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 1205 05b8 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 32


 1206 05ba 424B     		ldr	r3, .L88+16
 1207 05bc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1208 05be 002B     		cmp	r3, #0
 1209 05c0 01D0     		beq	.L70
 555:..\src/interruptions.c ****         cycles_counter_update();                            // Need at least one encoder to work
 1210              		.loc 1 555 0
 1211 05c2 FFF7FEFF 		bl	cycles_counter_update
 1212              	.L70:
 556:..\src/interruptions.c ****     }
 557:..\src/interruptions.c **** 
 558:..\src/interruptions.c ****     // Check Cycles Interrupt 
 559:..\src/interruptions.c ****     
 560:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1213              		.loc 1 560 0
 1214 05c6 404B     		ldr	r3, .L88+20
 1215 05c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1216 05ca 002B     		cmp	r3, #0
 1217 05cc 00F09B80 		beq	.L71
 561:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1218              		.loc 1 561 0
 1219 05d0 3D4B     		ldr	r3, .L88+20
 1220 05d2 0022     		movs	r2, #0
 1221 05d4 1A70     		strb	r2, [r3]
 562:..\src/interruptions.c **** 
 563:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 564:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 565:..\src/interruptions.c ****         if(can_write) {
 1222              		.loc 1 565 0
 1223 05d6 3D4B     		ldr	r3, .L88+24
 1224 05d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1225 05da 002B     		cmp	r3, #0
 1226 05dc 54D0     		beq	.L72
 566:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1227              		.loc 1 566 0
 1228 05de 3C4B     		ldr	r3, .L88+28
 1229 05e0 0022     		movs	r2, #0
 1230 05e2 1A70     		strb	r2, [r3]
 567:..\src/interruptions.c ****             
 568:..\src/interruptions.c ****             //Update time variable
 569:..\src/interruptions.c ****             g_mem.cnt.total_runtime = g_mem.cnt.total_runtime + 120;  // Add 120 seconds.
 1231              		.loc 1 569 0
 1232 05e4 3B4B     		ldr	r3, .L88+32
 1233 05e6 9B6D     		ldr	r3, [r3, #88]
 1234 05e8 7833     		adds	r3, r3, #120
 1235 05ea 3A4A     		ldr	r2, .L88+32
 1236 05ec 9365     		str	r3, [r2, #88]
 570:..\src/interruptions.c ****             
 571:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1237              		.loc 1 571 0
 1238 05ee 344B     		ldr	r3, .L88+12
 1239 05f0 93F82E32 		ldrb	r3, [r3, #558]	@ zero_extendqisi2
 1240 05f4 012B     		cmp	r3, #1
 1241 05f6 47D1     		bne	.L72
 572:..\src/interruptions.c ****                 
 573:..\src/interruptions.c ****                 store_RTC_current_time();
 1242              		.loc 1 573 0
 1243 05f8 FFF7FEFF 		bl	store_RTC_current_time
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 33


 574:..\src/interruptions.c ****                 
 575:..\src/interruptions.c ****                 //Write in SD card
 576:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1244              		.loc 1 576 0
 1245 05fc 07F56A53 		add	r3, r7, #14976
 1246 0600 03F11803 		add	r3, r3, #24
 1247 0604 1846     		mov	r0, r3
 1248 0606 FFF7FEFF 		bl	prepare_SD_info
 577:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1249              		.loc 1 577 0
 1250 060a 334B     		ldr	r3, .L88+36
 1251 060c 1C68     		ldr	r4, [r3]
 1252 060e 07F56A53 		add	r3, r7, #14976
 1253 0612 03F11803 		add	r3, r3, #24
 1254 0616 1846     		mov	r0, r3
 1255 0618 FFF7FEFF 		bl	strlen
 1256 061c 0246     		mov	r2, r0
 1257 061e 07F56A53 		add	r3, r7, #14976
 1258 0622 03F11803 		add	r3, r3, #24
 1259 0626 1946     		mov	r1, r3
 1260 0628 2046     		mov	r0, r4
 1261 062a FFF7FEFF 		bl	FS_Write
 578:..\src/interruptions.c ****                 
 579:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 1262              		.loc 1 579 0
 1263 062e 244B     		ldr	r3, .L88+12
 1264 0630 93F83C32 		ldrb	r3, [r3, #572]	@ zero_extendqisi2
 1265 0634 002B     		cmp	r3, #0
 1266 0636 27D0     		beq	.L72
 1267              	.LBB3:
 580:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 1268              		.loc 1 580 0
 1269 0638 07F16003 		add	r3, r7, #96
 1270 063c 603B     		subs	r3, r3, #96
 1271 063e 0022     		movs	r2, #0
 1272 0640 1A60     		str	r2, [r3]
 1273 0642 0433     		adds	r3, r3, #4
 1274 0644 43F69422 		movw	r2, #14996
 1275 0648 0021     		movs	r1, #0
 1276 064a 1846     		mov	r0, r3
 1277 064c FFF7FEFF 		bl	memset
 581:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 1278              		.loc 1 581 0
 1279 0650 224B     		ldr	r3, .L88+40
 1280 0652 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1281 0654 07F16003 		add	r3, r7, #96
 1282 0658 603B     		subs	r3, r3, #96
 1283 065a 1A70     		strb	r2, [r3]
 582:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 1284              		.loc 1 582 0
 1285 065c 07F16003 		add	r3, r7, #96
 1286 0660 603B     		subs	r3, r3, #96
 1287 0662 1846     		mov	r0, r3
 1288 0664 FFF7FEFF 		bl	prepare_SD_EMG_history
 583:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 1289              		.loc 1 583 0
 1290 0668 1D4B     		ldr	r3, .L88+44
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 34


 1291 066a 1C68     		ldr	r4, [r3]
 1292 066c 07F16003 		add	r3, r7, #96
 1293 0670 603B     		subs	r3, r3, #96
 1294 0672 1846     		mov	r0, r3
 1295 0674 FFF7FEFF 		bl	strlen
 1296 0678 0246     		mov	r2, r0
 1297 067a 07F16003 		add	r3, r7, #96
 1298 067e 603B     		subs	r3, r3, #96
 1299 0680 1946     		mov	r1, r3
 1300 0682 2046     		mov	r0, r4
 1301 0684 FFF7FEFF 		bl	FS_Write
 1302              	.L72:
 1303              	.LBE3:
 584:..\src/interruptions.c ****                 }
 585:..\src/interruptions.c ****             }
 586:..\src/interruptions.c ****         }
 587:..\src/interruptions.c ****         
 588:..\src/interruptions.c ****         // Deactivate the motor just for the time data are written in the EEPROM
 589:..\src/interruptions.c ****         if (cycles_status == WRITE_CYCLES || cycles_status == WAIT_QUERY){
 1304              		.loc 1 589 0
 1305 0688 114B     		ldr	r3, .L88+28
 1306 068a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1307 068c 012B     		cmp	r3, #1
 1308 068e 03D0     		beq	.L73
 1309              		.loc 1 589 0 is_stmt 0 discriminator 1
 1310 0690 0F4B     		ldr	r3, .L88+28
 1311 0692 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1312 0694 022B     		cmp	r3, #2
 1313 0696 25D1     		bne	.L74
 1314              	.L73:
 590:..\src/interruptions.c ****             // Deactivate motors
 591:..\src/interruptions.c ****             enable_motor(0, 0x00); 
 1315              		.loc 1 591 0 is_stmt 1
 1316 0698 0021     		movs	r1, #0
 1317 069a 0020     		movs	r0, #0
 1318 069c FFF7FEFF 		bl	enable_motor
 592:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1319              		.loc 1 592 0
 1320 06a0 0C4B     		ldr	r3, .L88+32
 1321 06a2 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1322 06a6 012B     		cmp	r3, #1
 1323 06a8 2DD1     		bne	.L71
 593:..\src/interruptions.c ****                 enable_motor(1, 0x00); 
 1324              		.loc 1 593 0
 1325 06aa 0021     		movs	r1, #0
 1326 06ac 0120     		movs	r0, #1
 1327 06ae FFF7FEFF 		bl	enable_motor
 592:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1328              		.loc 1 592 0
 1329 06b2 28E0     		b	.L71
 1330              	.L89:
 1331              		.align	2
 1332              	.L88:
 1333 06b4 00000000 		.word	interrupt_flag
 1334 06b8 00000000 		.word	calib
 1335 06bc 00000000 		.word	counter_calibration.10484
 1336 06c0 00000000 		.word	c_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 35


 1337 06c4 00000000 		.word	pos_reconstruct
 1338 06c8 00000000 		.word	cycles_interrupt_flag
 1339 06cc 00000000 		.word	can_write
 1340 06d0 00000000 		.word	cycles_status
 1341 06d4 00000000 		.word	g_mem
 1342 06d8 00000000 		.word	pFile
 1343 06dc 20000000 		.word	.LC0
 1344 06e0 00000000 		.word	pEMGHFile
 1345              	.L74:
 594:..\src/interruptions.c ****             }
 595:..\src/interruptions.c ****         }
 596:..\src/interruptions.c ****         else {
 597:..\src/interruptions.c ****             // Activate/Deactivate motors
 598:..\src/interruptions.c ****             enable_motor(0, g_ref[0].onoff); 
 1346              		.loc 1 598 0
 1347 06e4 4D4B     		ldr	r3, .L90
 1348 06e6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1349 06e8 1946     		mov	r1, r3
 1350 06ea 0020     		movs	r0, #0
 1351 06ec FFF7FEFF 		bl	enable_motor
 599:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1352              		.loc 1 599 0
 1353 06f0 4B4B     		ldr	r3, .L90+4
 1354 06f2 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1355 06f6 012B     		cmp	r3, #1
 1356 06f8 05D1     		bne	.L71
 600:..\src/interruptions.c ****                 enable_motor(1, g_ref[1].onoff); 
 1357              		.loc 1 600 0
 1358 06fa 484B     		ldr	r3, .L90
 1359 06fc 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1360 06fe 1946     		mov	r1, r3
 1361 0700 0120     		movs	r0, #1
 1362 0702 FFF7FEFF 		bl	enable_motor
 1363              	.L71:
 601:..\src/interruptions.c ****             }
 602:..\src/interruptions.c ****         }
 603:..\src/interruptions.c ****     }
 604:..\src/interruptions.c ****     
 605:..\src/interruptions.c ****     // Check Interrupt 
 606:..\src/interruptions.c ****     
 607:..\src/interruptions.c ****     if (interrupt_flag){
 1364              		.loc 1 607 0
 1365 0706 474B     		ldr	r3, .L90+8
 1366 0708 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1367 070a 002B     		cmp	r3, #0
 1368 070c 04D0     		beq	.L76
 608:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1369              		.loc 1 608 0
 1370 070e 454B     		ldr	r3, .L90+8
 1371 0710 0022     		movs	r2, #0
 1372 0712 1A70     		strb	r2, [r3]
 609:..\src/interruptions.c ****         interrupt_manager();
 1373              		.loc 1 609 0
 1374 0714 FFF7FEFF 		bl	interrupt_manager
 1375              	.L76:
 610:..\src/interruptions.c ****     }
 611:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 36


 612:..\src/interruptions.c ****     
 613:..\src/interruptions.c ****     //---------------------------------- Check battery
 614:..\src/interruptions.c **** 
 615:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 616:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1376              		.loc 1 616 0
 1377 0718 434B     		ldr	r3, .L90+12
 1378 071a 1B88     		ldrh	r3, [r3]
 1379 071c 0A2B     		cmp	r3, #10
 1380 071e 04D1     		bne	.L77
 617:..\src/interruptions.c ****         battery_management();   
 1381              		.loc 1 617 0
 1382 0720 FFF7FEFF 		bl	battery_management
 618:..\src/interruptions.c ****         counter_tension_func = 0;
 1383              		.loc 1 618 0
 1384 0724 404B     		ldr	r3, .L90+12
 1385 0726 0022     		movs	r2, #0
 1386 0728 1A80     		strh	r2, [r3]	@ movhi
 1387              	.L77:
 619:..\src/interruptions.c ****     }
 620:..\src/interruptions.c ****     counter_tension_func++;
 1388              		.loc 1 620 0
 1389 072a 3F4B     		ldr	r3, .L90+12
 1390 072c 1B88     		ldrh	r3, [r3]
 1391 072e 0133     		adds	r3, r3, #1
 1392 0730 9AB2     		uxth	r2, r3
 1393 0732 3D4B     		ldr	r3, .L90+12
 1394 0734 1A80     		strh	r2, [r3]	@ movhi
 621:..\src/interruptions.c **** 
 622:..\src/interruptions.c ****     // Check Interrupt 
 623:..\src/interruptions.c ****     
 624:..\src/interruptions.c ****     if (interrupt_flag){
 1395              		.loc 1 624 0
 1396 0736 3B4B     		ldr	r3, .L90+8
 1397 0738 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1398 073a 002B     		cmp	r3, #0
 1399 073c 04D0     		beq	.L78
 625:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1400              		.loc 1 625 0
 1401 073e 394B     		ldr	r3, .L90+8
 1402 0740 0022     		movs	r2, #0
 1403 0742 1A70     		strb	r2, [r3]
 626:..\src/interruptions.c ****         interrupt_manager();
 1404              		.loc 1 626 0
 1405 0744 FFF7FEFF 		bl	interrupt_manager
 1406              	.L78:
 627:..\src/interruptions.c ****     }
 628:..\src/interruptions.c ****    
 629:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 630:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1407              		.loc 1 630 0
 1408 0748 384B     		ldr	r3, .L90+16
 1409 074a 93F80832 		ldrb	r3, [r3, #520]	@ zero_extendqisi2
 1410 074e 002B     		cmp	r3, #0
 1411 0750 0AD0     		beq	.L79
 631:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1412              		.loc 1 631 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 37


 1413 0752 FFF7FEFF 		bl	ReadAllIMUs
 632:..\src/interruptions.c ****         
 633:..\src/interruptions.c ****         if (interrupt_flag){
 1414              		.loc 1 633 0
 1415 0756 334B     		ldr	r3, .L90+8
 1416 0758 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1417 075a 002B     		cmp	r3, #0
 1418 075c 04D0     		beq	.L79
 634:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1419              		.loc 1 634 0
 1420 075e 314B     		ldr	r3, .L90+8
 1421 0760 0022     		movs	r2, #0
 1422 0762 1A70     		strb	r2, [r3]
 635:..\src/interruptions.c ****             interrupt_manager();
 1423              		.loc 1 635 0
 1424 0764 FFF7FEFF 		bl	interrupt_manager
 1425              	.L79:
 636:..\src/interruptions.c ****         }
 637:..\src/interruptions.c ****     }
 638:..\src/interruptions.c ****    
 639:..\src/interruptions.c ****     //---------------------------------- Update States
 640:..\src/interruptions.c ****     
 641:..\src/interruptions.c ****     // Load k-1 state
 642:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1426              		.loc 1 642 0
 1427 0768 314A     		ldr	r2, .L90+20
 1428 076a 324B     		ldr	r3, .L90+24
 1429 076c 1446     		mov	r4, r2
 1430 076e 1D46     		mov	r5, r3
 1431 0770 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1432 0772 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1433 0774 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1434 0776 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1435 0778 95E80300 		ldmia	r5, {r0, r1}
 1436 077c 84E80300 		stmia	r4, {r0, r1}
 643:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1437              		.loc 1 643 0
 1438 0780 2D4A     		ldr	r2, .L90+28
 1439 0782 2E4B     		ldr	r3, .L90+32
 1440 0784 1046     		mov	r0, r2
 1441 0786 1946     		mov	r1, r3
 1442 0788 6823     		movs	r3, #104
 1443 078a 1A46     		mov	r2, r3
 1444 078c FFF7FEFF 		bl	memcpy
 644:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1445              		.loc 1 644 0
 1446 0790 2B4A     		ldr	r2, .L90+36
 1447 0792 224B     		ldr	r3, .L90
 1448 0794 1446     		mov	r4, r2
 1449 0796 1D46     		mov	r5, r3
 1450 0798 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1451 079a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1452 079c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1453 07a0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 645:..\src/interruptions.c **** 
 646:..\src/interruptions.c ****     // Load k+1 state        
 647:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 38


 1454              		.loc 1 647 0
 1455 07a4 1D4A     		ldr	r2, .L90
 1456 07a6 274B     		ldr	r3, .L90+40
 1457 07a8 1446     		mov	r4, r2
 1458 07aa 1D46     		mov	r5, r3
 1459 07ac 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1460 07ae 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1461 07b0 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1462 07b4 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 648:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1463              		.loc 1 648 0
 1464 07b8 234A     		ldr	r2, .L90+44
 1465 07ba 244B     		ldr	r3, .L90+48
 1466 07bc 1046     		mov	r0, r2
 1467 07be 1946     		mov	r1, r3
 1468 07c0 C823     		movs	r3, #200
 1469 07c2 1A46     		mov	r2, r3
 1470 07c4 FFF7FEFF 		bl	memcpy
 649:..\src/interruptions.c ****                 
 650:..\src/interruptions.c ****     if (interrupt_flag){
 1471              		.loc 1 650 0
 1472 07c8 164B     		ldr	r3, .L90+8
 1473 07ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1474 07cc 002B     		cmp	r3, #0
 1475 07ce 04D0     		beq	.L80
 651:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1476              		.loc 1 651 0
 1477 07d0 144B     		ldr	r3, .L90+8
 1478 07d2 0022     		movs	r2, #0
 1479 07d4 1A70     		strb	r2, [r3]
 652:..\src/interruptions.c ****         interrupt_manager();
 1480              		.loc 1 652 0
 1481 07d6 FFF7FEFF 		bl	interrupt_manager
 1482              	.L80:
 653:..\src/interruptions.c ****     }
 654:..\src/interruptions.c **** 
 655:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1483              		.loc 1 655 0
 1484 07da FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1485 07de 0346     		mov	r3, r0
 1486 07e0 1A46     		mov	r2, r3
 1487 07e2 1B4B     		ldr	r3, .L90+52
 1488 07e4 1A80     		strh	r2, [r3]	@ movhi
 656:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1489              		.loc 1 656 0
 1490 07e6 1B4B     		ldr	r3, .L90+56
 1491 07e8 1B88     		ldrh	r3, [r3]
 1492 07ea 1A46     		mov	r2, r3
 1493 07ec 184B     		ldr	r3, .L90+52
 1494 07ee 1B88     		ldrh	r3, [r3]
 1495 07f0 D31A     		subs	r3, r2, r3
 1496 07f2 1846     		mov	r0, r3
 1497 07f4 FFF7FEFF 		bl	__aeabi_i2f
 1498 07f8 0346     		mov	r3, r0
 1499 07fa 1749     		ldr	r1, .L90+60
 1500 07fc 1846     		mov	r0, r3
 1501 07fe FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 39


 1502 0802 0346     		mov	r3, r0
 1503 0804 1A46     		mov	r2, r3
 1504 0806 154B     		ldr	r3, .L90+64
 1505 0808 1A60     		str	r2, [r3]	@ float
 657:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1506              		.loc 1 657 0
 1507 080a 0120     		movs	r0, #1
 1508 080c FFF7FEFF 		bl	MY_TIMER_REG_Write
 658:..\src/interruptions.c **** 
 659:..\src/interruptions.c **** }
 1509              		.loc 1 659 0
 1510 0810 00BF     		nop
 1511 0812 07F58847 		add	r7, r7, #17408
 1512 0816 6037     		adds	r7, r7, #96
 1513              		.cfi_def_cfa_offset 16
 1514 0818 BD46     		mov	sp, r7
 1515              		.cfi_def_cfa_register 13
 1516              		@ sp needed
 1517 081a B0BD     		pop	{r4, r5, r7, pc}
 1518              	.L91:
 1519              		.align	2
 1520              	.L90:
 1521 081c 00000000 		.word	g_ref
 1522 0820 00000000 		.word	g_mem
 1523 0824 00000000 		.word	interrupt_flag
 1524 0828 02000000 		.word	counter_tension_func.10485
 1525 082c 00000000 		.word	c_mem
 1526 0830 00000000 		.word	g_adc_measOld
 1527 0834 00000000 		.word	g_adc_meas
 1528 0838 00000000 		.word	g_measOld
 1529 083c 00000000 		.word	g_meas
 1530 0840 00000000 		.word	g_refOld
 1531 0844 00000000 		.word	g_refNew
 1532 0848 00000000 		.word	g_imu
 1533 084c 00000000 		.word	g_imuNew
 1534 0850 00000000 		.word	timer_value
 1535 0854 00000000 		.word	timer_value0
 1536 0858 00247449 		.word	1232348160
 1537 085c 00000000 		.word	cycle_time
 1538              		.cfi_endproc
 1539              	.LFE67:
 1540              		.size	function_scheduler, .-function_scheduler
 1541              		.section	.text.compute_reference,"ax",%progbits
 1542              		.align	2
 1543              		.global	compute_reference
 1544              		.thumb
 1545              		.thumb_func
 1546              		.type	compute_reference, %function
 1547              	compute_reference:
 1548              	.LFB68:
 660:..\src/interruptions.c **** 
 661:..\src/interruptions.c **** //==============================================================================
 662:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 663:..\src/interruptions.c **** //==============================================================================
 664:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1549              		.loc 1 664 0
 1550              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 40


 1551              		@ args = 0, pretend = 0, frame = 40
 1552              		@ frame_needed = 1, uses_anonymous_args = 0
 1553 0000 80B5     		push	{r7, lr}
 1554              		.cfi_def_cfa_offset 8
 1555              		.cfi_offset 7, -8
 1556              		.cfi_offset 14, -4
 1557 0002 8CB0     		sub	sp, sp, #48
 1558              		.cfi_def_cfa_offset 56
 1559 0004 02AF     		add	r7, sp, #8
 1560              		.cfi_def_cfa 7, 48
 1561 0006 0346     		mov	r3, r0
 1562 0008 B960     		str	r1, [r7, #8]
 1563 000a 7A60     		str	r2, [r7, #4]
 1564 000c FB73     		strb	r3, [r7, #15]
 665:..\src/interruptions.c ****     
 666:..\src/interruptions.c ****     int32 CYDATA handle_value;
 667:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 668:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1565              		.loc 1 668 0
 1566 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1567 0010 7422     		movs	r2, #116
 1568 0012 02FB03F3 		mul	r3, r2, r3
 1569 0016 B033     		adds	r3, r3, #176
 1570 0018 A54A     		ldr	r2, .L156
 1571 001a 1344     		add	r3, r3, r2
 1572 001c 3B62     		str	r3, [r7, #32]
 669:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1573              		.loc 1 669 0
 1574 001e 3B6A     		ldr	r3, [r7, #32]
 1575 0020 93F86030 		ldrb	r3, [r3, #96]
 1576 0024 FB77     		strb	r3, [r7, #31]
 670:..\src/interruptions.c ****     
 671:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 672:..\src/interruptions.c ****                                                         // 1 EMG 1
 673:..\src/interruptions.c ****                                                         // 2 EMG 2
 674:..\src/interruptions.c ****                                                         // wait for both to get down
 675:..\src/interruptions.c ****     
 676:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1577              		.loc 1 676 0
 1578 0026 A34B     		ldr	r3, .L156+4
 1579 0028 1B68     		ldr	r3, [r3]
 1580 002a A14A     		ldr	r2, .L156
 1581 002c B2F8F821 		ldrh	r2, [r2, #504]
 1582 0030 9B1A     		subs	r3, r3, r2
 1583 0032 BB61     		str	r3, [r7, #24]
 677:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 1584              		.loc 1 677 0
 1585 0034 9F4B     		ldr	r3, .L156+4
 1586 0036 5B68     		ldr	r3, [r3, #4]
 1587 0038 9D4A     		ldr	r2, .L156
 1588 003a B2F8FA21 		ldrh	r2, [r2, #506]
 1589 003e 9B1A     		subs	r3, r3, r2
 1590 0040 7B61     		str	r3, [r7, #20]
 678:..\src/interruptions.c ****     
 679:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 680:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1591              		.loc 1 680 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 41


 1592 0042 3B6A     		ldr	r3, [r7, #32]
 1593 0044 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1594 0048 013B     		subs	r3, r3, #1
 1595 004a 062B     		cmp	r3, #6
 1596 004c 00F24E82 		bhi	.L148
 1597 0050 01A2     		adr	r2, .L95
 1598 0052 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1599 0056 00BF     		.p2align 2
 1600              	.L95:
 1601 0058 75000000 		.word	.L94+1
 1602 005c 21020000 		.word	.L96+1
 1603 0060 C1020000 		.word	.L97+1
 1604 0064 29030000 		.word	.L98+1
 1605 0068 09040000 		.word	.L99+1
 1606 006c 4D010000 		.word	.L100+1
 1607 0070 59020000 		.word	.L101+1
 1608              		.p2align 1
 1609              	.L94:
 681:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 682:..\src/interruptions.c **** 
 683:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 684:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 685:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1610              		.loc 1 685 0
 1611 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1612 0076 8E49     		ldr	r1, .L156
 1613 0078 1346     		mov	r3, r2
 1614 007a 5B00     		lsls	r3, r3, #1
 1615 007c 1344     		add	r3, r3, r2
 1616 007e 1B01     		lsls	r3, r3, #4
 1617 0080 0B44     		add	r3, r3, r1
 1618 0082 03F5DC73 		add	r3, r3, #440
 1619 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1620 0088 002B     		cmp	r3, #0
 1621 008a 19D0     		beq	.L102
 686:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1622              		.loc 1 686 0
 1623 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1624 008e 8A4A     		ldr	r2, .L156+8
 1625 0090 3421     		movs	r1, #52
 1626 0092 01FB03F3 		mul	r3, r1, r3
 1627 0096 1344     		add	r3, r3, r2
 1628 0098 0833     		adds	r3, r3, #8
 1629 009a 1968     		ldr	r1, [r3]
 1630 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1631 009e 8448     		ldr	r0, .L156
 1632 00a0 1346     		mov	r3, r2
 1633 00a2 5B00     		lsls	r3, r3, #1
 1634 00a4 1344     		add	r3, r3, r2
 1635 00a6 1B01     		lsls	r3, r3, #4
 1636 00a8 0344     		add	r3, r3, r0
 1637 00aa 03F5DE73 		add	r3, r3, #444
 1638 00ae 93F90030 		ldrsb	r3, [r3]
 1639 00b2 03FB01F2 		mul	r2, r3, r1
 1640 00b6 3B6A     		ldr	r3, [r7, #32]
 1641 00b8 5B6B     		ldr	r3, [r3, #52]
 1642 00ba 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 42


 1643 00bc 7B62     		str	r3, [r7, #36]
 1644 00be 18E0     		b	.L103
 1645              	.L102:
 687:..\src/interruptions.c ****             else
 688:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1646              		.loc 1 688 0
 1647 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1648 00c2 7D4A     		ldr	r2, .L156+8
 1649 00c4 3421     		movs	r1, #52
 1650 00c6 01FB03F3 		mul	r3, r1, r3
 1651 00ca 1344     		add	r3, r3, r2
 1652 00cc 0433     		adds	r3, r3, #4
 1653 00ce 1968     		ldr	r1, [r3]
 1654 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1655 00d2 7748     		ldr	r0, .L156
 1656 00d4 1346     		mov	r3, r2
 1657 00d6 5B00     		lsls	r3, r3, #1
 1658 00d8 1344     		add	r3, r3, r2
 1659 00da 1B01     		lsls	r3, r3, #4
 1660 00dc 0344     		add	r3, r3, r0
 1661 00de 03F5DE73 		add	r3, r3, #444
 1662 00e2 93F90030 		ldrsb	r3, [r3]
 1663 00e6 03FB01F2 		mul	r2, r3, r1
 1664 00ea 3B6A     		ldr	r3, [r7, #32]
 1665 00ec 5B6B     		ldr	r3, [r3, #52]
 1666 00ee 1344     		add	r3, r3, r2
 1667 00f0 7B62     		str	r3, [r7, #36]
 1668              	.L103:
 689:..\src/interruptions.c ****             
 690:..\src/interruptions.c **** 
 691:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 692:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1669              		.loc 1 692 0
 1670 00f2 7B68     		ldr	r3, [r7, #4]
 1671 00f4 1B68     		ldr	r3, [r3]
 1672 00f6 7A6A     		ldr	r2, [r7, #36]
 1673 00f8 D21A     		subs	r2, r2, r3
 1674 00fa 3B6A     		ldr	r3, [r7, #32]
 1675 00fc 1B6C     		ldr	r3, [r3, #64]
 1676 00fe 9A42     		cmp	r2, r3
 1677 0100 0BDD     		ble	.L104
 1678              		.loc 1 692 0 is_stmt 0 discriminator 1
 1679 0102 3B6A     		ldr	r3, [r7, #32]
 1680 0104 1B6C     		ldr	r3, [r3, #64]
 1681 0106 002B     		cmp	r3, #0
 1682 0108 07D0     		beq	.L104
 693:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1683              		.loc 1 693 0 is_stmt 1
 1684 010a BB68     		ldr	r3, [r7, #8]
 1685 010c 1A68     		ldr	r2, [r3]
 1686 010e 3B6A     		ldr	r3, [r7, #32]
 1687 0110 1B6C     		ldr	r3, [r3, #64]
 1688 0112 1A44     		add	r2, r2, r3
 1689 0114 BB68     		ldr	r3, [r7, #8]
 1690 0116 1A60     		str	r2, [r3]
 1691 0118 17E0     		b	.L105
 1692              	.L104:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 43


 694:..\src/interruptions.c ****             else {
 695:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1693              		.loc 1 695 0
 1694 011a 7B68     		ldr	r3, [r7, #4]
 1695 011c 1B68     		ldr	r3, [r3]
 1696 011e 7A6A     		ldr	r2, [r7, #36]
 1697 0120 D21A     		subs	r2, r2, r3
 1698 0122 3B6A     		ldr	r3, [r7, #32]
 1699 0124 DB6B     		ldr	r3, [r3, #60]
 1700 0126 9A42     		cmp	r2, r3
 1701 0128 0BDA     		bge	.L106
 1702              		.loc 1 695 0 is_stmt 0 discriminator 1
 1703 012a 3B6A     		ldr	r3, [r7, #32]
 1704 012c DB6B     		ldr	r3, [r3, #60]
 1705 012e 002B     		cmp	r3, #0
 1706 0130 07D0     		beq	.L106
 696:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1707              		.loc 1 696 0 is_stmt 1
 1708 0132 BB68     		ldr	r3, [r7, #8]
 1709 0134 1A68     		ldr	r2, [r3]
 1710 0136 3B6A     		ldr	r3, [r7, #32]
 1711 0138 DB6B     		ldr	r3, [r3, #60]
 1712 013a 1A44     		add	r2, r2, r3
 1713 013c BB68     		ldr	r3, [r7, #8]
 1714 013e 1A60     		str	r2, [r3]
 1715 0140 03E0     		b	.L105
 1716              	.L106:
 697:..\src/interruptions.c ****                 else
 698:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1717              		.loc 1 698 0
 1718 0142 BB68     		ldr	r3, [r7, #8]
 1719 0144 7A6A     		ldr	r2, [r7, #36]
 1720 0146 1A60     		str	r2, [r3]
 699:..\src/interruptions.c ****             }
 700:..\src/interruptions.c ****             break;
 1721              		.loc 1 700 0
 1722 0148 DBE1     		b	.L107
 1723              	.L105:
 1724 014a DAE1     		b	.L107
 1725              	.L100:
 701:..\src/interruptions.c ****         
 702:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 703:..\src/interruptions.c ****             
 704:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1726              		.loc 1 704 0
 1727 014c 584B     		ldr	r3, .L156
 1728 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1729 0152 002B     		cmp	r3, #0
 1730 0154 57D1     		bne	.L108
 705:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 706:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1731              		.loc 1 706 0
 1732 0156 7B68     		ldr	r3, [r7, #4]
 1733 0158 1A68     		ldr	r2, [r3]
 1734 015a BB68     		ldr	r3, [r7, #8]
 1735 015c 1A60     		str	r2, [r3]
 707:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 44


 1736              		.loc 1 707 0
 1737 015e 554B     		ldr	r3, .L156+4
 1738 0160 1B6A     		ldr	r3, [r3, #32]
 1739 0162 B3F52F7F 		cmp	r3, #700
 1740 0166 45DC     		bgt	.L109
 1741              	.LBB4:
 708:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1742              		.loc 1 708 0
 1743 0168 524B     		ldr	r3, .L156+4
 1744 016a 1B6A     		ldr	r3, [r3, #32]
 1745 016c 504A     		ldr	r2, .L156
 1746 016e B2F9BA22 		ldrsh	r2, [r2, #698]
 1747 0172 9B1A     		subs	r3, r3, r2
 1748 0174 3B61     		str	r3, [r7, #16]
 709:..\src/interruptions.c **** 
 710:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1749              		.loc 1 710 0
 1750 0176 4F4B     		ldr	r3, .L156+4
 1751 0178 1B6A     		ldr	r3, [r3, #32]
 1752 017a 4D4A     		ldr	r2, .L156
 1753 017c B2F9BA22 		ldrsh	r2, [r2, #698]
 1754 0180 9342     		cmp	r3, r2
 1755 0182 13DD     		ble	.L110
 711:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1756              		.loc 1 711 0
 1757 0184 BB68     		ldr	r3, [r7, #8]
 1758 0186 1A68     		ldr	r2, [r3]
 1759 0188 494B     		ldr	r3, .L156
 1760 018a B3F8B832 		ldrh	r3, [r3, #696]
 1761 018e 1946     		mov	r1, r3
 1762 0190 3B69     		ldr	r3, [r7, #16]
 1763 0192 03FB01F1 		mul	r1, r3, r1
 1764 0196 464B     		ldr	r3, .L156
 1765 0198 B3F9BA32 		ldrsh	r3, [r3, #698]
 1766 019c C3F58063 		rsb	r3, r3, #1024
 1767 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1768 01a4 1A44     		add	r2, r2, r3
 1769 01a6 BB68     		ldr	r3, [r7, #8]
 1770 01a8 1A60     		str	r2, [r3]
 1771              	.LBE4:
 712:..\src/interruptions.c ****                     }
 713:..\src/interruptions.c ****                     else {
 714:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 715:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 716:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 717:..\src/interruptions.c ****                         }
 718:..\src/interruptions.c ****                     }
 719:..\src/interruptions.c ****                 }
 720:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 721:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 722:..\src/interruptions.c ****                 }
 723:..\src/interruptions.c ****             }
 724:..\src/interruptions.c ****             else {
 725:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 726:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 727:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 728:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 45


 729:..\src/interruptions.c ****             }
 730:..\src/interruptions.c ****             break;
 1772              		.loc 1 730 0
 1773 01aa A1E1     		b	.L149
 1774              	.L110:
 1775              	.LBB5:
 714:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1776              		.loc 1 714 0
 1777 01ac 414B     		ldr	r3, .L156+4
 1778 01ae 1B6A     		ldr	r3, [r3, #32]
 1779 01b0 3F4A     		ldr	r2, .L156
 1780 01b2 B2F9BA22 		ldrsh	r2, [r2, #698]
 1781 01b6 1344     		add	r3, r3, r2
 1782 01b8 3B61     		str	r3, [r7, #16]
 715:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1783              		.loc 1 715 0
 1784 01ba 3E4B     		ldr	r3, .L156+4
 1785 01bc 1A6A     		ldr	r2, [r3, #32]
 1786 01be 3C4B     		ldr	r3, .L156
 1787 01c0 B3F9BA32 		ldrsh	r3, [r3, #698]
 1788 01c4 5B42     		negs	r3, r3
 1789 01c6 9A42     		cmp	r2, r3
 1790 01c8 80F29281 		bge	.L149
 716:..\src/interruptions.c ****                         }
 1791              		.loc 1 716 0
 1792 01cc BB68     		ldr	r3, [r7, #8]
 1793 01ce 1A68     		ldr	r2, [r3]
 1794 01d0 374B     		ldr	r3, .L156
 1795 01d2 B3F8B832 		ldrh	r3, [r3, #696]
 1796 01d6 1946     		mov	r1, r3
 1797 01d8 3B69     		ldr	r3, [r7, #16]
 1798 01da 03FB01F1 		mul	r1, r3, r1
 1799 01de 344B     		ldr	r3, .L156
 1800 01e0 B3F9BA32 		ldrsh	r3, [r3, #698]
 1801 01e4 C3F58063 		rsb	r3, r3, #1024
 1802 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1803 01ec 1A44     		add	r2, r2, r3
 1804 01ee BB68     		ldr	r3, [r7, #8]
 1805 01f0 1A60     		str	r2, [r3]
 1806              	.LBE5:
 1807              		.loc 1 730 0
 1808 01f2 7DE1     		b	.L149
 1809              	.L109:
 721:..\src/interruptions.c ****                 }
 1810              		.loc 1 721 0
 1811 01f4 BB68     		ldr	r3, [r7, #8]
 1812 01f6 1B68     		ldr	r3, [r3]
 1813 01f8 304A     		ldr	r2, .L156+12
 1814 01fa B2F8B822 		ldrh	r2, [r2, #696]
 1815 01fe 9A1A     		subs	r2, r3, r2
 1816 0200 BB68     		ldr	r3, [r7, #8]
 1817 0202 1A60     		str	r2, [r3]
 1818              		.loc 1 730 0
 1819 0204 74E1     		b	.L149
 1820              	.L108:
 726:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1821              		.loc 1 726 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 46


 1822 0206 2A4B     		ldr	r3, .L156
 1823 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1824 020c 042B     		cmp	r3, #4
 1825 020e 40F06F81 		bne	.L149
 727:..\src/interruptions.c ****                 }
 1826              		.loc 1 727 0
 1827 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1828 0214 7A68     		ldr	r2, [r7, #4]
 1829 0216 B968     		ldr	r1, [r7, #8]
 1830 0218 1846     		mov	r0, r3
 1831 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1832              		.loc 1 730 0
 1833 021e 67E1     		b	.L149
 1834              	.L96:
 731:..\src/interruptions.c ****             
 732:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 733:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1835              		.loc 1 733 0
 1836 0220 BB69     		ldr	r3, [r7, #24]
 1837 0222 002B     		cmp	r3, #0
 1838 0224 14DD     		ble	.L114
 734:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1839              		.loc 1 734 0
 1840 0226 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1841 0228 244A     		ldr	r2, .L156+12
 1842 022a 7421     		movs	r1, #116
 1843 022c 01FB03F3 		mul	r3, r1, r3
 1844 0230 1344     		add	r3, r3, r2
 1845 0232 E833     		adds	r3, r3, #232
 1846 0234 1B68     		ldr	r3, [r3]
 1847 0236 BA69     		ldr	r2, [r7, #24]
 1848 0238 02FB03F2 		mul	r2, r2, r3
 1849 023c 1C4B     		ldr	r3, .L156
 1850 023e B3F8F831 		ldrh	r3, [r3, #504]
 1851 0242 C3F58063 		rsb	r3, r3, #1024
 1852 0246 92FBF3F2 		sdiv	r2, r2, r3
 1853 024a BB68     		ldr	r3, [r7, #8]
 1854 024c 1A60     		str	r2, [r3]
 735:..\src/interruptions.c ****             else
 736:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 737:..\src/interruptions.c ****             break;
 1855              		.loc 1 737 0
 1856 024e 58E1     		b	.L107
 1857              	.L114:
 736:..\src/interruptions.c ****             break;
 1858              		.loc 1 736 0
 1859 0250 BB68     		ldr	r3, [r7, #8]
 1860 0252 0022     		movs	r2, #0
 1861 0254 1A60     		str	r2, [r3]
 1862              		.loc 1 737 0
 1863 0256 54E1     		b	.L107
 1864              	.L101:
 738:..\src/interruptions.c ****         
 739:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 740:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1865              		.loc 1 740 0
 1866 0258 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 47


 1867 025a 002B     		cmp	r3, #0
 1868 025c 1DDD     		ble	.L116
 741:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1869              		.loc 1 741 0
 1870 025e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1871 0260 164A     		ldr	r2, .L156+12
 1872 0262 7421     		movs	r1, #116
 1873 0264 01FB03F3 		mul	r3, r1, r3
 1874 0268 1344     		add	r3, r3, r2
 1875 026a E833     		adds	r3, r3, #232
 1876 026c 1A68     		ldr	r2, [r3]
 1877 026e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1878 0270 1249     		ldr	r1, .L156+12
 1879 0272 7420     		movs	r0, #116
 1880 0274 00FB03F3 		mul	r3, r0, r3
 1881 0278 0B44     		add	r3, r3, r1
 1882 027a E833     		adds	r3, r3, #232
 1883 027c 1B68     		ldr	r3, [r3]
 1884 027e B969     		ldr	r1, [r7, #24]
 1885 0280 01FB03F1 		mul	r1, r1, r3
 1886 0284 0A4B     		ldr	r3, .L156
 1887 0286 B3F8F831 		ldrh	r3, [r3, #504]
 1888 028a C3F58063 		rsb	r3, r3, #1024
 1889 028e 91FBF3F3 		sdiv	r3, r1, r3
 1890 0292 D21A     		subs	r2, r2, r3
 1891 0294 BB68     		ldr	r3, [r7, #8]
 1892 0296 1A60     		str	r2, [r3]
 742:..\src/interruptions.c ****             else
 743:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 744:..\src/interruptions.c ****             break;
 1893              		.loc 1 744 0
 1894 0298 33E1     		b	.L107
 1895              	.L116:
 743:..\src/interruptions.c ****             break;
 1896              		.loc 1 743 0
 1897 029a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1898 029c 074A     		ldr	r2, .L156+12
 1899 029e 7421     		movs	r1, #116
 1900 02a0 01FB03F3 		mul	r3, r1, r3
 1901 02a4 1344     		add	r3, r3, r2
 1902 02a6 E833     		adds	r3, r3, #232
 1903 02a8 1A68     		ldr	r2, [r3]
 1904 02aa BB68     		ldr	r3, [r7, #8]
 1905 02ac 1A60     		str	r2, [r3]
 1906              		.loc 1 744 0
 1907 02ae 28E1     		b	.L107
 1908              	.L157:
 1909              		.align	2
 1910              	.L156:
 1911 02b0 00000000 		.word	c_mem
 1912 02b4 00000000 		.word	g_adc_meas
 1913 02b8 00000000 		.word	g_meas
 1914 02bc 00000000 		.word	g_mem
 1915              	.L97:
 745:..\src/interruptions.c **** 
 746:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 747:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 48


 1916              		.loc 1 747 0
 1917 02c0 7B68     		ldr	r3, [r7, #4]
 1918 02c2 1A68     		ldr	r2, [r3]
 1919 02c4 BB68     		ldr	r3, [r7, #8]
 1920 02c6 1A60     		str	r2, [r3]
 748:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1921              		.loc 1 748 0
 1922 02c8 BB69     		ldr	r3, [r7, #24]
 1923 02ca 002B     		cmp	r3, #0
 1924 02cc 13DD     		ble	.L118
 749:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1925              		.loc 1 749 0
 1926 02ce 7B68     		ldr	r3, [r7, #4]
 1927 02d0 1A68     		ldr	r2, [r3]
 1928 02d2 884B     		ldr	r3, .L158
 1929 02d4 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 1930 02d8 1946     		mov	r1, r3
 1931 02da BB69     		ldr	r3, [r7, #24]
 1932 02dc 03FB01F3 		mul	r3, r3, r1
 1933 02e0 5900     		lsls	r1, r3, #1
 1934 02e2 854B     		ldr	r3, .L158+4
 1935 02e4 B3F8F831 		ldrh	r3, [r3, #504]
 1936 02e8 C3F58063 		rsb	r3, r3, #1024
 1937 02ec 91FBF3F3 		sdiv	r3, r1, r3
 1938 02f0 1A44     		add	r2, r2, r3
 1939 02f2 BB68     		ldr	r3, [r7, #8]
 1940 02f4 1A60     		str	r2, [r3]
 1941              	.L118:
 750:..\src/interruptions.c ****             }
 751:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1942              		.loc 1 751 0
 1943 02f6 7B69     		ldr	r3, [r7, #20]
 1944 02f8 002B     		cmp	r3, #0
 1945 02fa 40F30181 		ble	.L150
 752:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1946              		.loc 1 752 0
 1947 02fe 7B68     		ldr	r3, [r7, #4]
 1948 0300 1A68     		ldr	r2, [r3]
 1949 0302 7C4B     		ldr	r3, .L158
 1950 0304 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 1951 0308 1946     		mov	r1, r3
 1952 030a 7B69     		ldr	r3, [r7, #20]
 1953 030c 03FB01F3 		mul	r3, r3, r1
 1954 0310 5900     		lsls	r1, r3, #1
 1955 0312 794B     		ldr	r3, .L158+4
 1956 0314 B3F8FA31 		ldrh	r3, [r3, #506]
 1957 0318 C3F58063 		rsb	r3, r3, #1024
 1958 031c 91FBF3F3 		sdiv	r3, r1, r3
 1959 0320 D21A     		subs	r2, r2, r3
 1960 0322 BB68     		ldr	r3, [r7, #8]
 1961 0324 1A60     		str	r2, [r3]
 753:..\src/interruptions.c ****             }
 754:..\src/interruptions.c ****             break;
 1962              		.loc 1 754 0
 1963 0326 EBE0     		b	.L150
 1964              	.L98:
 755:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 49


 756:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 757:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1965              		.loc 1 757 0
 1966 0328 7B68     		ldr	r3, [r7, #4]
 1967 032a 1A68     		ldr	r2, [r3]
 1968 032c BB68     		ldr	r3, [r7, #8]
 1969 032e 1A60     		str	r2, [r3]
 758:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1970              		.loc 1 758 0
 1971 0330 714B     		ldr	r3, .L158+4
 1972 0332 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1973 0336 042B     		cmp	r3, #4
 1974 0338 5BD0     		beq	.L120
 759:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1975              		.loc 1 759 0
 1976 033a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1977 033c 6F4A     		ldr	r2, .L158+8
 1978 033e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1979 0340 012B     		cmp	r3, #1
 1980 0342 1CD0     		beq	.L122
 1981 0344 022B     		cmp	r3, #2
 1982 0346 37D0     		beq	.L123
 1983 0348 002B     		cmp	r3, #0
 1984 034a 00D0     		beq	.L124
 760:..\src/interruptions.c ****                     case 0:
 761:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 762:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 763:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 764:..\src/interruptions.c ****                             break;
 765:..\src/interruptions.c ****                         }
 766:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 767:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 768:..\src/interruptions.c ****                             break;
 769:..\src/interruptions.c ****                         }
 770:..\src/interruptions.c ****                         break;
 771:..\src/interruptions.c **** 
 772:..\src/interruptions.c ****                     case 1:
 773:..\src/interruptions.c ****                         // EMG 1 is first
 774:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 775:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 776:..\src/interruptions.c ****                             break;
 777:..\src/interruptions.c ****                         }
 778:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 779:..\src/interruptions.c ****                         break;
 780:..\src/interruptions.c **** 
 781:..\src/interruptions.c ****                     case 2:
 782:..\src/interruptions.c ****                         // EMG 2 is first
 783:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 784:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 785:..\src/interruptions.c ****                             break;
 786:..\src/interruptions.c ****                         }
 787:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 788:..\src/interruptions.c ****                         break;
 789:..\src/interruptions.c **** 
 790:..\src/interruptions.c ****                     default:
 791:..\src/interruptions.c ****                         break;
 1985              		.loc 1 791 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 50


 1986 034c 5BE0     		b	.L130
 1987              	.L124:
 762:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1988              		.loc 1 762 0
 1989 034e BB69     		ldr	r3, [r7, #24]
 1990 0350 002B     		cmp	r3, #0
 1991 0352 08DD     		ble	.L125
 762:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 1992              		.loc 1 762 0 is_stmt 0 discriminator 1
 1993 0354 BA69     		ldr	r2, [r7, #24]
 1994 0356 7B69     		ldr	r3, [r7, #20]
 1995 0358 9A42     		cmp	r2, r3
 1996 035a 04DD     		ble	.L125
 763:..\src/interruptions.c ****                             break;
 1997              		.loc 1 763 0 is_stmt 1
 1998 035c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1999 035e 674A     		ldr	r2, .L158+8
 2000 0360 0121     		movs	r1, #1
 2001 0362 D154     		strb	r1, [r2, r3]
 764:..\src/interruptions.c ****                         }
 2002              		.loc 1 764 0
 2003 0364 4FE0     		b	.L130
 2004              	.L125:
 766:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2005              		.loc 1 766 0
 2006 0366 7B69     		ldr	r3, [r7, #20]
 2007 0368 002B     		cmp	r3, #0
 2008 036a 4BDD     		ble	.L151
 766:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2009              		.loc 1 766 0 is_stmt 0 discriminator 1
 2010 036c 7A69     		ldr	r2, [r7, #20]
 2011 036e BB69     		ldr	r3, [r7, #24]
 2012 0370 9A42     		cmp	r2, r3
 2013 0372 47DD     		ble	.L151
 767:..\src/interruptions.c ****                             break;
 2014              		.loc 1 767 0 is_stmt 1
 2015 0374 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2016 0376 614A     		ldr	r2, .L158+8
 2017 0378 0221     		movs	r1, #2
 2018 037a D154     		strb	r1, [r2, r3]
 768:..\src/interruptions.c ****                         }
 2019              		.loc 1 768 0
 2020 037c 43E0     		b	.L130
 2021              	.L122:
 774:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2022              		.loc 1 774 0
 2023 037e BB69     		ldr	r3, [r7, #24]
 2024 0380 002B     		cmp	r3, #0
 2025 0382 04DA     		bge	.L128
 775:..\src/interruptions.c ****                             break;
 2026              		.loc 1 775 0
 2027 0384 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2028 0386 5D4A     		ldr	r2, .L158+8
 2029 0388 0021     		movs	r1, #0
 2030 038a D154     		strb	r1, [r2, r3]
 776:..\src/interruptions.c ****                         }
 2031              		.loc 1 776 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 51


 2032 038c 3BE0     		b	.L130
 2033              	.L128:
 778:..\src/interruptions.c ****                         break;
 2034              		.loc 1 778 0
 2035 038e 7B68     		ldr	r3, [r7, #4]
 2036 0390 1A68     		ldr	r2, [r3]
 2037 0392 584B     		ldr	r3, .L158
 2038 0394 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2039 0398 1946     		mov	r1, r3
 2040 039a BB69     		ldr	r3, [r7, #24]
 2041 039c 03FB01F3 		mul	r3, r3, r1
 2042 03a0 9900     		lsls	r1, r3, #2
 2043 03a2 554B     		ldr	r3, .L158+4
 2044 03a4 B3F8F831 		ldrh	r3, [r3, #504]
 2045 03a8 C3F58063 		rsb	r3, r3, #1024
 2046 03ac 91FBF3F3 		sdiv	r3, r1, r3
 2047 03b0 1A44     		add	r2, r2, r3
 2048 03b2 BB68     		ldr	r3, [r7, #8]
 2049 03b4 1A60     		str	r2, [r3]
 779:..\src/interruptions.c **** 
 2050              		.loc 1 779 0
 2051 03b6 26E0     		b	.L130
 2052              	.L123:
 783:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2053              		.loc 1 783 0
 2054 03b8 7B69     		ldr	r3, [r7, #20]
 2055 03ba 002B     		cmp	r3, #0
 2056 03bc 04DA     		bge	.L129
 784:..\src/interruptions.c ****                             break;
 2057              		.loc 1 784 0
 2058 03be FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2059 03c0 4E4A     		ldr	r2, .L158+8
 2060 03c2 0021     		movs	r1, #0
 2061 03c4 D154     		strb	r1, [r2, r3]
 785:..\src/interruptions.c ****                         }
 2062              		.loc 1 785 0
 2063 03c6 1EE0     		b	.L130
 2064              	.L129:
 787:..\src/interruptions.c ****                         break;
 2065              		.loc 1 787 0
 2066 03c8 7B68     		ldr	r3, [r7, #4]
 2067 03ca 1A68     		ldr	r2, [r3]
 2068 03cc 494B     		ldr	r3, .L158
 2069 03ce 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2070 03d2 1946     		mov	r1, r3
 2071 03d4 7B69     		ldr	r3, [r7, #20]
 2072 03d6 03FB01F3 		mul	r3, r3, r1
 2073 03da 9900     		lsls	r1, r3, #2
 2074 03dc 464B     		ldr	r3, .L158+4
 2075 03de B3F8FA31 		ldrh	r3, [r3, #506]
 2076 03e2 C3F58063 		rsb	r3, r3, #1024
 2077 03e6 91FBF3F3 		sdiv	r3, r1, r3
 2078 03ea D21A     		subs	r2, r2, r3
 2079 03ec BB68     		ldr	r3, [r7, #8]
 2080 03ee 1A60     		str	r2, [r3]
 788:..\src/interruptions.c **** 
 2081              		.loc 1 788 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 52


 2082 03f0 09E0     		b	.L130
 2083              	.L120:
 792:..\src/interruptions.c ****                 }
 793:..\src/interruptions.c ****             }
 794:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 795:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 796:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 2084              		.loc 1 796 0
 2085 03f2 F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 2086 03f4 7B69     		ldr	r3, [r7, #20]
 2087 03f6 0093     		str	r3, [sp]
 2088 03f8 BB69     		ldr	r3, [r7, #24]
 2089 03fa 7A68     		ldr	r2, [r7, #4]
 2090 03fc B968     		ldr	r1, [r7, #8]
 2091 03fe FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 797:..\src/interruptions.c ****             }
 798:..\src/interruptions.c ****             break;
 2092              		.loc 1 798 0
 2093 0402 7EE0     		b	.L107
 2094              	.L151:
 770:..\src/interruptions.c **** 
 2095              		.loc 1 770 0
 2096 0404 00BF     		nop
 2097              	.L130:
 2098              		.loc 1 798 0 discriminator 5
 2099 0406 7CE0     		b	.L107
 2100              	.L99:
 799:..\src/interruptions.c **** 
 800:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 801:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2101              		.loc 1 801 0
 2102 0408 7B68     		ldr	r3, [r7, #4]
 2103 040a 1A68     		ldr	r2, [r3]
 2104 040c BB68     		ldr	r3, [r7, #8]
 2105 040e 1A60     		str	r2, [r3]
 802:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 2106              		.loc 1 802 0
 2107 0410 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2108 0412 3A4A     		ldr	r2, .L158+8
 2109 0414 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2110 0416 012B     		cmp	r3, #1
 2111 0418 1CD0     		beq	.L132
 2112 041a 022B     		cmp	r3, #2
 2113 041c 3DD0     		beq	.L133
 2114 041e 002B     		cmp	r3, #0
 2115 0420 00D0     		beq	.L134
 803:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 804:..\src/interruptions.c ****                 case 0:
 805:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 806:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 807:..\src/interruptions.c ****                         break;
 808:..\src/interruptions.c ****                     }
 809:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 810:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 811:..\src/interruptions.c ****                         break;
 812:..\src/interruptions.c ****                     }
 813:..\src/interruptions.c ****                     break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 53


 814:..\src/interruptions.c **** 
 815:..\src/interruptions.c ****                 // EMG 1 is first
 816:..\src/interruptions.c ****                 case 1:
 817:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 818:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 819:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 820:..\src/interruptions.c ****                         break;
 821:..\src/interruptions.c ****                     }
 822:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 823:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 824:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 825:..\src/interruptions.c ****                     
 826:..\src/interruptions.c ****                     break;
 827:..\src/interruptions.c **** 
 828:..\src/interruptions.c ****                 // EMG 2 is first
 829:..\src/interruptions.c ****                 case 2:
 830:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 831:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 832:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 833:..\src/interruptions.c ****                         break;
 834:..\src/interruptions.c ****                     }
 835:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 836:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 837:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 838:..\src/interruptions.c ****                     }
 839:..\src/interruptions.c ****                     break;
 840:..\src/interruptions.c **** 
 841:..\src/interruptions.c ****                 default:
 842:..\src/interruptions.c ****                     break;
 2116              		.loc 1 842 0
 2117 0422 62E0     		b	.L136
 2118              	.L134:
 805:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2119              		.loc 1 805 0
 2120 0424 BB69     		ldr	r3, [r7, #24]
 2121 0426 002B     		cmp	r3, #0
 2122 0428 08DD     		ble	.L135
 805:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2123              		.loc 1 805 0 is_stmt 0 discriminator 1
 2124 042a BA69     		ldr	r2, [r7, #24]
 2125 042c 7B69     		ldr	r3, [r7, #20]
 2126 042e 9A42     		cmp	r2, r3
 2127 0430 04DD     		ble	.L135
 806:..\src/interruptions.c ****                         break;
 2128              		.loc 1 806 0 is_stmt 1
 2129 0432 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2130 0434 314A     		ldr	r2, .L158+8
 2131 0436 0121     		movs	r1, #1
 2132 0438 D154     		strb	r1, [r2, r3]
 807:..\src/interruptions.c ****                     }
 2133              		.loc 1 807 0
 2134 043a 56E0     		b	.L136
 2135              	.L135:
 809:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2136              		.loc 1 809 0
 2137 043c 7B69     		ldr	r3, [r7, #20]
 2138 043e 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 54


 2139 0440 4EDD     		ble	.L152
 809:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2140              		.loc 1 809 0 is_stmt 0 discriminator 1
 2141 0442 7A69     		ldr	r2, [r7, #20]
 2142 0444 BB69     		ldr	r3, [r7, #24]
 2143 0446 9A42     		cmp	r2, r3
 2144 0448 4ADD     		ble	.L152
 810:..\src/interruptions.c ****                         break;
 2145              		.loc 1 810 0 is_stmt 1
 2146 044a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2147 044c 2B4A     		ldr	r2, .L158+8
 2148 044e 0221     		movs	r1, #2
 2149 0450 D154     		strb	r1, [r2, r3]
 811:..\src/interruptions.c ****                     }
 2150              		.loc 1 811 0
 2151 0452 4AE0     		b	.L136
 2152              	.L132:
 818:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2153              		.loc 1 818 0
 2154 0454 BB69     		ldr	r3, [r7, #24]
 2155 0456 002B     		cmp	r3, #0
 2156 0458 07DA     		bge	.L138
 818:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2157              		.loc 1 818 0 is_stmt 0 discriminator 1
 2158 045a 7B69     		ldr	r3, [r7, #20]
 2159 045c 002B     		cmp	r3, #0
 2160 045e 04DA     		bge	.L138
 819:..\src/interruptions.c ****                         break;
 2161              		.loc 1 819 0 is_stmt 1
 2162 0460 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2163 0462 264A     		ldr	r2, .L158+8
 2164 0464 0021     		movs	r1, #0
 2165 0466 D154     		strb	r1, [r2, r3]
 820:..\src/interruptions.c ****                     }
 2166              		.loc 1 820 0
 2167 0468 3FE0     		b	.L136
 2168              	.L138:
 823:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 2169              		.loc 1 823 0
 2170 046a BB69     		ldr	r3, [r7, #24]
 2171 046c 002B     		cmp	r3, #0
 2172 046e 39DD     		ble	.L153
 824:..\src/interruptions.c ****                     
 2173              		.loc 1 824 0
 2174 0470 7B68     		ldr	r3, [r7, #4]
 2175 0472 1A68     		ldr	r2, [r3]
 2176 0474 1F4B     		ldr	r3, .L158
 2177 0476 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2178 047a 1946     		mov	r1, r3
 2179 047c BB69     		ldr	r3, [r7, #24]
 2180 047e 03FB01F3 		mul	r3, r3, r1
 2181 0482 9900     		lsls	r1, r3, #2
 2182 0484 1C4B     		ldr	r3, .L158+4
 2183 0486 B3F8F831 		ldrh	r3, [r3, #504]
 2184 048a C3F58063 		rsb	r3, r3, #1024
 2185 048e 91FBF3F3 		sdiv	r3, r1, r3
 2186 0492 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 55


 2187 0494 BB68     		ldr	r3, [r7, #8]
 2188 0496 1A60     		str	r2, [r3]
 826:..\src/interruptions.c **** 
 2189              		.loc 1 826 0
 2190 0498 24E0     		b	.L153
 2191              	.L133:
 831:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2192              		.loc 1 831 0
 2193 049a BB69     		ldr	r3, [r7, #24]
 2194 049c 002B     		cmp	r3, #0
 2195 049e 07DA     		bge	.L140
 831:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2196              		.loc 1 831 0 is_stmt 0 discriminator 1
 2197 04a0 7B69     		ldr	r3, [r7, #20]
 2198 04a2 002B     		cmp	r3, #0
 2199 04a4 04DA     		bge	.L140
 832:..\src/interruptions.c ****                         break;
 2200              		.loc 1 832 0 is_stmt 1
 2201 04a6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2202 04a8 144A     		ldr	r2, .L158+8
 2203 04aa 0021     		movs	r1, #0
 2204 04ac D154     		strb	r1, [r2, r3]
 833:..\src/interruptions.c ****                     }
 2205              		.loc 1 833 0
 2206 04ae 1CE0     		b	.L136
 2207              	.L140:
 836:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 2208              		.loc 1 836 0
 2209 04b0 7B69     		ldr	r3, [r7, #20]
 2210 04b2 002B     		cmp	r3, #0
 2211 04b4 18DD     		ble	.L154
 837:..\src/interruptions.c ****                     }
 2212              		.loc 1 837 0
 2213 04b6 7B68     		ldr	r3, [r7, #4]
 2214 04b8 1A68     		ldr	r2, [r3]
 2215 04ba 0F4B     		ldr	r3, .L158+4
 2216 04bc 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2217 04c0 1946     		mov	r1, r3
 2218 04c2 7B69     		ldr	r3, [r7, #20]
 2219 04c4 03FB01F3 		mul	r3, r3, r1
 2220 04c8 9900     		lsls	r1, r3, #2
 2221 04ca 0B4B     		ldr	r3, .L158+4
 2222 04cc B3F8FA31 		ldrh	r3, [r3, #506]
 2223 04d0 C3F58063 		rsb	r3, r3, #1024
 2224 04d4 91FBF3F3 		sdiv	r3, r1, r3
 2225 04d8 D21A     		subs	r2, r2, r3
 2226 04da BB68     		ldr	r3, [r7, #8]
 2227 04dc 1A60     		str	r2, [r3]
 839:..\src/interruptions.c **** 
 2228              		.loc 1 839 0
 2229 04de 03E0     		b	.L154
 2230              	.L152:
 813:..\src/interruptions.c **** 
 2231              		.loc 1 813 0
 2232 04e0 00BF     		nop
 2233 04e2 0EE0     		b	.L107
 2234              	.L153:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 56


 826:..\src/interruptions.c **** 
 2235              		.loc 1 826 0
 2236 04e4 00BF     		nop
 2237 04e6 0CE0     		b	.L107
 2238              	.L154:
 839:..\src/interruptions.c **** 
 2239              		.loc 1 839 0
 2240 04e8 00BF     		nop
 2241              	.L136:
 843:..\src/interruptions.c ****             }
 844:..\src/interruptions.c ****             break;
 2242              		.loc 1 844 0 discriminator 6
 2243 04ea 0AE0     		b	.L107
 2244              	.L148:
 845:..\src/interruptions.c **** 
 846:..\src/interruptions.c ****         default:
 847:..\src/interruptions.c ****             break;
 2245              		.loc 1 847 0
 2246 04ec 00BF     		nop
 2247 04ee 08E0     		b	.L107
 2248              	.L149:
 730:..\src/interruptions.c ****             
 2249              		.loc 1 730 0
 2250 04f0 00BF     		nop
 2251 04f2 06E0     		b	.L107
 2252              	.L159:
 2253              		.align	2
 2254              	.L158:
 2255 04f4 00000000 		.word	g_mem
 2256 04f8 00000000 		.word	c_mem
 2257 04fc 8C000000 		.word	current_emg.10510
 2258              	.L150:
 754:..\src/interruptions.c **** 
 2259              		.loc 1 754 0
 2260 0500 00BF     		nop
 2261              	.L107:
 848:..\src/interruptions.c ****     }
 849:..\src/interruptions.c **** 
 850:..\src/interruptions.c ****     // Position limit saturation
 851:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2262              		.loc 1 851 0
 2263 0502 3B6A     		ldr	r3, [r7, #32]
 2264 0504 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2265 0508 002B     		cmp	r3, #0
 2266 050a 13D0     		beq	.L142
 852:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
 2267              		.loc 1 852 0
 2268 050c BB68     		ldr	r3, [r7, #8]
 2269 050e 1A68     		ldr	r2, [r3]
 2270 0510 3B6A     		ldr	r3, [r7, #32]
 2271 0512 5B6B     		ldr	r3, [r3, #52]
 2272 0514 9A42     		cmp	r2, r3
 2273 0516 03DA     		bge	.L143
 853:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2274              		.loc 1 853 0
 2275 0518 3B6A     		ldr	r3, [r7, #32]
 2276 051a 5A6B     		ldr	r2, [r3, #52]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 57


 2277 051c BB68     		ldr	r3, [r7, #8]
 2278 051e 1A60     		str	r2, [r3]
 2279              	.L143:
 854:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2280              		.loc 1 854 0
 2281 0520 BB68     		ldr	r3, [r7, #8]
 2282 0522 1A68     		ldr	r2, [r3]
 2283 0524 3B6A     		ldr	r3, [r7, #32]
 2284 0526 9B6B     		ldr	r3, [r3, #56]
 2285 0528 9A42     		cmp	r2, r3
 2286 052a 03DD     		ble	.L142
 855:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2287              		.loc 1 855 0
 2288 052c 3B6A     		ldr	r3, [r7, #32]
 2289 052e 9A6B     		ldr	r2, [r3, #56]
 2290 0530 BB68     		ldr	r3, [r7, #8]
 2291 0532 1A60     		str	r2, [r3]
 2292              	.L142:
 856:..\src/interruptions.c ****     }
 857:..\src/interruptions.c ****     
 858:..\src/interruptions.c ****     // SAFETY
 859:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2293              		.loc 1 859 0
 2294 0534 1D4B     		ldr	r3, .L160
 2295 0536 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2296 0538 012B     		cmp	r3, #1
 2297 053a 02D1     		bne	.L144
 860:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 861:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2298              		.loc 1 861 0
 2299 053c BB68     		ldr	r3, [r7, #8]
 2300 053e 0022     		movs	r2, #0
 2301 0540 1A60     		str	r2, [r3]
 2302              	.L144:
 862:..\src/interruptions.c ****     }      
 863:..\src/interruptions.c ****     
 864:..\src/interruptions.c ****        
 865:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2303              		.loc 1 865 0
 2304 0542 1B4B     		ldr	r3, .L160+4
 2305 0544 93F8B432 		ldrb	r3, [r3, #692]	@ zero_extendqisi2
 2306 0548 012B     		cmp	r3, #1
 2307 054a 2AD1     		bne	.L155
 866:..\src/interruptions.c ****         if (rest_enabled == 1){
 2308              		.loc 1 866 0
 2309 054c 194B     		ldr	r3, .L160+8
 2310 054e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2311 0550 012B     		cmp	r3, #1
 2312 0552 03D1     		bne	.L146
 867:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 868:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2313              		.loc 1 868 0
 2314 0554 184B     		ldr	r3, .L160+12
 2315 0556 1A68     		ldr	r2, [r3]
 2316 0558 BB68     		ldr	r3, [r7, #8]
 2317 055a 1A60     		str	r2, [r3]
 2318              	.L146:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 58


 869:..\src/interruptions.c ****         }
 870:..\src/interruptions.c ****         
 871:..\src/interruptions.c ****         if (forced_open == 1) {
 2319              		.loc 1 871 0
 2320 055c 174B     		ldr	r3, .L160+16
 2321 055e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2322 0560 012B     		cmp	r3, #1
 2323 0562 1ED1     		bne	.L155
 872:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 873:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2324              		.loc 1 873 0
 2325 0564 7B69     		ldr	r3, [r7, #20]
 2326 0566 002B     		cmp	r3, #0
 2327 0568 13DD     		ble	.L147
 874:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2328              		.loc 1 874 0
 2329 056a 154B     		ldr	r3, .L160+20
 2330 056c D3F8A822 		ldr	r2, [r3, #680]
 2331 0570 134B     		ldr	r3, .L160+20
 2332 0572 D3F8A832 		ldr	r3, [r3, #680]
 2333 0576 7969     		ldr	r1, [r7, #20]
 2334 0578 01FB03F1 		mul	r1, r1, r3
 2335 057c 0C4B     		ldr	r3, .L160+4
 2336 057e B3F8FA31 		ldrh	r3, [r3, #506]
 2337 0582 C3F58063 		rsb	r3, r3, #1024
 2338 0586 91FBF3F3 		sdiv	r3, r1, r3
 2339 058a D21A     		subs	r2, r2, r3
 2340 058c BB68     		ldr	r3, [r7, #8]
 2341 058e 1A60     		str	r2, [r3]
 875:..\src/interruptions.c ****             else {
 876:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 877:..\src/interruptions.c ****                 forced_open = 0;
 878:..\src/interruptions.c ****             }
 879:..\src/interruptions.c ****         }
 880:..\src/interruptions.c ****     }
 881:..\src/interruptions.c **** }
 2342              		.loc 1 881 0
 2343 0590 07E0     		b	.L155
 2344              	.L147:
 876:..\src/interruptions.c ****                 forced_open = 0;
 2345              		.loc 1 876 0
 2346 0592 0B4B     		ldr	r3, .L160+20
 2347 0594 D3F8A822 		ldr	r2, [r3, #680]
 2348 0598 BB68     		ldr	r3, [r7, #8]
 2349 059a 1A60     		str	r2, [r3]
 877:..\src/interruptions.c ****             }
 2350              		.loc 1 877 0
 2351 059c 074B     		ldr	r3, .L160+16
 2352 059e 0022     		movs	r2, #0
 2353 05a0 1A70     		strb	r2, [r3]
 2354              	.L155:
 2355              		.loc 1 881 0
 2356 05a2 00BF     		nop
 2357 05a4 2837     		adds	r7, r7, #40
 2358              		.cfi_def_cfa_offset 8
 2359 05a6 BD46     		mov	sp, r7
 2360              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 59


 2361              		@ sp needed
 2362 05a8 80BD     		pop	{r7, pc}
 2363              	.L161:
 2364 05aa 00BF     		.align	2
 2365              	.L160:
 2366 05ac 00000000 		.word	battery_low_SoC
 2367 05b0 00000000 		.word	c_mem
 2368 05b4 00000000 		.word	rest_enabled
 2369 05b8 00000000 		.word	rest_pos_curr_ref
 2370 05bc 00000000 		.word	forced_open
 2371 05c0 00000000 		.word	g_mem
 2372              		.cfi_endproc
 2373              	.LFE68:
 2374              		.size	compute_reference, .-compute_reference
 2375              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2376              		.align	2
 2377              		.global	compute_SoftHand_2_motors_joystick_reference
 2378              		.thumb
 2379              		.thumb_func
 2380              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2381              	compute_SoftHand_2_motors_joystick_reference:
 2382              	.LFB69:
 882:..\src/interruptions.c **** 
 883:..\src/interruptions.c **** 
 884:..\src/interruptions.c **** //==============================================================================
 885:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 886:..\src/interruptions.c **** //==============================================================================
 887:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2383              		.loc 1 887 0
 2384              		.cfi_startproc
 2385              		@ args = 0, pretend = 0, frame = 32
 2386              		@ frame_needed = 1, uses_anonymous_args = 0
 2387              		@ link register save eliminated.
 2388 0000 80B4     		push	{r7}
 2389              		.cfi_def_cfa_offset 4
 2390              		.cfi_offset 7, -4
 2391 0002 89B0     		sub	sp, sp, #36
 2392              		.cfi_def_cfa_offset 40
 2393 0004 00AF     		add	r7, sp, #0
 2394              		.cfi_def_cfa_register 7
 2395 0006 0346     		mov	r3, r0
 2396 0008 B960     		str	r1, [r7, #8]
 2397 000a 7A60     		str	r2, [r7, #4]
 2398 000c FB73     		strb	r3, [r7, #15]
 888:..\src/interruptions.c ****     
 889:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
 2399              		.loc 1 889 0
 2400 000e B04B     		ldr	r3, .L183
 2401 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2402 0014 062B     		cmp	r3, #6
 2403 0016 40F08581 		bne	.L181
 2404              		.loc 1 889 0 is_stmt 0 discriminator 1
 2405 001a AD4B     		ldr	r3, .L183
 2406 001c 93F88231 		ldrb	r3, [r3, #386]	@ zero_extendqisi2
 2407 0020 062B     		cmp	r3, #6
 2408 0022 40F07F81 		bne	.L181
 890:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 60


 2409              		.loc 1 890 0 is_stmt 1
 2410 0026 7B68     		ldr	r3, [r7, #4]
 2411 0028 1A68     		ldr	r2, [r3]
 2412 002a BB68     		ldr	r3, [r7, #8]
 2413 002c 1A60     		str	r2, [r3]
 891:..\src/interruptions.c ****     
 892:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2414              		.loc 1 892 0
 2415 002e A94B     		ldr	r3, .L183+4
 2416 0030 1B6A     		ldr	r3, [r3, #32]
 2417 0032 B3F52F7F 		cmp	r3, #700
 2418 0036 00F3C280 		bgt	.L164
 2419              	.LBB6:
 893:..\src/interruptions.c ****              
 894:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2420              		.loc 1 894 0
 2421 003a 0023     		movs	r3, #0
 2422 003c FB61     		str	r3, [r7, #28]
 895:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2423              		.loc 1 895 0
 2424 003e 0023     		movs	r3, #0
 2425 0040 BB61     		str	r3, [r7, #24]
 896:..\src/interruptions.c ****         
 897:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2426              		.loc 1 897 0
 2427 0042 A44B     		ldr	r3, .L183+4
 2428 0044 1B6A     		ldr	r3, [r3, #32]
 2429 0046 A24A     		ldr	r2, .L183
 2430 0048 B2F9BA22 		ldrsh	r2, [r2, #698]
 2431 004c 9342     		cmp	r3, r2
 2432 004e 1ADD     		ble	.L165
 898:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2433              		.loc 1 898 0
 2434 0050 A04B     		ldr	r3, .L183+4
 2435 0052 1B6A     		ldr	r3, [r3, #32]
 2436 0054 9E4A     		ldr	r2, .L183
 2437 0056 B2F9BA22 		ldrsh	r2, [r2, #698]
 2438 005a 9B1A     		subs	r3, r3, r2
 2439 005c FB61     		str	r3, [r7, #28]
 899:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2440              		.loc 1 899 0
 2441 005e BB68     		ldr	r3, [r7, #8]
 2442 0060 1A68     		ldr	r2, [r3]
 2443 0062 9B4B     		ldr	r3, .L183
 2444 0064 B3F8B832 		ldrh	r3, [r3, #696]
 2445 0068 1946     		mov	r1, r3
 2446 006a FB69     		ldr	r3, [r7, #28]
 2447 006c 03FB01F1 		mul	r1, r3, r1
 2448 0070 974B     		ldr	r3, .L183
 2449 0072 B3F9BA32 		ldrsh	r3, [r3, #698]
 2450 0076 C3F58063 		rsb	r3, r3, #1024
 2451 007a 91FBF3F3 		sdiv	r3, r1, r3
 2452 007e 1A44     		add	r2, r2, r3
 2453 0080 BB68     		ldr	r3, [r7, #8]
 2454 0082 1A60     		str	r2, [r3]
 2455 0084 21E0     		b	.L166
 2456              	.L165:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 61


 900:..\src/interruptions.c ****             }
 901:..\src/interruptions.c ****             else {
 902:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2457              		.loc 1 902 0
 2458 0086 934B     		ldr	r3, .L183+4
 2459 0088 1A6A     		ldr	r2, [r3, #32]
 2460 008a 914B     		ldr	r3, .L183
 2461 008c B3F9BA32 		ldrsh	r3, [r3, #698]
 2462 0090 5B42     		negs	r3, r3
 2463 0092 9A42     		cmp	r2, r3
 2464 0094 19DA     		bge	.L166
 903:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2465              		.loc 1 903 0
 2466 0096 8F4B     		ldr	r3, .L183+4
 2467 0098 1B6A     		ldr	r3, [r3, #32]
 2468 009a 8D4A     		ldr	r2, .L183
 2469 009c B2F9BA22 		ldrsh	r2, [r2, #698]
 2470 00a0 1344     		add	r3, r3, r2
 2471 00a2 FB61     		str	r3, [r7, #28]
 904:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2472              		.loc 1 904 0
 2473 00a4 BB68     		ldr	r3, [r7, #8]
 2474 00a6 1A68     		ldr	r2, [r3]
 2475 00a8 894B     		ldr	r3, .L183
 2476 00aa B3F8B832 		ldrh	r3, [r3, #696]
 2477 00ae 1946     		mov	r1, r3
 2478 00b0 FB69     		ldr	r3, [r7, #28]
 2479 00b2 03FB01F1 		mul	r1, r3, r1
 2480 00b6 864B     		ldr	r3, .L183
 2481 00b8 B3F9BA32 		ldrsh	r3, [r3, #698]
 2482 00bc C3F58063 		rsb	r3, r3, #1024
 2483 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2484 00c4 1A44     		add	r2, r2, r3
 2485 00c6 BB68     		ldr	r3, [r7, #8]
 2486 00c8 1A60     		str	r2, [r3]
 2487              	.L166:
 905:..\src/interruptions.c ****                 }
 906:..\src/interruptions.c ****             }
 907:..\src/interruptions.c **** 
 908:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2488              		.loc 1 908 0
 2489 00ca 824B     		ldr	r3, .L183+4
 2490 00cc 5B6A     		ldr	r3, [r3, #36]
 2491 00ce 804A     		ldr	r2, .L183
 2492 00d0 B2F9BA22 		ldrsh	r2, [r2, #698]
 2493 00d4 9342     		cmp	r3, r2
 2494 00d6 34DD     		ble	.L167
 909:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2495              		.loc 1 909 0
 2496 00d8 7E4B     		ldr	r3, .L183+4
 2497 00da 5B6A     		ldr	r3, [r3, #36]
 2498 00dc 7C4A     		ldr	r2, .L183
 2499 00de B2F9BA22 		ldrsh	r2, [r2, #698]
 2500 00e2 9B1A     		subs	r3, r3, r2
 2501 00e4 BB61     		str	r3, [r7, #24]
 910:..\src/interruptions.c ****                 if (motor_idx == 0){
 2502              		.loc 1 910 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 62


 2503 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2504 00e8 002B     		cmp	r3, #0
 2505 00ea 12D1     		bne	.L168
 911:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2506              		.loc 1 911 0
 2507 00ec BB68     		ldr	r3, [r7, #8]
 2508 00ee 1A68     		ldr	r2, [r3]
 2509 00f0 774B     		ldr	r3, .L183
 2510 00f2 B3F8B832 		ldrh	r3, [r3, #696]
 2511 00f6 1946     		mov	r1, r3
 2512 00f8 BB69     		ldr	r3, [r7, #24]
 2513 00fa 03FB01F1 		mul	r1, r3, r1
 2514 00fe 744B     		ldr	r3, .L183
 2515 0100 B3F9BA32 		ldrsh	r3, [r3, #698]
 2516 0104 C3F58063 		rsb	r3, r3, #1024
 2517 0108 91FBF3F3 		sdiv	r3, r1, r3
 2518 010c 1A44     		add	r2, r2, r3
 2519 010e BB68     		ldr	r3, [r7, #8]
 2520 0110 1A60     		str	r2, [r3]
 2521              	.L168:
 912:..\src/interruptions.c ****                 }
 913:..\src/interruptions.c ****                 if (motor_idx == 1){
 2522              		.loc 1 913 0
 2523 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2524 0114 012B     		cmp	r3, #1
 2525 0116 40F00581 		bne	.L181
 914:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2526              		.loc 1 914 0
 2527 011a BB68     		ldr	r3, [r7, #8]
 2528 011c 1A68     		ldr	r2, [r3]
 2529 011e 6C4B     		ldr	r3, .L183
 2530 0120 B3F8B832 		ldrh	r3, [r3, #696]
 2531 0124 1946     		mov	r1, r3
 2532 0126 BB69     		ldr	r3, [r7, #24]
 2533 0128 03FB01F1 		mul	r1, r3, r1
 2534 012c 684B     		ldr	r3, .L183
 2535 012e B3F9BA32 		ldrsh	r3, [r3, #698]
 2536 0132 C3F58063 		rsb	r3, r3, #1024
 2537 0136 91FBF3F3 		sdiv	r3, r1, r3
 2538 013a D21A     		subs	r2, r2, r3
 2539 013c BB68     		ldr	r3, [r7, #8]
 2540 013e 1A60     		str	r2, [r3]
 2541              	.LBE6:
 915:..\src/interruptions.c ****                 }          
 916:..\src/interruptions.c ****             }
 917:..\src/interruptions.c ****             else {
 918:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 919:..\src/interruptions.c ****                     
 920:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 921:..\src/interruptions.c ****                     if (motor_idx == 0){
 922:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 923:..\src/interruptions.c ****                     }
 924:..\src/interruptions.c ****                     if (motor_idx == 1){
 925:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 926:..\src/interruptions.c ****                     }
 927:..\src/interruptions.c ****                 }
 928:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 63


 929:..\src/interruptions.c ****         }
 930:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 931:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 932:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 933:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 934:..\src/interruptions.c **** 
 935:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 936:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 937:..\src/interruptions.c ****                     if (motor_idx == 1){
 938:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 939:..\src/interruptions.c ****                     }
 940:..\src/interruptions.c ****                     if (motor_idx == 0){
 941:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 942:..\src/interruptions.c ****                     }                    
 943:..\src/interruptions.c ****                 }
 944:..\src/interruptions.c ****                 else {
 945:..\src/interruptions.c ****                     if (motor_idx == 0){
 946:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 947:..\src/interruptions.c ****                     }
 948:..\src/interruptions.c ****                     if (motor_idx == 1){
 949:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 950:..\src/interruptions.c ****                     }
 951:..\src/interruptions.c ****                 }
 952:..\src/interruptions.c ****                 
 953:..\src/interruptions.c ****             }
 954:..\src/interruptions.c ****             else {
 955:..\src/interruptions.c ****                 if(pos_sum > 0) {
 956:..\src/interruptions.c ****                     if (motor_idx == 0){
 957:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 958:..\src/interruptions.c ****                     }
 959:..\src/interruptions.c ****                     if (motor_idx == 1){
 960:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 961:..\src/interruptions.c ****                     }
 962:..\src/interruptions.c ****                     
 963:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 964:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 965:..\src/interruptions.c ****                     }
 966:..\src/interruptions.c ****                 }
 967:..\src/interruptions.c ****             }
 968:..\src/interruptions.c ****         }
 969:..\src/interruptions.c ****     }           
 970:..\src/interruptions.c **** }
 2542              		.loc 1 970 0
 2543 0140 F0E0     		b	.L181
 2544              	.L167:
 2545              	.LBB7:
 918:..\src/interruptions.c ****                     
 2546              		.loc 1 918 0
 2547 0142 644B     		ldr	r3, .L183+4
 2548 0144 5A6A     		ldr	r2, [r3, #36]
 2549 0146 624B     		ldr	r3, .L183
 2550 0148 B3F9BA32 		ldrsh	r3, [r3, #698]
 2551 014c 5B42     		negs	r3, r3
 2552 014e 9A42     		cmp	r2, r3
 2553 0150 80F2E880 		bge	.L181
 920:..\src/interruptions.c ****                     if (motor_idx == 0){
 2554              		.loc 1 920 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 64


 2555 0154 5F4B     		ldr	r3, .L183+4
 2556 0156 5B6A     		ldr	r3, [r3, #36]
 2557 0158 5D4A     		ldr	r2, .L183
 2558 015a B2F9BA22 		ldrsh	r2, [r2, #698]
 2559 015e 1344     		add	r3, r3, r2
 2560 0160 BB61     		str	r3, [r7, #24]
 921:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2561              		.loc 1 921 0
 2562 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2563 0164 002B     		cmp	r3, #0
 2564 0166 12D1     		bne	.L171
 922:..\src/interruptions.c ****                     }
 2565              		.loc 1 922 0
 2566 0168 BB68     		ldr	r3, [r7, #8]
 2567 016a 1A68     		ldr	r2, [r3]
 2568 016c 584B     		ldr	r3, .L183
 2569 016e B3F8B832 		ldrh	r3, [r3, #696]
 2570 0172 1946     		mov	r1, r3
 2571 0174 BB69     		ldr	r3, [r7, #24]
 2572 0176 03FB01F1 		mul	r1, r3, r1
 2573 017a 554B     		ldr	r3, .L183
 2574 017c B3F9BA32 		ldrsh	r3, [r3, #698]
 2575 0180 C3F58063 		rsb	r3, r3, #1024
 2576 0184 91FBF3F3 		sdiv	r3, r1, r3
 2577 0188 1A44     		add	r2, r2, r3
 2578 018a BB68     		ldr	r3, [r7, #8]
 2579 018c 1A60     		str	r2, [r3]
 2580              	.L171:
 924:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2581              		.loc 1 924 0
 2582 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2583 0190 012B     		cmp	r3, #1
 2584 0192 40F0C780 		bne	.L181
 925:..\src/interruptions.c ****                     }
 2585              		.loc 1 925 0
 2586 0196 BB68     		ldr	r3, [r7, #8]
 2587 0198 1A68     		ldr	r2, [r3]
 2588 019a 4D4B     		ldr	r3, .L183
 2589 019c B3F8B832 		ldrh	r3, [r3, #696]
 2590 01a0 1946     		mov	r1, r3
 2591 01a2 BB69     		ldr	r3, [r7, #24]
 2592 01a4 03FB01F1 		mul	r1, r3, r1
 2593 01a8 494B     		ldr	r3, .L183
 2594 01aa B3F9BA32 		ldrsh	r3, [r3, #698]
 2595 01ae C3F58063 		rsb	r3, r3, #1024
 2596 01b2 91FBF3F3 		sdiv	r3, r1, r3
 2597 01b6 D21A     		subs	r2, r2, r3
 2598 01b8 BB68     		ldr	r3, [r7, #8]
 2599 01ba 1A60     		str	r2, [r3]
 2600              	.LBE7:
 2601              		.loc 1 970 0
 2602 01bc B2E0     		b	.L181
 2603              	.L164:
 2604              	.LBB8:
 932:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2605              		.loc 1 932 0
 2606 01be 444B     		ldr	r3, .L183
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 65


 2607 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2608 01c4 1946     		mov	r1, r3
 2609 01c6 444A     		ldr	r2, .L183+8
 2610 01c8 3423     		movs	r3, #52
 2611 01ca 03FB01F3 		mul	r3, r3, r1
 2612 01ce 1344     		add	r3, r3, r2
 2613 01d0 1A68     		ldr	r2, [r3]
 2614 01d2 3F4B     		ldr	r3, .L183
 2615 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2616 01d8 1846     		mov	r0, r3
 2617 01da 3F49     		ldr	r1, .L183+8
 2618 01dc 3423     		movs	r3, #52
 2619 01de 03FB00F3 		mul	r3, r3, r0
 2620 01e2 0B44     		add	r3, r3, r1
 2621 01e4 0433     		adds	r3, r3, #4
 2622 01e6 1B68     		ldr	r3, [r3]
 2623 01e8 D21A     		subs	r2, r2, r3
 2624 01ea 394B     		ldr	r3, .L183
 2625 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2626 01f0 1846     		mov	r0, r3
 2627 01f2 3749     		ldr	r1, .L183
 2628 01f4 0346     		mov	r3, r0
 2629 01f6 5B00     		lsls	r3, r3, #1
 2630 01f8 0344     		add	r3, r3, r0
 2631 01fa 1B01     		lsls	r3, r3, #4
 2632 01fc 0B44     		add	r3, r3, r1
 2633 01fe 03F29D13 		addw	r3, r3, #413
 2634 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2635 0204 42FA03F3 		asr	r3, r2, r3
 2636 0208 7B61     		str	r3, [r7, #20]
 933:..\src/interruptions.c **** 
 2637              		.loc 1 933 0
 2638 020a 314B     		ldr	r3, .L183
 2639 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2640 0210 1946     		mov	r1, r3
 2641 0212 314A     		ldr	r2, .L183+8
 2642 0214 3423     		movs	r3, #52
 2643 0216 03FB01F3 		mul	r3, r3, r1
 2644 021a 1344     		add	r3, r3, r2
 2645 021c 1A68     		ldr	r2, [r3]
 2646 021e 2C4B     		ldr	r3, .L183
 2647 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2648 0224 1846     		mov	r0, r3
 2649 0226 2C49     		ldr	r1, .L183+8
 2650 0228 3423     		movs	r3, #52
 2651 022a 03FB00F3 		mul	r3, r3, r0
 2652 022e 0B44     		add	r3, r3, r1
 2653 0230 0433     		adds	r3, r3, #4
 2654 0232 1B68     		ldr	r3, [r3]
 2655 0234 1A44     		add	r2, r2, r3
 2656 0236 264B     		ldr	r3, .L183
 2657 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2658 023c 1846     		mov	r0, r3
 2659 023e 2449     		ldr	r1, .L183
 2660 0240 0346     		mov	r3, r0
 2661 0242 5B00     		lsls	r3, r3, #1
 2662 0244 0344     		add	r3, r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 66


 2663 0246 1B01     		lsls	r3, r3, #4
 2664 0248 0B44     		add	r3, r3, r1
 2665 024a 03F29D13 		addw	r3, r3, #413
 2666 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2667 0250 42FA03F3 		asr	r3, r2, r3
 2668 0254 3B61     		str	r3, [r7, #16]
 935:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2669              		.loc 1 935 0
 2670 0256 7B69     		ldr	r3, [r7, #20]
 2671 0258 B3F5FA7F 		cmp	r3, #500
 2672 025c 03DC     		bgt	.L172
 935:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2673              		.loc 1 935 0 is_stmt 0 discriminator 1
 2674 025e 7B69     		ldr	r3, [r7, #20]
 2675 0260 13F5FA7F 		cmn	r3, #500
 2676 0264 3ADA     		bge	.L173
 2677              	.L172:
 936:..\src/interruptions.c ****                     if (motor_idx == 1){
 2678              		.loc 1 936 0 is_stmt 1
 2679 0266 7B69     		ldr	r3, [r7, #20]
 2680 0268 002B     		cmp	r3, #0
 2681 026a 18DB     		blt	.L174
 937:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2682              		.loc 1 937 0
 2683 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2684 026e 012B     		cmp	r3, #1
 2685 0270 07D1     		bne	.L175
 938:..\src/interruptions.c ****                     }
 2686              		.loc 1 938 0
 2687 0272 BB68     		ldr	r3, [r7, #8]
 2688 0274 1B68     		ldr	r3, [r3]
 2689 0276 164A     		ldr	r2, .L183
 2690 0278 B2F8B822 		ldrh	r2, [r2, #696]
 2691 027c 1A44     		add	r2, r2, r3
 2692 027e BB68     		ldr	r3, [r7, #8]
 2693 0280 1A60     		str	r2, [r3]
 2694              	.L175:
 940:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2695              		.loc 1 940 0
 2696 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2697 0284 002B     		cmp	r3, #0
 2698 0286 4CD1     		bne	.L182
 941:..\src/interruptions.c ****                     }                    
 2699              		.loc 1 941 0
 2700 0288 BB68     		ldr	r3, [r7, #8]
 2701 028a 1B68     		ldr	r3, [r3]
 2702 028c 104A     		ldr	r2, .L183
 2703 028e B2F8B822 		ldrh	r2, [r2, #696]
 2704 0292 5208     		lsrs	r2, r2, #1
 2705 0294 92B2     		uxth	r2, r2
 2706 0296 9A1A     		subs	r2, r3, r2
 2707 0298 BB68     		ldr	r3, [r7, #8]
 2708 029a 1A60     		str	r2, [r3]
 936:..\src/interruptions.c ****                     if (motor_idx == 1){
 2709              		.loc 1 936 0
 2710 029c 41E0     		b	.L182
 2711              	.L174:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 67


 945:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2712              		.loc 1 945 0
 2713 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2714 02a0 002B     		cmp	r3, #0
 2715 02a2 07D1     		bne	.L178
 946:..\src/interruptions.c ****                     }
 2716              		.loc 1 946 0
 2717 02a4 BB68     		ldr	r3, [r7, #8]
 2718 02a6 1B68     		ldr	r3, [r3]
 2719 02a8 094A     		ldr	r2, .L183
 2720 02aa B2F8B822 		ldrh	r2, [r2, #696]
 2721 02ae 1A44     		add	r2, r2, r3
 2722 02b0 BB68     		ldr	r3, [r7, #8]
 2723 02b2 1A60     		str	r2, [r3]
 2724              	.L178:
 948:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2725              		.loc 1 948 0
 2726 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2727 02b6 012B     		cmp	r3, #1
 2728 02b8 33D1     		bne	.L182
 949:..\src/interruptions.c ****                     }
 2729              		.loc 1 949 0
 2730 02ba BB68     		ldr	r3, [r7, #8]
 2731 02bc 1B68     		ldr	r3, [r3]
 2732 02be 044A     		ldr	r2, .L183
 2733 02c0 B2F8B822 		ldrh	r2, [r2, #696]
 2734 02c4 5208     		lsrs	r2, r2, #1
 2735 02c6 92B2     		uxth	r2, r2
 2736 02c8 9A1A     		subs	r2, r3, r2
 2737 02ca BB68     		ldr	r3, [r7, #8]
 2738 02cc 1A60     		str	r2, [r3]
 936:..\src/interruptions.c ****                     if (motor_idx == 1){
 2739              		.loc 1 936 0
 2740 02ce 28E0     		b	.L182
 2741              	.L184:
 2742              		.align	2
 2743              	.L183:
 2744 02d0 00000000 		.word	c_mem
 2745 02d4 00000000 		.word	g_adc_meas
 2746 02d8 00000000 		.word	g_meas
 2747              	.L173:
 955:..\src/interruptions.c ****                     if (motor_idx == 0){
 2748              		.loc 1 955 0
 2749 02dc 3B69     		ldr	r3, [r7, #16]
 2750 02de 002B     		cmp	r3, #0
 2751 02e0 20DD     		ble	.L181
 956:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2752              		.loc 1 956 0
 2753 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2754 02e4 002B     		cmp	r3, #0
 2755 02e6 08D1     		bne	.L179
 957:..\src/interruptions.c ****                     }
 2756              		.loc 1 957 0
 2757 02e8 BB68     		ldr	r3, [r7, #8]
 2758 02ea 1A68     		ldr	r2, [r3]
 2759 02ec 104B     		ldr	r3, .L185
 2760 02ee B3F8B832 		ldrh	r3, [r3, #696]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 68


 2761 02f2 5B00     		lsls	r3, r3, #1
 2762 02f4 D21A     		subs	r2, r2, r3
 2763 02f6 BB68     		ldr	r3, [r7, #8]
 2764 02f8 1A60     		str	r2, [r3]
 2765              	.L179:
 959:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2766              		.loc 1 959 0
 2767 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2768 02fc 012B     		cmp	r3, #1
 2769 02fe 08D1     		bne	.L180
 960:..\src/interruptions.c ****                     }
 2770              		.loc 1 960 0
 2771 0300 BB68     		ldr	r3, [r7, #8]
 2772 0302 1A68     		ldr	r2, [r3]
 2773 0304 0A4B     		ldr	r3, .L185
 2774 0306 B3F8B832 		ldrh	r3, [r3, #696]
 2775 030a 5B00     		lsls	r3, r3, #1
 2776 030c D21A     		subs	r2, r2, r3
 2777 030e BB68     		ldr	r3, [r7, #8]
 2778 0310 1A60     		str	r2, [r3]
 2779              	.L180:
 963:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2780              		.loc 1 963 0
 2781 0312 BB68     		ldr	r3, [r7, #8]
 2782 0314 1B68     		ldr	r3, [r3]
 2783 0316 002B     		cmp	r3, #0
 2784 0318 04DA     		bge	.L181
 964:..\src/interruptions.c ****                     }
 2785              		.loc 1 964 0
 2786 031a BB68     		ldr	r3, [r7, #8]
 2787 031c 0022     		movs	r2, #0
 2788 031e 1A60     		str	r2, [r3]
 2789              	.LBE8:
 2790              		.loc 1 970 0
 2791 0320 00E0     		b	.L181
 2792              	.L182:
 2793              	.LBB9:
 936:..\src/interruptions.c ****                     if (motor_idx == 1){
 2794              		.loc 1 936 0
 2795 0322 00BF     		nop
 2796              	.L181:
 2797              	.LBE9:
 2798              		.loc 1 970 0
 2799 0324 00BF     		nop
 2800 0326 2437     		adds	r7, r7, #36
 2801              		.cfi_def_cfa_offset 4
 2802 0328 BD46     		mov	sp, r7
 2803              		.cfi_def_cfa_register 13
 2804              		@ sp needed
 2805 032a 80BC     		pop	{r7}
 2806              		.cfi_restore 7
 2807              		.cfi_def_cfa_offset 0
 2808 032c 7047     		bx	lr
 2809              	.L186:
 2810 032e 00BF     		.align	2
 2811              	.L185:
 2812 0330 00000000 		.word	c_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 69


 2813              		.cfi_endproc
 2814              	.LFE69:
 2815              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2816              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2817              		.align	2
 2818              		.global	compute_SoftHand_2_motors_emg_reference
 2819              		.thumb
 2820              		.thumb_func
 2821              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2822              	compute_SoftHand_2_motors_emg_reference:
 2823              	.LFB70:
 971:..\src/interruptions.c **** 
 972:..\src/interruptions.c **** 
 973:..\src/interruptions.c **** //==============================================================================
 974:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 975:..\src/interruptions.c **** //==============================================================================
 976:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 977:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2824              		.loc 1 977 0
 2825              		.cfi_startproc
 2826              		@ args = 4, pretend = 0, frame = 16
 2827              		@ frame_needed = 1, uses_anonymous_args = 0
 2828 0000 80B5     		push	{r7, lr}
 2829              		.cfi_def_cfa_offset 8
 2830              		.cfi_offset 7, -8
 2831              		.cfi_offset 14, -4
 2832 0002 84B0     		sub	sp, sp, #16
 2833              		.cfi_def_cfa_offset 24
 2834 0004 00AF     		add	r7, sp, #0
 2835              		.cfi_def_cfa_register 7
 2836 0006 B960     		str	r1, [r7, #8]
 2837 0008 7A60     		str	r2, [r7, #4]
 2838 000a 3B60     		str	r3, [r7]
 2839 000c 0346     		mov	r3, r0
 2840 000e FB73     		strb	r3, [r7, #15]
 978:..\src/interruptions.c ****     
 979:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 980:..\src/interruptions.c ****     static uint8 fsm_state;     
 981:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2841              		.loc 1 981 0
 2842 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2843 0012 002B     		cmp	r3, #0
 2844 0014 05D1     		bne	.L188
 982:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2845              		.loc 1 982 0
 2846 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
 2847 001a 0346     		mov	r3, r0
 2848 001c 1A46     		mov	r2, r3
 2849 001e 614B     		ldr	r3, .L203
 2850 0020 1A70     		strb	r2, [r3]
 2851              	.L188:
 983:..\src/interruptions.c ****     }
 984:..\src/interruptions.c ****        
 985:..\src/interruptions.c ****     switch (fsm_state){
 2852              		.loc 1 985 0
 2853 0022 604B     		ldr	r3, .L203
 2854 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 70


 2855 0026 032B     		cmp	r3, #3
 2856 0028 00F2B780 		bhi	.L200
 2857 002c 01A2     		adr	r2, .L191
 2858 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2859 0032 00BF     		.p2align 2
 2860              	.L191:
 2861 0034 45000000 		.word	.L190+1
 2862 0038 45000000 		.word	.L190+1
 2863 003c BF000000 		.word	.L192+1
 2864 0040 4F000000 		.word	.L193+1
 2865              		.p2align 1
 2866              	.L190:
 986:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 987:..\src/interruptions.c ****              
 988:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2867              		.loc 1 988 0
 2868 0044 7B68     		ldr	r3, [r7, #4]
 2869 0046 1A68     		ldr	r2, [r3]
 2870 0048 BB68     		ldr	r3, [r7, #8]
 2871 004a 1A60     		str	r2, [r3]
 989:..\src/interruptions.c ****     
 990:..\src/interruptions.c ****             break;
 2872              		.loc 1 990 0
 2873 004c A5E0     		b	.L189
 2874              	.L193:
 991:..\src/interruptions.c ****         
 992:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 993:..\src/interruptions.c **** 
 994:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2875              		.loc 1 994 0
 2876 004e 3B68     		ldr	r3, [r7]
 2877 0050 002B     		cmp	r3, #0
 2878 0052 17DD     		ble	.L194
 2879              		.loc 1 994 0 is_stmt 0 discriminator 1
 2880 0054 3A68     		ldr	r2, [r7]
 2881 0056 BB69     		ldr	r3, [r7, #24]
 2882 0058 9A42     		cmp	r2, r3
 2883 005a 13DD     		ble	.L194
 995:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2884              		.loc 1 995 0 is_stmt 1
 2885 005c 7B68     		ldr	r3, [r7, #4]
 2886 005e 1A68     		ldr	r2, [r3]
 2887 0060 514B     		ldr	r3, .L203+4
 2888 0062 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2889 0066 1946     		mov	r1, r3
 2890 0068 3B68     		ldr	r3, [r7]
 2891 006a 03FB01F3 		mul	r3, r3, r1
 2892 006e 9900     		lsls	r1, r3, #2
 2893 0070 4E4B     		ldr	r3, .L203+8
 2894 0072 B3F8F831 		ldrh	r3, [r3, #504]
 2895 0076 C3F58063 		rsb	r3, r3, #1024
 2896 007a 91FBF3F3 		sdiv	r3, r1, r3
 2897 007e 1A44     		add	r2, r2, r3
 2898 0080 BB68     		ldr	r3, [r7, #8]
 2899 0082 1A60     		str	r2, [r3]
 2900              	.L194:
 996:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 71


 997:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2901              		.loc 1 997 0
 2902 0084 BB69     		ldr	r3, [r7, #24]
 2903 0086 002B     		cmp	r3, #0
 2904 0088 40F38480 		ble	.L201
 2905              		.loc 1 997 0 is_stmt 0 discriminator 1
 2906 008c BA69     		ldr	r2, [r7, #24]
 2907 008e 3B68     		ldr	r3, [r7]
 2908 0090 9A42     		cmp	r2, r3
 2909 0092 7FDD     		ble	.L201
 998:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2910              		.loc 1 998 0 is_stmt 1
 2911 0094 7B68     		ldr	r3, [r7, #4]
 2912 0096 1A68     		ldr	r2, [r3]
 2913 0098 434B     		ldr	r3, .L203+4
 2914 009a 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2915 009e 1946     		mov	r1, r3
 2916 00a0 BB69     		ldr	r3, [r7, #24]
 2917 00a2 03FB01F3 		mul	r3, r3, r1
 2918 00a6 9900     		lsls	r1, r3, #2
 2919 00a8 404B     		ldr	r3, .L203+8
 2920 00aa B3F8FA31 		ldrh	r3, [r3, #506]
 2921 00ae C3F58063 		rsb	r3, r3, #1024
 2922 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2923 00b6 D21A     		subs	r2, r2, r3
 2924 00b8 BB68     		ldr	r3, [r7, #8]
 2925 00ba 1A60     		str	r2, [r3]
 999:..\src/interruptions.c ****             }
1000:..\src/interruptions.c ****             
1001:..\src/interruptions.c ****             break;
 2926              		.loc 1 1001 0
 2927 00bc 6AE0     		b	.L201
 2928              	.L192:
1002:..\src/interruptions.c ****             
1003:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
1004:..\src/interruptions.c ****             
1005:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2929              		.loc 1 1005 0
 2930 00be 3B68     		ldr	r3, [r7]
 2931 00c0 002B     		cmp	r3, #0
 2932 00c2 31DD     		ble	.L196
 2933              		.loc 1 1005 0 is_stmt 0 discriminator 1
 2934 00c4 3A68     		ldr	r2, [r7]
 2935 00c6 BB69     		ldr	r3, [r7, #24]
 2936 00c8 9A42     		cmp	r2, r3
 2937 00ca 2DDD     		ble	.L196
1006:..\src/interruptions.c ****                 if (motor_idx == 0){
 2938              		.loc 1 1006 0 is_stmt 1
 2939 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2940 00ce 002B     		cmp	r3, #0
 2941 00d0 13D1     		bne	.L197
1007:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2942              		.loc 1 1007 0
 2943 00d2 7B68     		ldr	r3, [r7, #4]
 2944 00d4 1A68     		ldr	r2, [r3]
 2945 00d6 344B     		ldr	r3, .L203+4
 2946 00d8 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 72


 2947 00dc 1946     		mov	r1, r3
 2948 00de 3B68     		ldr	r3, [r7]
 2949 00e0 03FB01F3 		mul	r3, r3, r1
 2950 00e4 9900     		lsls	r1, r3, #2
 2951 00e6 314B     		ldr	r3, .L203+8
 2952 00e8 B3F8F831 		ldrh	r3, [r3, #504]
 2953 00ec C3F58063 		rsb	r3, r3, #1024
 2954 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2955 00f4 1A44     		add	r2, r2, r3
 2956 00f6 BB68     		ldr	r3, [r7, #8]
 2957 00f8 1A60     		str	r2, [r3]
 2958              	.L197:
1008:..\src/interruptions.c ****                 }
1009:..\src/interruptions.c ****                 if (motor_idx == 1){
 2959              		.loc 1 1009 0
 2960 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2961 00fc 012B     		cmp	r3, #1
 2962 00fe 13D1     		bne	.L196
1010:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2963              		.loc 1 1010 0
 2964 0100 7B68     		ldr	r3, [r7, #4]
 2965 0102 1A68     		ldr	r2, [r3]
 2966 0104 284B     		ldr	r3, .L203+4
 2967 0106 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2968 010a 1946     		mov	r1, r3
 2969 010c 3B68     		ldr	r3, [r7]
 2970 010e 03FB01F3 		mul	r3, r3, r1
 2971 0112 9900     		lsls	r1, r3, #2
 2972 0114 254B     		ldr	r3, .L203+8
 2973 0116 B3F8F831 		ldrh	r3, [r3, #504]
 2974 011a C3F58063 		rsb	r3, r3, #1024
 2975 011e 91FBF3F3 		sdiv	r3, r1, r3
 2976 0122 D21A     		subs	r2, r2, r3
 2977 0124 BB68     		ldr	r3, [r7, #8]
 2978 0126 1A60     		str	r2, [r3]
 2979              	.L196:
1011:..\src/interruptions.c ****                 }   
1012:..\src/interruptions.c ****             }
1013:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2980              		.loc 1 1013 0
 2981 0128 BB69     		ldr	r3, [r7, #24]
 2982 012a 002B     		cmp	r3, #0
 2983 012c 34DD     		ble	.L202
 2984              		.loc 1 1013 0 is_stmt 0 discriminator 1
 2985 012e BA69     		ldr	r2, [r7, #24]
 2986 0130 3B68     		ldr	r3, [r7]
 2987 0132 9A42     		cmp	r2, r3
 2988 0134 30DD     		ble	.L202
1014:..\src/interruptions.c ****                 if (motor_idx == 0){
 2989              		.loc 1 1014 0 is_stmt 1
 2990 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2991 0138 002B     		cmp	r3, #0
 2992 013a 13D1     		bne	.L199
1015:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 2993              		.loc 1 1015 0
 2994 013c 7B68     		ldr	r3, [r7, #4]
 2995 013e 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 73


 2996 0140 194B     		ldr	r3, .L203+4
 2997 0142 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2998 0146 1946     		mov	r1, r3
 2999 0148 BB69     		ldr	r3, [r7, #24]
 3000 014a 03FB01F3 		mul	r3, r3, r1
 3001 014e 9900     		lsls	r1, r3, #2
 3002 0150 164B     		ldr	r3, .L203+8
 3003 0152 B3F8FA31 		ldrh	r3, [r3, #506]
 3004 0156 C3F58063 		rsb	r3, r3, #1024
 3005 015a 91FBF3F3 		sdiv	r3, r1, r3
 3006 015e D21A     		subs	r2, r2, r3
 3007 0160 BB68     		ldr	r3, [r7, #8]
 3008 0162 1A60     		str	r2, [r3]
 3009              	.L199:
1016:..\src/interruptions.c ****                 }
1017:..\src/interruptions.c ****                 if (motor_idx == 1){
 3010              		.loc 1 1017 0
 3011 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3012 0166 012B     		cmp	r3, #1
 3013 0168 16D1     		bne	.L202
1018:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 3014              		.loc 1 1018 0
 3015 016a 7B68     		ldr	r3, [r7, #4]
 3016 016c 1A68     		ldr	r2, [r3]
 3017 016e 0E4B     		ldr	r3, .L203+4
 3018 0170 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 3019 0174 1946     		mov	r1, r3
 3020 0176 BB69     		ldr	r3, [r7, #24]
 3021 0178 03FB01F3 		mul	r3, r3, r1
 3022 017c 9900     		lsls	r1, r3, #2
 3023 017e 0B4B     		ldr	r3, .L203+8
 3024 0180 B3F8FA31 		ldrh	r3, [r3, #506]
 3025 0184 C3F58063 		rsb	r3, r3, #1024
 3026 0188 91FBF3F3 		sdiv	r3, r1, r3
 3027 018c 1A44     		add	r2, r2, r3
 3028 018e BB68     		ldr	r3, [r7, #8]
 3029 0190 1A60     		str	r2, [r3]
1019:..\src/interruptions.c ****                 }
1020:..\src/interruptions.c ****             }
1021:..\src/interruptions.c ****             
1022:..\src/interruptions.c ****             break;
 3030              		.loc 1 1022 0
 3031 0192 01E0     		b	.L202
 3032              	.L201:
1001:..\src/interruptions.c ****             
 3033              		.loc 1 1001 0
 3034 0194 00BF     		nop
 3035 0196 00E0     		b	.L200
 3036              	.L202:
 3037              		.loc 1 1022 0
 3038 0198 00BF     		nop
 3039              	.L189:
 3040              	.L200:
1023:..\src/interruptions.c ****     }
1024:..\src/interruptions.c ****  
1025:..\src/interruptions.c **** }
 3041              		.loc 1 1025 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 74


 3042 019a 00BF     		nop
 3043 019c 1037     		adds	r7, r7, #16
 3044              		.cfi_def_cfa_offset 8
 3045 019e BD46     		mov	sp, r7
 3046              		.cfi_def_cfa_register 13
 3047              		@ sp needed
 3048 01a0 80BD     		pop	{r7, pc}
 3049              	.L204:
 3050 01a2 00BF     		.align	2
 3051              	.L203:
 3052 01a4 8E000000 		.word	fsm_state.10547
 3053 01a8 00000000 		.word	g_mem
 3054 01ac 00000000 		.word	c_mem
 3055              		.cfi_endproc
 3056              	.LFE70:
 3057              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 3058              		.section	.text.motor_control_SH,"ax",%progbits
 3059              		.align	2
 3060              		.global	motor_control_SH
 3061              		.thumb
 3062              		.thumb_func
 3063              		.type	motor_control_SH, %function
 3064              	motor_control_SH:
 3065              	.LFB71:
1026:..\src/interruptions.c **** 
1027:..\src/interruptions.c **** //==============================================================================
1028:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
1029:..\src/interruptions.c **** //==============================================================================
1030:..\src/interruptions.c **** void motor_control_SH() {
 3066              		.loc 1 1030 0
 3067              		.cfi_startproc
 3068              		@ args = 0, pretend = 0, frame = 80
 3069              		@ frame_needed = 1, uses_anonymous_args = 0
 3070 0000 80B5     		push	{r7, lr}
 3071              		.cfi_def_cfa_offset 8
 3072              		.cfi_offset 7, -8
 3073              		.cfi_offset 14, -4
 3074 0002 94B0     		sub	sp, sp, #80
 3075              		.cfi_def_cfa_offset 88
 3076 0004 00AF     		add	r7, sp, #0
 3077              		.cfi_def_cfa_register 7
1031:..\src/interruptions.c **** 
1032:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3078              		.loc 1 1032 0
 3079 0006 0023     		movs	r3, #0
 3080 0008 FB64     		str	r3, [r7, #76]
1033:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1034:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1035:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1036:..\src/interruptions.c ****  
1037:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 3081              		.loc 1 1037 0
 3082 000a 0023     		movs	r3, #0
 3083 000c 87F84730 		strb	r3, [r7, #71]
1038:..\src/interruptions.c ****     
1039:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 3084              		.loc 1 1039 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 75


 3085 0010 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3086 0014 7422     		movs	r2, #116
 3087 0016 02FB03F3 		mul	r3, r2, r3
 3088 001a B033     		adds	r3, r3, #176
 3089 001c 9C4A     		ldr	r2, .L266
 3090 001e 1344     		add	r3, r3, r2
 3091 0020 3B64     		str	r3, [r7, #64]
1040:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 3092              		.loc 1 1040 0
 3093 0022 3B6C     		ldr	r3, [r7, #64]
 3094 0024 93F86030 		ldrb	r3, [r3, #96]
 3095 0028 87F83F30 		strb	r3, [r7, #63]
1041:..\src/interruptions.c ****     
1042:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 3096              		.loc 1 1042 0
 3097 002c 3B6C     		ldr	r3, [r7, #64]
 3098 002e 1B68     		ldr	r3, [r3]
 3099 0030 BB63     		str	r3, [r7, #56]
1043:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 3100              		.loc 1 1043 0
 3101 0032 3B6C     		ldr	r3, [r7, #64]
 3102 0034 5B68     		ldr	r3, [r3, #4]
 3103 0036 7B63     		str	r3, [r7, #52]
1044:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 3104              		.loc 1 1044 0
 3105 0038 3B6C     		ldr	r3, [r7, #64]
 3106 003a 9B68     		ldr	r3, [r3, #8]
 3107 003c 3B63     		str	r3, [r7, #48]
1045:..\src/interruptions.c **** 
1046:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 3108              		.loc 1 1046 0
 3109 003e 3B6C     		ldr	r3, [r7, #64]
 3110 0040 DB68     		ldr	r3, [r3, #12]
 3111 0042 FB62     		str	r3, [r7, #44]
1047:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 3112              		.loc 1 1047 0
 3113 0044 3B6C     		ldr	r3, [r7, #64]
 3114 0046 1B69     		ldr	r3, [r3, #16]
 3115 0048 BB62     		str	r3, [r7, #40]
1048:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 3116              		.loc 1 1048 0
 3117 004a 3B6C     		ldr	r3, [r7, #64]
 3118 004c 5B69     		ldr	r3, [r3, #20]
 3119 004e 7B62     		str	r3, [r7, #36]
1049:..\src/interruptions.c **** 
1050:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
 3120              		.loc 1 1050 0
 3121 0050 3B6C     		ldr	r3, [r7, #64]
 3122 0052 9B69     		ldr	r3, [r3, #24]
 3123 0054 3B62     		str	r3, [r7, #32]
1051:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 3124              		.loc 1 1051 0
 3125 0056 3B6C     		ldr	r3, [r7, #64]
 3126 0058 DB69     		ldr	r3, [r3, #28]
 3127 005a FB61     		str	r3, [r7, #28]
1052:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 3128              		.loc 1 1052 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 76


 3129 005c 3B6C     		ldr	r3, [r7, #64]
 3130 005e 1B6A     		ldr	r3, [r3, #32]
 3131 0060 BB61     		str	r3, [r7, #24]
1053:..\src/interruptions.c ****     
1054:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 3132              		.loc 1 1054 0
 3133 0062 3B6C     		ldr	r3, [r7, #64]
 3134 0064 5B6A     		ldr	r3, [r3, #36]
 3135 0066 7B61     		str	r3, [r7, #20]
1055:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 3136              		.loc 1 1055 0
 3137 0068 3B6C     		ldr	r3, [r7, #64]
 3138 006a 9B6A     		ldr	r3, [r3, #40]
 3139 006c 3B61     		str	r3, [r7, #16]
1056:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 3140              		.loc 1 1056 0
 3141 006e 3B6C     		ldr	r3, [r7, #64]
 3142 0070 DB6A     		ldr	r3, [r3, #44]
 3143 0072 FB60     		str	r3, [r7, #12]
1057:..\src/interruptions.c **** 
1058:..\src/interruptions.c ****     // Static Variables
1059:..\src/interruptions.c **** 
1060:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
1061:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
1062:..\src/interruptions.c ****     
1063:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
1064:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
1065:..\src/interruptions.c ****     static int32 prev_pwm;
1066:..\src/interruptions.c **** 
1067:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1068:..\src/interruptions.c ****     static uint32 position_counter = 0;
1069:..\src/interruptions.c ****   
1070:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1071:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 3144              		.loc 1 1071 0
 3145 0074 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3146 0078 1B01     		lsls	r3, r3, #4
 3147 007a 864A     		ldr	r2, .L266+4
 3148 007c 9918     		adds	r1, r3, r2
 3149 007e 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3150 0082 1B01     		lsls	r3, r3, #4
 3151 0084 844A     		ldr	r2, .L266+8
 3152 0086 1A44     		add	r2, r2, r3
 3153 0088 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3154 008c 1846     		mov	r0, r3
 3155 008e FFF7FEFF 		bl	compute_reference
1072:..\src/interruptions.c ****      
1073:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 3156              		.loc 1 1073 0
 3157 0092 3B6C     		ldr	r3, [r7, #64]
 3158 0094 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3159 0098 032B     		cmp	r3, #3
 3160 009a 00F2F681 		bhi	.L206
 3161 009e 01A2     		adr	r2, .L208
 3162 00a0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3163              		.p2align 2
 3164              	.L208:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 77


 3165 00a4 51020000 		.word	.L207+1
 3166 00a8 45040000 		.word	.L209+1
 3167 00ac 37030000 		.word	.L210+1
 3168 00b0 B5000000 		.word	.L211+1
 3169              		.p2align 1
 3170              	.L211:
1074:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1075:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1076:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3171              		.loc 1 1076 0
 3172 00b4 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3173 00b8 764A     		ldr	r2, .L266+4
 3174 00ba 1B01     		lsls	r3, r3, #4
 3175 00bc 1344     		add	r3, r3, r2
 3176 00be 1A68     		ldr	r2, [r3]
 3177 00c0 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3178 00c4 7549     		ldr	r1, .L266+12
 3179 00c6 3420     		movs	r0, #52
 3180 00c8 00FB03F3 		mul	r3, r0, r3
 3181 00cc 0B44     		add	r3, r3, r1
 3182 00ce 1B68     		ldr	r3, [r3]
 3183 00d0 D31A     		subs	r3, r2, r3
 3184 00d2 BB60     		str	r3, [r7, #8]
1077:..\src/interruptions.c **** 
1078:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3185              		.loc 1 1078 0
 3186 00d4 724B     		ldr	r3, .L266+16
 3187 00d6 1A68     		ldr	r2, [r3]
 3188 00d8 BB68     		ldr	r3, [r7, #8]
 3189 00da 1344     		add	r3, r3, r2
 3190 00dc 704A     		ldr	r2, .L266+16
 3191 00de 1360     		str	r3, [r2]
1079:..\src/interruptions.c **** 
1080:..\src/interruptions.c ****             // error_sum saturation
1081:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 3192              		.loc 1 1081 0
 3193 00e0 6F4B     		ldr	r3, .L266+16
 3194 00e2 1B68     		ldr	r3, [r3]
 3195 00e4 6F4A     		ldr	r2, .L266+20
 3196 00e6 9342     		cmp	r3, r2
 3197 00e8 03DD     		ble	.L212
1082:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 3198              		.loc 1 1082 0
 3199 00ea 6D4B     		ldr	r3, .L266+16
 3200 00ec 6D4A     		ldr	r2, .L266+20
 3201 00ee 1A60     		str	r2, [r3]
 3202 00f0 07E0     		b	.L213
 3203              	.L212:
1083:..\src/interruptions.c ****             else {
1084:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 3204              		.loc 1 1084 0
 3205 00f2 6B4B     		ldr	r3, .L266+16
 3206 00f4 1B68     		ldr	r3, [r3]
 3207 00f6 6C4A     		ldr	r2, .L266+24
 3208 00f8 9342     		cmp	r3, r2
 3209 00fa 02DA     		bge	.L213
1085:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 78


 3210              		.loc 1 1085 0
 3211 00fc 684B     		ldr	r3, .L266+16
 3212 00fe 6A4A     		ldr	r2, .L266+24
 3213 0100 1A60     		str	r2, [r3]
 3214              	.L213:
1086:..\src/interruptions.c ****             }
1087:..\src/interruptions.c ****             
1088:..\src/interruptions.c ****             // ------ position PID control ------
1089:..\src/interruptions.c **** 
1090:..\src/interruptions.c ****             i_ref = 0;
 3215              		.loc 1 1090 0
 3216 0102 0023     		movs	r3, #0
 3217 0104 BB64     		str	r3, [r7, #72]
1091:..\src/interruptions.c ****             
1092:..\src/interruptions.c ****             // Proportional
1093:..\src/interruptions.c ****             if (k_p_dl != 0)
 3218              		.loc 1 1093 0
 3219 0106 3B6A     		ldr	r3, [r7, #32]
 3220 0108 002B     		cmp	r3, #0
 3221 010a 07D0     		beq	.L214
1094:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3222              		.loc 1 1094 0
 3223 010c 3B6A     		ldr	r3, [r7, #32]
 3224 010e BA68     		ldr	r2, [r7, #8]
 3225 0110 02FB03F3 		mul	r3, r2, r3
 3226 0114 1B14     		asrs	r3, r3, #16
 3227 0116 BA6C     		ldr	r2, [r7, #72]
 3228 0118 1344     		add	r3, r3, r2
 3229 011a BB64     		str	r3, [r7, #72]
 3230              	.L214:
1095:..\src/interruptions.c **** 
1096:..\src/interruptions.c ****             // Integral
1097:..\src/interruptions.c ****             if (k_i_dl != 0)
 3231              		.loc 1 1097 0
 3232 011c FB69     		ldr	r3, [r7, #28]
 3233 011e 002B     		cmp	r3, #0
 3234 0120 08D0     		beq	.L215
1098:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 3235              		.loc 1 1098 0
 3236 0122 5F4B     		ldr	r3, .L266+16
 3237 0124 1B68     		ldr	r3, [r3]
 3238 0126 FA69     		ldr	r2, [r7, #28]
 3239 0128 02FB03F3 		mul	r3, r2, r3
 3240 012c 1B14     		asrs	r3, r3, #16
 3241 012e BA6C     		ldr	r2, [r7, #72]
 3242 0130 1344     		add	r3, r3, r2
 3243 0132 BB64     		str	r3, [r7, #72]
 3244              	.L215:
1099:..\src/interruptions.c **** 
1100:..\src/interruptions.c ****             // Derivative
1101:..\src/interruptions.c ****             if (k_d_dl != 0)
 3245              		.loc 1 1101 0
 3246 0134 BB69     		ldr	r3, [r7, #24]
 3247 0136 002B     		cmp	r3, #0
 3248 0138 0AD0     		beq	.L216
1102:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 3249              		.loc 1 1102 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 79


 3250 013a 5C4B     		ldr	r3, .L266+28
 3251 013c 1B68     		ldr	r3, [r3]
 3252 013e BA68     		ldr	r2, [r7, #8]
 3253 0140 D31A     		subs	r3, r2, r3
 3254 0142 BA69     		ldr	r2, [r7, #24]
 3255 0144 02FB03F3 		mul	r3, r2, r3
 3256 0148 1B14     		asrs	r3, r3, #16
 3257 014a BA6C     		ldr	r2, [r7, #72]
 3258 014c 1344     		add	r3, r3, r2
 3259 014e BB64     		str	r3, [r7, #72]
 3260              	.L216:
1103:..\src/interruptions.c ****                         
1104:..\src/interruptions.c ****             // Update previous position
1105:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3261              		.loc 1 1105 0
 3262 0150 564A     		ldr	r2, .L266+28
 3263 0152 BB68     		ldr	r3, [r7, #8]
 3264 0154 1360     		str	r3, [r2]
1106:..\src/interruptions.c **** 
1107:..\src/interruptions.c ****             // motor direction depends on i_ref
1108:..\src/interruptions.c ****             if (i_ref >= 0)
 3265              		.loc 1 1108 0
 3266 0156 BB6C     		ldr	r3, [r7, #72]
 3267 0158 002B     		cmp	r3, #0
 3268 015a 03DB     		blt	.L217
1109:..\src/interruptions.c ****                 motor_dir = TRUE;
 3269              		.loc 1 1109 0
 3270 015c 544B     		ldr	r3, .L266+32
 3271 015e 0122     		movs	r2, #1
 3272 0160 1A70     		strb	r2, [r3]
 3273 0162 02E0     		b	.L218
 3274              	.L217:
1110:..\src/interruptions.c ****             else
1111:..\src/interruptions.c ****                 motor_dir = FALSE;
 3275              		.loc 1 1111 0
 3276 0164 524B     		ldr	r3, .L266+32
 3277 0166 0022     		movs	r2, #0
 3278 0168 1A70     		strb	r2, [r3]
 3279              	.L218:
1112:..\src/interruptions.c **** 
1113:..\src/interruptions.c ****             // saturate max current
1114:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 3280              		.loc 1 1114 0
 3281 016a 3B6C     		ldr	r3, [r7, #64]
 3282 016c B3F95C30 		ldrsh	r3, [r3, #92]
 3283 0170 1A46     		mov	r2, r3
 3284 0172 BB6C     		ldr	r3, [r7, #72]
 3285 0174 9A42     		cmp	r2, r3
 3286 0176 04DA     		bge	.L219
1115:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 3287              		.loc 1 1115 0
 3288 0178 3B6C     		ldr	r3, [r7, #64]
 3289 017a B3F95C30 		ldrsh	r3, [r3, #92]
 3290 017e BB64     		str	r3, [r7, #72]
 3291 0180 0BE0     		b	.L220
 3292              	.L219:
1116:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 80


1117:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 3293              		.loc 1 1117 0
 3294 0182 3B6C     		ldr	r3, [r7, #64]
 3295 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 3296 0188 5A42     		negs	r2, r3
 3297 018a BB6C     		ldr	r3, [r7, #72]
 3298 018c 9A42     		cmp	r2, r3
 3299 018e 04DD     		ble	.L220
1118:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 3300              		.loc 1 1118 0
 3301 0190 3B6C     		ldr	r3, [r7, #64]
 3302 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 3303 0196 5B42     		negs	r3, r3
 3304 0198 BB64     		str	r3, [r7, #72]
 3305              	.L220:
1119:..\src/interruptions.c ****         	}
1120:..\src/interruptions.c **** 
1121:..\src/interruptions.c ****             // current error and curr error sum
1122:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 3306              		.loc 1 1122 0
 3307 019a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3308 019e 3F4A     		ldr	r2, .L266+12
 3309 01a0 3421     		movs	r1, #52
 3310 01a2 01FB03F3 		mul	r3, r1, r3
 3311 01a6 1344     		add	r3, r3, r2
 3312 01a8 0C33     		adds	r3, r3, #12
 3313 01aa 1B68     		ldr	r3, [r3]
 3314 01ac BA6C     		ldr	r2, [r7, #72]
 3315 01ae D31A     		subs	r3, r2, r3
 3316 01b0 7B60     		str	r3, [r7, #4]
1123:..\src/interruptions.c ****             curr_error_sum += curr_error;
 3317              		.loc 1 1123 0
 3318 01b2 404B     		ldr	r3, .L266+36
 3319 01b4 1A68     		ldr	r2, [r3]
 3320 01b6 7B68     		ldr	r3, [r7, #4]
 3321 01b8 1344     		add	r3, r3, r2
 3322 01ba 3E4A     		ldr	r2, .L266+36
 3323 01bc 1360     		str	r3, [r2]
1124:..\src/interruptions.c ****             
1125:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3324              		.loc 1 1125 0
 3325 01be 3D4B     		ldr	r3, .L266+36
 3326 01c0 1B68     		ldr	r3, [r3]
 3327 01c2 3D4A     		ldr	r2, .L266+40
 3328 01c4 9342     		cmp	r3, r2
 3329 01c6 03DD     		ble	.L221
1126:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3330              		.loc 1 1126 0
 3331 01c8 3A4B     		ldr	r3, .L266+36
 3332 01ca 3B4A     		ldr	r2, .L266+40
 3333 01cc 1A60     		str	r2, [r3]
 3334 01ce 07E0     		b	.L222
 3335              	.L221:
1127:..\src/interruptions.c ****             else {
1128:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 3336              		.loc 1 1128 0
 3337 01d0 384B     		ldr	r3, .L266+36
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 81


 3338 01d2 1B68     		ldr	r3, [r3]
 3339 01d4 394A     		ldr	r2, .L266+44
 3340 01d6 9342     		cmp	r3, r2
 3341 01d8 02DA     		bge	.L222
1129:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3342              		.loc 1 1129 0
 3343 01da 364B     		ldr	r3, .L266+36
 3344 01dc 374A     		ldr	r2, .L266+44
 3345 01de 1A60     		str	r2, [r3]
 3346              	.L222:
1130:..\src/interruptions.c ****             }
1131:..\src/interruptions.c **** 
1132:..\src/interruptions.c ****             // ----- current PID control -----
1133:..\src/interruptions.c **** 
1134:..\src/interruptions.c ****             pwm_input = 0;
 3347              		.loc 1 1134 0
 3348 01e0 0023     		movs	r3, #0
 3349 01e2 FB64     		str	r3, [r7, #76]
1135:..\src/interruptions.c **** 
1136:..\src/interruptions.c ****             // Proportional
1137:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3350              		.loc 1 1137 0
 3351 01e4 7B69     		ldr	r3, [r7, #20]
 3352 01e6 002B     		cmp	r3, #0
 3353 01e8 07D0     		beq	.L223
1138:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3354              		.loc 1 1138 0
 3355 01ea 7B69     		ldr	r3, [r7, #20]
 3356 01ec 7A68     		ldr	r2, [r7, #4]
 3357 01ee 02FB03F3 		mul	r3, r2, r3
 3358 01f2 1B14     		asrs	r3, r3, #16
 3359 01f4 FA6C     		ldr	r2, [r7, #76]
 3360 01f6 1344     		add	r3, r3, r2
 3361 01f8 FB64     		str	r3, [r7, #76]
 3362              	.L223:
1139:..\src/interruptions.c **** 
1140:..\src/interruptions.c ****             // Integral
1141:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3363              		.loc 1 1141 0
 3364 01fa 3B69     		ldr	r3, [r7, #16]
 3365 01fc 002B     		cmp	r3, #0
 3366 01fe 08D0     		beq	.L224
1142:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 3367              		.loc 1 1142 0
 3368 0200 2C4B     		ldr	r3, .L266+36
 3369 0202 1B68     		ldr	r3, [r3]
 3370 0204 3A69     		ldr	r2, [r7, #16]
 3371 0206 02FB03F3 		mul	r3, r2, r3
 3372 020a 1B14     		asrs	r3, r3, #16
 3373 020c FA6C     		ldr	r2, [r7, #76]
 3374 020e 1344     		add	r3, r3, r2
 3375 0210 FB64     		str	r3, [r7, #76]
 3376              	.L224:
1143:..\src/interruptions.c **** 
1144:..\src/interruptions.c ****             // Derivative
1145:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3377              		.loc 1 1145 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 82


 3378 0212 FB68     		ldr	r3, [r7, #12]
 3379 0214 002B     		cmp	r3, #0
 3380 0216 0AD0     		beq	.L225
1146:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 3381              		.loc 1 1146 0
 3382 0218 294B     		ldr	r3, .L266+48
 3383 021a 1B68     		ldr	r3, [r3]
 3384 021c 7A68     		ldr	r2, [r7, #4]
 3385 021e D31A     		subs	r3, r2, r3
 3386 0220 FA68     		ldr	r2, [r7, #12]
 3387 0222 02FB03F3 		mul	r3, r2, r3
 3388 0226 1B14     		asrs	r3, r3, #16
 3389 0228 FA6C     		ldr	r2, [r7, #76]
 3390 022a 1344     		add	r3, r3, r2
 3391 022c FB64     		str	r3, [r7, #76]
 3392              	.L225:
1147:..\src/interruptions.c **** 
1148:..\src/interruptions.c ****             // pwm_input saturation
1149:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3393              		.loc 1 1149 0
 3394 022e FB6C     		ldr	r3, [r7, #76]
 3395 0230 13F1640F 		cmn	r3, #100
 3396 0234 03DA     		bge	.L226
1150:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3397              		.loc 1 1150 0
 3398 0236 6FF06303 		mvn	r3, #99
 3399 023a FB64     		str	r3, [r7, #76]
 3400 023c 04E0     		b	.L227
 3401              	.L226:
1151:..\src/interruptions.c ****             else {
1152:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE_DC)
 3402              		.loc 1 1152 0
 3403 023e FB6C     		ldr	r3, [r7, #76]
 3404 0240 642B     		cmp	r3, #100
 3405 0242 01DD     		ble	.L227
1153:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE_DC;
 3406              		.loc 1 1153 0
 3407 0244 6423     		movs	r3, #100
 3408 0246 FB64     		str	r3, [r7, #76]
 3409              	.L227:
1154:..\src/interruptions.c ****             }
1155:..\src/interruptions.c **** 
1156:..\src/interruptions.c ****             // Update previous current
1157:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3410              		.loc 1 1157 0
 3411 0248 1D4A     		ldr	r2, .L266+48
 3412 024a 7B68     		ldr	r3, [r7, #4]
 3413 024c 1360     		str	r3, [r2]
1158:..\src/interruptions.c **** 
1159:..\src/interruptions.c ****         break;
 3414              		.loc 1 1159 0
 3415 024e 1CE1     		b	.L206
 3416              	.L207:
1160:..\src/interruptions.c **** 
1161:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1162:..\src/interruptions.c ****         case CONTROL_ANGLE:
1163:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 83


 3417              		.loc 1 1163 0
 3418 0250 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3419 0254 0F4A     		ldr	r2, .L266+4
 3420 0256 1B01     		lsls	r3, r3, #4
 3421 0258 1344     		add	r3, r3, r2
 3422 025a 1A68     		ldr	r2, [r3]
 3423 025c 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3424 0260 0E49     		ldr	r1, .L266+12
 3425 0262 3420     		movs	r0, #52
 3426 0264 00FB03F3 		mul	r3, r0, r3
 3427 0268 0B44     		add	r3, r3, r1
 3428 026a 1B68     		ldr	r3, [r3]
 3429 026c D31A     		subs	r3, r2, r3
 3430 026e BB60     		str	r3, [r7, #8]
1164:..\src/interruptions.c **** 
1165:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3431              		.loc 1 1165 0
 3432 0270 0B4B     		ldr	r3, .L266+16
 3433 0272 1A68     		ldr	r2, [r3]
 3434 0274 BB68     		ldr	r3, [r7, #8]
 3435 0276 1344     		add	r3, r3, r2
 3436 0278 094A     		ldr	r2, .L266+16
 3437 027a 1360     		str	r3, [r2]
1166:..\src/interruptions.c **** 
1167:..\src/interruptions.c ****             // anti-windup (for integral control)
1168:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3438              		.loc 1 1168 0
 3439 027c 084B     		ldr	r3, .L266+16
 3440 027e 1B68     		ldr	r3, [r3]
 3441 0280 B3F57A7F 		cmp	r3, #1000
 3442 0284 1EDD     		ble	.L228
1169:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3443              		.loc 1 1169 0
 3444 0286 064B     		ldr	r3, .L266+16
 3445 0288 4FF47A72 		mov	r2, #1000
 3446 028c 1A60     		str	r2, [r3]
 3447 028e 21E0     		b	.L229
 3448              	.L267:
 3449              		.align	2
 3450              	.L266:
 3451 0290 00000000 		.word	c_mem
 3452 0294 00000000 		.word	g_ref
 3453 0298 00000000 		.word	g_refOld
 3454 029c 00000000 		.word	g_meas
 3455 02a0 90000000 		.word	pos_error_sum.10574
 3456 02a4 80F0FA02 		.word	50000000
 3457 02a8 800F05FD 		.word	-50000000
 3458 02ac 94000000 		.word	prev_pos_err.10576
 3459 02b0 98000000 		.word	motor_dir.10579
 3460 02b4 9C000000 		.word	curr_error_sum.10575
 3461 02b8 A0860100 		.word	100000
 3462 02bc 6079FEFF 		.word	-100000
 3463 02c0 A0000000 		.word	prev_curr_err.10577
 3464              	.L228:
1170:..\src/interruptions.c ****             else {
1171:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3465              		.loc 1 1171 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 84


 3466 02c4 9D4B     		ldr	r3, .L268
 3467 02c6 1B68     		ldr	r3, [r3]
 3468 02c8 13F57A7F 		cmn	r3, #1000
 3469 02cc 02DA     		bge	.L229
1172:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3470              		.loc 1 1172 0
 3471 02ce 9B4B     		ldr	r3, .L268
 3472 02d0 9B4A     		ldr	r2, .L268+4
 3473 02d2 1A60     		str	r2, [r3]
 3474              	.L229:
1173:..\src/interruptions.c ****             }
1174:..\src/interruptions.c **** 
1175:..\src/interruptions.c ****             // Proportional
1176:..\src/interruptions.c ****             if (k_p != 0) 
 3475              		.loc 1 1176 0
 3476 02d4 BB6B     		ldr	r3, [r7, #56]
 3477 02d6 002B     		cmp	r3, #0
 3478 02d8 05D0     		beq	.L230
1177:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3479              		.loc 1 1177 0
 3480 02da BB6B     		ldr	r3, [r7, #56]
 3481 02dc BA68     		ldr	r2, [r7, #8]
 3482 02de 02FB03F3 		mul	r3, r2, r3
 3483 02e2 1B14     		asrs	r3, r3, #16
 3484 02e4 FB64     		str	r3, [r7, #76]
 3485              	.L230:
1178:..\src/interruptions.c ****             
1179:..\src/interruptions.c **** 
1180:..\src/interruptions.c ****             // Integral
1181:..\src/interruptions.c ****             if (k_i != 0) 
 3486              		.loc 1 1181 0
 3487 02e6 7B6B     		ldr	r3, [r7, #52]
 3488 02e8 002B     		cmp	r3, #0
 3489 02ea 08D0     		beq	.L231
1182:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3490              		.loc 1 1182 0
 3491 02ec 934B     		ldr	r3, .L268
 3492 02ee 1B68     		ldr	r3, [r3]
 3493 02f0 7A6B     		ldr	r2, [r7, #52]
 3494 02f2 02FB03F3 		mul	r3, r2, r3
 3495 02f6 1B14     		asrs	r3, r3, #16
 3496 02f8 FA6C     		ldr	r2, [r7, #76]
 3497 02fa 1344     		add	r3, r3, r2
 3498 02fc FB64     		str	r3, [r7, #76]
 3499              	.L231:
1183:..\src/interruptions.c ****             
1184:..\src/interruptions.c **** 
1185:..\src/interruptions.c ****             // Derivative
1186:..\src/interruptions.c ****             if (k_d != 0) 
 3500              		.loc 1 1186 0
 3501 02fe 3B6B     		ldr	r3, [r7, #48]
 3502 0300 002B     		cmp	r3, #0
 3503 0302 0AD0     		beq	.L232
1187:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3504              		.loc 1 1187 0
 3505 0304 8F4B     		ldr	r3, .L268+8
 3506 0306 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 85


 3507 0308 BA68     		ldr	r2, [r7, #8]
 3508 030a D31A     		subs	r3, r2, r3
 3509 030c 3A6B     		ldr	r2, [r7, #48]
 3510 030e 02FB03F3 		mul	r3, r2, r3
 3511 0312 1B14     		asrs	r3, r3, #16
 3512 0314 FA6C     		ldr	r2, [r7, #76]
 3513 0316 1344     		add	r3, r3, r2
 3514 0318 FB64     		str	r3, [r7, #76]
 3515              	.L232:
1188:..\src/interruptions.c ****             
1189:..\src/interruptions.c **** 
1190:..\src/interruptions.c ****             // Update measure
1191:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3516              		.loc 1 1191 0
 3517 031a 8A4A     		ldr	r2, .L268+8
 3518 031c BB68     		ldr	r3, [r7, #8]
 3519 031e 1360     		str	r3, [r2]
1192:..\src/interruptions.c **** 
1193:..\src/interruptions.c ****             if (pwm_input > 0)
 3520              		.loc 1 1193 0
 3521 0320 FB6C     		ldr	r3, [r7, #76]
 3522 0322 002B     		cmp	r3, #0
 3523 0324 03DD     		ble	.L233
1194:..\src/interruptions.c ****                 motor_dir = TRUE;
 3524              		.loc 1 1194 0
 3525 0326 884B     		ldr	r3, .L268+12
 3526 0328 0122     		movs	r2, #1
 3527 032a 1A70     		strb	r2, [r3]
1195:..\src/interruptions.c ****             else
1196:..\src/interruptions.c ****                 motor_dir = FALSE;
1197:..\src/interruptions.c **** 
1198:..\src/interruptions.c ****         break;
 3528              		.loc 1 1198 0
 3529 032c ADE0     		b	.L206
 3530              	.L233:
1196:..\src/interruptions.c **** 
 3531              		.loc 1 1196 0
 3532 032e 864B     		ldr	r3, .L268+12
 3533 0330 0022     		movs	r2, #0
 3534 0332 1A70     		strb	r2, [r3]
 3535              		.loc 1 1198 0
 3536 0334 A9E0     		b	.L206
 3537              	.L210:
1199:..\src/interruptions.c **** 
1200:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1201:..\src/interruptions.c ****         case CONTROL_CURRENT:
1202:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3538              		.loc 1 1202 0
 3539 0336 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3540 033a 844A     		ldr	r2, .L268+16
 3541 033c 1B01     		lsls	r3, r3, #4
 3542 033e 1344     		add	r3, r3, r2
 3543 0340 0C33     		adds	r3, r3, #12
 3544 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3545 0344 002B     		cmp	r3, #0
 3546 0346 00F09D80 		beq	.L264
 3547              		.loc 1 1202 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 86


 3548 034a 814B     		ldr	r3, .L268+20
 3549 034c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3550 034e 002B     		cmp	r3, #0
 3551 0350 00F09880 		beq	.L264
1203:..\src/interruptions.c ****                 
1204:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3552              		.loc 1 1204 0 is_stmt 1
 3553 0354 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3554 0358 7C4A     		ldr	r2, .L268+16
 3555 035a 1B01     		lsls	r3, r3, #4
 3556 035c 1344     		add	r3, r3, r2
 3557 035e 0433     		adds	r3, r3, #4
 3558 0360 1B68     		ldr	r3, [r3]
 3559 0362 BB64     		str	r3, [r7, #72]
1205:..\src/interruptions.c **** 
1206:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3560              		.loc 1 1206 0
 3561 0364 3B6C     		ldr	r3, [r7, #64]
 3562 0366 B3F95C30 		ldrsh	r3, [r3, #92]
 3563 036a 1A46     		mov	r2, r3
 3564 036c BB6C     		ldr	r3, [r7, #72]
 3565 036e 9A42     		cmp	r2, r3
 3566 0370 04DA     		bge	.L236
1207:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3567              		.loc 1 1207 0
 3568 0372 3B6C     		ldr	r3, [r7, #64]
 3569 0374 B3F95C30 		ldrsh	r3, [r3, #92]
 3570 0378 BB64     		str	r3, [r7, #72]
 3571 037a 0BE0     		b	.L237
 3572              	.L236:
1208:..\src/interruptions.c ****                 else {
1209:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3573              		.loc 1 1209 0
 3574 037c 3B6C     		ldr	r3, [r7, #64]
 3575 037e B3F95C30 		ldrsh	r3, [r3, #92]
 3576 0382 5A42     		negs	r2, r3
 3577 0384 BB6C     		ldr	r3, [r7, #72]
 3578 0386 9A42     		cmp	r2, r3
 3579 0388 04DD     		ble	.L237
1210:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3580              		.loc 1 1210 0
 3581 038a 3B6C     		ldr	r3, [r7, #64]
 3582 038c B3F95C30 		ldrsh	r3, [r3, #92]
 3583 0390 5B42     		negs	r3, r3
 3584 0392 BB64     		str	r3, [r7, #72]
 3585              	.L237:
1211:..\src/interruptions.c ****                 }
1212:..\src/interruptions.c ****                 
1213:..\src/interruptions.c ****                 // current error
1214:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3586              		.loc 1 1214 0
 3587 0394 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3588 0398 6E4A     		ldr	r2, .L268+24
 3589 039a 3421     		movs	r1, #52
 3590 039c 01FB03F3 		mul	r3, r1, r3
 3591 03a0 1344     		add	r3, r3, r2
 3592 03a2 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 87


 3593 03a4 1B68     		ldr	r3, [r3]
 3594 03a6 BA6C     		ldr	r2, [r7, #72]
 3595 03a8 D31A     		subs	r3, r2, r3
 3596 03aa 7B60     		str	r3, [r7, #4]
1215:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3597              		.loc 1 1215 0
 3598 03ac 6A4B     		ldr	r3, .L268+28
 3599 03ae 1A68     		ldr	r2, [r3]
 3600 03b0 7B68     		ldr	r3, [r7, #4]
 3601 03b2 1344     		add	r3, r3, r2
 3602 03b4 684A     		ldr	r2, .L268+28
 3603 03b6 1360     		str	r3, [r2]
1216:..\src/interruptions.c ****                 
1217:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3604              		.loc 1 1217 0
 3605 03b8 674B     		ldr	r3, .L268+28
 3606 03ba 1B68     		ldr	r3, [r3]
 3607 03bc 674A     		ldr	r2, .L268+32
 3608 03be 9342     		cmp	r3, r2
 3609 03c0 03DD     		ble	.L238
1218:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3610              		.loc 1 1218 0
 3611 03c2 654B     		ldr	r3, .L268+28
 3612 03c4 654A     		ldr	r2, .L268+32
 3613 03c6 1A60     		str	r2, [r3]
 3614 03c8 07E0     		b	.L239
 3615              	.L238:
1219:..\src/interruptions.c ****                 else {
1220:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3616              		.loc 1 1220 0
 3617 03ca 634B     		ldr	r3, .L268+28
 3618 03cc 1B68     		ldr	r3, [r3]
 3619 03ce 644A     		ldr	r2, .L268+36
 3620 03d0 9342     		cmp	r3, r2
 3621 03d2 02DA     		bge	.L239
1221:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3622              		.loc 1 1221 0
 3623 03d4 604B     		ldr	r3, .L268+28
 3624 03d6 624A     		ldr	r2, .L268+36
 3625 03d8 1A60     		str	r2, [r3]
 3626              	.L239:
1222:..\src/interruptions.c ****                 }
1223:..\src/interruptions.c **** 
1224:..\src/interruptions.c ****                 pwm_input = 0;
 3627              		.loc 1 1224 0
 3628 03da 0023     		movs	r3, #0
 3629 03dc FB64     		str	r3, [r7, #76]
1225:..\src/interruptions.c **** 
1226:..\src/interruptions.c ****                 // Proportional
1227:..\src/interruptions.c ****                 if (k_p_c != 0)
 3630              		.loc 1 1227 0
 3631 03de FB6A     		ldr	r3, [r7, #44]
 3632 03e0 002B     		cmp	r3, #0
 3633 03e2 07D0     		beq	.L240
1228:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3634              		.loc 1 1228 0
 3635 03e4 FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 88


 3636 03e6 7A68     		ldr	r2, [r7, #4]
 3637 03e8 02FB03F3 		mul	r3, r2, r3
 3638 03ec 1B14     		asrs	r3, r3, #16
 3639 03ee FA6C     		ldr	r2, [r7, #76]
 3640 03f0 1344     		add	r3, r3, r2
 3641 03f2 FB64     		str	r3, [r7, #76]
 3642              	.L240:
1229:..\src/interruptions.c **** 
1230:..\src/interruptions.c ****                 // Integral
1231:..\src/interruptions.c ****                 if (k_i_c != 0)
 3643              		.loc 1 1231 0
 3644 03f4 BB6A     		ldr	r3, [r7, #40]
 3645 03f6 002B     		cmp	r3, #0
 3646 03f8 08D0     		beq	.L241
1232:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3647              		.loc 1 1232 0
 3648 03fa 574B     		ldr	r3, .L268+28
 3649 03fc 1B68     		ldr	r3, [r3]
 3650 03fe BA6A     		ldr	r2, [r7, #40]
 3651 0400 02FB03F3 		mul	r3, r2, r3
 3652 0404 1B14     		asrs	r3, r3, #16
 3653 0406 FA6C     		ldr	r2, [r7, #76]
 3654 0408 1344     		add	r3, r3, r2
 3655 040a FB64     		str	r3, [r7, #76]
 3656              	.L241:
1233:..\src/interruptions.c **** 
1234:..\src/interruptions.c ****                 // Derivative
1235:..\src/interruptions.c ****                 if (k_d_c != 0)
 3657              		.loc 1 1235 0
 3658 040c 7B6A     		ldr	r3, [r7, #36]
 3659 040e 002B     		cmp	r3, #0
 3660 0410 0AD0     		beq	.L242
1236:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3661              		.loc 1 1236 0
 3662 0412 544B     		ldr	r3, .L268+40
 3663 0414 1B68     		ldr	r3, [r3]
 3664 0416 7A68     		ldr	r2, [r7, #4]
 3665 0418 D31A     		subs	r3, r2, r3
 3666 041a 7A6A     		ldr	r2, [r7, #36]
 3667 041c 02FB03F3 		mul	r3, r2, r3
 3668 0420 1B14     		asrs	r3, r3, #16
 3669 0422 FA6C     		ldr	r2, [r7, #76]
 3670 0424 1344     		add	r3, r3, r2
 3671 0426 FB64     		str	r3, [r7, #76]
 3672              	.L242:
1237:..\src/interruptions.c ****                 
1238:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3673              		.loc 1 1238 0
 3674 0428 4E4A     		ldr	r2, .L268+40
 3675 042a 7B68     		ldr	r3, [r7, #4]
 3676 042c 1360     		str	r3, [r2]
1239:..\src/interruptions.c ****                 
1240:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3677              		.loc 1 1240 0
 3678 042e FB6C     		ldr	r3, [r7, #76]
 3679 0430 002B     		cmp	r3, #0
 3680 0432 03DB     		blt	.L243
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 89


1241:..\src/interruptions.c ****                     motor_dir = TRUE;
 3681              		.loc 1 1241 0
 3682 0434 444B     		ldr	r3, .L268+12
 3683 0436 0122     		movs	r2, #1
 3684 0438 1A70     		strb	r2, [r3]
1242:..\src/interruptions.c ****                 else
1243:..\src/interruptions.c ****                     motor_dir = FALSE;
1244:..\src/interruptions.c ****             }
1245:..\src/interruptions.c ****         break;
 3685              		.loc 1 1245 0
 3686 043a 23E0     		b	.L264
 3687              	.L243:
1243:..\src/interruptions.c ****             }
 3688              		.loc 1 1243 0
 3689 043c 424B     		ldr	r3, .L268+12
 3690 043e 0022     		movs	r2, #0
 3691 0440 1A70     		strb	r2, [r3]
 3692              		.loc 1 1245 0
 3693 0442 1FE0     		b	.L264
 3694              	.L209:
1246:..\src/interruptions.c ****         
1247:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1248:..\src/interruptions.c ****         case CONTROL_PWM:
1249:..\src/interruptions.c **** 
1250:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3695              		.loc 1 1250 0
 3696 0444 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3697 0448 404A     		ldr	r2, .L268+16
 3698 044a 1B01     		lsls	r3, r3, #4
 3699 044c 1344     		add	r3, r3, r2
 3700 044e 0833     		adds	r3, r3, #8
 3701 0450 1B68     		ldr	r3, [r3]
 3702 0452 FB64     		str	r3, [r7, #76]
1251:..\src/interruptions.c **** 
1252:..\src/interruptions.c ****             if (pwm_input > 0) 
 3703              		.loc 1 1252 0
 3704 0454 FB6C     		ldr	r3, [r7, #76]
 3705 0456 002B     		cmp	r3, #0
 3706 0458 03DD     		ble	.L244
1253:..\src/interruptions.c ****                 motor_dir = TRUE;
 3707              		.loc 1 1253 0
 3708 045a 3B4B     		ldr	r3, .L268+12
 3709 045c 0122     		movs	r2, #1
 3710 045e 1A70     		strb	r2, [r3]
 3711 0460 02E0     		b	.L245
 3712              	.L244:
1254:..\src/interruptions.c ****             else 
1255:..\src/interruptions.c ****                 motor_dir = FALSE;
 3713              		.loc 1 1255 0
 3714 0462 394B     		ldr	r3, .L268+12
 3715 0464 0022     		movs	r2, #0
 3716 0466 1A70     		strb	r2, [r3]
 3717              	.L245:
1256:..\src/interruptions.c ****             
1257:..\src/interruptions.c **** 
1258:..\src/interruptions.c ****             // pwm_input saturation
1259:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 90


 3718              		.loc 1 1259 0
 3719 0468 FB6C     		ldr	r3, [r7, #76]
 3720 046a 13F1640F 		cmn	r3, #100
 3721 046e 03DA     		bge	.L246
1260:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3722              		.loc 1 1260 0
 3723 0470 6FF06303 		mvn	r3, #99
 3724 0474 FB64     		str	r3, [r7, #76]
1261:..\src/interruptions.c ****             else {
1262:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE_DC) 
1263:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
1264:..\src/interruptions.c ****         	}
1265:..\src/interruptions.c **** 
1266:..\src/interruptions.c ****         break;
 3725              		.loc 1 1266 0
 3726 0476 07E0     		b	.L265
 3727              	.L246:
1262:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
 3728              		.loc 1 1262 0
 3729 0478 FB6C     		ldr	r3, [r7, #76]
 3730 047a 642B     		cmp	r3, #100
 3731 047c 04DD     		ble	.L265
1263:..\src/interruptions.c ****         	}
 3732              		.loc 1 1263 0
 3733 047e 6423     		movs	r3, #100
 3734 0480 FB64     		str	r3, [r7, #76]
 3735              		.loc 1 1266 0
 3736 0482 01E0     		b	.L265
 3737              	.L264:
1245:..\src/interruptions.c ****         
 3738              		.loc 1 1245 0
 3739 0484 00BF     		nop
 3740 0486 00E0     		b	.L206
 3741              	.L265:
 3742              		.loc 1 1266 0
 3743 0488 00BF     		nop
 3744              	.L206:
1267:..\src/interruptions.c ****             
1268:..\src/interruptions.c ****     }
1269:..\src/interruptions.c **** 
1270:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1271:..\src/interruptions.c **** 
1272:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3745              		.loc 1 1272 0
 3746 048a FB6C     		ldr	r3, [r7, #76]
 3747 048c 642B     		cmp	r3, #100
 3748 048e 01DD     		ble	.L248
1273:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3749              		.loc 1 1273 0
 3750 0490 6423     		movs	r3, #100
 3751 0492 FB64     		str	r3, [r7, #76]
 3752              	.L248:
1274:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3753              		.loc 1 1274 0
 3754 0494 FB6C     		ldr	r3, [r7, #76]
 3755 0496 13F1640F 		cmn	r3, #100
 3756 049a 02DA     		bge	.L249
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 91


1275:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3757              		.loc 1 1275 0
 3758 049c 6FF06303 		mvn	r3, #99
 3759 04a0 FB64     		str	r3, [r7, #76]
 3760              	.L249:
1276:..\src/interruptions.c **** 
1277:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3761              		.loc 1 1277 0
 3762 04a2 3B6C     		ldr	r3, [r7, #64]
 3763 04a4 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3764 04a8 012B     		cmp	r3, #1
 3765 04aa 0DD0     		beq	.L250
1278:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[0]) >> 10;
 3766              		.loc 1 1278 0
 3767 04ac FB6C     		ldr	r3, [r7, #76]
 3768 04ae 9B02     		lsls	r3, r3, #10
 3769 04b0 2D4A     		ldr	r2, .L268+44
 3770 04b2 82FB0312 		smull	r1, r2, r2, r3
 3771 04b6 5211     		asrs	r2, r2, #5
 3772 04b8 DB17     		asrs	r3, r3, #31
 3773 04ba D31A     		subs	r3, r2, r3
 3774 04bc 2B4A     		ldr	r2, .L268+48
 3775 04be 1288     		ldrh	r2, [r2]
 3776 04c0 02FB03F3 		mul	r3, r2, r3
 3777 04c4 9B12     		asrs	r3, r3, #10
 3778 04c6 FB64     		str	r3, [r7, #76]
 3779              	.L250:
1279:..\src/interruptions.c ****  
1280:..\src/interruptions.c ****     //// RATE LIMITER ////
1281:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3780              		.loc 1 1281 0
 3781 04c8 294B     		ldr	r3, .L268+52
 3782 04ca 1B68     		ldr	r3, [r3]
 3783 04cc FA6C     		ldr	r2, [r7, #76]
 3784 04ce D31A     		subs	r3, r2, r3
 3785 04d0 3A6C     		ldr	r2, [r7, #64]
 3786 04d2 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3787 04d6 9342     		cmp	r3, r2
 3788 04d8 08DD     		ble	.L251
1282:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3789              		.loc 1 1282 0
 3790 04da 3B6C     		ldr	r3, [r7, #64]
 3791 04dc 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3792 04e0 1A46     		mov	r2, r3
 3793 04e2 234B     		ldr	r3, .L268+52
 3794 04e4 1B68     		ldr	r3, [r3]
 3795 04e6 1344     		add	r3, r3, r2
 3796 04e8 FB64     		str	r3, [r7, #76]
 3797 04ea 10E0     		b	.L252
 3798              	.L251:
1283:..\src/interruptions.c ****     }
1284:..\src/interruptions.c ****     else {
1285:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3799              		.loc 1 1285 0
 3800 04ec 204B     		ldr	r3, .L268+52
 3801 04ee 1B68     		ldr	r3, [r3]
 3802 04f0 FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 92


 3803 04f2 D21A     		subs	r2, r2, r3
 3804 04f4 3B6C     		ldr	r3, [r7, #64]
 3805 04f6 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3806 04fa 5B42     		negs	r3, r3
 3807 04fc 9A42     		cmp	r2, r3
 3808 04fe 06DA     		bge	.L252
1286:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3809              		.loc 1 1286 0
 3810 0500 1B4B     		ldr	r3, .L268+52
 3811 0502 1B68     		ldr	r3, [r3]
 3812 0504 3A6C     		ldr	r2, [r7, #64]
 3813 0506 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3814 050a 9B1A     		subs	r3, r3, r2
 3815 050c FB64     		str	r3, [r7, #76]
 3816              	.L252:
1287:..\src/interruptions.c ****     }
1288:..\src/interruptions.c ****     
1289:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3817              		.loc 1 1289 0
 3818 050e FB6C     		ldr	r3, [r7, #76]
 3819 0510 642B     		cmp	r3, #100
 3820 0512 01DD     		ble	.L253
1290:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3821              		.loc 1 1290 0
 3822 0514 6423     		movs	r3, #100
 3823 0516 FB64     		str	r3, [r7, #76]
 3824              	.L253:
1291:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3825              		.loc 1 1291 0
 3826 0518 FB6C     		ldr	r3, [r7, #76]
 3827 051a 13F1640F 		cmn	r3, #100
 3828 051e 02DA     		bge	.L254
1292:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3829              		.loc 1 1292 0
 3830 0520 6FF06303 		mvn	r3, #99
 3831 0524 FB64     		str	r3, [r7, #76]
 3832              	.L254:
1293:..\src/interruptions.c ****     
1294:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3833              		.loc 1 1294 0
 3834 0526 124A     		ldr	r2, .L268+52
 3835 0528 FB6C     		ldr	r3, [r7, #76]
 3836 052a 1360     		str	r3, [r2]
1295:..\src/interruptions.c **** 	
1296:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3837              		.loc 1 1296 0
 3838 052c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3839 0530 FA6C     		ldr	r2, [r7, #76]
 3840 0532 002A     		cmp	r2, #0
 3841 0534 1EDB     		blt	.L255
 3842              		.loc 1 1296 0 is_stmt 0 discriminator 1
 3843 0536 0121     		movs	r1, #1
 3844 0538 1EE0     		b	.L256
 3845              	.L269:
 3846 053a 00BF     		.align	2
 3847              	.L268:
 3848 053c 90000000 		.word	pos_error_sum.10574
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 93


 3849 0540 18FCFFFF 		.word	-1000
 3850 0544 94000000 		.word	prev_pos_err.10576
 3851 0548 98000000 		.word	motor_dir.10579
 3852 054c 00000000 		.word	g_ref
 3853 0550 00000000 		.word	tension_valid
 3854 0554 00000000 		.word	g_meas
 3855 0558 9C000000 		.word	curr_error_sum.10575
 3856 055c A0860100 		.word	100000
 3857 0560 6079FEFF 		.word	-100000
 3858 0564 A0000000 		.word	prev_curr_err.10577
 3859 0568 1F85EB51 		.word	1374389535
 3860 056c 00000000 		.word	dev_pwm_limit
 3861 0570 A4000000 		.word	prev_pwm.10578
 3862              	.L255:
 3863              		.loc 1 1296 0 discriminator 2
 3864 0574 4FF0FF31 		mov	r1, #-1
 3865              	.L256:
 3866              		.loc 1 1296 0 discriminator 4
 3867 0578 5B4A     		ldr	r2, .L270
 3868 057a D154     		strb	r1, [r2, r3]
1297:..\src/interruptions.c ****     
1298:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3869              		.loc 1 1298 0 is_stmt 1 discriminator 4
 3870 057c 3B6C     		ldr	r3, [r7, #64]
 3871 057e 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3872 0582 012B     		cmp	r3, #1
 3873 0584 40F09880 		bne	.L257
1299:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1300:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3874              		.loc 1 1300 0
 3875 0588 3B6C     		ldr	r3, [r7, #64]
 3876 058a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3877 058e 012B     		cmp	r3, #1
 3878 0590 00F08F80 		beq	.L258
 3879              		.loc 1 1300 0 is_stmt 0 discriminator 1
 3880 0594 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3881 0598 544A     		ldr	r2, .L270+4
 3882 059a 3421     		movs	r1, #52
 3883 059c 01FB03F3 		mul	r3, r1, r3
 3884 05a0 1344     		add	r3, r3, r2
 3885 05a2 1A68     		ldr	r2, [r3]
 3886 05a4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3887 05a8 5149     		ldr	r1, .L270+8
 3888 05aa 3420     		movs	r0, #52
 3889 05ac 00FB03F3 		mul	r3, r0, r3
 3890 05b0 0B44     		add	r3, r3, r1
 3891 05b2 1B68     		ldr	r3, [r3]
 3892 05b4 D31A     		subs	r3, r2, r3
 3893 05b6 312B     		cmp	r3, #49
 3894 05b8 7BDC     		bgt	.L258
1301:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3895              		.loc 1 1301 0 is_stmt 1 discriminator 2
 3896 05ba 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3897 05be 4B4A     		ldr	r2, .L270+4
 3898 05c0 3421     		movs	r1, #52
 3899 05c2 01FB03F3 		mul	r3, r1, r3
 3900 05c6 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 94


 3901 05c8 1A68     		ldr	r2, [r3]
 3902 05ca 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3903 05ce 4849     		ldr	r1, .L270+8
 3904 05d0 3420     		movs	r0, #52
 3905 05d2 00FB03F3 		mul	r3, r0, r3
 3906 05d6 0B44     		add	r3, r3, r1
 3907 05d8 1B68     		ldr	r3, [r3]
 3908 05da D31A     		subs	r3, r2, r3
1300:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3909              		.loc 1 1300 0 discriminator 2
 3910 05dc 13F1310F 		cmn	r3, #49
 3911 05e0 67DB     		blt	.L258
1302:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3912              		.loc 1 1302 0
 3913 05e2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3914 05e6 434A     		ldr	r2, .L270+12
 3915 05e8 1B01     		lsls	r3, r3, #4
 3916 05ea 1344     		add	r3, r3, r2
 3917 05ec 1A68     		ldr	r2, [r3]
 3918 05ee 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3919 05f2 4149     		ldr	r1, .L270+16
 3920 05f4 1B01     		lsls	r3, r3, #4
 3921 05f6 0B44     		add	r3, r3, r1
 3922 05f8 1B68     		ldr	r3, [r3]
 3923 05fa D31A     		subs	r3, r2, r3
1301:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3924              		.loc 1 1301 0
 3925 05fc 632B     		cmp	r3, #99
 3926 05fe 58DC     		bgt	.L258
 3927              		.loc 1 1302 0
 3928 0600 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3929 0604 3B4A     		ldr	r2, .L270+12
 3930 0606 1B01     		lsls	r3, r3, #4
 3931 0608 1344     		add	r3, r3, r2
 3932 060a 1A68     		ldr	r2, [r3]
 3933 060c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3934 0610 3949     		ldr	r1, .L270+16
 3935 0612 1B01     		lsls	r3, r3, #4
 3936 0614 0B44     		add	r3, r3, r1
 3937 0616 1B68     		ldr	r3, [r3]
 3938 0618 D31A     		subs	r3, r2, r3
 3939 061a 13F1630F 		cmn	r3, #99
 3940 061e 48DB     		blt	.L258
1303:..\src/interruptions.c ****             position_counter++;
 3941              		.loc 1 1303 0
 3942 0620 364B     		ldr	r3, .L270+20
 3943 0622 1B68     		ldr	r3, [r3]
 3944 0624 0133     		adds	r3, r3, #1
 3945 0626 354A     		ldr	r2, .L270+20
 3946 0628 1360     		str	r3, [r2]
1304:..\src/interruptions.c ****             
1305:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3947              		.loc 1 1305 0
 3948 062a 344B     		ldr	r3, .L270+20
 3949 062c 1B68     		ldr	r3, [r3]
 3950 062e F92B     		cmp	r3, #249
 3951 0630 42D9     		bls	.L257
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 95


1306:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag[MOTOR_IDX] == 
 3952              		.loc 1 1306 0
 3953 0632 3B6C     		ldr	r3, [r7, #64]
 3954 0634 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3955 0638 002B     		cmp	r3, #0
 3956 063a 13D1     		bne	.L260
 3957              		.loc 1 1306 0 is_stmt 0 discriminator 1
 3958 063c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3959 0640 2F4A     		ldr	r2, .L270+24
 3960 0642 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3961 0644 002B     		cmp	r3, #0
 3962 0646 0DD1     		bne	.L260
1307:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3963              		.loc 1 1307 0 is_stmt 1
 3964 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3965 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3966 0650 2749     		ldr	r1, .L270+8
 3967 0652 3420     		movs	r0, #52
 3968 0654 00FB02F2 		mul	r2, r0, r2
 3969 0658 0A44     		add	r2, r2, r1
 3970 065a 1268     		ldr	r2, [r2]
 3971 065c 2949     		ldr	r1, .L270+28
 3972 065e 1B01     		lsls	r3, r3, #4
 3973 0660 0B44     		add	r3, r3, r1
 3974 0662 1A60     		str	r2, [r3]
 3975              	.L260:
1308:..\src/interruptions.c ****                 }
1309:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3976              		.loc 1 1309 0
 3977 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3978 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3979 066c 2049     		ldr	r1, .L270+8
 3980 066e 3420     		movs	r0, #52
 3981 0670 00FB02F2 		mul	r2, r0, r2
 3982 0674 0A44     		add	r2, r2, r1
 3983 0676 1268     		ldr	r2, [r2]
 3984 0678 1F49     		ldr	r1, .L270+16
 3985 067a 1B01     		lsls	r3, r3, #4
 3986 067c 0B44     		add	r3, r3, r1
 3987 067e 1A60     		str	r2, [r3]
1310:..\src/interruptions.c ****                 
1311:..\src/interruptions.c ****                 if (position_counter == 250){
 3988              		.loc 1 1311 0
 3989 0680 1E4B     		ldr	r3, .L270+20
 3990 0682 1B68     		ldr	r3, [r3]
 3991 0684 FA2B     		cmp	r3, #250
 3992 0686 11D1     		bne	.L261
1312:..\src/interruptions.c ****                     // To do only once
1313:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 3993              		.loc 1 1313 0
 3994 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3995 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3996 0690 1749     		ldr	r1, .L270+8
 3997 0692 3420     		movs	r0, #52
 3998 0694 00FB02F2 		mul	r2, r0, r2
 3999 0698 0A44     		add	r2, r2, r1
 4000 069a 0C32     		adds	r2, r2, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 96


 4001 069c 1268     		ldr	r2, [r2]
 4002 069e 1449     		ldr	r1, .L270+8
 4003 06a0 3420     		movs	r0, #52
 4004 06a2 00FB03F3 		mul	r3, r0, r3
 4005 06a6 0B44     		add	r3, r3, r1
 4006 06a8 1433     		adds	r3, r3, #20
 4007 06aa 1A60     		str	r2, [r3]
 4008              	.L261:
1314:..\src/interruptions.c ****                 }
1315:..\src/interruptions.c ****                 pwm_input = 0;            
 4009              		.loc 1 1315 0
 4010 06ac 0023     		movs	r3, #0
 4011 06ae FB64     		str	r3, [r7, #76]
1305:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag[MOTOR_IDX] == 
 4012              		.loc 1 1305 0
 4013 06b0 02E0     		b	.L257
 4014              	.L258:
1316:..\src/interruptions.c ****             }
1317:..\src/interruptions.c ****         }
1318:..\src/interruptions.c ****         else {
1319:..\src/interruptions.c ****             position_counter = 0;
 4015              		.loc 1 1319 0
 4016 06b2 124B     		ldr	r3, .L270+20
 4017 06b4 0022     		movs	r2, #0
 4018 06b6 1A60     		str	r2, [r3]
 4019              	.L257:
1320:..\src/interruptions.c ****         }
1321:..\src/interruptions.c ****     }
1322:..\src/interruptions.c ****     
1323:..\src/interruptions.c ****     if (motor_dir)
 4020              		.loc 1 1323 0
 4021 06b8 134B     		ldr	r3, .L270+32
 4022 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4023 06bc 002B     		cmp	r3, #0
 4024 06be 03D0     		beq	.L262
1324:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 4025              		.loc 1 1324 0
 4026 06c0 0120     		movs	r0, #1
 4027 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4028 06c6 02E0     		b	.L263
 4029              	.L262:
1325:..\src/interruptions.c ****     else
1326:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 4030              		.loc 1 1326 0
 4031 06c8 0020     		movs	r0, #0
 4032 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4033              	.L263:
1327:..\src/interruptions.c **** 
1328:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 4034              		.loc 1 1328 0
 4035 06ce FB6C     		ldr	r3, [r7, #76]
 4036 06d0 002B     		cmp	r3, #0
 4037 06d2 B8BF     		it	lt
 4038 06d4 5B42     		rsblt	r3, r3, #0
 4039 06d6 9BB2     		uxth	r3, r3
 4040 06d8 1846     		mov	r0, r3
 4041 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 97


1329:..\src/interruptions.c **** }
 4042              		.loc 1 1329 0
 4043 06de 00BF     		nop
 4044 06e0 5037     		adds	r7, r7, #80
 4045              		.cfi_def_cfa_offset 8
 4046 06e2 BD46     		mov	sp, r7
 4047              		.cfi_def_cfa_register 13
 4048              		@ sp needed
 4049 06e4 80BD     		pop	{r7, pc}
 4050              	.L271:
 4051 06e6 00BF     		.align	2
 4052              	.L270:
 4053 06e8 00000000 		.word	pwm_sign
 4054 06ec 00000000 		.word	g_measOld
 4055 06f0 00000000 		.word	g_meas
 4056 06f4 00000000 		.word	g_refOld
 4057 06f8 00000000 		.word	g_ref
 4058 06fc A8000000 		.word	position_counter.10580
 4059 0700 00000000 		.word	change_ext_ref_flag
 4060 0704 00000000 		.word	g_refNew
 4061 0708 98000000 		.word	motor_dir.10579
 4062              		.cfi_endproc
 4063              	.LFE71:
 4064              		.size	motor_control_SH, .-motor_control_SH
 4065              		.section	.text.motor_control_generic,"ax",%progbits
 4066              		.align	2
 4067              		.global	motor_control_generic
 4068              		.thumb
 4069              		.thumb_func
 4070              		.type	motor_control_generic, %function
 4071              	motor_control_generic:
 4072              	.LFB72:
1330:..\src/interruptions.c **** 
1331:..\src/interruptions.c **** //==============================================================================
1332:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1333:..\src/interruptions.c **** //==============================================================================
1334:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 4073              		.loc 1 1334 0
 4074              		.cfi_startproc
 4075              		@ args = 0, pretend = 0, frame = 80
 4076              		@ frame_needed = 1, uses_anonymous_args = 0
 4077 0000 80B5     		push	{r7, lr}
 4078              		.cfi_def_cfa_offset 8
 4079              		.cfi_offset 7, -8
 4080              		.cfi_offset 14, -4
 4081 0002 94B0     		sub	sp, sp, #80
 4082              		.cfi_def_cfa_offset 88
 4083 0004 00AF     		add	r7, sp, #0
 4084              		.cfi_def_cfa_register 7
 4085 0006 0346     		mov	r3, r0
 4086 0008 FB71     		strb	r3, [r7, #7]
1335:..\src/interruptions.c ****     
1336:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 4087              		.loc 1 1336 0
 4088 000a 0023     		movs	r3, #0
 4089 000c FB64     		str	r3, [r7, #76]
1337:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 98


1338:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1339:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1340:..\src/interruptions.c **** 
1341:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 4090              		.loc 1 1341 0
 4091 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4092 0010 7422     		movs	r2, #116
 4093 0012 02FB03F3 		mul	r3, r2, r3
 4094 0016 B033     		adds	r3, r3, #176
 4095 0018 9D4A     		ldr	r2, .L363
 4096 001a 1344     		add	r3, r3, r2
 4097 001c 7B64     		str	r3, [r7, #68]
1342:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 4098              		.loc 1 1342 0
 4099 001e 7B6C     		ldr	r3, [r7, #68]
 4100 0020 93F86030 		ldrb	r3, [r3, #96]
 4101 0024 87F84330 		strb	r3, [r7, #67]
1343:..\src/interruptions.c ****     
1344:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 4102              		.loc 1 1344 0
 4103 0028 7B6C     		ldr	r3, [r7, #68]
 4104 002a 1B68     		ldr	r3, [r3]
 4105 002c FB63     		str	r3, [r7, #60]
1345:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 4106              		.loc 1 1345 0
 4107 002e 7B6C     		ldr	r3, [r7, #68]
 4108 0030 5B68     		ldr	r3, [r3, #4]
 4109 0032 BB63     		str	r3, [r7, #56]
1346:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 4110              		.loc 1 1346 0
 4111 0034 7B6C     		ldr	r3, [r7, #68]
 4112 0036 9B68     		ldr	r3, [r3, #8]
 4113 0038 7B63     		str	r3, [r7, #52]
1347:..\src/interruptions.c **** 
1348:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 4114              		.loc 1 1348 0
 4115 003a 7B6C     		ldr	r3, [r7, #68]
 4116 003c DB68     		ldr	r3, [r3, #12]
 4117 003e 3B63     		str	r3, [r7, #48]
1349:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 4118              		.loc 1 1349 0
 4119 0040 7B6C     		ldr	r3, [r7, #68]
 4120 0042 1B69     		ldr	r3, [r3, #16]
 4121 0044 FB62     		str	r3, [r7, #44]
1350:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 4122              		.loc 1 1350 0
 4123 0046 7B6C     		ldr	r3, [r7, #68]
 4124 0048 5B69     		ldr	r3, [r3, #20]
 4125 004a BB62     		str	r3, [r7, #40]
1351:..\src/interruptions.c **** 
1352:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 4126              		.loc 1 1352 0
 4127 004c 7B6C     		ldr	r3, [r7, #68]
 4128 004e 9B69     		ldr	r3, [r3, #24]
 4129 0050 7B62     		str	r3, [r7, #36]
1353:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 4130              		.loc 1 1353 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 99


 4131 0052 7B6C     		ldr	r3, [r7, #68]
 4132 0054 DB69     		ldr	r3, [r3, #28]
 4133 0056 3B62     		str	r3, [r7, #32]
1354:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 4134              		.loc 1 1354 0
 4135 0058 7B6C     		ldr	r3, [r7, #68]
 4136 005a 1B6A     		ldr	r3, [r3, #32]
 4137 005c FB61     		str	r3, [r7, #28]
1355:..\src/interruptions.c ****     
1356:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 4138              		.loc 1 1356 0
 4139 005e 7B6C     		ldr	r3, [r7, #68]
 4140 0060 5B6A     		ldr	r3, [r3, #36]
 4141 0062 BB61     		str	r3, [r7, #24]
1357:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 4142              		.loc 1 1357 0
 4143 0064 7B6C     		ldr	r3, [r7, #68]
 4144 0066 9B6A     		ldr	r3, [r3, #40]
 4145 0068 7B61     		str	r3, [r7, #20]
1358:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 4146              		.loc 1 1358 0
 4147 006a 7B6C     		ldr	r3, [r7, #68]
 4148 006c DB6A     		ldr	r3, [r3, #44]
 4149 006e 3B61     		str	r3, [r7, #16]
1359:..\src/interruptions.c **** 
1360:..\src/interruptions.c ****     // Static Variables
1361:..\src/interruptions.c **** 
1362:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1363:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1364:..\src/interruptions.c ****     
1365:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1366:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1367:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1368:..\src/interruptions.c **** 
1369:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1370:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1371:..\src/interruptions.c **** 
1372:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1373:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 4150              		.loc 1 1373 0
 4151 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4152 0072 1B01     		lsls	r3, r3, #4
 4153 0074 874A     		ldr	r2, .L363+4
 4154 0076 9918     		adds	r1, r3, r2
 4155 0078 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4156 007a 1B01     		lsls	r3, r3, #4
 4157 007c 864A     		ldr	r2, .L363+8
 4158 007e 1A44     		add	r2, r2, r3
 4159 0080 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4160 0082 1846     		mov	r0, r3
 4161 0084 FFF7FEFF 		bl	compute_reference
1374:..\src/interruptions.c ****     
1375:..\src/interruptions.c ****    
1376:..\src/interruptions.c ****     switch(MOT->control_mode) {
 4162              		.loc 1 1376 0
 4163 0088 7B6C     		ldr	r3, [r7, #68]
 4164 008a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 100


 4165 008e 032B     		cmp	r3, #3
 4166 0090 00F28182 		bhi	.L273
 4167 0094 01A2     		adr	r2, .L275
 4168 0096 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4169 009a 00BF     		.p2align 2
 4170              	.L275:
 4171 009c ED020000 		.word	.L274+1
 4172 00a0 F7040000 		.word	.L276+1
 4173 00a4 C5030000 		.word	.L277+1
 4174 00a8 AD000000 		.word	.L278+1
 4175              		.p2align 1
 4176              	.L278:
1377:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1378:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1379:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 4177              		.loc 1 1379 0
 4178 00ac 794B     		ldr	r3, .L363+4
 4179 00ae 1A68     		ldr	r2, [r3]
 4180 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4181 00b4 7949     		ldr	r1, .L363+12
 4182 00b6 3420     		movs	r0, #52
 4183 00b8 00FB03F3 		mul	r3, r0, r3
 4184 00bc 0B44     		add	r3, r3, r1
 4185 00be 1B68     		ldr	r3, [r3]
 4186 00c0 D31A     		subs	r3, r2, r3
 4187 00c2 FB60     		str	r3, [r7, #12]
1380:..\src/interruptions.c **** 
1381:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4188              		.loc 1 1381 0
 4189 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4190 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4191 00c8 7549     		ldr	r1, .L363+16
 4192 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4193 00ce FA68     		ldr	r2, [r7, #12]
 4194 00d0 0A44     		add	r2, r2, r1
 4195 00d2 7349     		ldr	r1, .L363+16
 4196 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1382:..\src/interruptions.c **** 
1383:..\src/interruptions.c ****             // error_sum saturation
1384:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 4197              		.loc 1 1384 0
 4198 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4199 00da 714A     		ldr	r2, .L363+16
 4200 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4201 00e0 704A     		ldr	r2, .L363+20
 4202 00e2 9342     		cmp	r3, r2
 4203 00e4 05DD     		ble	.L279
1385:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 4204              		.loc 1 1385 0
 4205 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4206 00e8 6D4A     		ldr	r2, .L363+16
 4207 00ea 6E49     		ldr	r1, .L363+20
 4208 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4209 00f0 0BE0     		b	.L280
 4210              	.L279:
1386:..\src/interruptions.c ****             else {
1387:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 101


 4211              		.loc 1 1387 0
 4212 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4213 00f4 6A4A     		ldr	r2, .L363+16
 4214 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4215 00fa 6B4A     		ldr	r2, .L363+24
 4216 00fc 9342     		cmp	r3, r2
 4217 00fe 04DA     		bge	.L280
1388:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 4218              		.loc 1 1388 0
 4219 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4220 0102 674A     		ldr	r2, .L363+16
 4221 0104 6849     		ldr	r1, .L363+24
 4222 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 4223              	.L280:
1389:..\src/interruptions.c ****             }
1390:..\src/interruptions.c ****             
1391:..\src/interruptions.c ****             // ------ position PID control ------
1392:..\src/interruptions.c **** 
1393:..\src/interruptions.c ****             i_ref = 0;
 4224              		.loc 1 1393 0
 4225 010a 0023     		movs	r3, #0
 4226 010c BB64     		str	r3, [r7, #72]
1394:..\src/interruptions.c ****             
1395:..\src/interruptions.c ****             // Proportional
1396:..\src/interruptions.c ****             if (k_p_dl != 0)
 4227              		.loc 1 1396 0
 4228 010e 7B6A     		ldr	r3, [r7, #36]
 4229 0110 002B     		cmp	r3, #0
 4230 0112 07D0     		beq	.L281
1397:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 4231              		.loc 1 1397 0
 4232 0114 7B6A     		ldr	r3, [r7, #36]
 4233 0116 FA68     		ldr	r2, [r7, #12]
 4234 0118 02FB03F3 		mul	r3, r2, r3
 4235 011c 1B14     		asrs	r3, r3, #16
 4236 011e BA6C     		ldr	r2, [r7, #72]
 4237 0120 1344     		add	r3, r3, r2
 4238 0122 BB64     		str	r3, [r7, #72]
 4239              	.L281:
1398:..\src/interruptions.c **** 
1399:..\src/interruptions.c ****             // Integral
1400:..\src/interruptions.c ****             if (k_i_dl != 0)
 4240              		.loc 1 1400 0
 4241 0124 3B6A     		ldr	r3, [r7, #32]
 4242 0126 002B     		cmp	r3, #0
 4243 0128 0AD0     		beq	.L282
1401:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 4244              		.loc 1 1401 0
 4245 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4246 012c 5C4A     		ldr	r2, .L363+16
 4247 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4248 0132 3A6A     		ldr	r2, [r7, #32]
 4249 0134 02FB03F3 		mul	r3, r2, r3
 4250 0138 1B14     		asrs	r3, r3, #16
 4251 013a BA6C     		ldr	r2, [r7, #72]
 4252 013c 1344     		add	r3, r3, r2
 4253 013e BB64     		str	r3, [r7, #72]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 102


 4254              	.L282:
1402:..\src/interruptions.c **** 
1403:..\src/interruptions.c ****             // Derivative
1404:..\src/interruptions.c ****             if (k_d_dl != 0)
 4255              		.loc 1 1404 0
 4256 0140 FB69     		ldr	r3, [r7, #28]
 4257 0142 002B     		cmp	r3, #0
 4258 0144 0CD0     		beq	.L283
1405:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 4259              		.loc 1 1405 0
 4260 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4261 0148 584A     		ldr	r2, .L363+28
 4262 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4263 014e FA68     		ldr	r2, [r7, #12]
 4264 0150 D31A     		subs	r3, r2, r3
 4265 0152 FA69     		ldr	r2, [r7, #28]
 4266 0154 02FB03F3 		mul	r3, r2, r3
 4267 0158 1B14     		asrs	r3, r3, #16
 4268 015a BA6C     		ldr	r2, [r7, #72]
 4269 015c 1344     		add	r3, r3, r2
 4270 015e BB64     		str	r3, [r7, #72]
 4271              	.L283:
1406:..\src/interruptions.c ****                         
1407:..\src/interruptions.c ****             // Update previous position
1408:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4272              		.loc 1 1408 0
 4273 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4274 0162 5249     		ldr	r1, .L363+28
 4275 0164 FA68     		ldr	r2, [r7, #12]
 4276 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1409:..\src/interruptions.c **** 
1410:..\src/interruptions.c ****             // motor direction depends on i_ref
1411:..\src/interruptions.c ****             if (i_ref >= 0)
 4277              		.loc 1 1411 0
 4278 016a BB6C     		ldr	r3, [r7, #72]
 4279 016c 002B     		cmp	r3, #0
 4280 016e 04DB     		blt	.L284
1412:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4281              		.loc 1 1412 0
 4282 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4283 0172 4F4A     		ldr	r2, .L363+32
 4284 0174 0121     		movs	r1, #1
 4285 0176 D154     		strb	r1, [r2, r3]
 4286 0178 03E0     		b	.L285
 4287              	.L284:
1413:..\src/interruptions.c ****             else
1414:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4288              		.loc 1 1414 0
 4289 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4290 017c 4C4A     		ldr	r2, .L363+32
 4291 017e 0021     		movs	r1, #0
 4292 0180 D154     		strb	r1, [r2, r3]
 4293              	.L285:
1415:..\src/interruptions.c **** 
1416:..\src/interruptions.c ****             // saturate max current
1417:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 4294              		.loc 1 1417 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 103


 4295 0182 7B6C     		ldr	r3, [r7, #68]
 4296 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 4297 0188 1A46     		mov	r2, r3
 4298 018a BB6C     		ldr	r3, [r7, #72]
 4299 018c 9A42     		cmp	r2, r3
 4300 018e 04DA     		bge	.L286
1418:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 4301              		.loc 1 1418 0
 4302 0190 7B6C     		ldr	r3, [r7, #68]
 4303 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 4304 0196 BB64     		str	r3, [r7, #72]
 4305 0198 0BE0     		b	.L287
 4306              	.L286:
1419:..\src/interruptions.c ****             else {
1420:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 4307              		.loc 1 1420 0
 4308 019a 7B6C     		ldr	r3, [r7, #68]
 4309 019c B3F95C30 		ldrsh	r3, [r3, #92]
 4310 01a0 5A42     		negs	r2, r3
 4311 01a2 BB6C     		ldr	r3, [r7, #72]
 4312 01a4 9A42     		cmp	r2, r3
 4313 01a6 04DD     		ble	.L287
1421:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 4314              		.loc 1 1421 0
 4315 01a8 7B6C     		ldr	r3, [r7, #68]
 4316 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 4317 01ae 5B42     		negs	r3, r3
 4318 01b0 BB64     		str	r3, [r7, #72]
 4319              	.L287:
1422:..\src/interruptions.c ****         	}
1423:..\src/interruptions.c **** 
1424:..\src/interruptions.c ****             // current error and curr error sum
1425:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 4320              		.loc 1 1425 0
 4321 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4322 01b6 394A     		ldr	r2, .L363+12
 4323 01b8 3421     		movs	r1, #52
 4324 01ba 01FB03F3 		mul	r3, r1, r3
 4325 01be 1344     		add	r3, r3, r2
 4326 01c0 0C33     		adds	r3, r3, #12
 4327 01c2 1B68     		ldr	r3, [r3]
 4328 01c4 BA6C     		ldr	r2, [r7, #72]
 4329 01c6 D31A     		subs	r3, r2, r3
 4330 01c8 BB60     		str	r3, [r7, #8]
1426:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 4331              		.loc 1 1426 0
 4332 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4333 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4334 01ce 3949     		ldr	r1, .L363+36
 4335 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4336 01d4 BA68     		ldr	r2, [r7, #8]
 4337 01d6 0A44     		add	r2, r2, r1
 4338 01d8 3649     		ldr	r1, .L363+36
 4339 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1427:..\src/interruptions.c ****             
1428:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4340              		.loc 1 1428 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 104


 4341 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4342 01e0 344A     		ldr	r2, .L363+36
 4343 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4344 01e6 344A     		ldr	r2, .L363+40
 4345 01e8 9342     		cmp	r3, r2
 4346 01ea 05DD     		ble	.L288
1429:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4347              		.loc 1 1429 0
 4348 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4349 01ee 314A     		ldr	r2, .L363+36
 4350 01f0 3149     		ldr	r1, .L363+40
 4351 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 4352 01f6 0BE0     		b	.L289
 4353              	.L288:
1430:..\src/interruptions.c ****             else {
1431:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 4354              		.loc 1 1431 0
 4355 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4356 01fa 2E4A     		ldr	r2, .L363+36
 4357 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4358 0200 2E4A     		ldr	r2, .L363+44
 4359 0202 9342     		cmp	r3, r2
 4360 0204 04DA     		bge	.L289
1432:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4361              		.loc 1 1432 0
 4362 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4363 0208 2A4A     		ldr	r2, .L363+36
 4364 020a 2C49     		ldr	r1, .L363+44
 4365 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 4366              	.L289:
1433:..\src/interruptions.c ****             }
1434:..\src/interruptions.c **** 
1435:..\src/interruptions.c ****             // ----- current PID control -----
1436:..\src/interruptions.c **** 
1437:..\src/interruptions.c ****             pwm_input = 0;
 4367              		.loc 1 1437 0
 4368 0210 0023     		movs	r3, #0
 4369 0212 FB64     		str	r3, [r7, #76]
1438:..\src/interruptions.c **** 
1439:..\src/interruptions.c ****             // Proportional
1440:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 4370              		.loc 1 1440 0
 4371 0214 BB69     		ldr	r3, [r7, #24]
 4372 0216 002B     		cmp	r3, #0
 4373 0218 07D0     		beq	.L290
1441:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 4374              		.loc 1 1441 0
 4375 021a BB69     		ldr	r3, [r7, #24]
 4376 021c BA68     		ldr	r2, [r7, #8]
 4377 021e 02FB03F3 		mul	r3, r2, r3
 4378 0222 1B14     		asrs	r3, r3, #16
 4379 0224 FA6C     		ldr	r2, [r7, #76]
 4380 0226 1344     		add	r3, r3, r2
 4381 0228 FB64     		str	r3, [r7, #76]
 4382              	.L290:
1442:..\src/interruptions.c **** 
1443:..\src/interruptions.c ****             // Integral
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 105


1444:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 4383              		.loc 1 1444 0
 4384 022a 7B69     		ldr	r3, [r7, #20]
 4385 022c 002B     		cmp	r3, #0
 4386 022e 0AD0     		beq	.L291
1445:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4387              		.loc 1 1445 0
 4388 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4389 0232 204A     		ldr	r2, .L363+36
 4390 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4391 0238 7A69     		ldr	r2, [r7, #20]
 4392 023a 02FB03F3 		mul	r3, r2, r3
 4393 023e 1B14     		asrs	r3, r3, #16
 4394 0240 FA6C     		ldr	r2, [r7, #76]
 4395 0242 1344     		add	r3, r3, r2
 4396 0244 FB64     		str	r3, [r7, #76]
 4397              	.L291:
1446:..\src/interruptions.c **** 
1447:..\src/interruptions.c ****             // Derivative
1448:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4398              		.loc 1 1448 0
 4399 0246 3B69     		ldr	r3, [r7, #16]
 4400 0248 002B     		cmp	r3, #0
 4401 024a 0CD0     		beq	.L292
1449:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4402              		.loc 1 1449 0
 4403 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4404 024e 1C4A     		ldr	r2, .L363+48
 4405 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4406 0254 BA68     		ldr	r2, [r7, #8]
 4407 0256 D31A     		subs	r3, r2, r3
 4408 0258 3A69     		ldr	r2, [r7, #16]
 4409 025a 02FB03F3 		mul	r3, r2, r3
 4410 025e 1B14     		asrs	r3, r3, #16
 4411 0260 FA6C     		ldr	r2, [r7, #76]
 4412 0262 1344     		add	r3, r3, r2
 4413 0264 FB64     		str	r3, [r7, #76]
 4414              	.L292:
1450:..\src/interruptions.c ****              
1451:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1452:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4415              		.loc 1 1452 0
 4416 0266 7B6C     		ldr	r3, [r7, #68]
 4417 0268 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4418 026c 022B     		cmp	r3, #2
 4419 026e 2BD1     		bne	.L293
1453:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4420              		.loc 1 1453 0
 4421 0270 FB6C     		ldr	r3, [r7, #76]
 4422 0272 40F6A932 		movw	r2, #2985
 4423 0276 9342     		cmp	r3, r2
 4424 0278 02DD     		ble	.L294
1454:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4425              		.loc 1 1454 0
 4426 027a 40F6A933 		movw	r3, #2985
 4427 027e FB64     		str	r3, [r7, #76]
 4428              	.L294:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 106


1455:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4429              		.loc 1 1455 0
 4430 0280 FB6C     		ldr	r3, [r7, #76]
 4431 0282 104A     		ldr	r2, .L363+52
 4432 0284 9342     		cmp	r3, r2
 4433 0286 2BDA     		bge	.L296
1456:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4434              		.loc 1 1456 0
 4435 0288 0E4B     		ldr	r3, .L363+52
 4436 028a FB64     		str	r3, [r7, #76]
 4437 028c 28E0     		b	.L296
 4438              	.L364:
 4439 028e 00BF     		.align	2
 4440              	.L363:
 4441 0290 00000000 		.word	c_mem
 4442 0294 00000000 		.word	g_ref
 4443 0298 00000000 		.word	g_refOld
 4444 029c 00000000 		.word	g_meas
 4445 02a0 AC000000 		.word	pos_error_sum.10607
 4446 02a4 80F0FA02 		.word	50000000
 4447 02a8 800F05FD 		.word	-50000000
 4448 02ac B4000000 		.word	prev_pos_err.10609
 4449 02b0 BC000000 		.word	motor_dir.10612
 4450 02b4 C0000000 		.word	curr_error_sum.10608
 4451 02b8 A0860100 		.word	100000
 4452 02bc 6079FEFF 		.word	-100000
 4453 02c0 C8000000 		.word	prev_curr_err.10610
 4454 02c4 57F4FFFF 		.word	-2985
 4455              	.L293:
1457:..\src/interruptions.c ****             }
1458:..\src/interruptions.c ****             else {
1459:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
 4456              		.loc 1 1459 0
 4457 02c8 FB6C     		ldr	r3, [r7, #76]
 4458 02ca 642B     		cmp	r3, #100
 4459 02cc 01DD     		ble	.L297
1460:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4460              		.loc 1 1460 0
 4461 02ce 6423     		movs	r3, #100
 4462 02d0 FB64     		str	r3, [r7, #76]
 4463              	.L297:
1461:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4464              		.loc 1 1461 0
 4465 02d2 FB6C     		ldr	r3, [r7, #76]
 4466 02d4 13F1640F 		cmn	r3, #100
 4467 02d8 02DA     		bge	.L296
1462:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4468              		.loc 1 1462 0
 4469 02da 6FF06303 		mvn	r3, #99
 4470 02de FB64     		str	r3, [r7, #76]
 4471              	.L296:
1463:..\src/interruptions.c ****             }
1464:..\src/interruptions.c **** 
1465:..\src/interruptions.c ****             // Update previous current
1466:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4472              		.loc 1 1466 0
 4473 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 107


 4474 02e2 A049     		ldr	r1, .L365
 4475 02e4 BA68     		ldr	r2, [r7, #8]
 4476 02e6 41F82320 		str	r2, [r1, r3, lsl #2]
1467:..\src/interruptions.c **** 
1468:..\src/interruptions.c ****         break;
 4477              		.loc 1 1468 0
 4478 02ea 54E1     		b	.L273
 4479              	.L274:
1469:..\src/interruptions.c **** 
1470:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1471:..\src/interruptions.c ****         case CONTROL_ANGLE:
1472:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4480              		.loc 1 1472 0
 4481 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4482 02ee 9E4A     		ldr	r2, .L365+4
 4483 02f0 1B01     		lsls	r3, r3, #4
 4484 02f2 1344     		add	r3, r3, r2
 4485 02f4 1A68     		ldr	r2, [r3]
 4486 02f6 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4487 02fa 9C49     		ldr	r1, .L365+8
 4488 02fc 3420     		movs	r0, #52
 4489 02fe 00FB03F3 		mul	r3, r0, r3
 4490 0302 0B44     		add	r3, r3, r1
 4491 0304 1B68     		ldr	r3, [r3]
 4492 0306 D31A     		subs	r3, r2, r3
 4493 0308 FB60     		str	r3, [r7, #12]
1473:..\src/interruptions.c **** 
1474:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4494              		.loc 1 1474 0
 4495 030a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4496 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4497 030e 9849     		ldr	r1, .L365+12
 4498 0310 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4499 0314 FA68     		ldr	r2, [r7, #12]
 4500 0316 0A44     		add	r2, r2, r1
 4501 0318 9549     		ldr	r1, .L365+12
 4502 031a 41F82320 		str	r2, [r1, r3, lsl #2]
1475:..\src/interruptions.c **** 
1476:..\src/interruptions.c ****             // anti-windup (for integral control)
1477:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4503              		.loc 1 1477 0
 4504 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4505 0320 934A     		ldr	r2, .L365+12
 4506 0322 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4507 0326 B3F57A7F 		cmp	r3, #1000
 4508 032a 06DD     		ble	.L298
1478:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4509              		.loc 1 1478 0
 4510 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4511 032e 904A     		ldr	r2, .L365+12
 4512 0330 4FF47A71 		mov	r1, #1000
 4513 0334 42F82310 		str	r1, [r2, r3, lsl #2]
 4514 0338 0BE0     		b	.L299
 4515              	.L298:
1479:..\src/interruptions.c ****             else {
1480:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4516              		.loc 1 1480 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 108


 4517 033a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4518 033c 8C4A     		ldr	r2, .L365+12
 4519 033e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4520 0342 13F57A7F 		cmn	r3, #1000
 4521 0346 04DA     		bge	.L299
1481:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4522              		.loc 1 1481 0
 4523 0348 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4524 034a 894A     		ldr	r2, .L365+12
 4525 034c 8949     		ldr	r1, .L365+16
 4526 034e 42F82310 		str	r1, [r2, r3, lsl #2]
 4527              	.L299:
1482:..\src/interruptions.c ****             }
1483:..\src/interruptions.c **** 
1484:..\src/interruptions.c ****             // Proportional
1485:..\src/interruptions.c ****             if (k_p != 0) 
 4528              		.loc 1 1485 0
 4529 0352 FB6B     		ldr	r3, [r7, #60]
 4530 0354 002B     		cmp	r3, #0
 4531 0356 05D0     		beq	.L300
1486:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4532              		.loc 1 1486 0
 4533 0358 FB6B     		ldr	r3, [r7, #60]
 4534 035a FA68     		ldr	r2, [r7, #12]
 4535 035c 02FB03F3 		mul	r3, r2, r3
 4536 0360 1B14     		asrs	r3, r3, #16
 4537 0362 FB64     		str	r3, [r7, #76]
 4538              	.L300:
1487:..\src/interruptions.c ****             
1488:..\src/interruptions.c **** 
1489:..\src/interruptions.c ****             // Integral
1490:..\src/interruptions.c ****             if (k_i != 0) 
 4539              		.loc 1 1490 0
 4540 0364 BB6B     		ldr	r3, [r7, #56]
 4541 0366 002B     		cmp	r3, #0
 4542 0368 0AD0     		beq	.L301
1491:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4543              		.loc 1 1491 0
 4544 036a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4545 036c 804A     		ldr	r2, .L365+12
 4546 036e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4547 0372 BA6B     		ldr	r2, [r7, #56]
 4548 0374 02FB03F3 		mul	r3, r2, r3
 4549 0378 1B14     		asrs	r3, r3, #16
 4550 037a FA6C     		ldr	r2, [r7, #76]
 4551 037c 1344     		add	r3, r3, r2
 4552 037e FB64     		str	r3, [r7, #76]
 4553              	.L301:
1492:..\src/interruptions.c ****             
1493:..\src/interruptions.c **** 
1494:..\src/interruptions.c ****             // Derivative
1495:..\src/interruptions.c ****             if (k_d != 0) 
 4554              		.loc 1 1495 0
 4555 0380 7B6B     		ldr	r3, [r7, #52]
 4556 0382 002B     		cmp	r3, #0
 4557 0384 0CD0     		beq	.L302
1496:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 109


 4558              		.loc 1 1496 0
 4559 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4560 0388 7B4A     		ldr	r2, .L365+20
 4561 038a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4562 038e FA68     		ldr	r2, [r7, #12]
 4563 0390 D31A     		subs	r3, r2, r3
 4564 0392 7A6B     		ldr	r2, [r7, #52]
 4565 0394 02FB03F3 		mul	r3, r2, r3
 4566 0398 1B14     		asrs	r3, r3, #16
 4567 039a FA6C     		ldr	r2, [r7, #76]
 4568 039c 1344     		add	r3, r3, r2
 4569 039e FB64     		str	r3, [r7, #76]
 4570              	.L302:
1497:..\src/interruptions.c ****             
1498:..\src/interruptions.c **** 
1499:..\src/interruptions.c ****             // Update measure
1500:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4571              		.loc 1 1500 0
 4572 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4573 03a2 7549     		ldr	r1, .L365+20
 4574 03a4 FA68     		ldr	r2, [r7, #12]
 4575 03a6 41F82320 		str	r2, [r1, r3, lsl #2]
1501:..\src/interruptions.c **** 
1502:..\src/interruptions.c ****             if (pwm_input > 0)
 4576              		.loc 1 1502 0
 4577 03aa FB6C     		ldr	r3, [r7, #76]
 4578 03ac 002B     		cmp	r3, #0
 4579 03ae 04DD     		ble	.L303
1503:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4580              		.loc 1 1503 0
 4581 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4582 03b2 724A     		ldr	r2, .L365+24
 4583 03b4 0121     		movs	r1, #1
 4584 03b6 D154     		strb	r1, [r2, r3]
1504:..\src/interruptions.c ****             else
1505:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1506:..\src/interruptions.c **** 
1507:..\src/interruptions.c ****         break;
 4585              		.loc 1 1507 0
 4586 03b8 EDE0     		b	.L273
 4587              	.L303:
1505:..\src/interruptions.c **** 
 4588              		.loc 1 1505 0
 4589 03ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4590 03bc 6F4A     		ldr	r2, .L365+24
 4591 03be 0021     		movs	r1, #0
 4592 03c0 D154     		strb	r1, [r2, r3]
 4593              		.loc 1 1507 0
 4594 03c2 E8E0     		b	.L273
 4595              	.L277:
1508:..\src/interruptions.c **** 
1509:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1510:..\src/interruptions.c ****         case CONTROL_CURRENT:
1511:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4596              		.loc 1 1511 0
 4597 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4598 03c6 684A     		ldr	r2, .L365+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 110


 4599 03c8 1B01     		lsls	r3, r3, #4
 4600 03ca 1344     		add	r3, r3, r2
 4601 03cc 0C33     		adds	r3, r3, #12
 4602 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4603 03d0 002B     		cmp	r3, #0
 4604 03d2 00F0C480 		beq	.L360
 4605              		.loc 1 1511 0 is_stmt 0 discriminator 1
 4606 03d6 6A4B     		ldr	r3, .L365+28
 4607 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4608 03da 002B     		cmp	r3, #0
 4609 03dc 00F0BF80 		beq	.L360
1512:..\src/interruptions.c ****                 
1513:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4610              		.loc 1 1513 0 is_stmt 1
 4611 03e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4612 03e2 614A     		ldr	r2, .L365+4
 4613 03e4 1B01     		lsls	r3, r3, #4
 4614 03e6 1344     		add	r3, r3, r2
 4615 03e8 0433     		adds	r3, r3, #4
 4616 03ea 1B68     		ldr	r3, [r3]
 4617 03ec BB64     		str	r3, [r7, #72]
1514:..\src/interruptions.c **** 
1515:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4618              		.loc 1 1515 0
 4619 03ee 7B6C     		ldr	r3, [r7, #68]
 4620 03f0 B3F95C30 		ldrsh	r3, [r3, #92]
 4621 03f4 1A46     		mov	r2, r3
 4622 03f6 BB6C     		ldr	r3, [r7, #72]
 4623 03f8 9A42     		cmp	r2, r3
 4624 03fa 04DA     		bge	.L306
1516:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4625              		.loc 1 1516 0
 4626 03fc 7B6C     		ldr	r3, [r7, #68]
 4627 03fe B3F95C30 		ldrsh	r3, [r3, #92]
 4628 0402 BB64     		str	r3, [r7, #72]
 4629 0404 0BE0     		b	.L307
 4630              	.L306:
1517:..\src/interruptions.c ****                 else {
1518:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4631              		.loc 1 1518 0
 4632 0406 7B6C     		ldr	r3, [r7, #68]
 4633 0408 B3F95C30 		ldrsh	r3, [r3, #92]
 4634 040c 5A42     		negs	r2, r3
 4635 040e BB6C     		ldr	r3, [r7, #72]
 4636 0410 9A42     		cmp	r2, r3
 4637 0412 04DD     		ble	.L307
1519:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4638              		.loc 1 1519 0
 4639 0414 7B6C     		ldr	r3, [r7, #68]
 4640 0416 B3F95C30 		ldrsh	r3, [r3, #92]
 4641 041a 5B42     		negs	r3, r3
 4642 041c BB64     		str	r3, [r7, #72]
 4643              	.L307:
1520:..\src/interruptions.c ****                 }
1521:..\src/interruptions.c ****                 
1522:..\src/interruptions.c ****                 // current error
1523:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 111


 4644              		.loc 1 1523 0
 4645 041e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4646 0422 524A     		ldr	r2, .L365+8
 4647 0424 3421     		movs	r1, #52
 4648 0426 01FB03F3 		mul	r3, r1, r3
 4649 042a 1344     		add	r3, r3, r2
 4650 042c 0C33     		adds	r3, r3, #12
 4651 042e 1B68     		ldr	r3, [r3]
 4652 0430 BA6C     		ldr	r2, [r7, #72]
 4653 0432 D31A     		subs	r3, r2, r3
 4654 0434 BB60     		str	r3, [r7, #8]
1524:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4655              		.loc 1 1524 0
 4656 0436 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4657 0438 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4658 043a 5249     		ldr	r1, .L365+32
 4659 043c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4660 0440 BA68     		ldr	r2, [r7, #8]
 4661 0442 0A44     		add	r2, r2, r1
 4662 0444 4F49     		ldr	r1, .L365+32
 4663 0446 41F82320 		str	r2, [r1, r3, lsl #2]
1525:..\src/interruptions.c ****                 
1526:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4664              		.loc 1 1526 0
 4665 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4666 044c 4D4A     		ldr	r2, .L365+32
 4667 044e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4668 0452 4D4A     		ldr	r2, .L365+36
 4669 0454 9342     		cmp	r3, r2
 4670 0456 05DD     		ble	.L308
1527:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4671              		.loc 1 1527 0
 4672 0458 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4673 045a 4A4A     		ldr	r2, .L365+32
 4674 045c 4A49     		ldr	r1, .L365+36
 4675 045e 42F82310 		str	r1, [r2, r3, lsl #2]
 4676 0462 0BE0     		b	.L309
 4677              	.L308:
1528:..\src/interruptions.c ****                 else {
1529:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4678              		.loc 1 1529 0
 4679 0464 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4680 0466 474A     		ldr	r2, .L365+32
 4681 0468 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4682 046c 474A     		ldr	r2, .L365+40
 4683 046e 9342     		cmp	r3, r2
 4684 0470 04DA     		bge	.L309
1530:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4685              		.loc 1 1530 0
 4686 0472 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4687 0474 434A     		ldr	r2, .L365+32
 4688 0476 4549     		ldr	r1, .L365+40
 4689 0478 42F82310 		str	r1, [r2, r3, lsl #2]
 4690              	.L309:
1531:..\src/interruptions.c ****                 }
1532:..\src/interruptions.c **** 
1533:..\src/interruptions.c ****                 pwm_input = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 112


 4691              		.loc 1 1533 0
 4692 047c 0023     		movs	r3, #0
 4693 047e FB64     		str	r3, [r7, #76]
1534:..\src/interruptions.c **** 
1535:..\src/interruptions.c ****                 // Proportional
1536:..\src/interruptions.c ****                 if (k_p_c != 0)
 4694              		.loc 1 1536 0
 4695 0480 3B6B     		ldr	r3, [r7, #48]
 4696 0482 002B     		cmp	r3, #0
 4697 0484 07D0     		beq	.L310
1537:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4698              		.loc 1 1537 0
 4699 0486 3B6B     		ldr	r3, [r7, #48]
 4700 0488 BA68     		ldr	r2, [r7, #8]
 4701 048a 02FB03F3 		mul	r3, r2, r3
 4702 048e 1B14     		asrs	r3, r3, #16
 4703 0490 FA6C     		ldr	r2, [r7, #76]
 4704 0492 1344     		add	r3, r3, r2
 4705 0494 FB64     		str	r3, [r7, #76]
 4706              	.L310:
1538:..\src/interruptions.c **** 
1539:..\src/interruptions.c ****                 // Integral
1540:..\src/interruptions.c ****                 if (k_i_c != 0)
 4707              		.loc 1 1540 0
 4708 0496 FB6A     		ldr	r3, [r7, #44]
 4709 0498 002B     		cmp	r3, #0
 4710 049a 0AD0     		beq	.L311
1541:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4711              		.loc 1 1541 0
 4712 049c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4713 049e 394A     		ldr	r2, .L365+32
 4714 04a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4715 04a4 FA6A     		ldr	r2, [r7, #44]
 4716 04a6 02FB03F3 		mul	r3, r2, r3
 4717 04aa 1B14     		asrs	r3, r3, #16
 4718 04ac FA6C     		ldr	r2, [r7, #76]
 4719 04ae 1344     		add	r3, r3, r2
 4720 04b0 FB64     		str	r3, [r7, #76]
 4721              	.L311:
1542:..\src/interruptions.c **** 
1543:..\src/interruptions.c ****                 // Derivative
1544:..\src/interruptions.c ****                 if (k_d_c != 0)
 4722              		.loc 1 1544 0
 4723 04b2 BB6A     		ldr	r3, [r7, #40]
 4724 04b4 002B     		cmp	r3, #0
 4725 04b6 0CD0     		beq	.L312
1545:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4726              		.loc 1 1545 0
 4727 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4728 04ba 2A4A     		ldr	r2, .L365
 4729 04bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4730 04c0 BA68     		ldr	r2, [r7, #8]
 4731 04c2 D31A     		subs	r3, r2, r3
 4732 04c4 BA6A     		ldr	r2, [r7, #40]
 4733 04c6 02FB03F3 		mul	r3, r2, r3
 4734 04ca 1B14     		asrs	r3, r3, #16
 4735 04cc FA6C     		ldr	r2, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 113


 4736 04ce 1344     		add	r3, r3, r2
 4737 04d0 FB64     		str	r3, [r7, #76]
 4738              	.L312:
1546:..\src/interruptions.c ****                 
1547:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4739              		.loc 1 1547 0
 4740 04d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4741 04d4 2349     		ldr	r1, .L365
 4742 04d6 BA68     		ldr	r2, [r7, #8]
 4743 04d8 41F82320 		str	r2, [r1, r3, lsl #2]
1548:..\src/interruptions.c ****                 
1549:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4744              		.loc 1 1549 0
 4745 04dc FB6C     		ldr	r3, [r7, #76]
 4746 04de 002B     		cmp	r3, #0
 4747 04e0 04DB     		blt	.L313
1550:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4748              		.loc 1 1550 0
 4749 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4750 04e4 254A     		ldr	r2, .L365+24
 4751 04e6 0121     		movs	r1, #1
 4752 04e8 D154     		strb	r1, [r2, r3]
1551:..\src/interruptions.c ****                 else
1552:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1553:..\src/interruptions.c ****             }
1554:..\src/interruptions.c ****         break;
 4753              		.loc 1 1554 0
 4754 04ea 38E0     		b	.L360
 4755              	.L313:
1552:..\src/interruptions.c ****             }
 4756              		.loc 1 1552 0
 4757 04ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4758 04ee 234A     		ldr	r2, .L365+24
 4759 04f0 0021     		movs	r1, #0
 4760 04f2 D154     		strb	r1, [r2, r3]
 4761              		.loc 1 1554 0
 4762 04f4 33E0     		b	.L360
 4763              	.L276:
1555:..\src/interruptions.c ****         
1556:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1557:..\src/interruptions.c ****         case CONTROL_PWM:
1558:..\src/interruptions.c **** 
1559:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4764              		.loc 1 1559 0
 4765 04f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4766 04f8 1B4A     		ldr	r2, .L365+4
 4767 04fa 1B01     		lsls	r3, r3, #4
 4768 04fc 1344     		add	r3, r3, r2
 4769 04fe 0833     		adds	r3, r3, #8
 4770 0500 1B68     		ldr	r3, [r3]
 4771 0502 FB64     		str	r3, [r7, #76]
1560:..\src/interruptions.c **** 
1561:..\src/interruptions.c ****             if (pwm_input > 0) 
 4772              		.loc 1 1561 0
 4773 0504 FB6C     		ldr	r3, [r7, #76]
 4774 0506 002B     		cmp	r3, #0
 4775 0508 04DD     		ble	.L314
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 114


1562:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4776              		.loc 1 1562 0
 4777 050a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4778 050c 1B4A     		ldr	r2, .L365+24
 4779 050e 0121     		movs	r1, #1
 4780 0510 D154     		strb	r1, [r2, r3]
 4781 0512 03E0     		b	.L315
 4782              	.L314:
1563:..\src/interruptions.c ****             else 
1564:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4783              		.loc 1 1564 0
 4784 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4785 0516 194A     		ldr	r2, .L365+24
 4786 0518 0021     		movs	r1, #0
 4787 051a D154     		strb	r1, [r2, r3]
 4788              	.L315:
1565:..\src/interruptions.c ****             
1566:..\src/interruptions.c ****           
1567:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1568:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4789              		.loc 1 1568 0
 4790 051c 7B6C     		ldr	r3, [r7, #68]
 4791 051e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4792 0522 022B     		cmp	r3, #2
 4793 0524 0ED1     		bne	.L316
1569:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4794              		.loc 1 1569 0
 4795 0526 FB6C     		ldr	r3, [r7, #76]
 4796 0528 40F6A932 		movw	r2, #2985
 4797 052c 9342     		cmp	r3, r2
 4798 052e 02DD     		ble	.L317
1570:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4799              		.loc 1 1570 0
 4800 0530 40F6A933 		movw	r3, #2985
 4801 0534 FB64     		str	r3, [r7, #76]
 4802              	.L317:
1571:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4803              		.loc 1 1571 0
 4804 0536 FB6C     		ldr	r3, [r7, #76]
 4805 0538 154A     		ldr	r2, .L365+44
 4806 053a 9342     		cmp	r3, r2
 4807 053c 2ADA     		bge	.L361
1572:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4808              		.loc 1 1572 0
 4809 053e 144B     		ldr	r3, .L365+44
 4810 0540 FB64     		str	r3, [r7, #76]
1573:..\src/interruptions.c ****             }
1574:..\src/interruptions.c ****             else {
1575:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
1576:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
1577:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
1578:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
1579:..\src/interruptions.c ****             }
1580:..\src/interruptions.c **** 
1581:..\src/interruptions.c ****         break;
 4811              		.loc 1 1581 0
 4812 0542 27E0     		b	.L361
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 115


 4813              	.L316:
1575:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4814              		.loc 1 1575 0
 4815 0544 FB6C     		ldr	r3, [r7, #76]
 4816 0546 642B     		cmp	r3, #100
 4817 0548 01DD     		ble	.L320
1576:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4818              		.loc 1 1576 0
 4819 054a 6423     		movs	r3, #100
 4820 054c FB64     		str	r3, [r7, #76]
 4821              	.L320:
1577:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4822              		.loc 1 1577 0
 4823 054e FB6C     		ldr	r3, [r7, #76]
 4824 0550 13F1640F 		cmn	r3, #100
 4825 0554 1EDA     		bge	.L361
1578:..\src/interruptions.c ****             }
 4826              		.loc 1 1578 0
 4827 0556 6FF06303 		mvn	r3, #99
 4828 055a FB64     		str	r3, [r7, #76]
 4829              		.loc 1 1581 0
 4830 055c 1AE0     		b	.L361
 4831              	.L360:
1554:..\src/interruptions.c ****         
 4832              		.loc 1 1554 0
 4833 055e 00BF     		nop
 4834 0560 19E0     		b	.L273
 4835              	.L366:
 4836 0562 00BF     		.align	2
 4837              	.L365:
 4838 0564 C8000000 		.word	prev_curr_err.10610
 4839 0568 00000000 		.word	g_ref
 4840 056c 00000000 		.word	g_meas
 4841 0570 AC000000 		.word	pos_error_sum.10607
 4842 0574 18FCFFFF 		.word	-1000
 4843 0578 B4000000 		.word	prev_pos_err.10609
 4844 057c BC000000 		.word	motor_dir.10612
 4845 0580 00000000 		.word	tension_valid
 4846 0584 C0000000 		.word	curr_error_sum.10608
 4847 0588 A0860100 		.word	100000
 4848 058c 6079FEFF 		.word	-100000
 4849 0590 57F4FFFF 		.word	-2985
 4850              	.L361:
 4851              		.loc 1 1581 0
 4852 0594 00BF     		nop
 4853              	.L273:
1582:..\src/interruptions.c ****             
1583:..\src/interruptions.c ****     }
1584:..\src/interruptions.c **** 
1585:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1586:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1587:..\src/interruptions.c **** 
1588:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1589:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4854              		.loc 1 1589 0
 4855 0596 7B6C     		ldr	r3, [r7, #68]
 4856 0598 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 116


 4857 059c 022B     		cmp	r3, #2
 4858 059e 23D1     		bne	.L321
1590:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4859              		.loc 1 1590 0
 4860 05a0 FB6C     		ldr	r3, [r7, #76]
 4861 05a2 40F6A932 		movw	r2, #2985
 4862 05a6 9342     		cmp	r3, r2
 4863 05a8 02DD     		ble	.L322
1591:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4864              		.loc 1 1591 0
 4865 05aa 40F6A933 		movw	r3, #2985
 4866 05ae FB64     		str	r3, [r7, #76]
 4867              	.L322:
1592:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4868              		.loc 1 1592 0
 4869 05b0 FB6C     		ldr	r3, [r7, #76]
 4870 05b2 AF4A     		ldr	r2, .L367
 4871 05b4 9342     		cmp	r3, r2
 4872 05b6 01DA     		bge	.L323
1593:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4873              		.loc 1 1593 0
 4874 05b8 AD4B     		ldr	r3, .L367
 4875 05ba FB64     		str	r3, [r7, #76]
 4876              	.L323:
1594:..\src/interruptions.c ****         
1595:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4877              		.loc 1 1595 0
 4878 05bc 7B6C     		ldr	r3, [r7, #68]
 4879 05be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4880 05c2 012B     		cmp	r3, #1
 4881 05c4 31D0     		beq	.L325
1596:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_ESC) * dev_pwm_limit[idx]) >> 10;
 4882              		.loc 1 1596 0
 4883 05c6 FB6C     		ldr	r3, [r7, #76]
 4884 05c8 9B02     		lsls	r3, r3, #10
 4885 05ca AA4A     		ldr	r2, .L367+4
 4886 05cc 82FB0312 		smull	r1, r2, r2, r3
 4887 05d0 9211     		asrs	r2, r2, #6
 4888 05d2 DB17     		asrs	r3, r3, #31
 4889 05d4 D31A     		subs	r3, r2, r3
 4890 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4891 05d8 A749     		ldr	r1, .L367+8
 4892 05da 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4893 05de 02FB03F3 		mul	r3, r2, r3
 4894 05e2 9B12     		asrs	r3, r3, #10
 4895 05e4 FB64     		str	r3, [r7, #76]
 4896 05e6 20E0     		b	.L325
 4897              	.L321:
1597:..\src/interruptions.c ****     }
1598:..\src/interruptions.c ****     else {
1599:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4898              		.loc 1 1599 0
 4899 05e8 FB6C     		ldr	r3, [r7, #76]
 4900 05ea 642B     		cmp	r3, #100
 4901 05ec 01DD     		ble	.L326
1600:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4902              		.loc 1 1600 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 117


 4903 05ee 6423     		movs	r3, #100
 4904 05f0 FB64     		str	r3, [r7, #76]
 4905              	.L326:
1601:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4906              		.loc 1 1601 0
 4907 05f2 FB6C     		ldr	r3, [r7, #76]
 4908 05f4 13F1640F 		cmn	r3, #100
 4909 05f8 02DA     		bge	.L327
1602:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4910              		.loc 1 1602 0
 4911 05fa 6FF06303 		mvn	r3, #99
 4912 05fe FB64     		str	r3, [r7, #76]
 4913              	.L327:
1603:..\src/interruptions.c ****         
1604:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4914              		.loc 1 1604 0
 4915 0600 7B6C     		ldr	r3, [r7, #68]
 4916 0602 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4917 0606 012B     		cmp	r3, #1
 4918 0608 0FD0     		beq	.L325
1605:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[idx]) >> 10;
 4919              		.loc 1 1605 0
 4920 060a FB6C     		ldr	r3, [r7, #76]
 4921 060c 9B02     		lsls	r3, r3, #10
 4922 060e 9B4A     		ldr	r2, .L367+12
 4923 0610 82FB0312 		smull	r1, r2, r2, r3
 4924 0614 5211     		asrs	r2, r2, #5
 4925 0616 DB17     		asrs	r3, r3, #31
 4926 0618 D31A     		subs	r3, r2, r3
 4927 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4928 061c 9649     		ldr	r1, .L367+8
 4929 061e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4930 0622 02FB03F3 		mul	r3, r2, r3
 4931 0626 9B12     		asrs	r3, r3, #10
 4932 0628 FB64     		str	r3, [r7, #76]
 4933              	.L325:
1606:..\src/interruptions.c ****     }
1607:..\src/interruptions.c **** 
1608:..\src/interruptions.c ****     //// RATE LIMITER ////
1609:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4934              		.loc 1 1609 0
 4935 062a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4936 062c 944A     		ldr	r2, .L367+16
 4937 062e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4938 0632 FA6C     		ldr	r2, [r7, #76]
 4939 0634 D31A     		subs	r3, r2, r3
 4940 0636 7A6C     		ldr	r2, [r7, #68]
 4941 0638 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4942 063c 9342     		cmp	r3, r2
 4943 063e 09DD     		ble	.L328
1610:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4944              		.loc 1 1610 0
 4945 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4946 0642 8F4A     		ldr	r2, .L367+16
 4947 0644 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4948 0648 7A6C     		ldr	r2, [r7, #68]
 4949 064a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 118


 4950 064e 1344     		add	r3, r3, r2
 4951 0650 FB64     		str	r3, [r7, #76]
 4952 0652 14E0     		b	.L329
 4953              	.L328:
1611:..\src/interruptions.c ****     }
1612:..\src/interruptions.c ****     else {
1613:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4954              		.loc 1 1613 0
 4955 0654 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4956 0656 8A4A     		ldr	r2, .L367+16
 4957 0658 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4958 065c FA6C     		ldr	r2, [r7, #76]
 4959 065e D21A     		subs	r2, r2, r3
 4960 0660 7B6C     		ldr	r3, [r7, #68]
 4961 0662 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4962 0666 5B42     		negs	r3, r3
 4963 0668 9A42     		cmp	r2, r3
 4964 066a 08DA     		bge	.L329
1614:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4965              		.loc 1 1614 0
 4966 066c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4967 066e 844A     		ldr	r2, .L367+16
 4968 0670 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4969 0674 7A6C     		ldr	r2, [r7, #68]
 4970 0676 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4971 067a 9B1A     		subs	r3, r3, r2
 4972 067c FB64     		str	r3, [r7, #76]
 4973              	.L329:
1615:..\src/interruptions.c ****     }
1616:..\src/interruptions.c ****    
1617:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1618:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4974              		.loc 1 1618 0
 4975 067e 7B6C     		ldr	r3, [r7, #68]
 4976 0680 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4977 0684 022B     		cmp	r3, #2
 4978 0686 0ED1     		bne	.L330
1619:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4979              		.loc 1 1619 0
 4980 0688 FB6C     		ldr	r3, [r7, #76]
 4981 068a 40F6A932 		movw	r2, #2985
 4982 068e 9342     		cmp	r3, r2
 4983 0690 02DD     		ble	.L331
1620:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4984              		.loc 1 1620 0
 4985 0692 40F6A933 		movw	r3, #2985
 4986 0696 FB64     		str	r3, [r7, #76]
 4987              	.L331:
1621:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4988              		.loc 1 1621 0
 4989 0698 FB6C     		ldr	r3, [r7, #76]
 4990 069a 754A     		ldr	r2, .L367
 4991 069c 9342     		cmp	r3, r2
 4992 069e 0EDA     		bge	.L333
1622:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4993              		.loc 1 1622 0
 4994 06a0 734B     		ldr	r3, .L367
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 119


 4995 06a2 FB64     		str	r3, [r7, #76]
 4996 06a4 0BE0     		b	.L333
 4997              	.L330:
1623:..\src/interruptions.c ****     }
1624:..\src/interruptions.c ****     else {
1625:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4998              		.loc 1 1625 0
 4999 06a6 FB6C     		ldr	r3, [r7, #76]
 5000 06a8 642B     		cmp	r3, #100
 5001 06aa 01DD     		ble	.L334
1626:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 5002              		.loc 1 1626 0
 5003 06ac 6423     		movs	r3, #100
 5004 06ae FB64     		str	r3, [r7, #76]
 5005              	.L334:
1627:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 5006              		.loc 1 1627 0
 5007 06b0 FB6C     		ldr	r3, [r7, #76]
 5008 06b2 13F1640F 		cmn	r3, #100
 5009 06b6 02DA     		bge	.L333
1628:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 5010              		.loc 1 1628 0
 5011 06b8 6FF06303 		mvn	r3, #99
 5012 06bc FB64     		str	r3, [r7, #76]
 5013              	.L333:
1629:..\src/interruptions.c ****     }
1630:..\src/interruptions.c **** 
1631:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 5014              		.loc 1 1631 0
 5015 06be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5016 06c0 6F49     		ldr	r1, .L367+16
 5017 06c2 FA6C     		ldr	r2, [r7, #76]
 5018 06c4 41F82320 		str	r2, [r1, r3, lsl #2]
1632:..\src/interruptions.c ****            
1633:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 5019              		.loc 1 1633 0
 5020 06c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5021 06ca FA6C     		ldr	r2, [r7, #76]
 5022 06cc 002A     		cmp	r2, #0
 5023 06ce 01DB     		blt	.L335
 5024              		.loc 1 1633 0 is_stmt 0 discriminator 1
 5025 06d0 0121     		movs	r1, #1
 5026 06d2 01E0     		b	.L336
 5027              	.L335:
 5028              		.loc 1 1633 0 discriminator 2
 5029 06d4 4FF0FF31 		mov	r1, #-1
 5030              	.L336:
 5031              		.loc 1 1633 0 discriminator 4
 5032 06d8 6A4A     		ldr	r2, .L367+20
 5033 06da D154     		strb	r1, [r2, r3]
1634:..\src/interruptions.c ****     
1635:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 5034              		.loc 1 1635 0 is_stmt 1 discriminator 4
 5035 06dc 7B6C     		ldr	r3, [r7, #68]
 5036 06de 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 5037 06e2 012B     		cmp	r3, #1
 5038 06e4 40F09A80 		bne	.L337
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 120


1636:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1637:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[0]-g_meas[ENC_L].pos[0]) < 50 
 5039              		.loc 1 1637 0
 5040 06e8 7B6C     		ldr	r3, [r7, #68]
 5041 06ea 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 5042 06ee 012B     		cmp	r3, #1
 5043 06f0 00F08F80 		beq	.L338
 5044              		.loc 1 1637 0 is_stmt 0 discriminator 1
 5045 06f4 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5046 06f8 634A     		ldr	r2, .L367+24
 5047 06fa 3421     		movs	r1, #52
 5048 06fc 01FB03F3 		mul	r3, r1, r3
 5049 0700 1344     		add	r3, r3, r2
 5050 0702 1A68     		ldr	r2, [r3]
 5051 0704 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5052 0708 6049     		ldr	r1, .L367+28
 5053 070a 3420     		movs	r0, #52
 5054 070c 00FB03F3 		mul	r3, r0, r3
 5055 0710 0B44     		add	r3, r3, r1
 5056 0712 1B68     		ldr	r3, [r3]
 5057 0714 D31A     		subs	r3, r2, r3
 5058 0716 312B     		cmp	r3, #49
 5059 0718 7BDC     		bgt	.L338
1638:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[0]-g_meas[ENC_L].pos[0]) > -50) && 
 5060              		.loc 1 1638 0 is_stmt 1 discriminator 2
 5061 071a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5062 071e 5A4A     		ldr	r2, .L367+24
 5063 0720 3421     		movs	r1, #52
 5064 0722 01FB03F3 		mul	r3, r1, r3
 5065 0726 1344     		add	r3, r3, r2
 5066 0728 1A68     		ldr	r2, [r3]
 5067 072a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5068 072e 5749     		ldr	r1, .L367+28
 5069 0730 3420     		movs	r0, #52
 5070 0732 00FB03F3 		mul	r3, r0, r3
 5071 0736 0B44     		add	r3, r3, r1
 5072 0738 1B68     		ldr	r3, [r3]
 5073 073a D31A     		subs	r3, r2, r3
1637:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[0]-g_meas[ENC_L].pos[0]) > -50) && 
 5074              		.loc 1 1637 0 discriminator 2
 5075 073c 13F1310F 		cmn	r3, #49
 5076 0740 67DB     		blt	.L338
1639:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 5077              		.loc 1 1639 0
 5078 0742 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5079 0744 524A     		ldr	r2, .L367+32
 5080 0746 1B01     		lsls	r3, r3, #4
 5081 0748 1344     		add	r3, r3, r2
 5082 074a 1A68     		ldr	r2, [r3]
 5083 074c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5084 074e 5149     		ldr	r1, .L367+36
 5085 0750 1B01     		lsls	r3, r3, #4
 5086 0752 0B44     		add	r3, r3, r1
 5087 0754 1B68     		ldr	r3, [r3]
 5088 0756 D31A     		subs	r3, r2, r3
1638:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[0]-g_meas[ENC_L].pos[0]) > -50) && 
 5089              		.loc 1 1638 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 121


 5090 0758 632B     		cmp	r3, #99
 5091 075a 5ADC     		bgt	.L338
 5092              		.loc 1 1639 0
 5093 075c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5094 075e 4C4A     		ldr	r2, .L367+32
 5095 0760 1B01     		lsls	r3, r3, #4
 5096 0762 1344     		add	r3, r3, r2
 5097 0764 1A68     		ldr	r2, [r3]
 5098 0766 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5099 0768 4A49     		ldr	r1, .L367+36
 5100 076a 1B01     		lsls	r3, r3, #4
 5101 076c 0B44     		add	r3, r3, r1
 5102 076e 1B68     		ldr	r3, [r3]
 5103 0770 D31A     		subs	r3, r2, r3
 5104 0772 13F1630F 		cmn	r3, #99
 5105 0776 4CDB     		blt	.L338
1640:..\src/interruptions.c ****             position_counter[idx]++;
 5106              		.loc 1 1640 0
 5107 0778 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5108 077a 474A     		ldr	r2, .L367+40
 5109 077c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5110 0780 0132     		adds	r2, r2, #1
 5111 0782 4549     		ldr	r1, .L367+40
 5112 0784 41F82320 		str	r2, [r1, r3, lsl #2]
1641:..\src/interruptions.c ****             
1642:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 5113              		.loc 1 1642 0
 5114 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5115 078a 434A     		ldr	r2, .L367+40
 5116 078c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5117 0790 F92B     		cmp	r3, #249
 5118 0792 43D9     		bls	.L337
1643:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag[idx] == FALSE) {
 5119              		.loc 1 1643 0
 5120 0794 7B6C     		ldr	r3, [r7, #68]
 5121 0796 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 5122 079a 002B     		cmp	r3, #0
 5123 079c 11D1     		bne	.L340
 5124              		.loc 1 1643 0 is_stmt 0 discriminator 1
 5125 079e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5126 07a0 3E4A     		ldr	r2, .L367+44
 5127 07a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5128 07a4 002B     		cmp	r3, #0
 5129 07a6 0CD1     		bne	.L340
1644:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 5130              		.loc 1 1644 0 is_stmt 1
 5131 07a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5132 07aa 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5133 07ae 3749     		ldr	r1, .L367+28
 5134 07b0 3420     		movs	r0, #52
 5135 07b2 00FB02F2 		mul	r2, r0, r2
 5136 07b6 0A44     		add	r2, r2, r1
 5137 07b8 1268     		ldr	r2, [r2]
 5138 07ba 3949     		ldr	r1, .L367+48
 5139 07bc 1B01     		lsls	r3, r3, #4
 5140 07be 0B44     		add	r3, r3, r1
 5141 07c0 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 122


 5142              	.L340:
1645:..\src/interruptions.c ****                 }
1646:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 5143              		.loc 1 1646 0
 5144 07c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5145 07c4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5146 07c8 3049     		ldr	r1, .L367+28
 5147 07ca 3420     		movs	r0, #52
 5148 07cc 00FB02F2 		mul	r2, r0, r2
 5149 07d0 0A44     		add	r2, r2, r1
 5150 07d2 1268     		ldr	r2, [r2]
 5151 07d4 2F49     		ldr	r1, .L367+36
 5152 07d6 1B01     		lsls	r3, r3, #4
 5153 07d8 0B44     		add	r3, r3, r1
 5154 07da 1A60     		str	r2, [r3]
1647:..\src/interruptions.c ****                 
1648:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 5155              		.loc 1 1648 0
 5156 07dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5157 07de 2E4A     		ldr	r2, .L367+40
 5158 07e0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5159 07e4 FA2B     		cmp	r3, #250
 5160 07e6 11D1     		bne	.L341
1649:..\src/interruptions.c ****                     // To do only once
1650:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 5161              		.loc 1 1650 0
 5162 07e8 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5163 07ec 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5164 07f0 2649     		ldr	r1, .L367+28
 5165 07f2 3420     		movs	r0, #52
 5166 07f4 00FB02F2 		mul	r2, r0, r2
 5167 07f8 0A44     		add	r2, r2, r1
 5168 07fa 0C32     		adds	r2, r2, #12
 5169 07fc 1268     		ldr	r2, [r2]
 5170 07fe 2349     		ldr	r1, .L367+28
 5171 0800 3420     		movs	r0, #52
 5172 0802 00FB03F3 		mul	r3, r0, r3
 5173 0806 0B44     		add	r3, r3, r1
 5174 0808 1433     		adds	r3, r3, #20
 5175 080a 1A60     		str	r2, [r3]
 5176              	.L341:
1651:..\src/interruptions.c ****                 }
1652:..\src/interruptions.c ****                 pwm_input = 0;            
 5177              		.loc 1 1652 0
 5178 080c 0023     		movs	r3, #0
 5179 080e FB64     		str	r3, [r7, #76]
1642:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag[idx] == FALSE) {
 5180              		.loc 1 1642 0
 5181 0810 04E0     		b	.L337
 5182              	.L338:
1653:..\src/interruptions.c ****             }
1654:..\src/interruptions.c ****         }
1655:..\src/interruptions.c ****         else {
1656:..\src/interruptions.c ****             position_counter[idx] = 0;
 5183              		.loc 1 1656 0
 5184 0812 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5185 0814 204A     		ldr	r2, .L367+40
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 123


 5186 0816 0021     		movs	r1, #0
 5187 0818 42F82310 		str	r1, [r2, r3, lsl #2]
 5188              	.L337:
1657:..\src/interruptions.c ****         }
1658:..\src/interruptions.c ****     }
1659:..\src/interruptions.c ****     
1660:..\src/interruptions.c ****     
1661:..\src/interruptions.c ****     // Always limit PWM if using Brushless motors and ESC module
1662:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {           
 5189              		.loc 1 1662 0
 5190 081c 7B6C     		ldr	r3, [r7, #68]
 5191 081e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5192 0822 022B     		cmp	r3, #2
 5193 0824 1ED1     		bne	.L342
1663:..\src/interruptions.c ****         // Allowed in range [-2700,-200] and [200,2700] where 200 -> 0 rpm, 2700 -> MAX no load spe
1664:..\src/interruptions.c ****         if (abs(pwm_input) > 2700){
 5194              		.loc 1 1664 0
 5195 0826 FB6C     		ldr	r3, [r7, #76]
 5196 0828 002B     		cmp	r3, #0
 5197 082a B8BF     		it	lt
 5198 082c 5B42     		rsblt	r3, r3, #0
 5199 082e 40F68C22 		movw	r2, #2700
 5200 0832 9342     		cmp	r3, r2
 5201 0834 07DD     		ble	.L343
1665:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 2700;
 5202              		.loc 1 1665 0
 5203 0836 FB6C     		ldr	r3, [r7, #76]
 5204 0838 002B     		cmp	r3, #0
 5205 083a 02DB     		blt	.L344
 5206              		.loc 1 1665 0 is_stmt 0 discriminator 1
 5207 083c 40F68C23 		movw	r3, #2700
 5208 0840 00E0     		b	.L345
 5209              	.L344:
 5210              		.loc 1 1665 0 discriminator 2
 5211 0842 184B     		ldr	r3, .L367+52
 5212              	.L345:
 5213              		.loc 1 1665 0 discriminator 4
 5214 0844 FB64     		str	r3, [r7, #76]
 5215              	.L343:
1666:..\src/interruptions.c ****         }
1667:..\src/interruptions.c ****         
1668:..\src/interruptions.c ****         if (abs(pwm_input) < 200){
 5216              		.loc 1 1668 0 is_stmt 1
 5217 0846 FB6C     		ldr	r3, [r7, #76]
 5218 0848 13F1C70F 		cmn	r3, #199
 5219 084c 0ADB     		blt	.L342
 5220              		.loc 1 1668 0 is_stmt 0 discriminator 1
 5221 084e FB6C     		ldr	r3, [r7, #76]
 5222 0850 C72B     		cmp	r3, #199
 5223 0852 07DC     		bgt	.L342
1669:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 200;
 5224              		.loc 1 1669 0 is_stmt 1
 5225 0854 FB6C     		ldr	r3, [r7, #76]
 5226 0856 002B     		cmp	r3, #0
 5227 0858 01DB     		blt	.L346
 5228              		.loc 1 1669 0 is_stmt 0 discriminator 1
 5229 085a C823     		movs	r3, #200
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 124


 5230 085c 01E0     		b	.L347
 5231              	.L346:
 5232              		.loc 1 1669 0 discriminator 2
 5233 085e 6FF0C703 		mvn	r3, #199
 5234              	.L347:
 5235              		.loc 1 1669 0 discriminator 4
 5236 0862 FB64     		str	r3, [r7, #76]
 5237              	.L342:
1670:..\src/interruptions.c ****         }
1671:..\src/interruptions.c ****        
1672:..\src/interruptions.c ****     }
1673:..\src/interruptions.c ****     
1674:..\src/interruptions.c ****     // Set motor direction and write pwm value
1675:..\src/interruptions.c ****     switch (idx) {
 5238              		.loc 1 1675 0 is_stmt 1
 5239 0864 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5240 0866 002B     		cmp	r3, #0
 5241 0868 1ED0     		beq	.L349
 5242 086a 012B     		cmp	r3, #1
 5243 086c 42D0     		beq	.L350
1676:..\src/interruptions.c ****         case 0:         // Motor 1
1677:..\src/interruptions.c ****             if (motor_dir[idx])
1678:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1679:..\src/interruptions.c ****             else
1680:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1681:..\src/interruptions.c ****             
1682:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1683:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
1684:..\src/interruptions.c ****             }
1685:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1686:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1687:..\src/interruptions.c ****             }
1688:..\src/interruptions.c ****             
1689:..\src/interruptions.c ****             break;
1690:..\src/interruptions.c ****         case 1:         // Motor 2
1691:..\src/interruptions.c ****             
1692:..\src/interruptions.c ****             if (motor_dir[idx])
1693:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1694:..\src/interruptions.c ****             else
1695:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1696:..\src/interruptions.c ****             
1697:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1698:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
1699:..\src/interruptions.c ****             }
1700:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1701:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
1702:..\src/interruptions.c ****             }
1703:..\src/interruptions.c ****             
1704:..\src/interruptions.c ****             break;
1705:..\src/interruptions.c ****         default:
1706:..\src/interruptions.c ****             break;
 5244              		.loc 1 1706 0
 5245 086e 67E0     		b	.L355
 5246              	.L368:
 5247              		.align	2
 5248              	.L367:
 5249 0870 57F4FFFF 		.word	-2985
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 125


 5250 0874 81207D05 		.word	92086401
 5251 0878 00000000 		.word	dev_pwm_limit
 5252 087c 1F85EB51 		.word	1374389535
 5253 0880 D0000000 		.word	prev_pwm.10611
 5254 0884 00000000 		.word	pwm_sign
 5255 0888 00000000 		.word	g_measOld
 5256 088c 00000000 		.word	g_meas
 5257 0890 00000000 		.word	g_refOld
 5258 0894 00000000 		.word	g_ref
 5259 0898 D8000000 		.word	position_counter.10613
 5260 089c 00000000 		.word	change_ext_ref_flag
 5261 08a0 00000000 		.word	g_refNew
 5262 08a4 74F5FFFF 		.word	-2700
 5263              	.L349:
1677:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 5264              		.loc 1 1677 0
 5265 08a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5266 08aa 274A     		ldr	r2, .L369
 5267 08ac D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5268 08ae 002B     		cmp	r3, #0
 5269 08b0 03D0     		beq	.L351
1678:..\src/interruptions.c ****             else
 5270              		.loc 1 1678 0
 5271 08b2 0120     		movs	r0, #1
 5272 08b4 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5273 08b8 02E0     		b	.L352
 5274              	.L351:
1680:..\src/interruptions.c ****             
 5275              		.loc 1 1680 0
 5276 08ba 0020     		movs	r0, #0
 5277 08bc FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5278              	.L352:
1682:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
 5279              		.loc 1 1682 0
 5280 08c0 7B6C     		ldr	r3, [r7, #68]
 5281 08c2 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5282 08c6 012B     		cmp	r3, #1
 5283 08c8 0BD1     		bne	.L353
1683:..\src/interruptions.c ****             }
 5284              		.loc 1 1683 0
 5285 08ca FB6C     		ldr	r3, [r7, #76]
 5286 08cc 002B     		cmp	r3, #0
 5287 08ce B8BF     		it	lt
 5288 08d0 5B42     		rsblt	r3, r3, #0
 5289 08d2 9BB2     		uxth	r3, r3
 5290 08d4 C3F16403 		rsb	r3, r3, #100
 5291 08d8 9BB2     		uxth	r3, r3
 5292 08da 1846     		mov	r0, r3
 5293 08dc FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1689:..\src/interruptions.c ****         case 1:         // Motor 2
 5294              		.loc 1 1689 0
 5295 08e0 2EE0     		b	.L355
 5296              	.L353:
1686:..\src/interruptions.c ****             }
 5297              		.loc 1 1686 0
 5298 08e2 FB6C     		ldr	r3, [r7, #76]
 5299 08e4 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 126


 5300 08e6 B8BF     		it	lt
 5301 08e8 5B42     		rsblt	r3, r3, #0
 5302 08ea 9BB2     		uxth	r3, r3
 5303 08ec 1846     		mov	r0, r3
 5304 08ee FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1689:..\src/interruptions.c ****         case 1:         // Motor 2
 5305              		.loc 1 1689 0
 5306 08f2 25E0     		b	.L355
 5307              	.L350:
1692:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 5308              		.loc 1 1692 0
 5309 08f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5310 08f6 144A     		ldr	r2, .L369
 5311 08f8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5312 08fa 002B     		cmp	r3, #0
 5313 08fc 03D0     		beq	.L356
1693:..\src/interruptions.c ****             else
 5314              		.loc 1 1693 0
 5315 08fe 0120     		movs	r0, #1
 5316 0900 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5317 0904 02E0     		b	.L357
 5318              	.L356:
1695:..\src/interruptions.c ****             
 5319              		.loc 1 1695 0
 5320 0906 0020     		movs	r0, #0
 5321 0908 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5322              	.L357:
1697:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
 5323              		.loc 1 1697 0
 5324 090c 7B6C     		ldr	r3, [r7, #68]
 5325 090e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5326 0912 012B     		cmp	r3, #1
 5327 0914 0BD1     		bne	.L358
1698:..\src/interruptions.c ****             }
 5328              		.loc 1 1698 0
 5329 0916 FB6C     		ldr	r3, [r7, #76]
 5330 0918 002B     		cmp	r3, #0
 5331 091a B8BF     		it	lt
 5332 091c 5B42     		rsblt	r3, r3, #0
 5333 091e 9BB2     		uxth	r3, r3
 5334 0920 C3F16403 		rsb	r3, r3, #100
 5335 0924 9BB2     		uxth	r3, r3
 5336 0926 1846     		mov	r0, r3
 5337 0928 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1704:..\src/interruptions.c ****         default:
 5338              		.loc 1 1704 0
 5339 092c 07E0     		b	.L362
 5340              	.L358:
1701:..\src/interruptions.c ****             }
 5341              		.loc 1 1701 0
 5342 092e FB6C     		ldr	r3, [r7, #76]
 5343 0930 002B     		cmp	r3, #0
 5344 0932 B8BF     		it	lt
 5345 0934 5B42     		rsblt	r3, r3, #0
 5346 0936 9BB2     		uxth	r3, r3
 5347 0938 1846     		mov	r0, r3
 5348 093a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 127


 5349              	.L362:
1704:..\src/interruptions.c ****         default:
 5350              		.loc 1 1704 0
 5351 093e 00BF     		nop
 5352              	.L355:
1707:..\src/interruptions.c ****     }
1708:..\src/interruptions.c ****     
1709:..\src/interruptions.c **** }
 5353              		.loc 1 1709 0
 5354 0940 00BF     		nop
 5355 0942 5037     		adds	r7, r7, #80
 5356              		.cfi_def_cfa_offset 8
 5357 0944 BD46     		mov	sp, r7
 5358              		.cfi_def_cfa_register 13
 5359              		@ sp needed
 5360 0946 80BD     		pop	{r7, pc}
 5361              	.L370:
 5362              		.align	2
 5363              	.L369:
 5364 0948 BC000000 		.word	motor_dir.10612
 5365              		.cfi_endproc
 5366              	.LFE72:
 5367              		.size	motor_control_generic, .-motor_control_generic
 5368              		.global	__aeabi_fcmpeq
 5369              		.global	__aeabi_fmul
 5370              		.global	__aeabi_f2iz
 5371              		.global	__aeabi_fcmplt
 5372              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5373              		.align	2
 5374              		.global	encoder_reading_SPI
 5375              		.thumb
 5376              		.thumb_func
 5377              		.type	encoder_reading_SPI, %function
 5378              	encoder_reading_SPI:
 5379              	.LFB73:
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c **** //==============================================================================
1712:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1713:..\src/interruptions.c **** //==============================================================================
1714:..\src/interruptions.c **** 
1715:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5380              		.loc 1 1715 0
 5381              		.cfi_startproc
 5382              		@ args = 0, pretend = 0, frame = 48
 5383              		@ frame_needed = 1, uses_anonymous_args = 0
 5384 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5385              		.cfi_def_cfa_offset 20
 5386              		.cfi_offset 4, -20
 5387              		.cfi_offset 5, -16
 5388              		.cfi_offset 6, -12
 5389              		.cfi_offset 7, -8
 5390              		.cfi_offset 14, -4
 5391 0002 8FB0     		sub	sp, sp, #60
 5392              		.cfi_def_cfa_offset 80
 5393 0004 02AF     		add	r7, sp, #8
 5394              		.cfi_def_cfa 7, 72
 5395 0006 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 128


 5396 0008 0A46     		mov	r2, r1
 5397 000a FB71     		strb	r3, [r7, #7]
 5398 000c 1346     		mov	r3, r2
 5399 000e BB71     		strb	r3, [r7, #6]
1716:..\src/interruptions.c **** 
1717:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5400              		.loc 1 1717 0
 5401 0010 0023     		movs	r3, #0
 5402 0012 87F82F30 		strb	r3, [r7, #47]
1718:..\src/interruptions.c ****     
1719:..\src/interruptions.c ****     // Encoder Variables  
1720:..\src/interruptions.c ****     uint8 jj;
1721:..\src/interruptions.c ****      
1722:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1723:..\src/interruptions.c ****     int16 tmp_value_encoder;
1724:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1725:..\src/interruptions.c ****     int32 value_encoder;
1726:..\src/interruptions.c ****     int32 speed_encoder;
1727:..\src/interruptions.c ****     int32 value_diff;
1728:..\src/interruptions.c **** 	int8 init_rot = 0;
 5403              		.loc 1 1728 0
 5404 0016 0023     		movs	r3, #0
 5405 0018 87F82730 		strb	r3, [r7, #39]
1729:..\src/interruptions.c **** 
1730:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1731:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1732:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1733:..\src/interruptions.c ****     
1734:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1735:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1736:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1737:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1738:..\src/interruptions.c **** 
1739:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1740:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1741:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1742:..\src/interruptions.c ****     
1743:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5406              		.loc 1 1743 0
 5407 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5408 001e 924A     		ldr	r2, .L408
 5409 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5410 0022 002B     		cmp	r3, #0
 5411 0024 19D0     		beq	.L372
1744:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5412              		.loc 1 1744 0
 5413 0026 0323     		movs	r3, #3
 5414 0028 87F82E30 		strb	r3, [r7, #46]
 5415 002c 0AE0     		b	.L373
 5416              	.L374:
1745:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5417              		.loc 1 1745 0
 5418 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5419 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5420 0034 8D48     		ldr	r0, .L408+4
 5421 0036 1346     		mov	r3, r2
 5422 0038 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 129


 5423 003a 1344     		add	r3, r3, r2
 5424 003c 0B44     		add	r3, r3, r1
 5425 003e 0022     		movs	r2, #0
 5426 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5427              	.L373:
1744:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5428              		.loc 1 1744 0 discriminator 1
 5429 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5430 0048 5A1E     		subs	r2, r3, #1
 5431 004a 87F82E20 		strb	r2, [r7, #46]
 5432 004e 002B     		cmp	r3, #0
 5433 0050 EDD1     		bne	.L374
1746:..\src/interruptions.c ****         
1747:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
 5434              		.loc 1 1747 0
 5435 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5436 0054 844A     		ldr	r2, .L408
 5437 0056 0021     		movs	r1, #0
 5438 0058 D154     		strb	r1, [r2, r3]
 5439              	.L372:
1748:..\src/interruptions.c ****     }
1749:..\src/interruptions.c **** 
1750:..\src/interruptions.c ****     //======================================================     reading sensors
1751:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5440              		.loc 1 1751 0
 5441 005a 0023     		movs	r3, #0
 5442 005c 87F82F30 		strb	r3, [r7, #47]
 5443 0060 0DE0     		b	.L375
 5444              	.L376:
1752:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5445              		.loc 1 1752 0 discriminator 3
 5446 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5447 0066 9B00     		lsls	r3, r3, #2
 5448 0068 07F13002 		add	r2, r7, #48
 5449 006c 1344     		add	r3, r3, r2
 5450 006e 0022     		movs	r2, #0
 5451 0070 43F8282C 		str	r2, [r3, #-40]
1751:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5452              		.loc 1 1751 0 discriminator 3
 5453 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5454 0078 0133     		adds	r3, r3, #1
 5455 007a 87F82F30 		strb	r3, [r7, #47]
 5456              	.L375:
1751:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5457              		.loc 1 1751 0 is_stmt 0 discriminator 1
 5458 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5459 0082 022B     		cmp	r3, #2
 5460 0084 EDD9     		bls	.L376
1753:..\src/interruptions.c ****     }   
1754:..\src/interruptions.c ****     
1755:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 5461              		.loc 1 1755 0 is_stmt 1
 5462 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5463 0088 794A     		ldr	r2, .L408+8
 5464 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5465 008c 1A46     		mov	r2, r3
 5466 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 130


 5467 0090 1946     		mov	r1, r3
 5468 0092 1046     		mov	r0, r2
 5469 0094 FFF7FEFF 		bl	ReadEncoderLine
 5470              	.LBB10:
1756:..\src/interruptions.c ****                                                                         //CS1 for left hand
1757:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5471              		.loc 1 1757 0
 5472 0098 0023     		movs	r3, #0
 5473 009a 3B62     		str	r3, [r7, #32]
 5474 009c 2EE0     		b	.L377
 5475              	.L379:
1758:..\src/interruptions.c ****         
1759:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1760:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5476              		.loc 1 1760 0
 5477 009e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5478 00a0 7449     		ldr	r1, .L408+12
 5479 00a2 1346     		mov	r3, r2
 5480 00a4 5B00     		lsls	r3, r3, #1
 5481 00a6 1344     		add	r3, r3, r2
 5482 00a8 1B01     		lsls	r3, r3, #4
 5483 00aa CA18     		adds	r2, r1, r3
 5484 00ac 3B6A     		ldr	r3, [r7, #32]
 5485 00ae 1344     		add	r3, r3, r2
 5486 00b0 03F2B913 		addw	r3, r3, #441
 5487 00b4 1B78     		ldrb	r3, [r3]
 5488 00b6 87F82F30 		strb	r3, [r7, #47]
1761:..\src/interruptions.c ****         
1762:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5489              		.loc 1 1762 0
 5490 00ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5491 00bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5492 00c0 6D48     		ldr	r0, .L408+16
 5493 00c2 1346     		mov	r3, r2
 5494 00c4 9B00     		lsls	r3, r3, #2
 5495 00c6 1344     		add	r3, r3, r2
 5496 00c8 0344     		add	r3, r3, r0
 5497 00ca 0B44     		add	r3, r3, r1
 5498 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5499 00ce 0F2B     		cmp	r3, #15
 5500 00d0 11D9     		bls	.L378
1763:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5501              		.loc 1 1763 0
 5502 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5503 00d4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5504 00d8 6848     		ldr	r0, .L408+20
 5505 00da 1346     		mov	r3, r2
 5506 00dc 9B00     		lsls	r3, r3, #2
 5507 00de 1344     		add	r3, r3, r2
 5508 00e0 0B44     		add	r3, r3, r1
 5509 00e2 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5510 00e6 1A46     		mov	r2, r3
 5511 00e8 3B6A     		ldr	r3, [r7, #32]
 5512 00ea 9B00     		lsls	r3, r3, #2
 5513 00ec 07F13001 		add	r1, r7, #48
 5514 00f0 0B44     		add	r3, r3, r1
 5515 00f2 43F8282C 		str	r2, [r3, #-40]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 131


 5516              	.L378:
1757:..\src/interruptions.c ****         
 5517              		.loc 1 1757 0 discriminator 2
 5518 00f6 3B6A     		ldr	r3, [r7, #32]
 5519 00f8 0133     		adds	r3, r3, #1
 5520 00fa 3B62     		str	r3, [r7, #32]
 5521              	.L377:
1757:..\src/interruptions.c ****         
 5522              		.loc 1 1757 0 is_stmt 0 discriminator 1
 5523 00fc 3B6A     		ldr	r3, [r7, #32]
 5524 00fe 022B     		cmp	r3, #2
 5525 0100 CDDD     		ble	.L379
 5526              	.LBE10:
1764:..\src/interruptions.c ****         }
1765:..\src/interruptions.c ****     }
1766:..\src/interruptions.c ****     
1767:..\src/interruptions.c ****     // S = SIGN BIT
1768:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1769:..\src/interruptions.c ****     // 0 = 0 BIT
1770:..\src/interruptions.c ****     // C = CONTROL BIT
1771:..\src/interruptions.c ****     
1772:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5527              		.loc 1 1772 0 is_stmt 1
 5528 0102 0023     		movs	r3, #0
 5529 0104 87F82F30 		strb	r3, [r7, #47]
 5530 0108 34E3     		b	.L380
 5531              	.L401:
1773:..\src/interruptions.c ****         
1774:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5532              		.loc 1 1774 0
 5533 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5534 010c 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5535 0110 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5536 0114 9B00     		lsls	r3, r3, #2
 5537 0116 07F13001 		add	r1, r7, #48
 5538 011a 0B44     		add	r3, r3, r1
 5539 011c 53F8281C 		ldr	r1, [r3, #-40]
 5540 0120 574C     		ldr	r4, .L408+24
 5541 0122 1346     		mov	r3, r2
 5542 0124 9B00     		lsls	r3, r3, #2
 5543 0126 1344     		add	r3, r3, r2
 5544 0128 0344     		add	r3, r3, r0
 5545 012a 44F82310 		str	r1, [r4, r3, lsl #2]
1775:..\src/interruptions.c ****         
1776:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5546              		.loc 1 1776 0
 5547 012e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5548 0132 9B00     		lsls	r3, r3, #2
 5549 0134 07F13002 		add	r2, r7, #48
 5550 0138 1344     		add	r3, r3, r2
 5551 013a 53F8283C 		ldr	r3, [r3, #-40]
 5552 013e 99B2     		uxth	r1, r3
 5553 0140 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5554 0142 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5555 0146 4F4C     		ldr	r4, .L408+28
 5556 0148 1346     		mov	r3, r2
 5557 014a 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 132


 5558 014c 1344     		add	r3, r3, r2
 5559 014e 9B00     		lsls	r3, r3, #2
 5560 0150 0344     		add	r3, r3, r0
 5561 0152 6833     		adds	r3, r3, #104
 5562 0154 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5563 0158 9BB2     		uxth	r3, r3
 5564 015a CB1A     		subs	r3, r1, r3
 5565 015c 9BB2     		uxth	r3, r3
 5566 015e BB85     		strh	r3, [r7, #44]	@ movhi
1777:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5567              		.loc 1 1777 0
 5568 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5569 0164 002B     		cmp	r3, #0
 5570 0166 04DA     		bge	.L381
1778:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5571              		.loc 1 1778 0
 5572 0168 BB8D     		ldrh	r3, [r7, #44]
 5573 016a 03F58053 		add	r3, r3, #4096
 5574 016e 9BB2     		uxth	r3, r3
 5575 0170 BB85     		strh	r3, [r7, #44]	@ movhi
 5576              	.L381:
1779:..\src/interruptions.c ****         }       // Range [0, 4096]
1780:..\src/interruptions.c **** 
1781:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5577              		.loc 1 1781 0
 5578 0172 B7F92C30 		ldrsh	r3, [r7, #44]
 5579 0176 B3F5006F 		cmp	r3, #2048
 5580 017a 04DB     		blt	.L382
1782:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5581              		.loc 1 1782 0
 5582 017c BB8D     		ldrh	r3, [r7, #44]
 5583 017e A3F58053 		sub	r3, r3, #4096
 5584 0182 9BB2     		uxth	r3, r3
 5585 0184 BB85     		strh	r3, [r7, #44]	@ movhi
 5586              	.L382:
1783:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1784:..\src/interruptions.c **** 
1785:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5587              		.loc 1 1785 0
 5588 0186 B7F92C30 		ldrsh	r3, [r7, #44]
 5589 018a 1B01     		lsls	r3, r3, #4
 5590 018c FB61     		str	r3, [r7, #28]
1786:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5591              		.loc 1 1786 0
 5592 018e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5593 0190 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5594 0194 3C48     		ldr	r0, .L408+32
 5595 0196 1346     		mov	r3, r2
 5596 0198 5B00     		lsls	r3, r3, #1
 5597 019a 1344     		add	r3, r3, r2
 5598 019c 0B44     		add	r3, r3, r1
 5599 019e FA69     		ldr	r2, [r7, #28]
 5600 01a0 40F82320 		str	r2, [r0, r3, lsl #2]
1787:..\src/interruptions.c **** 
1788:..\src/interruptions.c ****         // Initialize last_value_encoder
1789:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5601              		.loc 1 1789 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 133


 5602 01a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5603 01a6 394A     		ldr	r2, .L408+36
 5604 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5605 01aa 002B     		cmp	r3, #0
 5606 01ac 12D0     		beq	.L383
1790:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5607              		.loc 1 1790 0
 5608 01ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5609 01b0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5610 01b4 2D48     		ldr	r0, .L408+4
 5611 01b6 1346     		mov	r3, r2
 5612 01b8 5B00     		lsls	r3, r3, #1
 5613 01ba 1344     		add	r3, r3, r2
 5614 01bc 0B44     		add	r3, r3, r1
 5615 01be FA69     		ldr	r2, [r7, #28]
 5616 01c0 40F82320 		str	r2, [r0, r3, lsl #2]
1791:..\src/interruptions.c ****             if (index == 2)
 5617              		.loc 1 1791 0
 5618 01c4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5619 01c8 022B     		cmp	r3, #2
 5620 01ca 03D1     		bne	.L383
1792:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5621              		.loc 1 1792 0
 5622 01cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5623 01ce 2F4A     		ldr	r2, .L408+36
 5624 01d0 0021     		movs	r1, #0
 5625 01d2 D154     		strb	r1, [r2, r3]
 5626              	.L383:
1793:..\src/interruptions.c ****         }
1794:..\src/interruptions.c **** 
1795:..\src/interruptions.c ****         // Take care of rotations
1796:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5627              		.loc 1 1796 0
 5628 01d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5629 01d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5630 01da 2448     		ldr	r0, .L408+4
 5631 01dc 1346     		mov	r3, r2
 5632 01de 5B00     		lsls	r3, r3, #1
 5633 01e0 1344     		add	r3, r3, r2
 5634 01e2 0B44     		add	r3, r3, r1
 5635 01e4 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5636 01e8 FA69     		ldr	r2, [r7, #28]
 5637 01ea D31A     		subs	r3, r2, r3
 5638 01ec BB61     		str	r3, [r7, #24]
1797:..\src/interruptions.c **** 
1798:..\src/interruptions.c ****         // ====================== 1 TURN ======================
1799:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1800:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1801:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1802:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1803:..\src/interruptions.c ****         //                                               |           |
1804:..\src/interruptions.c ****         //                                           24575           -24576
1805:..\src/interruptions.c ****         //                                               |___________|
1806:..\src/interruptions.c ****         //                                                   49152
1807:..\src/interruptions.c **** 
1808:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1809:..\src/interruptions.c ****         // and update the variable only if the difference between
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 134


1810:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1811:..\src/interruptions.c **** 
1812:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1813:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1814:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1815:..\src/interruptions.c **** 
1816:..\src/interruptions.c ****         if (value_diff > 49152)
 5639              		.loc 1 1816 0
 5640 01ee BB69     		ldr	r3, [r7, #24]
 5641 01f0 B3F5404F 		cmp	r3, #49152
 5642 01f4 19DD     		ble	.L384
1817:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5643              		.loc 1 1817 0
 5644 01f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5645 01f8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5646 01fc 2448     		ldr	r0, .L408+40
 5647 01fe 3421     		movs	r1, #52
 5648 0200 01FB02F1 		mul	r1, r1, r2
 5649 0204 0144     		add	r1, r1, r0
 5650 0206 1944     		add	r1, r1, r3
 5651 0208 1831     		adds	r1, r1, #24
 5652 020a 91F90010 		ldrsb	r1, [r1]
 5653 020e C9B2     		uxtb	r1, r1
 5654 0210 0139     		subs	r1, r1, #1
 5655 0212 C9B2     		uxtb	r1, r1
 5656 0214 4CB2     		sxtb	r4, r1
 5657 0216 1E49     		ldr	r1, .L408+40
 5658 0218 3420     		movs	r0, #52
 5659 021a 00FB02F2 		mul	r2, r0, r2
 5660 021e 0A44     		add	r2, r2, r1
 5661 0220 1344     		add	r3, r3, r2
 5662 0222 1833     		adds	r3, r3, #24
 5663 0224 2246     		mov	r2, r4
 5664 0226 1A70     		strb	r2, [r3]
 5665 0228 5CE0     		b	.L385
 5666              	.L384:
1818:..\src/interruptions.c ****         else{ 
1819:..\src/interruptions.c ****             if (value_diff < -49152)
 5667              		.loc 1 1819 0
 5668 022a BB69     		ldr	r3, [r7, #24]
 5669 022c 13F5404F 		cmn	r3, #49152
 5670 0230 30DA     		bge	.L386
1820:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5671              		.loc 1 1820 0
 5672 0232 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5673 0234 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5674 0238 1548     		ldr	r0, .L408+40
 5675 023a 3421     		movs	r1, #52
 5676 023c 01FB02F1 		mul	r1, r1, r2
 5677 0240 0144     		add	r1, r1, r0
 5678 0242 1944     		add	r1, r1, r3
 5679 0244 1831     		adds	r1, r1, #24
 5680 0246 91F90010 		ldrsb	r1, [r1]
 5681 024a C9B2     		uxtb	r1, r1
 5682 024c 0131     		adds	r1, r1, #1
 5683 024e C9B2     		uxtb	r1, r1
 5684 0250 4CB2     		sxtb	r4, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 135


 5685 0252 0F49     		ldr	r1, .L408+40
 5686 0254 3420     		movs	r0, #52
 5687 0256 00FB02F2 		mul	r2, r0, r2
 5688 025a 0A44     		add	r2, r2, r1
 5689 025c 1344     		add	r3, r3, r2
 5690 025e 1833     		adds	r3, r3, #24
 5691 0260 2246     		mov	r2, r4
 5692 0262 1A70     		strb	r2, [r3]
 5693 0264 3EE0     		b	.L385
 5694              	.L409:
 5695 0266 00BF     		.align	2
 5696              	.L408:
 5697 0268 00000000 		.word	reset_last_value_flag
 5698 026c E0000000 		.word	last_value_encoder.10636
 5699 0270 00000000 		.word	N_Encoder_Line_Connected
 5700 0274 00000000 		.word	c_mem
 5701 0278 00000000 		.word	Encoder_Check
 5702 027c 00000000 		.word	Encoder_Value
 5703 0280 00000000 		.word	data_encoder_raw
 5704 0284 00000000 		.word	g_mem
 5705 0288 F8000000 		.word	comp_value_encoder.10637
 5706 028c 04000000 		.word	only_first_time.10639
 5707 0290 00000000 		.word	g_meas
 5708              	.L386:
1821:..\src/interruptions.c ****             else{
1822:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5709              		.loc 1 1822 0
 5710 0294 BB69     		ldr	r3, [r7, #24]
 5711 0296 002B     		cmp	r3, #0
 5712 0298 B8BF     		it	lt
 5713 029a 5B42     		rsblt	r3, r3, #0
 5714 029c B3F5804F 		cmp	r3, #16384
 5715 02a0 20DD     		ble	.L385
1823:..\src/interruptions.c ****                     error[n_line][index]++;
 5716              		.loc 1 1823 0
 5717 02a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5718 02a4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5719 02a8 9B48     		ldr	r0, .L410
 5720 02aa 1346     		mov	r3, r2
 5721 02ac 5B00     		lsls	r3, r3, #1
 5722 02ae 1344     		add	r3, r3, r2
 5723 02b0 0344     		add	r3, r3, r0
 5724 02b2 0B44     		add	r3, r3, r1
 5725 02b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5726 02b6 0133     		adds	r3, r3, #1
 5727 02b8 DCB2     		uxtb	r4, r3
 5728 02ba 9748     		ldr	r0, .L410
 5729 02bc 1346     		mov	r3, r2
 5730 02be 5B00     		lsls	r3, r3, #1
 5731 02c0 1344     		add	r3, r3, r2
 5732 02c2 0344     		add	r3, r3, r0
 5733 02c4 0B44     		add	r3, r3, r1
 5734 02c6 2246     		mov	r2, r4
 5735 02c8 1A70     		strb	r2, [r3]
1824:..\src/interruptions.c ****                                 
1825:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5736              		.loc 1 1825 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 136


 5737 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5738 02cc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5739 02d0 9148     		ldr	r0, .L410
 5740 02d2 1346     		mov	r3, r2
 5741 02d4 5B00     		lsls	r3, r3, #1
 5742 02d6 1344     		add	r3, r3, r2
 5743 02d8 0344     		add	r3, r3, r0
 5744 02da 0B44     		add	r3, r3, r1
 5745 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5746 02de 092B     		cmp	r3, #9
 5747 02e0 40F28682 		bls	.L407
 5748              	.L385:
1826:..\src/interruptions.c ****                         // Discard
1827:..\src/interruptions.c ****                         return;
1828:..\src/interruptions.c ****                 }
1829:..\src/interruptions.c ****             }
1830:..\src/interruptions.c ****         }
1831:..\src/interruptions.c **** 
1832:..\src/interruptions.c ****         error[n_line][index] = 0;
 5749              		.loc 1 1832 0
 5750 02e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5751 02e6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5752 02ea 8B48     		ldr	r0, .L410
 5753 02ec 1346     		mov	r3, r2
 5754 02ee 5B00     		lsls	r3, r3, #1
 5755 02f0 1344     		add	r3, r3, r2
 5756 02f2 0344     		add	r3, r3, r0
 5757 02f4 0B44     		add	r3, r3, r1
 5758 02f6 0022     		movs	r2, #0
 5759 02f8 1A70     		strb	r2, [r3]
1833:..\src/interruptions.c ****         
1834:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5760              		.loc 1 1834 0
 5761 02fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5762 02fc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5763 0300 8648     		ldr	r0, .L410+4
 5764 0302 1346     		mov	r3, r2
 5765 0304 5B00     		lsls	r3, r3, #1
 5766 0306 1344     		add	r3, r3, r2
 5767 0308 0B44     		add	r3, r3, r1
 5768 030a FA69     		ldr	r2, [r7, #28]
 5769 030c 40F82320 		str	r2, [r0, r3, lsl #2]
1835:..\src/interruptions.c **** 
1836:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5770              		.loc 1 1836 0
 5771 0310 FB69     		ldr	r3, [r7, #28]
 5772 0312 BB62     		str	r3, [r7, #40]
1837:..\src/interruptions.c **** 
1838:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5773              		.loc 1 1838 0
 5774 0314 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5775 0316 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5776 031a 8149     		ldr	r1, .L410+8
 5777 031c 3420     		movs	r0, #52
 5778 031e 00FB02F2 		mul	r2, r0, r2
 5779 0322 0A44     		add	r2, r2, r1
 5780 0324 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 137


 5781 0326 1833     		adds	r3, r3, #24
 5782 0328 93F90030 		ldrsb	r3, [r3]
 5783 032c 1B04     		lsls	r3, r3, #16
 5784 032e BA6A     		ldr	r2, [r7, #40]
 5785 0330 1344     		add	r3, r3, r2
 5786 0332 BB62     		str	r3, [r7, #40]
1839:..\src/interruptions.c ****         
1840:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5787              		.loc 1 1840 0
 5788 0334 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5789 0336 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5790 033a 7A48     		ldr	r0, .L410+12
 5791 033c 1346     		mov	r3, r2
 5792 033e 5B00     		lsls	r3, r3, #1
 5793 0340 1344     		add	r3, r3, r2
 5794 0342 9B00     		lsls	r3, r3, #2
 5795 0344 0B44     		add	r3, r3, r1
 5796 0346 6A33     		adds	r3, r3, #106
 5797 0348 9B00     		lsls	r3, r3, #2
 5798 034a 0344     		add	r3, r3, r0
 5799 034c 5B68     		ldr	r3, [r3, #4]	@ float
 5800 034e 4FF07E51 		mov	r1, #1065353216
 5801 0352 1846     		mov	r0, r3
 5802 0354 FFF7FEFF 		bl	__aeabi_fcmpeq
 5803 0358 0346     		mov	r3, r0
 5804 035a 002B     		cmp	r3, #0
 5805 035c 1AD1     		bne	.L388
1841:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5806              		.loc 1 1841 0
 5807 035e B86A     		ldr	r0, [r7, #40]
 5808 0360 FFF7FEFF 		bl	__aeabi_i2f
 5809 0364 0446     		mov	r4, r0
 5810 0366 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5811 0368 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5812 036c 6D48     		ldr	r0, .L410+12
 5813 036e 1346     		mov	r3, r2
 5814 0370 5B00     		lsls	r3, r3, #1
 5815 0372 1344     		add	r3, r3, r2
 5816 0374 9B00     		lsls	r3, r3, #2
 5817 0376 0B44     		add	r3, r3, r1
 5818 0378 6A33     		adds	r3, r3, #106
 5819 037a 9B00     		lsls	r3, r3, #2
 5820 037c 0344     		add	r3, r3, r0
 5821 037e 5B68     		ldr	r3, [r3, #4]	@ float
 5822 0380 1946     		mov	r1, r3
 5823 0382 2046     		mov	r0, r4
 5824 0384 FFF7FEFF 		bl	__aeabi_fmul
 5825 0388 0346     		mov	r3, r0
 5826 038a 1846     		mov	r0, r3
 5827 038c FFF7FEFF 		bl	__aeabi_f2iz
 5828 0390 0346     		mov	r3, r0
 5829 0392 BB62     		str	r3, [r7, #40]
 5830              	.L388:
1842:..\src/interruptions.c ****         }
1843:..\src/interruptions.c **** 
1844:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5831              		.loc 1 1844 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 138


 5832 0394 634B     		ldr	r3, .L410+12
 5833 0396 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5834 039a 002B     		cmp	r3, #0
 5835 039c 0BD1     		bne	.L390
1845:..\src/interruptions.c ****             // Right / Left hand turn
1846:..\src/interruptions.c ****             if (index == 0) {
 5836              		.loc 1 1846 0
 5837 039e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5838 03a2 002B     		cmp	r3, #0
 5839 03a4 07D1     		bne	.L390
1847:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5840              		.loc 1 1847 0
 5841 03a6 5F4B     		ldr	r3, .L410+12
 5842 03a8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5843 03ac 002B     		cmp	r3, #0
 5844 03ae 02D1     		bne	.L390
1848:..\src/interruptions.c ****                     value_encoder *= -1;        
 5845              		.loc 1 1848 0
 5846 03b0 BB6A     		ldr	r3, [r7, #40]
 5847 03b2 5B42     		negs	r3, r3
 5848 03b4 BB62     		str	r3, [r7, #40]
 5849              	.L390:
1849:..\src/interruptions.c ****                 }
1850:..\src/interruptions.c ****             }
1851:..\src/interruptions.c ****         } 
1852:..\src/interruptions.c ****         
1853:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5850              		.loc 1 1853 0
 5851 03b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5852 03b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5853 03bc 5848     		ldr	r0, .L410+8
 5854 03be 1346     		mov	r3, r2
 5855 03c0 5B00     		lsls	r3, r3, #1
 5856 03c2 1344     		add	r3, r3, r2
 5857 03c4 9B00     		lsls	r3, r3, #2
 5858 03c6 1344     		add	r3, r3, r2
 5859 03c8 0B44     		add	r3, r3, r1
 5860 03ca BA6A     		ldr	r2, [r7, #40]
 5861 03cc 40F82320 		str	r2, [r0, r3, lsl #2]
1854:..\src/interruptions.c ****     
1855:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5862              		.loc 1 1855 0
 5863 03d0 BA6A     		ldr	r2, [r7, #40]
 5864 03d2 1346     		mov	r3, r2
 5865 03d4 9B00     		lsls	r3, r3, #2
 5866 03d6 1344     		add	r3, r3, r2
 5867 03d8 5B00     		lsls	r3, r3, #1
 5868 03da 9918     		adds	r1, r3, r2
 5869 03dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5870 03de 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5871 03e2 514C     		ldr	r4, .L410+16
 5872 03e4 1346     		mov	r3, r2
 5873 03e6 5B00     		lsls	r3, r3, #1
 5874 03e8 1344     		add	r3, r3, r2
 5875 03ea 0344     		add	r3, r3, r0
 5876 03ec 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5877 03f0 6FF01102 		mvn	r2, #17
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 139


 5878 03f4 02FB03F3 		mul	r3, r2, r3
 5879 03f8 1944     		add	r1, r1, r3
 5880 03fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5881 03fc 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5882 0400 4A4C     		ldr	r4, .L410+20
 5883 0402 1346     		mov	r3, r2
 5884 0404 5B00     		lsls	r3, r3, #1
 5885 0406 1344     		add	r3, r3, r2
 5886 0408 0344     		add	r3, r3, r0
 5887 040a 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5888 040e 1346     		mov	r3, r2
 5889 0410 DB00     		lsls	r3, r3, #3
 5890 0412 1344     		add	r3, r3, r2
 5891 0414 1944     		add	r1, r1, r3
 5892 0416 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5893 0418 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5894 041c 444C     		ldr	r4, .L410+24
 5895 041e 1346     		mov	r3, r2
 5896 0420 5B00     		lsls	r3, r3, #1
 5897 0422 1344     		add	r3, r3, r2
 5898 0424 0344     		add	r3, r3, r0
 5899 0426 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5900 042a 5B00     		lsls	r3, r3, #1
 5901 042c C81A     		subs	r0, r1, r3
 5902 042e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5903 0432 DB00     		lsls	r3, r3, #3
 5904 0434 3F4A     		ldr	r2, .L410+28
 5905 0436 1344     		add	r3, r3, r2
 5906 0438 1946     		mov	r1, r3
 5907 043a FFF7FEFF 		bl	filter
 5908 043e 0346     		mov	r3, r0
 5909 0440 1BB2     		sxth	r3, r3
 5910 0442 7B61     		str	r3, [r7, #20]
1856:..\src/interruptions.c **** 
1857:..\src/interruptions.c ****         //Update current speed
1858:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5911              		.loc 1 1858 0
 5912 0444 7869     		ldr	r0, [r7, #20]
 5913 0446 FFF7FEFF 		bl	__aeabi_i2f
 5914 044a 0446     		mov	r4, r0
 5915 044c 3A4B     		ldr	r3, .L410+32
 5916 044e 1B68     		ldr	r3, [r3]	@ float
 5917 0450 3A49     		ldr	r1, .L410+36
 5918 0452 1846     		mov	r0, r3
 5919 0454 FFF7FEFF 		bl	__aeabi_fmul
 5920 0458 0346     		mov	r3, r0
 5921 045a 1946     		mov	r1, r3
 5922 045c 2046     		mov	r0, r4
 5923 045e FFF7FEFF 		bl	__aeabi_fdiv
 5924 0462 0346     		mov	r3, r0
 5925 0464 1846     		mov	r0, r3
 5926 0466 FFF7FEFF 		bl	__aeabi_f2iz
 5927 046a 0346     		mov	r3, r0
 5928 046c 7B61     		str	r3, [r7, #20]
1859:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5929              		.loc 1 1859 0
 5930 046e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 140


 5931 0470 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5932 0474 2A48     		ldr	r0, .L410+8
 5933 0476 1346     		mov	r3, r2
 5934 0478 5B00     		lsls	r3, r3, #1
 5935 047a 1344     		add	r3, r3, r2
 5936 047c 9B00     		lsls	r3, r3, #2
 5937 047e 1344     		add	r3, r3, r2
 5938 0480 0B44     		add	r3, r3, r1
 5939 0482 0633     		adds	r3, r3, #6
 5940 0484 9B00     		lsls	r3, r3, #2
 5941 0486 0344     		add	r3, r3, r0
 5942 0488 7A69     		ldr	r2, [r7, #20]
 5943 048a 5A60     		str	r2, [r3, #4]
1860:..\src/interruptions.c **** 
1861:..\src/interruptions.c ****         // update old velocity and acceleration values
1862:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5944              		.loc 1 1862 0
 5945 048c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5946 048e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5947 0492 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5948 0494 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5949 0498 244D     		ldr	r5, .L410+20
 5950 049a 0B46     		mov	r3, r1
 5951 049c 5B00     		lsls	r3, r3, #1
 5952 049e 0B44     		add	r3, r3, r1
 5953 04a0 2344     		add	r3, r3, r4
 5954 04a2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5955 04a6 224C     		ldr	r4, .L410+24
 5956 04a8 1346     		mov	r3, r2
 5957 04aa 5B00     		lsls	r3, r3, #1
 5958 04ac 1344     		add	r3, r3, r2
 5959 04ae 0344     		add	r3, r3, r0
 5960 04b0 44F82310 		str	r1, [r4, r3, lsl #2]
1863:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5961              		.loc 1 1863 0
 5962 04b4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5963 04b6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5964 04ba F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5965 04bc 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5966 04c0 194D     		ldr	r5, .L410+16
 5967 04c2 0B46     		mov	r3, r1
 5968 04c4 5B00     		lsls	r3, r3, #1
 5969 04c6 0B44     		add	r3, r3, r1
 5970 04c8 2344     		add	r3, r3, r4
 5971 04ca 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5972 04ce 174C     		ldr	r4, .L410+20
 5973 04d0 1346     		mov	r3, r2
 5974 04d2 5B00     		lsls	r3, r3, #1
 5975 04d4 1344     		add	r3, r3, r2
 5976 04d6 0344     		add	r3, r3, r0
 5977 04d8 44F82310 		str	r1, [r4, r3, lsl #2]
1864:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5978              		.loc 1 1864 0
 5979 04dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5980 04de 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5981 04e2 1148     		ldr	r0, .L410+16
 5982 04e4 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 141


 5983 04e6 5B00     		lsls	r3, r3, #1
 5984 04e8 1344     		add	r3, r3, r2
 5985 04ea 0B44     		add	r3, r3, r1
 5986 04ec BA6A     		ldr	r2, [r7, #40]
 5987 04ee 40F82320 		str	r2, [r0, r3, lsl #2]
1865:..\src/interruptions.c **** 
1866:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1867:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 5988              		.loc 1 1867 0
 5989 04f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5990 04f4 124A     		ldr	r2, .L410+40
 5991 04f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5992 04f8 002B     		cmp	r3, #0
 5993 04fa 40F03681 		bne	.L391
1868:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 5994              		.loc 1 1868 0
 5995 04fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5996 0500 104A     		ldr	r2, .L410+44
 5997 0502 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5998 0504 352B     		cmp	r3, #53
 5999 0506 1FD8     		bhi	.L392
1869:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 6000              		.loc 1 1869 0
 6001 0508 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6002 050a 0E4A     		ldr	r2, .L410+44
 6003 050c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 6004 050e 0132     		adds	r2, r2, #1
 6005 0510 D1B2     		uxtb	r1, r2
 6006 0512 0C4A     		ldr	r2, .L410+44
 6007 0514 D154     		strb	r1, [r2, r3]
 6008 0516 28E1     		b	.L391
 6009              	.L411:
 6010              		.align	2
 6011              	.L410:
 6012 0518 10010000 		.word	error.10638
 6013 051c E0000000 		.word	last_value_encoder.10636
 6014 0520 00000000 		.word	g_meas
 6015 0524 00000000 		.word	c_mem
 6016 0528 18010000 		.word	v_value.10643
 6017 052c 30010000 		.word	vv_value.10644
 6018 0530 48010000 		.word	vvv_value.10645
 6019 0534 00000000 		.word	filt_vel
 6020 0538 00000000 		.word	cycle_time
 6021 053c 0000C040 		.word	1086324736
 6022 0540 00000000 		.word	pos_reconstruct
 6023 0544 60010000 		.word	one_time_execute.10641
 6024              	.L392:
1870:..\src/interruptions.c ****             else {
1871:..\src/interruptions.c **** 
1872:..\src/interruptions.c ****                 //Double encoder translation
1873:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 6025              		.loc 1 1873 0
 6026 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6027 054a AB49     		ldr	r1, .L412
 6028 054c 1346     		mov	r3, r2
 6029 054e 5B00     		lsls	r3, r3, #1
 6030 0550 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 142


 6031 0552 1B01     		lsls	r3, r3, #4
 6032 0554 0B44     		add	r3, r3, r1
 6033 0556 03F5DC73 		add	r3, r3, #440
 6034 055a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6035 055c 002B     		cmp	r3, #0
 6036 055e 5ED0     		beq	.L393
1874:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6037              		.loc 1 1874 0
 6038 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6039 0562 A649     		ldr	r1, .L412+4
 6040 0564 1346     		mov	r3, r2
 6041 0566 5B00     		lsls	r3, r3, #1
 6042 0568 1344     		add	r3, r3, r2
 6043 056a 9B00     		lsls	r3, r3, #2
 6044 056c 0B44     		add	r3, r3, r1
 6045 056e 1868     		ldr	r0, [r3]
 6046 0570 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6047 0572 A249     		ldr	r1, .L412+4
 6048 0574 1346     		mov	r3, r2
 6049 0576 5B00     		lsls	r3, r3, #1
 6050 0578 1344     		add	r3, r3, r2
 6051 057a 9B00     		lsls	r3, r3, #2
 6052 057c 0B44     		add	r3, r3, r1
 6053 057e 0433     		adds	r3, r3, #4
 6054 0580 1C68     		ldr	r4, [r3]
1875:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 6055              		.loc 1 1875 0
 6056 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6057 0584 9C49     		ldr	r1, .L412
 6058 0586 1346     		mov	r3, r2
 6059 0588 5B00     		lsls	r3, r3, #1
 6060 058a 1344     		add	r3, r3, r2
 6061 058c 1B01     		lsls	r3, r3, #4
 6062 058e 0B44     		add	r3, r3, r1
 6063 0590 03F2BD13 		addw	r3, r3, #445
 6064 0594 93F90030 		ldrsb	r3, [r3]
1874:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6065              		.loc 1 1874 0
 6066 0598 1D46     		mov	r5, r3
 6067              		.loc 1 1875 0
 6068 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6069 059c 9649     		ldr	r1, .L412
 6070 059e 1346     		mov	r3, r2
 6071 05a0 5B00     		lsls	r3, r3, #1
 6072 05a2 1344     		add	r3, r3, r2
 6073 05a4 1B01     		lsls	r3, r3, #4
 6074 05a6 0B44     		add	r3, r3, r1
 6075 05a8 03F5DF73 		add	r3, r3, #446
 6076 05ac 93F90030 		ldrsb	r3, [r3]
1874:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6077              		.loc 1 1874 0
 6078 05b0 1E46     		mov	r6, r3
 6079              		.loc 1 1875 0
 6080 05b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6081 05b4 9049     		ldr	r1, .L412
 6082 05b6 1346     		mov	r3, r2
 6083 05b8 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 143


 6084 05ba 1344     		add	r3, r3, r2
 6085 05bc 1B01     		lsls	r3, r3, #4
 6086 05be 0B44     		add	r3, r3, r1
 6087 05c0 03F2BF13 		addw	r3, r3, #447
 6088 05c4 93F90030 		ldrsb	r3, [r3]
1874:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6089              		.loc 1 1874 0
 6090 05c8 0093     		str	r3, [sp]
 6091 05ca 3346     		mov	r3, r6
 6092 05cc 2A46     		mov	r2, r5
 6093 05ce 2146     		mov	r1, r4
 6094 05d0 FFF7FEFF 		bl	calc_turns_fcn
 6095 05d4 0346     		mov	r3, r0
 6096 05d6 87F82730 		strb	r3, [r7, #39]
1876:..\src/interruptions.c **** 
1877:..\src/interruptions.c **** 
1878:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 6097              		.loc 1 1878 0
 6098 05da FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6099 05dc 8649     		ldr	r1, .L412
 6100 05de 1346     		mov	r3, r2
 6101 05e0 5B00     		lsls	r3, r3, #1
 6102 05e2 1344     		add	r3, r3, r2
 6103 05e4 1B01     		lsls	r3, r3, #4
 6104 05e6 0B44     		add	r3, r3, r1
 6105 05e8 03F5D673 		add	r3, r3, #428
 6106 05ec 1B68     		ldr	r3, [r3]	@ float
 6107 05ee 4FF00001 		mov	r1, #0
 6108 05f2 1846     		mov	r0, r3
 6109 05f4 FFF7FEFF 		bl	__aeabi_fcmplt
 6110 05f8 0346     		mov	r3, r0
 6111 05fa 002B     		cmp	r3, #0
 6112 05fc 05D0     		beq	.L394
1879:..\src/interruptions.c ****                         init_rot = -init_rot;
 6113              		.loc 1 1879 0
 6114 05fe 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 6115 0602 5B42     		negs	r3, r3
 6116 0604 DBB2     		uxtb	r3, r3
 6117 0606 87F82730 		strb	r3, [r7, #39]
 6118              	.L394:
1880:..\src/interruptions.c ****                     
1881:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 6119              		.loc 1 1881 0
 6120 060a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6121 060c 7C4A     		ldr	r2, .L412+8
 6122 060e 3421     		movs	r1, #52
 6123 0610 01FB03F3 		mul	r3, r1, r3
 6124 0614 1344     		add	r3, r3, r2
 6125 0616 1833     		adds	r3, r3, #24
 6126 0618 97F82720 		ldrb	r2, [r7, #39]
 6127 061c 1A70     		strb	r2, [r3]
 6128              	.L393:
1882:..\src/interruptions.c ****                 }    
1883:..\src/interruptions.c **** 
1884:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 6129              		.loc 1 1884 0
 6130 061e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 144


 6131 0620 7549     		ldr	r1, .L412
 6132 0622 1346     		mov	r3, r2
 6133 0624 5B00     		lsls	r3, r3, #1
 6134 0626 1344     		add	r3, r3, r2
 6135 0628 1B01     		lsls	r3, r3, #4
 6136 062a 0B44     		add	r3, r3, r1
 6137 062c 03F5D673 		add	r3, r3, #428
 6138 0630 1B68     		ldr	r3, [r3]	@ float
 6139 0632 4FF07E51 		mov	r1, #1065353216
 6140 0636 1846     		mov	r0, r3
 6141 0638 FFF7FEFF 		bl	__aeabi_fcmpeq
 6142 063c 0346     		mov	r3, r0
 6143 063e 002B     		cmp	r3, #0
 6144 0640 22D1     		bne	.L396
1885:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 6145              		.loc 1 1885 0
 6146 0642 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6147 0644 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6148 0646 6E4A     		ldr	r2, .L412+8
 6149 0648 3421     		movs	r1, #52
 6150 064a 01FB03F3 		mul	r3, r1, r3
 6151 064e 1344     		add	r3, r3, r2
 6152 0650 1B68     		ldr	r3, [r3]
 6153 0652 1846     		mov	r0, r3
 6154 0654 FFF7FEFF 		bl	__aeabi_i2f
 6155 0658 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6156 065a 6749     		ldr	r1, .L412
 6157 065c 1346     		mov	r3, r2
 6158 065e 5B00     		lsls	r3, r3, #1
 6159 0660 1344     		add	r3, r3, r2
 6160 0662 1B01     		lsls	r3, r3, #4
 6161 0664 0B44     		add	r3, r3, r1
 6162 0666 03F5D673 		add	r3, r3, #428
 6163 066a 1B68     		ldr	r3, [r3]	@ float
 6164 066c 1946     		mov	r1, r3
 6165 066e FFF7FEFF 		bl	__aeabi_fdiv
 6166 0672 0346     		mov	r3, r0
 6167 0674 1846     		mov	r0, r3
 6168 0676 FFF7FEFF 		bl	__aeabi_f2iz
 6169 067a 0146     		mov	r1, r0
 6170 067c 604A     		ldr	r2, .L412+8
 6171 067e 3423     		movs	r3, #52
 6172 0680 03FB04F3 		mul	r3, r3, r4
 6173 0684 1344     		add	r3, r3, r2
 6174 0686 1960     		str	r1, [r3]
 6175              	.L396:
1886:..\src/interruptions.c ****                 
1887:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 6176              		.loc 1 1887 0
 6177 0688 97F92730 		ldrsb	r3, [r7, #39]
 6178 068c 1B04     		lsls	r3, r3, #16
 6179 068e BA6A     		ldr	r2, [r7, #40]
 6180 0690 1344     		add	r3, r3, r2
 6181 0692 BB62     		str	r3, [r7, #40]
1888:..\src/interruptions.c ****        
1889:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 6182              		.loc 1 1889 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 145


 6183 0694 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6184 0696 5849     		ldr	r1, .L412
 6185 0698 1346     		mov	r3, r2
 6186 069a 5B00     		lsls	r3, r3, #1
 6187 069c 1344     		add	r3, r3, r2
 6188 069e 1B01     		lsls	r3, r3, #4
 6189 06a0 0B44     		add	r3, r3, r1
 6190 06a2 03F5D673 		add	r3, r3, #428
 6191 06a6 1B68     		ldr	r3, [r3]	@ float
 6192 06a8 4FF07E51 		mov	r1, #1065353216
 6193 06ac 1846     		mov	r0, r3
 6194 06ae FFF7FEFF 		bl	__aeabi_fcmpeq
 6195 06b2 0346     		mov	r3, r0
 6196 06b4 002B     		cmp	r3, #0
 6197 06b6 15D1     		bne	.L398
1890:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 6198              		.loc 1 1890 0
 6199 06b8 B86A     		ldr	r0, [r7, #40]
 6200 06ba FFF7FEFF 		bl	__aeabi_i2f
 6201 06be FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6202 06c0 4D49     		ldr	r1, .L412
 6203 06c2 1346     		mov	r3, r2
 6204 06c4 5B00     		lsls	r3, r3, #1
 6205 06c6 1344     		add	r3, r3, r2
 6206 06c8 1B01     		lsls	r3, r3, #4
 6207 06ca 0B44     		add	r3, r3, r1
 6208 06cc 03F5D673 		add	r3, r3, #428
 6209 06d0 1B68     		ldr	r3, [r3]	@ float
 6210 06d2 1946     		mov	r1, r3
 6211 06d4 FFF7FEFF 		bl	__aeabi_fmul
 6212 06d8 0346     		mov	r3, r0
 6213 06da 1846     		mov	r0, r3
 6214 06dc FFF7FEFF 		bl	__aeabi_f2iz
 6215 06e0 0346     		mov	r3, r0
 6216 06e2 BB62     		str	r3, [r7, #40]
 6217              	.L398:
1891:..\src/interruptions.c ****                 }
1892:..\src/interruptions.c **** 
1893:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 6218              		.loc 1 1893 0
 6219 06e4 444B     		ldr	r3, .L412
 6220 06e6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6221 06ea 002B     		cmp	r3, #0
 6222 06ec 07D1     		bne	.L400
1894:..\src/interruptions.c ****                     // Right / Left hand turn
1895:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
 6223              		.loc 1 1895 0
 6224 06ee 424B     		ldr	r3, .L412
 6225 06f0 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 6226 06f4 002B     		cmp	r3, #0
 6227 06f6 02D1     		bne	.L400
1896:..\src/interruptions.c ****                         value_encoder *= -1;        
 6228              		.loc 1 1896 0
 6229 06f8 BB6A     		ldr	r3, [r7, #40]
 6230 06fa 5B42     		negs	r3, r3
 6231 06fc BB62     		str	r3, [r7, #40]
 6232              	.L400:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 146


1897:..\src/interruptions.c ****                     }
1898:..\src/interruptions.c ****                 }
1899:..\src/interruptions.c ****          
1900:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 6233              		.loc 1 1900 0
 6234 06fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6235 0700 3F4A     		ldr	r2, .L412+8
 6236 0702 3421     		movs	r1, #52
 6237 0704 01FB03F3 		mul	r3, r1, r3
 6238 0708 1344     		add	r3, r3, r2
 6239 070a BA6A     		ldr	r2, [r7, #40]
 6240 070c 1A60     		str	r2, [r3]
1901:..\src/interruptions.c ****                 
1902:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6241              		.loc 1 1902 0
 6242 070e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6243 0710 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6244 0712 3B49     		ldr	r1, .L412+8
 6245 0714 3420     		movs	r0, #52
 6246 0716 00FB02F2 		mul	r2, r0, r2
 6247 071a 0A44     		add	r2, r2, r1
 6248 071c 1268     		ldr	r2, [r2]
 6249 071e 3949     		ldr	r1, .L412+12
 6250 0720 1B01     		lsls	r3, r3, #4
 6251 0722 0B44     		add	r3, r3, r1
 6252 0724 1A60     		str	r2, [r3]
1903:..\src/interruptions.c **** 
1904:..\src/interruptions.c ****                 // If necessary activate motor
1905:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6253              		.loc 1 1905 0
 6254 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6255 0728 374A     		ldr	r2, .L412+16
 6256 072a 0121     		movs	r1, #1
 6257 072c D154     		strb	r1, [r2, r3]
1906:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1907:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6258              		.loc 1 1907 0
 6259 072e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6260 0730 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6261 0732 3149     		ldr	r1, .L412
 6262 0734 7420     		movs	r0, #116
 6263 0736 00FB02F2 		mul	r2, r0, r2
 6264 073a 0A44     		add	r2, r2, r1
 6265 073c E032     		adds	r2, r2, #224
 6266 073e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 6267 0740 304A     		ldr	r2, .L412+12
 6268 0742 1B01     		lsls	r3, r3, #4
 6269 0744 1344     		add	r3, r3, r2
 6270 0746 0C33     		adds	r3, r3, #12
 6271 0748 0A46     		mov	r2, r1
 6272 074a 1A70     		strb	r2, [r3]
1908:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6273              		.loc 1 1908 0
 6274 074c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6275 074e 2D4A     		ldr	r2, .L412+12
 6276 0750 1B01     		lsls	r3, r3, #4
 6277 0752 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 147


 6278 0754 0C33     		adds	r3, r3, #12
 6279 0756 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6280 0758 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6281 075a 1146     		mov	r1, r2
 6282 075c 1846     		mov	r0, r3
 6283 075e FFF7FEFF 		bl	enable_motor
1909:..\src/interruptions.c ****                 
1910:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6284              		.loc 1 1910 0
 6285 0762 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6286 0764 294A     		ldr	r2, .L412+20
 6287 0766 0121     		movs	r1, #1
 6288 0768 D154     		strb	r1, [r2, r3]
 6289              	.L391:
1772:..\src/interruptions.c ****         
 6290              		.loc 1 1772 0 discriminator 2
 6291 076a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6292 076e 0133     		adds	r3, r3, #1
 6293 0770 87F82F30 		strb	r3, [r7, #47]
 6294              	.L380:
1772:..\src/interruptions.c ****         
 6295              		.loc 1 1772 0 is_stmt 0 discriminator 1
 6296 0774 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6297 0778 022B     		cmp	r3, #2
 6298 077a 7FF6C6AC 		bls	.L401
1911:..\src/interruptions.c ****             }
1912:..\src/interruptions.c ****         }
1913:..\src/interruptions.c ****     } 
1914:..\src/interruptions.c **** 
1915:..\src/interruptions.c **** 	
1916:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1917:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6299              		.loc 1 1917 0 is_stmt 1
 6300 077e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6301 0780 214A     		ldr	r2, .L412+16
 6302 0782 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6303 0784 002B     		cmp	r3, #0
 6304 0786 34D0     		beq	.L371
1918:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6305              		.loc 1 1918 0
 6306 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6307 078a 214A     		ldr	r2, .L412+24
 6308 078c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6309 0790 0132     		adds	r2, r2, #1
 6310 0792 1F49     		ldr	r1, .L412+24
 6311 0794 41F82320 		str	r2, [r1, r3, lsl #2]
1919:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6312              		.loc 1 1919 0
 6313 0798 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6314 079a 1D4A     		ldr	r2, .L412+24
 6315 079c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6316 07a0 B3F5FA5F 		cmp	r3, #8000
 6317 07a4 25D3     		bcc	.L371
1920:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6318              		.loc 1 1920 0
 6319 07a6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6320 07a8 164A     		ldr	r2, .L412+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 148


 6321 07aa 1B01     		lsls	r3, r3, #4
 6322 07ac 1344     		add	r3, r3, r2
 6323 07ae 0022     		movs	r2, #0
 6324 07b0 1A60     		str	r2, [r3]
1921:..\src/interruptions.c ****             
1922:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1923:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6325              		.loc 1 1923 0
 6326 07b2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6327 07b4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6328 07b6 1049     		ldr	r1, .L412
 6329 07b8 7420     		movs	r0, #116
 6330 07ba 00FB02F2 		mul	r2, r0, r2
 6331 07be 0A44     		add	r2, r2, r1
 6332 07c0 E032     		adds	r2, r2, #224
 6333 07c2 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 6334 07c4 0F4A     		ldr	r2, .L412+12
 6335 07c6 1B01     		lsls	r3, r3, #4
 6336 07c8 1344     		add	r3, r3, r2
 6337 07ca 0C33     		adds	r3, r3, #12
 6338 07cc 0A46     		mov	r2, r1
 6339 07ce 1A70     		strb	r2, [r3]
1924:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6340              		.loc 1 1924 0
 6341 07d0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6342 07d2 0C4A     		ldr	r2, .L412+12
 6343 07d4 1B01     		lsls	r3, r3, #4
 6344 07d6 1344     		add	r3, r3, r2
 6345 07d8 0C33     		adds	r3, r3, #12
 6346 07da 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6347 07dc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6348 07de 1146     		mov	r1, r2
 6349 07e0 1846     		mov	r0, r3
 6350 07e2 FFF7FEFF 		bl	enable_motor
1925:..\src/interruptions.c ****                         
1926:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6351              		.loc 1 1926 0
 6352 07e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6353 07e8 074A     		ldr	r2, .L412+16
 6354 07ea 0021     		movs	r1, #0
 6355 07ec D154     		strb	r1, [r2, r3]
 6356 07ee 00E0     		b	.L371
 6357              	.L407:
1827:..\src/interruptions.c ****                 }
 6358              		.loc 1 1827 0
 6359 07f0 00BF     		nop
 6360              	.L371:
1927:..\src/interruptions.c ****         }
1928:..\src/interruptions.c ****     }
1929:..\src/interruptions.c ****  
1930:..\src/interruptions.c **** }
 6361              		.loc 1 1930 0
 6362 07f2 3437     		adds	r7, r7, #52
 6363              		.cfi_def_cfa_offset 20
 6364 07f4 BD46     		mov	sp, r7
 6365              		.cfi_def_cfa_register 13
 6366              		@ sp needed
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 149


 6367 07f6 F0BD     		pop	{r4, r5, r6, r7, pc}
 6368              	.L413:
 6369              		.align	2
 6370              	.L412:
 6371 07f8 00000000 		.word	c_mem
 6372 07fc F8000000 		.word	comp_value_encoder.10637
 6373 0800 00000000 		.word	g_meas
 6374 0804 00000000 		.word	g_refNew
 6375 0808 64010000 		.word	safe_startup_motor_activation.10640
 6376 080c 00000000 		.word	pos_reconstruct
 6377 0810 68010000 		.word	count_startup_motor.10642
 6378              		.cfi_endproc
 6379              	.LFE73:
 6380              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6381              		.section	.text.analog_read_end,"ax",%progbits
 6382              		.align	2
 6383              		.global	analog_read_end
 6384              		.thumb
 6385              		.thumb_func
 6386              		.type	analog_read_end, %function
 6387              	analog_read_end:
 6388              	.LFB74:
1931:..\src/interruptions.c **** 
1932:..\src/interruptions.c **** //==============================================================================
1933:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1934:..\src/interruptions.c **** //==============================================================================
1935:..\src/interruptions.c **** 
1936:..\src/interruptions.c **** void analog_read_end() {
 6389              		.loc 1 1936 0
 6390              		.cfi_startproc
 6391              		@ args = 0, pretend = 0, frame = 8
 6392              		@ frame_needed = 1, uses_anonymous_args = 0
 6393 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6394              		.cfi_def_cfa_offset 20
 6395              		.cfi_offset 4, -20
 6396              		.cfi_offset 5, -16
 6397              		.cfi_offset 6, -12
 6398              		.cfi_offset 7, -8
 6399              		.cfi_offset 14, -4
 6400 0002 83B0     		sub	sp, sp, #12
 6401              		.cfi_def_cfa_offset 32
 6402 0004 00AF     		add	r7, sp, #0
 6403              		.cfi_def_cfa_register 7
1937:..\src/interruptions.c **** 
1938:..\src/interruptions.c ****     /* =========================================================================
1939:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
1940:..\src/interruptions.c ****     /
1941:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1942:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1943:..\src/interruptions.c ****     /
1944:..\src/interruptions.c ****     /   Definition:
1945:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1946:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1947:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1948:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1949:..\src/interruptions.c ****     /
1950:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 150


1951:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1952:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1953:..\src/interruptions.c ****     /  =========================================================================
1954:..\src/interruptions.c ****     */
1955:..\src/interruptions.c **** 
1956:..\src/interruptions.c ****     int32 CYDATA i_aux;
1957:..\src/interruptions.c **** 
1958:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1959:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1960:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1961:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1962:..\src/interruptions.c ****     static int32 UD_mean_value;
1963:..\src/interruptions.c ****     static int32 LR_mean_value;
1964:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1965:..\src/interruptions.c ****     static int32 detect_power_cycle_prev = -3;
1966:..\src/interruptions.c ****     static uint16 count = 0;
1967:..\src/interruptions.c ****     static uint32 v_count = 0;
1968:..\src/interruptions.c ****     static uint8 idx = 0;
1969:..\src/interruptions.c ****     
1970:..\src/interruptions.c ****     
1971:..\src/interruptions.c ****     // Wait for conversion end
1972:..\src/interruptions.c ****     
1973:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6404              		.loc 1 1973 0
 6405 0006 08E0     		b	.L415
 6406              	.L416:
1974:..\src/interruptions.c ****         
1975:..\src/interruptions.c ****         if (interrupt_flag){
 6407              		.loc 1 1975 0
 6408 0008 AA4B     		ldr	r3, .L572
 6409 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6410 000c 002B     		cmp	r3, #0
 6411 000e 04D0     		beq	.L415
1976:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6412              		.loc 1 1976 0
 6413 0010 A84B     		ldr	r3, .L572
 6414 0012 0022     		movs	r2, #0
 6415 0014 1A70     		strb	r2, [r3]
1977:..\src/interruptions.c ****             interrupt_manager();
 6416              		.loc 1 1977 0
 6417 0016 FFF7FEFF 		bl	interrupt_manager
 6418              	.L415:
1973:..\src/interruptions.c ****         
 6419              		.loc 1 1973 0
 6420 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6421 001e 0346     		mov	r3, r0
 6422 0020 002B     		cmp	r3, #0
 6423 0022 F1D0     		beq	.L416
1978:..\src/interruptions.c ****         }
1979:..\src/interruptions.c ****     }
1980:..\src/interruptions.c ****     
1981:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1982:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1983:..\src/interruptions.c ****         // Read pressure in any case
1984:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1985:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1986:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 151


1987:..\src/interruptions.c ****     }
1988:..\src/interruptions.c **** #endif
1989:..\src/interruptions.c ****  
1990:..\src/interruptions.c ****     // Convert tension read
1991:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6424              		.loc 1 1991 0
 6425 0024 A44B     		ldr	r3, .L572+4
 6426 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6427 002a 022B     		cmp	r3, #2
 6428 002c 04D1     		bne	.L417
1992:..\src/interruptions.c ****         dev_tension[0] = 5000;
 6429              		.loc 1 1992 0
 6430 002e A34B     		ldr	r3, .L572+8
 6431 0030 41F28832 		movw	r2, #5000
 6432 0034 1A60     		str	r2, [r3]
 6433 0036 0BE0     		b	.L418
 6434              	.L417:
1993:..\src/interruptions.c ****     }
1994:..\src/interruptions.c ****     else {
1995:..\src/interruptions.c ****         dev_tension[0] =  ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 6435              		.loc 1 1995 0
 6436 0038 A14B     		ldr	r3, .L572+12
 6437 003a B3F90030 		ldrsh	r3, [r3]
 6438 003e A3F25563 		subw	r3, r3, #1621
 6439 0042 40F2C672 		movw	r2, #1990
 6440 0046 02FB03F3 		mul	r3, r2, r3
 6441 004a DB11     		asrs	r3, r3, #7
 6442 004c 9B4A     		ldr	r2, .L572+8
 6443 004e 1360     		str	r3, [r2]
 6444              	.L418:
1996:..\src/interruptions.c ****     }
1997:..\src/interruptions.c ****     
1998:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1999:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6445              		.loc 1 1999 0
 6446 0050 9C4B     		ldr	r3, .L572+16
 6447 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6448 0054 042B     		cmp	r3, #4
 6449 0056 0BD9     		bls	.L419
2000:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6450              		.loc 1 2000 0
 6451 0058 994B     		ldr	r3, .L572+12
 6452 005a B3F90830 		ldrsh	r3, [r3, #8]
 6453 005e A3F25563 		subw	r3, r3, #1621
 6454 0062 40F2C672 		movw	r2, #1990
 6455 0066 02FB03F3 		mul	r3, r2, r3
 6456 006a DB11     		asrs	r3, r3, #7
 6457 006c 934A     		ldr	r2, .L572+8
 6458 006e 5360     		str	r3, [r2, #4]
 6459              	.L419:
2001:..\src/interruptions.c ****     }
2002:..\src/interruptions.c ****     
2003:..\src/interruptions.c ****     if (interrupt_flag){
 6460              		.loc 1 2003 0
 6461 0070 904B     		ldr	r3, .L572
 6462 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6463 0074 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 152


 6464 0076 04D0     		beq	.L420
2004:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6465              		.loc 1 2004 0
 6466 0078 8E4B     		ldr	r3, .L572
 6467 007a 0022     		movs	r2, #0
 6468 007c 1A70     		strb	r2, [r3]
2005:..\src/interruptions.c ****         interrupt_manager();
 6469              		.loc 1 2005 0
 6470 007e FFF7FEFF 		bl	interrupt_manager
 6471              	.L420:
2006:..\src/interruptions.c ****     }
2007:..\src/interruptions.c ****     
2008:..\src/interruptions.c ****     // Update cycle power value
2009:..\src/interruptions.c ****     detect_power_cycle = filter(dev_tension[0]/6000, &filt_detect_pc);
 6472              		.loc 1 2009 0
 6473 0082 8E4B     		ldr	r3, .L572+8
 6474 0084 1B68     		ldr	r3, [r3]
 6475 0086 904A     		ldr	r2, .L572+20
 6476 0088 82FB0312 		smull	r1, r2, r2, r3
 6477 008c D211     		asrs	r2, r2, #7
 6478 008e DB17     		asrs	r3, r3, #31
 6479 0090 D31A     		subs	r3, r2, r3
 6480 0092 8E49     		ldr	r1, .L572+24
 6481 0094 1846     		mov	r0, r3
 6482 0096 FFF7FEFF 		bl	filter
 6483 009a 0246     		mov	r2, r0
 6484 009c 8C4B     		ldr	r3, .L572+28
 6485 009e 1A60     		str	r2, [r3]
2010:..\src/interruptions.c ****     if (detect_power_cycle_prev < 0 && detect_power_cycle >= 0){    // Only positive difference is 
 6486              		.loc 1 2010 0
 6487 00a0 8C4B     		ldr	r3, .L572+32
 6488 00a2 1B68     		ldr	r3, [r3]
 6489 00a4 002B     		cmp	r3, #0
 6490 00a6 08DA     		bge	.L421
 6491              		.loc 1 2010 0 is_stmt 0 discriminator 1
 6492 00a8 894B     		ldr	r3, .L572+28
 6493 00aa 1B68     		ldr	r3, [r3]
 6494 00ac 002B     		cmp	r3, #0
 6495 00ae 04DB     		blt	.L421
2011:..\src/interruptions.c ****         g_mem.cnt.power_cycles++;       // New power cycle (update value)   
 6496              		.loc 1 2011 0 is_stmt 1
 6497 00b0 814B     		ldr	r3, .L572+4
 6498 00b2 1B6E     		ldr	r3, [r3, #96]
 6499 00b4 0133     		adds	r3, r3, #1
 6500 00b6 804A     		ldr	r2, .L572+4
 6501 00b8 1366     		str	r3, [r2, #96]
 6502              	.L421:
2012:..\src/interruptions.c ****     }
2013:..\src/interruptions.c ****     detect_power_cycle_prev = detect_power_cycle;
 6503              		.loc 1 2013 0
 6504 00ba 854B     		ldr	r3, .L572+28
 6505 00bc 1B68     		ldr	r3, [r3]
 6506 00be 854A     		ldr	r2, .L572+32
 6507 00c0 1360     		str	r3, [r2]
2014:..\src/interruptions.c ****   
2015:..\src/interruptions.c ****     
2016:..\src/interruptions.c ****     // VOLTAGE READING
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 153


2017:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
2018:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
2019:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
2020:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
2021:..\src/interruptions.c ****     
2022:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6508              		.loc 1 2022 0
 6509 00c2 854B     		ldr	r3, .L572+36
 6510 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6511 00c6 002B     		cmp	r3, #0
 6512 00c8 4DD0     		beq	.L422
 6513              		.loc 1 2022 0 is_stmt 0 discriminator 1
 6514 00ca 844B     		ldr	r3, .L572+40
 6515 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6516 00ce 002B     		cmp	r3, #0
 6517 00d0 49D0     		beq	.L422
2023:..\src/interruptions.c ****         count = count + 1;
 6518              		.loc 1 2023 0 is_stmt 1
 6519 00d2 834B     		ldr	r3, .L572+44
 6520 00d4 1B88     		ldrh	r3, [r3]
 6521 00d6 0133     		adds	r3, r3, #1
 6522 00d8 9AB2     		uxth	r2, r3
 6523 00da 814B     		ldr	r3, .L572+44
 6524 00dc 1A80     		strh	r2, [r3]	@ movhi
2024:..\src/interruptions.c ****         
2025:..\src/interruptions.c ****         if (count == 1000){
 6525              		.loc 1 2025 0
 6526 00de 804B     		ldr	r3, .L572+44
 6527 00e0 1B88     		ldrh	r3, [r3]
 6528 00e2 B3F57A7F 		cmp	r3, #1000
 6529 00e6 3ED1     		bne	.L422
2026:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6530              		.loc 1 2026 0
 6531 00e8 7E4B     		ldr	r3, .L572+48
 6532 00ea 0022     		movs	r2, #0
 6533 00ec 1A70     		strb	r2, [r3]
 6534 00ee 33E0     		b	.L423
 6535              	.L427:
2027:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6536              		.loc 1 2027 0
 6537 00f0 7C4B     		ldr	r3, .L572+48
 6538 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6539 00f4 1A46     		mov	r2, r3
 6540 00f6 714B     		ldr	r3, .L572+8
 6541 00f8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6542 00fc 42F22732 		movw	r2, #8999
 6543 0100 9342     		cmp	r3, r2
 6544 0102 08DC     		bgt	.L424
2028:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6545              		.loc 1 2028 0
 6546 0104 774B     		ldr	r3, .L572+48
 6547 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6548 0108 1946     		mov	r1, r3
 6549 010a 774B     		ldr	r3, .L572+52
 6550 010c 4FF4FA52 		mov	r2, #8000
 6551 0110 43F82120 		str	r2, [r3, r1, lsl #2]
 6552 0114 1AE0     		b	.L425
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 154


 6553              	.L424:
2029:..\src/interruptions.c ****                 }
2030:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
2031:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6554              		.loc 1 2031 0
 6555 0116 734B     		ldr	r3, .L572+48
 6556 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6557 011a 1A46     		mov	r2, r3
 6558 011c 674B     		ldr	r3, .L572+8
 6559 011e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6560 0122 43F2C722 		movw	r2, #12999
 6561 0126 9342     		cmp	r3, r2
 6562 0128 08DC     		bgt	.L426
2032:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6563              		.loc 1 2032 0
 6564 012a 6E4B     		ldr	r3, .L572+48
 6565 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6566 012e 1946     		mov	r1, r3
 6567 0130 6D4B     		ldr	r3, .L572+52
 6568 0132 42F6E062 		movw	r2, #12000
 6569 0136 43F82120 		str	r2, [r3, r1, lsl #2]
 6570 013a 07E0     		b	.L425
 6571              	.L426:
2033:..\src/interruptions.c ****                     }
2034:..\src/interruptions.c ****                     else
2035:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6572              		.loc 1 2035 0
 6573 013c 694B     		ldr	r3, .L572+48
 6574 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6575 0140 1946     		mov	r1, r3
 6576 0142 694B     		ldr	r3, .L572+52
 6577 0144 45F6C052 		movw	r2, #24000
 6578 0148 43F82120 		str	r2, [r3, r1, lsl #2]
 6579              	.L425:
2026:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6580              		.loc 1 2026 0 discriminator 2
 6581 014c 654B     		ldr	r3, .L572+48
 6582 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6583 0150 0133     		adds	r3, r3, #1
 6584 0152 DAB2     		uxtb	r2, r3
 6585 0154 634B     		ldr	r3, .L572+48
 6586 0156 1A70     		strb	r2, [r3]
 6587              	.L423:
2026:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6588              		.loc 1 2026 0 is_stmt 0 discriminator 1
 6589 0158 624B     		ldr	r3, .L572+48
 6590 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6591 015c 012B     		cmp	r3, #1
 6592 015e C7D9     		bls	.L427
2036:..\src/interruptions.c ****                 }
2037:..\src/interruptions.c ****             }
2038:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6593              		.loc 1 2038 0 is_stmt 1
 6594 0160 5D4B     		ldr	r3, .L572+36
 6595 0162 0022     		movs	r2, #0
 6596 0164 1A70     		strb	r2, [r3]
 6597              	.L422:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 155


2039:..\src/interruptions.c ****         }
2040:..\src/interruptions.c ****     }
2041:..\src/interruptions.c **** 
2042:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
2043:..\src/interruptions.c **** 
2044:..\src/interruptions.c ****     if (dev_tension[0] < 6500 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 6500)) {       // Vol
 6598              		.loc 1 2044 0
 6599 0166 554B     		ldr	r3, .L572+8
 6600 0168 1B68     		ldr	r3, [r3]
 6601 016a 41F66312 		movw	r2, #6499
 6602 016e 9342     		cmp	r3, r2
 6603 0170 00F3EF80 		bgt	.L428
 6604              		.loc 1 2044 0 is_stmt 0 discriminator 1
 6605 0174 534B     		ldr	r3, .L572+16
 6606 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6607 0178 042B     		cmp	r3, #4
 6608 017a 06D9     		bls	.L429
 6609              		.loc 1 2044 0 discriminator 2
 6610 017c 4F4B     		ldr	r3, .L572+8
 6611 017e 5B68     		ldr	r3, [r3, #4]
 6612 0180 41F66312 		movw	r2, #6499
 6613 0184 9342     		cmp	r3, r2
 6614 0186 00F3E480 		bgt	.L428
 6615              	.L429:
2045:..\src/interruptions.c ****         // PSoC is powered through uUSB
2046:..\src/interruptions.c ****         
2047:..\src/interruptions.c ****         tension_valid = FALSE;
 6616              		.loc 1 2047 0 is_stmt 1
 6617 018a 544B     		ldr	r3, .L572+40
 6618 018c 0022     		movs	r2, #0
 6619 018e 1A70     		strb	r2, [r3]
2048:..\src/interruptions.c ****             
2049:..\src/interruptions.c ****         if (interrupt_flag){
 6620              		.loc 1 2049 0
 6621 0190 484B     		ldr	r3, .L572
 6622 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6623 0194 002B     		cmp	r3, #0
 6624 0196 04D0     		beq	.L430
2050:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6625              		.loc 1 2050 0
 6626 0198 464B     		ldr	r3, .L572
 6627 019a 0022     		movs	r2, #0
 6628 019c 1A70     		strb	r2, [r3]
2051:..\src/interruptions.c ****             interrupt_manager();
 6629              		.loc 1 2051 0
 6630 019e FFF7FEFF 		bl	interrupt_manager
 6631              	.L430:
2052:..\src/interruptions.c ****         }
2053:..\src/interruptions.c ****         
2054:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6632              		.loc 1 2054 0
 6633 01a2 504B     		ldr	r3, .L572+48
 6634 01a4 0022     		movs	r2, #0
 6635 01a6 1A70     		strb	r2, [r3]
 6636 01a8 7BE0     		b	.L431
 6637              	.L434:
2055:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 156


 6638              		.loc 1 2055 0
 6639 01aa 504B     		ldr	r3, .L572+56
 6640 01ac 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6641 01b0 002B     		cmp	r3, #0
 6642 01b2 54D0     		beq	.L432
2056:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6643              		.loc 1 2056 0
 6644 01b4 4B4B     		ldr	r3, .L572+48
 6645 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6646 01b8 1946     		mov	r1, r3
 6647 01ba 4C4A     		ldr	r2, .L572+56
 6648 01bc 7423     		movs	r3, #116
 6649 01be 03FB01F3 		mul	r3, r3, r1
 6650 01c2 1344     		add	r3, r3, r2
 6651 01c4 03F58773 		add	r3, r3, #270
 6652 01c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6653 01ca 022B     		cmp	r3, #2
 6654 01cc 33D0     		beq	.L433
2057:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6655              		.loc 1 2057 0 discriminator 1
 6656 01ce 454B     		ldr	r3, .L572+48
 6657 01d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6658 01d2 1946     		mov	r1, r3
 6659 01d4 454A     		ldr	r2, .L572+56
 6660 01d6 7423     		movs	r3, #116
 6661 01d8 03FB01F3 		mul	r3, r3, r1
 6662 01dc 1344     		add	r3, r3, r2
 6663 01de 03F58773 		add	r3, r3, #270
 6664 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2056:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6665              		.loc 1 2056 0 discriminator 1
 6666 01e4 032B     		cmp	r3, #3
 6667 01e6 26D0     		beq	.L433
2058:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6668              		.loc 1 2058 0
 6669 01e8 3E4B     		ldr	r3, .L572+48
 6670 01ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6671 01ec 1946     		mov	r1, r3
 6672 01ee 3F4A     		ldr	r2, .L572+56
 6673 01f0 7423     		movs	r3, #116
 6674 01f2 03FB01F3 		mul	r3, r3, r1
 6675 01f6 1344     		add	r3, r3, r2
 6676 01f8 03F58773 		add	r3, r3, #270
 6677 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2057:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6678              		.loc 1 2057 0
 6679 01fe 042B     		cmp	r3, #4
 6680 0200 19D0     		beq	.L433
2059:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6681              		.loc 1 2059 0
 6682 0202 384B     		ldr	r3, .L572+48
 6683 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6684 0206 1946     		mov	r1, r3
 6685 0208 384A     		ldr	r2, .L572+56
 6686 020a 7423     		movs	r3, #116
 6687 020c 03FB01F3 		mul	r3, r3, r1
 6688 0210 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 157


 6689 0212 03F58773 		add	r3, r3, #270
 6690 0216 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2058:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6691              		.loc 1 2058 0
 6692 0218 052B     		cmp	r3, #5
 6693 021a 0CD0     		beq	.L433
2060:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6694              		.loc 1 2060 0
 6695 021c 314B     		ldr	r3, .L572+48
 6696 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6697 0220 1946     		mov	r1, r3
 6698 0222 324A     		ldr	r2, .L572+56
 6699 0224 7423     		movs	r3, #116
 6700 0226 03FB01F3 		mul	r3, r3, r1
 6701 022a 1344     		add	r3, r3, r2
 6702 022c 03F58773 		add	r3, r3, #270
 6703 0230 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2059:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6704              		.loc 1 2059 0
 6705 0232 072B     		cmp	r3, #7
 6706 0234 13D1     		bne	.L432
 6707              	.L433:
2061:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6708              		.loc 1 2061 0
 6709 0236 2B4B     		ldr	r3, .L572+48
 6710 0238 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6711 023a 2D4A     		ldr	r2, .L572+60
 6712 023c 1B01     		lsls	r3, r3, #4
 6713 023e 1344     		add	r3, r3, r2
 6714 0240 0C33     		adds	r3, r3, #12
 6715 0242 0022     		movs	r2, #0
 6716 0244 1A70     		strb	r2, [r3]
2062:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6717              		.loc 1 2062 0
 6718 0246 274B     		ldr	r3, .L572+48
 6719 0248 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6720 024a 264B     		ldr	r3, .L572+48
 6721 024c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6722 024e 284A     		ldr	r2, .L572+60
 6723 0250 1B01     		lsls	r3, r3, #4
 6724 0252 1344     		add	r3, r3, r2
 6725 0254 0C33     		adds	r3, r3, #12
 6726 0256 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6727 0258 1946     		mov	r1, r3
 6728 025a FFF7FEFF 		bl	enable_motor
 6729              	.L432:
2063:..\src/interruptions.c ****                     
2064:..\src/interruptions.c ****                 }
2065:..\src/interruptions.c ****             }
2066:..\src/interruptions.c **** 
2067:..\src/interruptions.c ****             // Assign dev_tension and reset current
2068:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6730              		.loc 1 2068 0 discriminator 2
 6731 025e 214B     		ldr	r3, .L572+48
 6732 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6733 0262 1946     		mov	r1, r3
 6734 0264 154B     		ldr	r3, .L572+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 158


 6735 0266 41F28832 		movw	r2, #5000
 6736 026a 43F82120 		str	r2, [r3, r1, lsl #2]
2069:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6737              		.loc 1 2069 0 discriminator 2
 6738 026e 1D4B     		ldr	r3, .L572+48
 6739 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6740 0272 1946     		mov	r1, r3
 6741 0274 104A     		ldr	r2, .L572+4
 6742 0276 7423     		movs	r3, #116
 6743 0278 03FB01F3 		mul	r3, r3, r1
 6744 027c 1344     		add	r3, r3, r2
 6745 027e 03F58873 		add	r3, r3, #272
 6746 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6747 0284 1946     		mov	r1, r3
 6748 0286 1B4A     		ldr	r2, .L572+64
 6749 0288 3423     		movs	r3, #52
 6750 028a 03FB01F3 		mul	r3, r3, r1
 6751 028e 1344     		add	r3, r3, r2
 6752 0290 0C33     		adds	r3, r3, #12
 6753 0292 0022     		movs	r2, #0
 6754 0294 1A60     		str	r2, [r3]
2054:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6755              		.loc 1 2054 0 discriminator 2
 6756 0296 134B     		ldr	r3, .L572+48
 6757 0298 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6758 029a 0133     		adds	r3, r3, #1
 6759 029c DAB2     		uxtb	r2, r3
 6760 029e 114B     		ldr	r3, .L572+48
 6761 02a0 1A70     		strb	r2, [r3]
 6762              	.L431:
2054:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6763              		.loc 1 2054 0 is_stmt 0 discriminator 1
 6764 02a2 104B     		ldr	r3, .L572+48
 6765 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6766 02a6 012B     		cmp	r3, #1
 6767 02a8 7FF67FAF 		bls	.L434
2070:..\src/interruptions.c ****         }
2071:..\src/interruptions.c ****         
2072:..\src/interruptions.c ****         // Reset emg
2073:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6768              		.loc 1 2073 0 is_stmt 1
 6769 02ac 0D4B     		ldr	r3, .L572+48
 6770 02ae 0022     		movs	r2, #0
 6771 02b0 1A70     		strb	r2, [r3]
 6772 02b2 2EE0     		b	.L435
 6773              	.L573:
 6774              		.align	2
 6775              	.L572:
 6776 02b4 00000000 		.word	interrupt_flag
 6777 02b8 00000000 		.word	g_mem
 6778 02bc 00000000 		.word	dev_tension
 6779 02c0 00000000 		.word	ADC_buf
 6780 02c4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6781 02c8 F1197605 		.word	91625969
 6782 02cc 00000000 		.word	filt_detect_pc
 6783 02d0 00000000 		.word	detect_power_cycle
 6784 02d4 08000000 		.word	detect_power_cycle_prev.10669
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 159


 6785 02d8 0C000000 		.word	first_tension_valid.10668
 6786 02dc 00000000 		.word	tension_valid
 6787 02e0 70010000 		.word	count.10670
 6788 02e4 72010000 		.word	idx.10672
 6789 02e8 00000000 		.word	pow_tension
 6790 02ec 00000000 		.word	c_mem
 6791 02f0 00000000 		.word	g_ref
 6792 02f4 00000000 		.word	g_meas
 6793              	.L436:
2074:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6794              		.loc 1 2074 0 discriminator 3
 6795 02f8 6C4B     		ldr	r3, .L574
 6796 02fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6797 02fc 1946     		mov	r1, r3
 6798 02fe 6C4B     		ldr	r3, .L574+4
 6799 0300 0022     		movs	r2, #0
 6800 0302 43F82120 		str	r2, [r3, r1, lsl #2]
2073:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6801              		.loc 1 2073 0 discriminator 3
 6802 0306 694B     		ldr	r3, .L574
 6803 0308 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6804 030a 0133     		adds	r3, r3, #1
 6805 030c DAB2     		uxtb	r2, r3
 6806 030e 674B     		ldr	r3, .L574
 6807 0310 1A70     		strb	r2, [r3]
 6808              	.L435:
2073:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6809              		.loc 1 2073 0 is_stmt 0 discriminator 1
 6810 0312 664B     		ldr	r3, .L574
 6811 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6812 0316 012B     		cmp	r3, #1
 6813 0318 EED9     		bls	.L436
2075:..\src/interruptions.c ****         }
2076:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6814              		.loc 1 2076 0 is_stmt 1
 6815 031a 644B     		ldr	r3, .L574
 6816 031c 0022     		movs	r2, #0
 6817 031e 1A70     		strb	r2, [r3]
 6818 0320 0CE0     		b	.L437
 6819              	.L439:
2077:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6820              		.loc 1 2077 0 discriminator 4
 6821 0322 624B     		ldr	r3, .L574
 6822 0324 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6823 0326 624A     		ldr	r2, .L574+4
 6824 0328 0233     		adds	r3, r3, #2
 6825 032a 0021     		movs	r1, #0
 6826 032c 42F82310 		str	r1, [r2, r3, lsl #2]
2076:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6827              		.loc 1 2076 0 discriminator 4
 6828 0330 5E4B     		ldr	r3, .L574
 6829 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6830 0334 0133     		adds	r3, r3, #1
 6831 0336 DAB2     		uxtb	r2, r3
 6832 0338 5C4B     		ldr	r3, .L574
 6833 033a 1A70     		strb	r2, [r3]
 6834              	.L437:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 160


2076:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6835              		.loc 1 2076 0 is_stmt 0 discriminator 1
 6836 033c 5D4B     		ldr	r3, .L574+8
 6837 033e 93F82F32 		ldrb	r3, [r3, #559]	@ zero_extendqisi2
 6838 0342 002B     		cmp	r3, #0
 6839 0344 00F03382 		beq	.L554
2076:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6840              		.loc 1 2076 0 discriminator 3
 6841 0348 584B     		ldr	r3, .L574
 6842 034a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6843 034c 052B     		cmp	r3, #5
 6844 034e E8D9     		bls	.L439
2044:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6845              		.loc 1 2044 0 is_stmt 1
 6846 0350 2DE2     		b	.L554
 6847              	.L428:
2078:..\src/interruptions.c ****         }
2079:..\src/interruptions.c ****         
2080:..\src/interruptions.c ****     }
2081:..\src/interruptions.c ****     else {
2082:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2083:..\src/interruptions.c ****         // (at least > 6.88 V (86% of 8 V) that is minimum charge of smallest battery (2 cells @ 20
2084:..\src/interruptions.c ****         
2085:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2086:..\src/interruptions.c ****         
2087:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6848              		.loc 1 2087 0
 6849 0352 594B     		ldr	r3, .L574+12
 6850 0354 1B68     		ldr	r3, [r3]
 6851 0356 B3F57A7F 		cmp	r3, #1000
 6852 035a 0DD1     		bne	.L441
 6853              		.loc 1 2087 0 is_stmt 0 discriminator 1
 6854 035c 574B     		ldr	r3, .L574+16
 6855 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6856 0360 002B     		cmp	r3, #0
 6857 0362 09D1     		bne	.L441
2088:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2089:..\src/interruptions.c ****             tension_valid = TRUE;   
 6858              		.loc 1 2089 0 is_stmt 1
 6859 0364 554B     		ldr	r3, .L574+16
 6860 0366 0122     		movs	r2, #1
 6861 0368 1A70     		strb	r2, [r3]
2090:..\src/interruptions.c ****             count = 0;
 6862              		.loc 1 2090 0
 6863 036a 554B     		ldr	r3, .L574+20
 6864 036c 0022     		movs	r2, #0
 6865 036e 1A80     		strh	r2, [r3]	@ movhi
2091:..\src/interruptions.c ****             v_count = 0;            
 6866              		.loc 1 2091 0
 6867 0370 514B     		ldr	r3, .L574+12
 6868 0372 0022     		movs	r2, #0
 6869 0374 1A60     		str	r2, [r3]
 6870 0376 2CE0     		b	.L442
 6871              	.L441:
2092:..\src/interruptions.c ****         }
2093:..\src/interruptions.c ****         else {  
2094:..\src/interruptions.c ****             // wait for battery voltage stabilization
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 161


2095:..\src/interruptions.c ****             if (v_count < 1000) {
 6872              		.loc 1 2095 0
 6873 0378 4F4B     		ldr	r3, .L574+12
 6874 037a 1B68     		ldr	r3, [r3]
 6875 037c B3F57A7F 		cmp	r3, #1000
 6876 0380 04D2     		bcs	.L443
2096:..\src/interruptions.c ****                 v_count = v_count + 1;
 6877              		.loc 1 2096 0
 6878 0382 4D4B     		ldr	r3, .L574+12
 6879 0384 1B68     		ldr	r3, [r3]
 6880 0386 0133     		adds	r3, r3, #1
 6881 0388 4B4A     		ldr	r2, .L574+12
 6882 038a 1360     		str	r3, [r2]
 6883              	.L443:
2097:..\src/interruptions.c ****             }
2098:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6884              		.loc 1 2098 0
 6885 038c 474B     		ldr	r3, .L574
 6886 038e 0022     		movs	r2, #0
 6887 0390 1A70     		strb	r2, [r3]
 6888 0392 1AE0     		b	.L444
 6889              	.L445:
2099:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6890              		.loc 1 2099 0 discriminator 3
 6891 0394 454B     		ldr	r3, .L574
 6892 0396 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6893 0398 1C46     		mov	r4, r3
 6894 039a 444B     		ldr	r3, .L574
 6895 039c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6896 039e 1A46     		mov	r2, r3
 6897 03a0 484B     		ldr	r3, .L574+24
 6898 03a2 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6899 03a6 414B     		ldr	r3, .L574
 6900 03a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6901 03aa DB00     		lsls	r3, r3, #3
 6902 03ac 464A     		ldr	r2, .L574+28
 6903 03ae 1344     		add	r3, r3, r2
 6904 03b0 1946     		mov	r1, r3
 6905 03b2 FFF7FEFF 		bl	filter
 6906 03b6 0246     		mov	r2, r0
 6907 03b8 444B     		ldr	r3, .L574+32
 6908 03ba 43F82420 		str	r2, [r3, r4, lsl #2]
2098:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6909              		.loc 1 2098 0 discriminator 3
 6910 03be 3B4B     		ldr	r3, .L574
 6911 03c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6912 03c2 0133     		adds	r3, r3, #1
 6913 03c4 DAB2     		uxtb	r2, r3
 6914 03c6 394B     		ldr	r3, .L574
 6915 03c8 1A70     		strb	r2, [r3]
 6916              	.L444:
2098:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6917              		.loc 1 2098 0 is_stmt 0 discriminator 1
 6918 03ca 384B     		ldr	r3, .L574
 6919 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6920 03ce 012B     		cmp	r3, #1
 6921 03d0 E0D9     		bls	.L445
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 162


 6922              	.L442:
2100:..\src/interruptions.c ****             }
2101:..\src/interruptions.c ****         }
2102:..\src/interruptions.c **** 
2103:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6923              		.loc 1 2103 0 is_stmt 1
 6924 03d2 364B     		ldr	r3, .L574
 6925 03d4 0022     		movs	r2, #0
 6926 03d6 1A70     		strb	r2, [r3]
 6927 03d8 16E0     		b	.L446
 6928              	.L448:
2104:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6929              		.loc 1 2104 0
 6930 03da 344B     		ldr	r3, .L574
 6931 03dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6932 03de 1946     		mov	r1, r3
 6933 03e0 3B4A     		ldr	r2, .L574+36
 6934 03e2 7423     		movs	r3, #116
 6935 03e4 03FB01F3 		mul	r3, r3, r1
 6936 03e8 1344     		add	r3, r3, r2
 6937 03ea E133     		adds	r3, r3, #225
 6938 03ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6939 03ee 002B     		cmp	r3, #0
 6940 03f0 04D0     		beq	.L447
2105:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6941              		.loc 1 2105 0
 6942 03f2 2E4B     		ldr	r3, .L574
 6943 03f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6944 03f6 1846     		mov	r0, r3
 6945 03f8 FFF7FEFF 		bl	pwm_limit_search
 6946              	.L447:
2103:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6947              		.loc 1 2103 0 discriminator 2
 6948 03fc 2B4B     		ldr	r3, .L574
 6949 03fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6950 0400 0133     		adds	r3, r3, #1
 6951 0402 DAB2     		uxtb	r2, r3
 6952 0404 294B     		ldr	r3, .L574
 6953 0406 1A70     		strb	r2, [r3]
 6954              	.L446:
2103:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6955              		.loc 1 2103 0 is_stmt 0 discriminator 1
 6956 0408 284B     		ldr	r3, .L574
 6957 040a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6958 040c 012B     		cmp	r3, #1
 6959 040e E4D9     		bls	.L448
2106:..\src/interruptions.c ****         }
2107:..\src/interruptions.c ****         
2108:..\src/interruptions.c ****         // Filter and Set currents
2109:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) {
 6960              		.loc 1 2109 0 is_stmt 1
 6961 0410 2F4B     		ldr	r3, .L574+36
 6962 0412 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6963 0416 002B     		cmp	r3, #0
 6964 0418 21D1     		bne	.L449
2110:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6965              		.loc 1 2110 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 163


 6966 041a 2D4B     		ldr	r3, .L574+36
 6967 041c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6968 0420 1C46     		mov	r4, r3
 6969 0422 2C4B     		ldr	r3, .L574+40
 6970 0424 B3F90230 		ldrsh	r3, [r3, #2]
 6971 0428 A3F5CE63 		sub	r3, r3, #1648
 6972 042c 45F66A02 		movw	r2, #22634
 6973 0430 02FB03F3 		mul	r3, r2, r3
 6974 0434 5B13     		asrs	r3, r3, #13
 6975 0436 1BB2     		sxth	r3, r3
 6976 0438 1A46     		mov	r2, r3
 6977 043a 274B     		ldr	r3, .L574+44
 6978 043c 93F90030 		ldrsb	r3, [r3]
 6979 0440 03FB02F3 		mul	r3, r3, r2
 6980 0444 2549     		ldr	r1, .L574+48
 6981 0446 1846     		mov	r0, r3
 6982 0448 FFF7FEFF 		bl	filter
 6983 044c 0146     		mov	r1, r0
 6984 044e 244A     		ldr	r2, .L574+52
 6985 0450 3423     		movs	r3, #52
 6986 0452 03FB04F3 		mul	r3, r3, r4
 6987 0456 1344     		add	r3, r3, r2
 6988 0458 0C33     		adds	r3, r3, #12
 6989 045a 1960     		str	r1, [r3]
 6990 045c 5EE0     		b	.L450
 6991              	.L449:
2111:..\src/interruptions.c ****         } 
2112:..\src/interruptions.c ****         else {
2113:..\src/interruptions.c ****             if (g_mem.motor[0].motor_driver_type == DRIVER_BRUSHLESS) {
 6992              		.loc 1 2113 0
 6993 045e 1C4B     		ldr	r3, .L574+36
 6994 0460 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6995 0464 022B     		cmp	r3, #2
 6996 0466 3DD1     		bne	.L451
2114:..\src/interruptions.c ****                 // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5A cu
2115:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 16
 6997              		.loc 1 2115 0
 6998 0468 194B     		ldr	r3, .L574+36
 6999 046a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7000 046e 1C46     		mov	r4, r3
 7001 0470 184B     		ldr	r3, .L574+40
 7002 0472 B3F90230 		ldrsh	r3, [r3, #2]
 7003 0476 A3F28F63 		subw	r3, r3, #1679
 7004 047a 45F65072 		movw	r2, #24400
 7005 047e 02FB03F3 		mul	r3, r2, r3
 7006 0482 5B13     		asrs	r3, r3, #13
 7007 0484 1BB2     		sxth	r3, r3
 7008 0486 1A46     		mov	r2, r3
 7009 0488 134B     		ldr	r3, .L574+44
 7010 048a 93F90030 		ldrsb	r3, [r3]
 7011 048e 03FB02F3 		mul	r3, r3, r2
 7012 0492 1249     		ldr	r1, .L574+48
 7013 0494 1846     		mov	r0, r3
 7014 0496 FFF7FEFF 		bl	filter
 7015 049a 0146     		mov	r1, r0
 7016 049c 104A     		ldr	r2, .L574+52
 7017 049e 3423     		movs	r3, #52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 164


 7018 04a0 03FB04F3 		mul	r3, r3, r4
 7019 04a4 1344     		add	r3, r3, r2
 7020 04a6 0C33     		adds	r3, r3, #12
 7021 04a8 1960     		str	r1, [r3]
 7022 04aa 37E0     		b	.L450
 7023              	.L575:
 7024              		.align	2
 7025              	.L574:
 7026 04ac 72010000 		.word	idx.10672
 7027 04b0 00000000 		.word	g_adc_meas
 7028 04b4 00000000 		.word	c_mem
 7029 04b8 74010000 		.word	v_count.10671
 7030 04bc 00000000 		.word	tension_valid
 7031 04c0 70010000 		.word	count.10670
 7032 04c4 00000000 		.word	dev_tension
 7033 04c8 00000000 		.word	filt_v
 7034 04cc 00000000 		.word	dev_tension_f
 7035 04d0 00000000 		.word	g_mem
 7036 04d4 00000000 		.word	ADC_buf
 7037 04d8 00000000 		.word	pwm_sign
 7038 04dc 00000000 		.word	filt_i
 7039 04e0 00000000 		.word	g_meas
 7040              	.L451:
2116:..\src/interruptions.c ****             } else { // [GS]
2117:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 
 7041              		.loc 1 2117 0
 7042 04e4 C04B     		ldr	r3, .L576
 7043 04e6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7044 04ea 1846     		mov	r0, r3
 7045 04ec BF4B     		ldr	r3, .L576+4
 7046 04ee B3F90230 		ldrsh	r3, [r3, #2]
 7047 04f2 A3F26362 		subw	r2, r3, #1635
 7048 04f6 1346     		mov	r3, r2
 7049 04f8 1B01     		lsls	r3, r3, #4
 7050 04fa 9B1A     		subs	r3, r3, r2
 7051 04fc 5B01     		lsls	r3, r3, #5
 7052 04fe 1B11     		asrs	r3, r3, #4
 7053 0500 1BB2     		sxth	r3, r3
 7054 0502 1A46     		mov	r2, r3
 7055 0504 BA4B     		ldr	r3, .L576+8
 7056 0506 93F90030 		ldrsb	r3, [r3]
 7057 050a 03FB02F2 		mul	r2, r3, r2
 7058 050e B949     		ldr	r1, .L576+12
 7059 0510 3423     		movs	r3, #52
 7060 0512 03FB00F3 		mul	r3, r3, r0
 7061 0516 0B44     		add	r3, r3, r1
 7062 0518 0C33     		adds	r3, r3, #12
 7063 051a 1A60     		str	r2, [r3]
 7064              	.L450:
2118:..\src/interruptions.c ****             }
2119:..\src/interruptions.c ****         }
2120:..\src/interruptions.c ****         
2121:..\src/interruptions.c **** 
2122:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2123:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 7065              		.loc 1 2123 0
 7066 051c B24B     		ldr	r3, .L576
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 165


 7067 051e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7068 0522 1D46     		mov	r5, r3
 7069 0524 B04B     		ldr	r3, .L576
 7070 0526 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7071 052a 1946     		mov	r1, r3
 7072 052c B14A     		ldr	r2, .L576+12
 7073 052e 3423     		movs	r3, #52
 7074 0530 03FB01F3 		mul	r3, r3, r1
 7075 0534 1344     		add	r3, r3, r2
 7076 0536 0C33     		adds	r3, r3, #12
 7077 0538 1C68     		ldr	r4, [r3]
 7078 053a AB4B     		ldr	r3, .L576
 7079 053c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7080 0540 1946     		mov	r1, r3
 7081 0542 AC4A     		ldr	r2, .L576+12
 7082 0544 3423     		movs	r3, #52
 7083 0546 03FB01F3 		mul	r3, r3, r1
 7084 054a 1344     		add	r3, r3, r2
 7085 054c 1A68     		ldr	r2, [r3]
 7086 054e A64B     		ldr	r3, .L576
 7087 0550 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7088 0554 1846     		mov	r0, r3
 7089 0556 A449     		ldr	r1, .L576
 7090 0558 0346     		mov	r3, r0
 7091 055a 5B00     		lsls	r3, r3, #1
 7092 055c 0344     		add	r3, r3, r0
 7093 055e 1B01     		lsls	r3, r3, #4
 7094 0560 0B44     		add	r3, r3, r1
 7095 0562 03F29D13 		addw	r3, r3, #413
 7096 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7097 0568 42FA03F6 		asr	r6, r2, r3
 7098 056c 9E4B     		ldr	r3, .L576
 7099 056e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7100 0572 1946     		mov	r1, r3
 7101 0574 9F4A     		ldr	r2, .L576+12
 7102 0576 3423     		movs	r3, #52
 7103 0578 03FB01F3 		mul	r3, r3, r1
 7104 057c 1344     		add	r3, r3, r2
 7105 057e 1C33     		adds	r3, r3, #28
 7106 0580 1A68     		ldr	r2, [r3]
 7107 0582 994B     		ldr	r3, .L576
 7108 0584 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7109 0588 1846     		mov	r0, r3
 7110 058a 9749     		ldr	r1, .L576
 7111 058c 0346     		mov	r3, r0
 7112 058e 5B00     		lsls	r3, r3, #1
 7113 0590 0344     		add	r3, r3, r0
 7114 0592 1B01     		lsls	r3, r3, #4
 7115 0594 0B44     		add	r3, r3, r1
 7116 0596 03F29D13 		addw	r3, r3, #413
 7117 059a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7118 059c 42FA03FE 		asr	lr, r2, r3
 7119 05a0 954B     		ldr	r3, .L576+16
 7120 05a2 1A68     		ldr	r2, [r3]
 7121 05a4 904B     		ldr	r3, .L576
 7122 05a6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7123 05aa 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 166


 7124 05ac 8E49     		ldr	r1, .L576
 7125 05ae 0346     		mov	r3, r0
 7126 05b0 5B00     		lsls	r3, r3, #1
 7127 05b2 0344     		add	r3, r3, r0
 7128 05b4 1B01     		lsls	r3, r3, #4
 7129 05b6 0B44     		add	r3, r3, r1
 7130 05b8 03F29D13 		addw	r3, r3, #413
 7131 05bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7132 05be 42FA03F3 		asr	r3, r2, r3
 7133 05c2 7246     		mov	r2, lr
 7134 05c4 3146     		mov	r1, r6
 7135 05c6 0020     		movs	r0, #0
 7136 05c8 FFF7FEFF 		bl	curr_estim
 7137 05cc 0346     		mov	r3, r0
 7138 05ce E31A     		subs	r3, r4, r3
 7139 05d0 8A49     		ldr	r1, .L576+20
 7140 05d2 1846     		mov	r0, r3
 7141 05d4 FFF7FEFF 		bl	filter
 7142 05d8 0346     		mov	r3, r0
 7143 05da 1BB2     		sxth	r3, r3
 7144 05dc 1946     		mov	r1, r3
 7145 05de 854A     		ldr	r2, .L576+12
 7146 05e0 3423     		movs	r3, #52
 7147 05e2 03FB05F3 		mul	r3, r3, r5
 7148 05e6 1344     		add	r3, r3, r2
 7149 05e8 1033     		adds	r3, r3, #16
 7150 05ea 1960     		str	r1, [r3]
2124:..\src/interruptions.c ****         
2125:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2126:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 7151              		.loc 1 2126 0
 7152 05ec 844B     		ldr	r3, .L576+24
 7153 05ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7154 05f0 042B     		cmp	r3, #4
 7155 05f2 40F2D280 		bls	.L452
2127:..\src/interruptions.c ****             // Filter and Set currents
2128:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) {
 7156              		.loc 1 2128 0
 7157 05f6 7C4B     		ldr	r3, .L576
 7158 05f8 93F85631 		ldrb	r3, [r3, #342]	@ zero_extendqisi2
 7159 05fc 002B     		cmp	r3, #0
 7160 05fe 21D1     		bne	.L453
2129:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 7161              		.loc 1 2129 0
 7162 0600 794B     		ldr	r3, .L576
 7163 0602 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7164 0606 1C46     		mov	r4, r3
 7165 0608 784B     		ldr	r3, .L576+4
 7166 060a B3F90A30 		ldrsh	r3, [r3, #10]
 7167 060e A3F5CE63 		sub	r3, r3, #1648
 7168 0612 45F66A02 		movw	r2, #22634
 7169 0616 02FB03F3 		mul	r3, r2, r3
 7170 061a 5B13     		asrs	r3, r3, #13
 7171 061c 1BB2     		sxth	r3, r3
 7172 061e 1A46     		mov	r2, r3
 7173 0620 734B     		ldr	r3, .L576+8
 7174 0622 93F90130 		ldrsb	r3, [r3, #1]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 167


 7175 0626 03FB02F3 		mul	r3, r3, r2
 7176 062a 7649     		ldr	r1, .L576+28
 7177 062c 1846     		mov	r0, r3
 7178 062e FFF7FEFF 		bl	filter
 7179 0632 0146     		mov	r1, r0
 7180 0634 6F4A     		ldr	r2, .L576+12
 7181 0636 3423     		movs	r3, #52
 7182 0638 03FB04F3 		mul	r3, r3, r4
 7183 063c 1344     		add	r3, r3, r2
 7184 063e 0C33     		adds	r3, r3, #12
 7185 0640 1960     		str	r1, [r3]
 7186 0642 42E0     		b	.L454
 7187              	.L453:
2130:..\src/interruptions.c ****             } 
2131:..\src/interruptions.c ****             else {
2132:..\src/interruptions.c ****                 if (g_mem.motor[1].motor_driver_type == DRIVER_BRUSHLESS) {
 7188              		.loc 1 2132 0
 7189 0644 684B     		ldr	r3, .L576
 7190 0646 93F85631 		ldrb	r3, [r3, #342]	@ zero_extendqisi2
 7191 064a 022B     		cmp	r3, #2
 7192 064c 21D1     		bne	.L455
2133:..\src/interruptions.c ****                     // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5
2134:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] 
 7193              		.loc 1 2134 0
 7194 064e 664B     		ldr	r3, .L576
 7195 0650 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7196 0654 1C46     		mov	r4, r3
 7197 0656 654B     		ldr	r3, .L576+4
 7198 0658 B3F90A30 		ldrsh	r3, [r3, #10]
 7199 065c A3F28F63 		subw	r3, r3, #1679
 7200 0660 45F65072 		movw	r2, #24400
 7201 0664 02FB03F3 		mul	r3, r2, r3
 7202 0668 5B13     		asrs	r3, r3, #13
 7203 066a 1BB2     		sxth	r3, r3
 7204 066c 1A46     		mov	r2, r3
 7205 066e 604B     		ldr	r3, .L576+8
 7206 0670 93F90130 		ldrsb	r3, [r3, #1]
 7207 0674 03FB02F3 		mul	r3, r3, r2
 7208 0678 6249     		ldr	r1, .L576+28
 7209 067a 1846     		mov	r0, r3
 7210 067c FFF7FEFF 		bl	filter
 7211 0680 0146     		mov	r1, r0
 7212 0682 5C4A     		ldr	r2, .L576+12
 7213 0684 3423     		movs	r3, #52
 7214 0686 03FB04F3 		mul	r3, r3, r4
 7215 068a 1344     		add	r3, r3, r2
 7216 068c 0C33     		adds	r3, r3, #12
 7217 068e 1960     		str	r1, [r3]
 7218 0690 1BE0     		b	.L454
 7219              	.L455:
2135:..\src/interruptions.c ****                 } else { // [GS]
2136:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635
 7220              		.loc 1 2136 0
 7221 0692 554B     		ldr	r3, .L576
 7222 0694 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7223 0698 1846     		mov	r0, r3
 7224 069a 544B     		ldr	r3, .L576+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 168


 7225 069c B3F90A30 		ldrsh	r3, [r3, #10]
 7226 06a0 A3F26362 		subw	r2, r3, #1635
 7227 06a4 1346     		mov	r3, r2
 7228 06a6 1B01     		lsls	r3, r3, #4
 7229 06a8 9B1A     		subs	r3, r3, r2
 7230 06aa 5B01     		lsls	r3, r3, #5
 7231 06ac 1B11     		asrs	r3, r3, #4
 7232 06ae 1BB2     		sxth	r3, r3
 7233 06b0 1A46     		mov	r2, r3
 7234 06b2 4F4B     		ldr	r3, .L576+8
 7235 06b4 93F90130 		ldrsb	r3, [r3, #1]
 7236 06b8 03FB02F2 		mul	r2, r3, r2
 7237 06bc 4D49     		ldr	r1, .L576+12
 7238 06be 3423     		movs	r3, #52
 7239 06c0 03FB00F3 		mul	r3, r3, r0
 7240 06c4 0B44     		add	r3, r3, r1
 7241 06c6 0C33     		adds	r3, r3, #12
 7242 06c8 1A60     		str	r2, [r3]
 7243              	.L454:
2137:..\src/interruptions.c ****                 }
2138:..\src/interruptions.c ****             }
2139:..\src/interruptions.c ****             
2140:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7244              		.loc 1 2140 0
 7245 06ca 474B     		ldr	r3, .L576
 7246 06cc 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7247 06d0 1D46     		mov	r5, r3
 7248 06d2 454B     		ldr	r3, .L576
 7249 06d4 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7250 06d8 1946     		mov	r1, r3
 7251 06da 464A     		ldr	r2, .L576+12
 7252 06dc 3423     		movs	r3, #52
 7253 06de 03FB01F3 		mul	r3, r3, r1
 7254 06e2 1344     		add	r3, r3, r2
 7255 06e4 0C33     		adds	r3, r3, #12
 7256 06e6 1C68     		ldr	r4, [r3]
 7257 06e8 3F4B     		ldr	r3, .L576
 7258 06ea 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7259 06ee 1946     		mov	r1, r3
 7260 06f0 404A     		ldr	r2, .L576+12
 7261 06f2 3423     		movs	r3, #52
 7262 06f4 03FB01F3 		mul	r3, r3, r1
 7263 06f8 1344     		add	r3, r3, r2
 7264 06fa 1A68     		ldr	r2, [r3]
 7265 06fc 3A4B     		ldr	r3, .L576
 7266 06fe 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7267 0702 1846     		mov	r0, r3
 7268 0704 3849     		ldr	r1, .L576
 7269 0706 0346     		mov	r3, r0
 7270 0708 5B00     		lsls	r3, r3, #1
 7271 070a 0344     		add	r3, r3, r0
 7272 070c 1B01     		lsls	r3, r3, #4
 7273 070e 0B44     		add	r3, r3, r1
 7274 0710 03F29D13 		addw	r3, r3, #413
 7275 0714 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7276 0716 42FA03F6 		asr	r6, r2, r3
 7277 071a 334B     		ldr	r3, .L576
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 169


 7278 071c 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7279 0720 1946     		mov	r1, r3
 7280 0722 344A     		ldr	r2, .L576+12
 7281 0724 3423     		movs	r3, #52
 7282 0726 03FB01F3 		mul	r3, r3, r1
 7283 072a 1344     		add	r3, r3, r2
 7284 072c 1C33     		adds	r3, r3, #28
 7285 072e 1A68     		ldr	r2, [r3]
 7286 0730 2D4B     		ldr	r3, .L576
 7287 0732 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7288 0736 1846     		mov	r0, r3
 7289 0738 2B49     		ldr	r1, .L576
 7290 073a 0346     		mov	r3, r0
 7291 073c 5B00     		lsls	r3, r3, #1
 7292 073e 0344     		add	r3, r3, r0
 7293 0740 1B01     		lsls	r3, r3, #4
 7294 0742 0B44     		add	r3, r3, r1
 7295 0744 03F29D13 		addw	r3, r3, #413
 7296 0748 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7297 074a 42FA03FE 		asr	lr, r2, r3
 7298 074e 2A4B     		ldr	r3, .L576+16
 7299 0750 1A69     		ldr	r2, [r3, #16]
 7300 0752 254B     		ldr	r3, .L576
 7301 0754 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7302 0758 1846     		mov	r0, r3
 7303 075a 2349     		ldr	r1, .L576
 7304 075c 0346     		mov	r3, r0
 7305 075e 5B00     		lsls	r3, r3, #1
 7306 0760 0344     		add	r3, r3, r0
 7307 0762 1B01     		lsls	r3, r3, #4
 7308 0764 0B44     		add	r3, r3, r1
 7309 0766 03F29D13 		addw	r3, r3, #413
 7310 076a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7311 076c 42FA03F3 		asr	r3, r2, r3
 7312 0770 7246     		mov	r2, lr
 7313 0772 3146     		mov	r1, r6
 7314 0774 0120     		movs	r0, #1
 7315 0776 FFF7FEFF 		bl	curr_estim
 7316 077a 0346     		mov	r3, r0
 7317 077c E31A     		subs	r3, r4, r3
 7318 077e 2249     		ldr	r1, .L576+32
 7319 0780 1846     		mov	r0, r3
 7320 0782 FFF7FEFF 		bl	filter
 7321 0786 0346     		mov	r3, r0
 7322 0788 1BB2     		sxth	r3, r3
 7323 078a 1946     		mov	r1, r3
 7324 078c 194A     		ldr	r2, .L576+12
 7325 078e 3423     		movs	r3, #52
 7326 0790 03FB05F3 		mul	r3, r3, r5
 7327 0794 1344     		add	r3, r3, r2
 7328 0796 1033     		adds	r3, r3, #16
 7329 0798 1960     		str	r1, [r3]
 7330              	.L452:
2141:..\src/interruptions.c ****         }
2142:..\src/interruptions.c ****     
2143:..\src/interruptions.c ****         // Check Interrupt 
2144:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 170


2145:..\src/interruptions.c ****         if (interrupt_flag){
 7331              		.loc 1 2145 0
 7332 079a 1C4B     		ldr	r3, .L576+36
 7333 079c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7334 079e 002B     		cmp	r3, #0
 7335 07a0 06D0     		beq	.L440
2146:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7336              		.loc 1 2146 0
 7337 07a2 1A4B     		ldr	r3, .L576+36
 7338 07a4 0022     		movs	r2, #0
 7339 07a6 1A70     		strb	r2, [r3]
2147:..\src/interruptions.c ****             interrupt_manager();
 7340              		.loc 1 2147 0
 7341 07a8 FFF7FEFF 		bl	interrupt_manager
 7342 07ac 00E0     		b	.L440
 7343              	.L554:
2044:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7344              		.loc 1 2044 0
 7345 07ae 00BF     		nop
 7346              	.L440:
2148:..\src/interruptions.c ****         }
2149:..\src/interruptions.c **** 
2150:..\src/interruptions.c ****     }
2151:..\src/interruptions.c ****     
2152:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2153:..\src/interruptions.c ****         
2154:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2155:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7347              		.loc 1 2155 0
 7348 07b0 174B     		ldr	r3, .L576+40
 7349 07b2 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7350 07b6 002B     		cmp	r3, #0
 7351 07b8 05D1     		bne	.L456
2156:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7352              		.loc 1 2156 0
 7353 07ba 164B     		ldr	r3, .L576+44
 7354 07bc 0022     		movs	r2, #0
 7355 07be 1A70     		strb	r2, [r3]
2157:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7356              		.loc 1 2157 0
 7357 07c0 154B     		ldr	r3, .L576+48
 7358 07c2 0022     		movs	r2, #0
 7359 07c4 1A70     		strb	r2, [r3]
 7360              	.L456:
2158:..\src/interruptions.c ****     }
2159:..\src/interruptions.c **** 
2160:..\src/interruptions.c ****     // EMG 1 calibration state machine
2161:..\src/interruptions.c ****    
2162:..\src/interruptions.c ****     // Calibration state machine
2163:..\src/interruptions.c ****     switch(emg_1_status) {
 7361              		.loc 1 2163 0
 7362 07c6 134B     		ldr	r3, .L576+44
 7363 07c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7364 07ca 032B     		cmp	r3, #3
 7365 07cc 00F2FC80 		bhi	.L555
 7366 07d0 01A2     		adr	r2, .L459
 7367 07d2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 171


 7368 07d6 00BF     		.p2align 2
 7369              	.L459:
 7370 07d8 1D080000 		.word	.L458+1
 7371 07dc CD080000 		.word	.L460+1
 7372 07e0 E3080000 		.word	.L461+1
 7373 07e4 1F090000 		.word	.L462+1
 7374              		.p2align 1
 7375              	.L577:
 7376              		.align	2
 7377              	.L576:
 7378 07e8 00000000 		.word	g_mem
 7379 07ec 00000000 		.word	ADC_buf
 7380 07f0 00000000 		.word	pwm_sign
 7381 07f4 00000000 		.word	g_meas
 7382 07f8 00000000 		.word	g_ref
 7383 07fc 00000000 		.word	filt_curr_diff
 7384 0800 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7385 0804 08000000 		.word	filt_i+8
 7386 0808 08000000 		.word	filt_curr_diff+8
 7387 080c 00000000 		.word	interrupt_flag
 7388 0810 00000000 		.word	c_mem
 7389 0814 00000000 		.word	emg_1_status
 7390 0818 00000000 		.word	emg_2_status
 7391              	.L458:
2164:..\src/interruptions.c ****         case NORMAL: // normal execution
2165:..\src/interruptions.c ****             
2166:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7392              		.loc 1 2166 0
 7393 081c AE4B     		ldr	r3, .L578
 7394 081e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7395 0822 022B     		cmp	r3, #2
 7396 0824 13D0     		beq	.L463
 7397              		.loc 1 2166 0 is_stmt 0 discriminator 1
 7398 0826 AC4B     		ldr	r3, .L578
 7399 0828 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7400 082c 032B     		cmp	r3, #3
 7401 082e 0ED0     		beq	.L463
2167:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7402              		.loc 1 2167 0 is_stmt 1
 7403 0830 AA4B     		ldr	r3, .L578+4
 7404 0832 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7405 0836 0233     		adds	r3, r3, #2
 7406 0838 A94A     		ldr	r2, .L578+8
 7407 083a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7408 083e A3F26763 		subw	r3, r3, #1639
 7409 0842 5722     		movs	r2, #87
 7410 0844 02FB03F3 		mul	r3, r2, r3
 7411 0848 5B11     		asrs	r3, r3, #5
 7412 084a 7B60     		str	r3, [r7, #4]
 7413 084c 07E0     		b	.L464
 7414              	.L463:
2168:..\src/interruptions.c ****             }
2169:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2170:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7415              		.loc 1 2170 0
 7416 084e A34B     		ldr	r3, .L578+4
 7417 0850 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 172


 7418 0854 0233     		adds	r3, r3, #2
 7419 0856 A24A     		ldr	r2, .L578+8
 7420 0858 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7421 085c 7B60     		str	r3, [r7, #4]
 7422              	.L464:
2171:..\src/interruptions.c ****             }
2172:..\src/interruptions.c ****             
2173:..\src/interruptions.c ****             if (i_aux < 0) 
 7423              		.loc 1 2173 0
 7424 085e 7B68     		ldr	r3, [r7, #4]
 7425 0860 002B     		cmp	r3, #0
 7426 0862 01DA     		bge	.L465
2174:..\src/interruptions.c ****                 i_aux = 0;
 7427              		.loc 1 2174 0
 7428 0864 0023     		movs	r3, #0
 7429 0866 7B60     		str	r3, [r7, #4]
 7430              	.L465:
2175:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7431              		.loc 1 2175 0
 7432 0868 9E49     		ldr	r1, .L578+12
 7433 086a 7868     		ldr	r0, [r7, #4]
 7434 086c FFF7FEFF 		bl	filter
 7435 0870 7860     		str	r0, [r7, #4]
2176:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7436              		.loc 1 2176 0
 7437 0872 7B68     		ldr	r3, [r7, #4]
 7438 0874 9B02     		lsls	r3, r3, #10
 7439 0876 1A46     		mov	r2, r3
 7440 0878 974B     		ldr	r3, .L578
 7441 087a D3F8FC31 		ldr	r3, [r3, #508]
 7442 087e B2FBF3F3 		udiv	r3, r2, r3
 7443 0882 7B60     		str	r3, [r7, #4]
2177:..\src/interruptions.c **** 
2178:..\src/interruptions.c ****             if (interrupt_flag){
 7444              		.loc 1 2178 0
 7445 0884 984B     		ldr	r3, .L578+16
 7446 0886 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7447 0888 002B     		cmp	r3, #0
 7448 088a 04D0     		beq	.L466
2179:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7449              		.loc 1 2179 0
 7450 088c 964B     		ldr	r3, .L578+16
 7451 088e 0022     		movs	r2, #0
 7452 0890 1A70     		strb	r2, [r3]
2180:..\src/interruptions.c ****                 interrupt_manager();
 7453              		.loc 1 2180 0
 7454 0892 FFF7FEFF 		bl	interrupt_manager
 7455              	.L466:
2181:..\src/interruptions.c ****             }
2182:..\src/interruptions.c ****             //Saturation
2183:..\src/interruptions.c ****             if (i_aux < 0)
 7456              		.loc 1 2183 0
 7457 0896 7B68     		ldr	r3, [r7, #4]
 7458 0898 002B     		cmp	r3, #0
 7459 089a 02DA     		bge	.L467
2184:..\src/interruptions.c ****                 i_aux = 0;
 7460              		.loc 1 2184 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 173


 7461 089c 0023     		movs	r3, #0
 7462 089e 7B60     		str	r3, [r7, #4]
 7463 08a0 06E0     		b	.L468
 7464              	.L467:
2185:..\src/interruptions.c ****             else 
2186:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7465              		.loc 1 2186 0
 7466 08a2 7B68     		ldr	r3, [r7, #4]
 7467 08a4 B3F5806F 		cmp	r3, #1024
 7468 08a8 02DD     		ble	.L468
2187:..\src/interruptions.c ****                     i_aux = 1024;
 7469              		.loc 1 2187 0
 7470 08aa 4FF48063 		mov	r3, #1024
 7471 08ae 7B60     		str	r3, [r7, #4]
 7472              	.L468:
2188:..\src/interruptions.c ****             
2189:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7473              		.loc 1 2189 0
 7474 08b0 8E4A     		ldr	r2, .L578+20
 7475 08b2 7B68     		ldr	r3, [r7, #4]
 7476 08b4 1360     		str	r3, [r2]
2190:..\src/interruptions.c **** 
2191:..\src/interruptions.c ****             if (interrupt_flag){
 7477              		.loc 1 2191 0
 7478 08b6 8C4B     		ldr	r3, .L578+16
 7479 08b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7480 08ba 002B     		cmp	r3, #0
 7481 08bc 00F08680 		beq	.L556
2192:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7482              		.loc 1 2192 0
 7483 08c0 894B     		ldr	r3, .L578+16
 7484 08c2 0022     		movs	r2, #0
 7485 08c4 1A70     		strb	r2, [r3]
2193:..\src/interruptions.c ****                 interrupt_manager();
 7486              		.loc 1 2193 0
 7487 08c6 FFF7FEFF 		bl	interrupt_manager
2194:..\src/interruptions.c ****             }
2195:..\src/interruptions.c ****             
2196:..\src/interruptions.c ****             break;
 7488              		.loc 1 2196 0
 7489 08ca 7FE0     		b	.L556
 7490              	.L460:
2197:..\src/interruptions.c **** 
2198:..\src/interruptions.c ****         case RESET: // reset variables
2199:..\src/interruptions.c ****             emg_counter_1 = 0;
 7491              		.loc 1 2199 0
 7492 08cc 884B     		ldr	r3, .L578+24
 7493 08ce 0022     		movs	r2, #0
 7494 08d0 1A80     		strh	r2, [r3]	@ movhi
2200:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7495              		.loc 1 2200 0
 7496 08d2 814B     		ldr	r3, .L578
 7497 08d4 0022     		movs	r2, #0
 7498 08d6 C3F8FC21 		str	r2, [r3, #508]
2201:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7499              		.loc 1 2201 0
 7500 08da 864B     		ldr	r3, .L578+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 174


 7501 08dc 0222     		movs	r2, #2
 7502 08de 1A70     		strb	r2, [r3]
2202:..\src/interruptions.c ****             break;
 7503              		.loc 1 2202 0
 7504 08e0 79E0     		b	.L470
 7505              	.L461:
2203:..\src/interruptions.c **** 
2204:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2205:..\src/interruptions.c ****             emg_counter_1++;
 7506              		.loc 1 2205 0
 7507 08e2 834B     		ldr	r3, .L578+24
 7508 08e4 1B88     		ldrh	r3, [r3]
 7509 08e6 0133     		adds	r3, r3, #1
 7510 08e8 9AB2     		uxth	r2, r3
 7511 08ea 814B     		ldr	r3, .L578+24
 7512 08ec 1A80     		strh	r2, [r3]	@ movhi
2206:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7513              		.loc 1 2206 0
 7514 08ee 804B     		ldr	r3, .L578+24
 7515 08f0 1B88     		ldrh	r3, [r3]
 7516 08f2 B3F5FA7F 		cmp	r3, #500
 7517 08f6 6BD1     		bne	.L557
2207:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7518              		.loc 1 2207 0
 7519 08f8 7D4B     		ldr	r3, .L578+24
 7520 08fa 0022     		movs	r2, #0
 7521 08fc 1A80     		strh	r2, [r3]	@ movhi
2208:..\src/interruptions.c ****                 LED_control(1);
 7522              		.loc 1 2208 0
 7523 08fe 0120     		movs	r0, #1
 7524 0900 FFF7FEFF 		bl	LED_control
2209:..\src/interruptions.c **** 				
2210:..\src/interruptions.c ****                 if (interrupt_flag){
 7525              		.loc 1 2210 0
 7526 0904 784B     		ldr	r3, .L578+16
 7527 0906 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7528 0908 002B     		cmp	r3, #0
 7529 090a 04D0     		beq	.L472
2211:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7530              		.loc 1 2211 0
 7531 090c 764B     		ldr	r3, .L578+16
 7532 090e 0022     		movs	r2, #0
 7533 0910 1A70     		strb	r2, [r3]
2212:..\src/interruptions.c ****                     interrupt_manager();
 7534              		.loc 1 2212 0
 7535 0912 FFF7FEFF 		bl	interrupt_manager
 7536              	.L472:
2213:..\src/interruptions.c ****                 }
2214:..\src/interruptions.c ****                 
2215:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7537              		.loc 1 2215 0
 7538 0916 774B     		ldr	r3, .L578+28
 7539 0918 0322     		movs	r2, #3
 7540 091a 1A70     		strb	r2, [r3]
2216:..\src/interruptions.c ****             }
2217:..\src/interruptions.c ****             break;
 7541              		.loc 1 2217 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 175


 7542 091c 58E0     		b	.L557
 7543              	.L462:
2218:..\src/interruptions.c **** 
2219:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2220:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2221:..\src/interruptions.c ****             emg_counter_1++;
 7544              		.loc 1 2221 0
 7545 091e 744B     		ldr	r3, .L578+24
 7546 0920 1B88     		ldrh	r3, [r3]
 7547 0922 0133     		adds	r3, r3, #1
 7548 0924 9AB2     		uxth	r2, r3
 7549 0926 724B     		ldr	r3, .L578+24
 7550 0928 1A80     		strh	r2, [r3]	@ movhi
2222:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7551              		.loc 1 2222 0
 7552 092a 6C4B     		ldr	r3, .L578+4
 7553 092c 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7554 0930 0233     		adds	r3, r3, #2
 7555 0932 6B4A     		ldr	r2, .L578+8
 7556 0934 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7557 0938 002B     		cmp	r3, #0
 7558 093a 07DA     		bge	.L473
2223:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7559              		.loc 1 2223 0
 7560 093c 674B     		ldr	r3, .L578+4
 7561 093e 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7562 0942 0233     		adds	r3, r3, #2
 7563 0944 664A     		ldr	r2, .L578+8
 7564 0946 0021     		movs	r1, #0
 7565 0948 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7566              	.L473:
2224:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7567              		.loc 1 2224 0
 7568 094c 634B     		ldr	r3, .L578+4
 7569 094e 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7570 0952 0233     		adds	r3, r3, #2
 7571 0954 624A     		ldr	r2, .L578+8
 7572 0956 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7573 095a 6249     		ldr	r1, .L578+12
 7574 095c 1846     		mov	r0, r3
 7575 095e FFF7FEFF 		bl	filter
 7576 0962 0246     		mov	r2, r0
 7577 0964 5C4B     		ldr	r3, .L578
 7578 0966 D3F8FC31 		ldr	r3, [r3, #508]
 7579 096a 1344     		add	r3, r3, r2
 7580 096c 5A4A     		ldr	r2, .L578
 7581 096e C2F8FC31 		str	r3, [r2, #508]
2225:..\src/interruptions.c ****             
2226:..\src/interruptions.c ****             if (interrupt_flag){
 7582              		.loc 1 2226 0
 7583 0972 5D4B     		ldr	r3, .L578+16
 7584 0974 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7585 0976 002B     		cmp	r3, #0
 7586 0978 04D0     		beq	.L474
2227:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7587              		.loc 1 2227 0
 7588 097a 5B4B     		ldr	r3, .L578+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 176


 7589 097c 0022     		movs	r2, #0
 7590 097e 1A70     		strb	r2, [r3]
2228:..\src/interruptions.c ****                 interrupt_manager();
 7591              		.loc 1 2228 0
 7592 0980 FFF7FEFF 		bl	interrupt_manager
 7593              	.L474:
2229:..\src/interruptions.c ****             }
2230:..\src/interruptions.c ****             
2231:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7594              		.loc 1 2231 0
 7595 0984 5A4B     		ldr	r3, .L578+24
 7596 0986 1B88     		ldrh	r3, [r3]
 7597 0988 B3F57A7F 		cmp	r3, #1000
 7598 098c 22D1     		bne	.L558
2232:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7599              		.loc 1 2232 0
 7600 098e 524B     		ldr	r3, .L578
 7601 0990 D3F8FC31 		ldr	r3, [r3, #508]
 7602 0994 584A     		ldr	r2, .L578+32
 7603 0996 A2FB0323 		umull	r2, r3, r2, r3
 7604 099a 9B09     		lsrs	r3, r3, #6
 7605 099c 4E4A     		ldr	r2, .L578
 7606 099e C2F8FC31 		str	r3, [r2, #508]
2233:..\src/interruptions.c **** 
2234:..\src/interruptions.c ****                 if (interrupt_flag){
 7607              		.loc 1 2234 0
 7608 09a2 514B     		ldr	r3, .L578+16
 7609 09a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7610 09a6 002B     		cmp	r3, #0
 7611 09a8 04D0     		beq	.L476
2235:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7612              		.loc 1 2235 0
 7613 09aa 4F4B     		ldr	r3, .L578+16
 7614 09ac 0022     		movs	r2, #0
 7615 09ae 1A70     		strb	r2, [r3]
2236:..\src/interruptions.c ****                     interrupt_manager();
 7616              		.loc 1 2236 0
 7617 09b0 FFF7FEFF 		bl	interrupt_manager
 7618              	.L476:
2237:..\src/interruptions.c ****                 }                    
2238:..\src/interruptions.c ****                 
2239:..\src/interruptions.c ****                 LED_control(0);
 7619              		.loc 1 2239 0
 7620 09b4 0020     		movs	r0, #0
 7621 09b6 FFF7FEFF 		bl	LED_control
2240:..\src/interruptions.c **** 				
2241:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7622              		.loc 1 2241 0
 7623 09ba 4D4B     		ldr	r3, .L578+24
 7624 09bc 0022     		movs	r2, #0
 7625 09be 1A80     		strh	r2, [r3]	@ movhi
2242:..\src/interruptions.c **** 
2243:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7626              		.loc 1 2243 0
 7627 09c0 4C4B     		ldr	r3, .L578+28
 7628 09c2 0022     		movs	r2, #0
 7629 09c4 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 177


2244:..\src/interruptions.c ****             }
2245:..\src/interruptions.c ****             break;
 7630              		.loc 1 2245 0
 7631 09c6 05E0     		b	.L558
 7632              	.L555:
2246:..\src/interruptions.c **** 
2247:..\src/interruptions.c ****         default:
2248:..\src/interruptions.c ****             break;
 7633              		.loc 1 2248 0
 7634 09c8 00BF     		nop
 7635 09ca 04E0     		b	.L470
 7636              	.L556:
2196:..\src/interruptions.c **** 
 7637              		.loc 1 2196 0
 7638 09cc 00BF     		nop
 7639 09ce 02E0     		b	.L470
 7640              	.L557:
2217:..\src/interruptions.c **** 
 7641              		.loc 1 2217 0
 7642 09d0 00BF     		nop
 7643 09d2 00E0     		b	.L470
 7644              	.L558:
2245:..\src/interruptions.c **** 
 7645              		.loc 1 2245 0
 7646 09d4 00BF     		nop
 7647              	.L470:
2249:..\src/interruptions.c ****     }
2250:..\src/interruptions.c **** 
2251:..\src/interruptions.c ****     if (interrupt_flag){
 7648              		.loc 1 2251 0
 7649 09d6 444B     		ldr	r3, .L578+16
 7650 09d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7651 09da 002B     		cmp	r3, #0
 7652 09dc 04D0     		beq	.L477
2252:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7653              		.loc 1 2252 0
 7654 09de 424B     		ldr	r3, .L578+16
 7655 09e0 0022     		movs	r2, #0
 7656 09e2 1A70     		strb	r2, [r3]
2253:..\src/interruptions.c ****         interrupt_manager();
 7657              		.loc 1 2253 0
 7658 09e4 FFF7FEFF 		bl	interrupt_manager
 7659              	.L477:
2254:..\src/interruptions.c ****     }
2255:..\src/interruptions.c ****     // EMG 2 calibration state machine
2256:..\src/interruptions.c ****     switch(emg_2_status) {
 7660              		.loc 1 2256 0
 7661 09e8 444B     		ldr	r3, .L578+36
 7662 09ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7663 09ec 052B     		cmp	r3, #5
 7664 09ee 00F2C081 		bhi	.L559
 7665 09f2 01A2     		adr	r2, .L480
 7666 09f4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7667              		.p2align 2
 7668              	.L480:
 7669 09f8 110A0000 		.word	.L479+1
 7670 09fc B10A0000 		.word	.L481+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 178


 7671 0a00 090B0000 		.word	.L482+1
 7672 0a04 470B0000 		.word	.L483+1
 7673 0a08 F90B0000 		.word	.L484+1
 7674 0a0c 0B0C0000 		.word	.L485+1
 7675              		.p2align 1
 7676              	.L479:
2257:..\src/interruptions.c ****         case NORMAL: // normal execution
2258:..\src/interruptions.c ****         
2259:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7677              		.loc 1 2259 0
 7678 0a10 314B     		ldr	r3, .L578
 7679 0a12 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7680 0a16 022B     		cmp	r3, #2
 7681 0a18 14D0     		beq	.L486
 7682              		.loc 1 2259 0 is_stmt 0 discriminator 1
 7683 0a1a 2F4B     		ldr	r3, .L578
 7684 0a1c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7685 0a20 032B     		cmp	r3, #3
 7686 0a22 0FD0     		beq	.L486
2260:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7687              		.loc 1 2260 0 is_stmt 1
 7688 0a24 2D4B     		ldr	r3, .L578+4
 7689 0a26 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7690 0a2a C3F10303 		rsb	r3, r3, #3
 7691 0a2e 2C4A     		ldr	r2, .L578+8
 7692 0a30 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7693 0a34 A3F26763 		subw	r3, r3, #1639
 7694 0a38 5722     		movs	r2, #87
 7695 0a3a 02FB03F3 		mul	r3, r2, r3
 7696 0a3e 5B11     		asrs	r3, r3, #5
 7697 0a40 7B60     		str	r3, [r7, #4]
 7698 0a42 08E0     		b	.L487
 7699              	.L486:
2261:..\src/interruptions.c ****             }
2262:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2263:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7700              		.loc 1 2263 0
 7701 0a44 254B     		ldr	r3, .L578+4
 7702 0a46 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7703 0a4a C3F10303 		rsb	r3, r3, #3
 7704 0a4e 244A     		ldr	r2, .L578+8
 7705 0a50 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7706 0a54 7B60     		str	r3, [r7, #4]
 7707              	.L487:
2264:..\src/interruptions.c ****             }
2265:..\src/interruptions.c **** 
2266:..\src/interruptions.c ****             if (i_aux < 0)
 7708              		.loc 1 2266 0
 7709 0a56 7B68     		ldr	r3, [r7, #4]
 7710 0a58 002B     		cmp	r3, #0
 7711 0a5a 01DA     		bge	.L488
2267:..\src/interruptions.c ****                 i_aux = 0;
 7712              		.loc 1 2267 0
 7713 0a5c 0023     		movs	r3, #0
 7714 0a5e 7B60     		str	r3, [r7, #4]
 7715              	.L488:
2268:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 179


 7716              		.loc 1 2268 0
 7717 0a60 2749     		ldr	r1, .L578+40
 7718 0a62 7868     		ldr	r0, [r7, #4]
 7719 0a64 FFF7FEFF 		bl	filter
 7720 0a68 7860     		str	r0, [r7, #4]
2269:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7721              		.loc 1 2269 0
 7722 0a6a 7B68     		ldr	r3, [r7, #4]
 7723 0a6c 9B02     		lsls	r3, r3, #10
 7724 0a6e 1A46     		mov	r2, r3
 7725 0a70 194B     		ldr	r3, .L578
 7726 0a72 D3F80032 		ldr	r3, [r3, #512]
 7727 0a76 B2FBF3F3 		udiv	r3, r2, r3
 7728 0a7a 7B60     		str	r3, [r7, #4]
2270:..\src/interruptions.c **** 
2271:..\src/interruptions.c ****             if (interrupt_flag){
 7729              		.loc 1 2271 0
 7730 0a7c 1A4B     		ldr	r3, .L578+16
 7731 0a7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7732 0a80 002B     		cmp	r3, #0
 7733 0a82 04D0     		beq	.L489
2272:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7734              		.loc 1 2272 0
 7735 0a84 184B     		ldr	r3, .L578+16
 7736 0a86 0022     		movs	r2, #0
 7737 0a88 1A70     		strb	r2, [r3]
2273:..\src/interruptions.c ****                 interrupt_manager();
 7738              		.loc 1 2273 0
 7739 0a8a FFF7FEFF 		bl	interrupt_manager
 7740              	.L489:
2274:..\src/interruptions.c ****             }
2275:..\src/interruptions.c ****             
2276:..\src/interruptions.c ****             if (i_aux < 0) 
 7741              		.loc 1 2276 0
 7742 0a8e 7B68     		ldr	r3, [r7, #4]
 7743 0a90 002B     		cmp	r3, #0
 7744 0a92 02DA     		bge	.L490
2277:..\src/interruptions.c ****                 i_aux = 0;
 7745              		.loc 1 2277 0
 7746 0a94 0023     		movs	r3, #0
 7747 0a96 7B60     		str	r3, [r7, #4]
 7748 0a98 06E0     		b	.L491
 7749              	.L490:
2278:..\src/interruptions.c ****             else 
2279:..\src/interruptions.c ****                 if (i_aux > 1024)
 7750              		.loc 1 2279 0
 7751 0a9a 7B68     		ldr	r3, [r7, #4]
 7752 0a9c B3F5806F 		cmp	r3, #1024
 7753 0aa0 02DD     		ble	.L491
2280:..\src/interruptions.c ****                     i_aux = 1024;
 7754              		.loc 1 2280 0
 7755 0aa2 4FF48063 		mov	r3, #1024
 7756 0aa6 7B60     		str	r3, [r7, #4]
 7757              	.L491:
2281:..\src/interruptions.c ****             
2282:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7758              		.loc 1 2282 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 180


 7759 0aa8 104A     		ldr	r2, .L578+20
 7760 0aaa 7B68     		ldr	r3, [r7, #4]
 7761 0aac 5360     		str	r3, [r2, #4]
2283:..\src/interruptions.c **** 
2284:..\src/interruptions.c ****             break;
 7762              		.loc 1 2284 0
 7763 0aae 69E1     		b	.L492
 7764              	.L481:
2285:..\src/interruptions.c **** 
2286:..\src/interruptions.c ****         case RESET: // reset variables
2287:..\src/interruptions.c ****             emg_counter_2 = 0;
 7765              		.loc 1 2287 0
 7766 0ab0 144B     		ldr	r3, .L578+44
 7767 0ab2 0022     		movs	r2, #0
 7768 0ab4 1A80     		strh	r2, [r3]	@ movhi
2288:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7769              		.loc 1 2288 0
 7770 0ab6 084B     		ldr	r3, .L578
 7771 0ab8 0022     		movs	r2, #0
 7772 0aba C3F80022 		str	r2, [r3, #512]
2289:..\src/interruptions.c **** 
2290:..\src/interruptions.c ****             if (interrupt_flag){
 7773              		.loc 1 2290 0
 7774 0abe 0A4B     		ldr	r3, .L578+16
 7775 0ac0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7776 0ac2 002B     		cmp	r3, #0
 7777 0ac4 04D0     		beq	.L493
2291:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7778              		.loc 1 2291 0
 7779 0ac6 084B     		ldr	r3, .L578+16
 7780 0ac8 0022     		movs	r2, #0
 7781 0aca 1A70     		strb	r2, [r3]
2292:..\src/interruptions.c ****                 interrupt_manager();
 7782              		.loc 1 2292 0
 7783 0acc FFF7FEFF 		bl	interrupt_manager
 7784              	.L493:
2293:..\src/interruptions.c ****             }
2294:..\src/interruptions.c ****             
2295:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7785              		.loc 1 2295 0
 7786 0ad0 0A4B     		ldr	r3, .L578+36
 7787 0ad2 0422     		movs	r2, #4
 7788 0ad4 1A70     		strb	r2, [r3]
2296:..\src/interruptions.c ****             break;
 7789              		.loc 1 2296 0
 7790 0ad6 55E1     		b	.L492
 7791              	.L579:
 7792              		.align	2
 7793              	.L578:
 7794 0ad8 00000000 		.word	g_mem
 7795 0adc 00000000 		.word	c_mem
 7796 0ae0 00000000 		.word	ADC_buf
 7797 0ae4 00000000 		.word	filt_emg
 7798 0ae8 00000000 		.word	interrupt_flag
 7799 0aec 00000000 		.word	g_adc_meas
 7800 0af0 78010000 		.word	emg_counter_1.10662
 7801 0af4 00000000 		.word	emg_1_status
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 181


 7802 0af8 D34D6210 		.word	274877907
 7803 0afc 00000000 		.word	emg_2_status
 7804 0b00 08000000 		.word	filt_emg+8
 7805 0b04 7A010000 		.word	emg_counter_2.10663
 7806              	.L482:
2297:..\src/interruptions.c **** 
2298:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2299:..\src/interruptions.c ****             emg_counter_2++;
 7807              		.loc 1 2299 0
 7808 0b08 B24B     		ldr	r3, .L580
 7809 0b0a 1B88     		ldrh	r3, [r3]
 7810 0b0c 0133     		adds	r3, r3, #1
 7811 0b0e 9AB2     		uxth	r2, r3
 7812 0b10 B04B     		ldr	r3, .L580
 7813 0b12 1A80     		strh	r2, [r3]	@ movhi
2300:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7814              		.loc 1 2300 0
 7815 0b14 AF4B     		ldr	r3, .L580
 7816 0b16 1B88     		ldrh	r3, [r3]
 7817 0b18 B3F5FA7F 		cmp	r3, #500
 7818 0b1c 40F02B81 		bne	.L560
2301:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7819              		.loc 1 2301 0
 7820 0b20 AC4B     		ldr	r3, .L580
 7821 0b22 0022     		movs	r2, #0
 7822 0b24 1A80     		strh	r2, [r3]	@ movhi
2302:..\src/interruptions.c ****                 LED_control(1);
 7823              		.loc 1 2302 0
 7824 0b26 0120     		movs	r0, #1
 7825 0b28 FFF7FEFF 		bl	LED_control
2303:..\src/interruptions.c **** 
2304:..\src/interruptions.c ****                 if (interrupt_flag){
 7826              		.loc 1 2304 0
 7827 0b2c AA4B     		ldr	r3, .L580+4
 7828 0b2e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7829 0b30 002B     		cmp	r3, #0
 7830 0b32 04D0     		beq	.L495
2305:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7831              		.loc 1 2305 0
 7832 0b34 A84B     		ldr	r3, .L580+4
 7833 0b36 0022     		movs	r2, #0
 7834 0b38 1A70     		strb	r2, [r3]
2306:..\src/interruptions.c ****                     interrupt_manager();
 7835              		.loc 1 2306 0
 7836 0b3a FFF7FEFF 		bl	interrupt_manager
 7837              	.L495:
2307:..\src/interruptions.c ****                 }
2308:..\src/interruptions.c ****                 
2309:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7838              		.loc 1 2309 0
 7839 0b3e A74B     		ldr	r3, .L580+8
 7840 0b40 0322     		movs	r2, #3
 7841 0b42 1A70     		strb	r2, [r3]
2310:..\src/interruptions.c ****             }
2311:..\src/interruptions.c ****             break;
 7842              		.loc 1 2311 0
 7843 0b44 17E1     		b	.L560
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 182


 7844              	.L483:
2312:..\src/interruptions.c **** 
2313:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2314:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2315:..\src/interruptions.c ****             emg_counter_2++;
 7845              		.loc 1 2315 0
 7846 0b46 A34B     		ldr	r3, .L580
 7847 0b48 1B88     		ldrh	r3, [r3]
 7848 0b4a 0133     		adds	r3, r3, #1
 7849 0b4c 9AB2     		uxth	r2, r3
 7850 0b4e A14B     		ldr	r3, .L580
 7851 0b50 1A80     		strh	r2, [r3]	@ movhi
2316:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7852              		.loc 1 2316 0
 7853 0b52 A34B     		ldr	r3, .L580+12
 7854 0b54 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7855 0b58 C3F10303 		rsb	r3, r3, #3
 7856 0b5c A14A     		ldr	r2, .L580+16
 7857 0b5e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7858 0b62 002B     		cmp	r3, #0
 7859 0b64 08DA     		bge	.L496
2317:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7860              		.loc 1 2317 0
 7861 0b66 9E4B     		ldr	r3, .L580+12
 7862 0b68 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7863 0b6c C3F10303 		rsb	r3, r3, #3
 7864 0b70 9C4A     		ldr	r2, .L580+16
 7865 0b72 0021     		movs	r1, #0
 7866 0b74 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7867              	.L496:
2318:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7868              		.loc 1 2318 0
 7869 0b78 994B     		ldr	r3, .L580+12
 7870 0b7a 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7871 0b7e C3F10303 		rsb	r3, r3, #3
 7872 0b82 984A     		ldr	r2, .L580+16
 7873 0b84 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7874 0b88 9749     		ldr	r1, .L580+20
 7875 0b8a 1846     		mov	r0, r3
 7876 0b8c FFF7FEFF 		bl	filter
 7877 0b90 0246     		mov	r2, r0
 7878 0b92 964B     		ldr	r3, .L580+24
 7879 0b94 D3F80032 		ldr	r3, [r3, #512]
 7880 0b98 1344     		add	r3, r3, r2
 7881 0b9a 944A     		ldr	r2, .L580+24
 7882 0b9c C2F80032 		str	r3, [r2, #512]
2319:..\src/interruptions.c **** 
2320:..\src/interruptions.c ****             if (interrupt_flag){
 7883              		.loc 1 2320 0
 7884 0ba0 8D4B     		ldr	r3, .L580+4
 7885 0ba2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7886 0ba4 002B     		cmp	r3, #0
 7887 0ba6 04D0     		beq	.L497
2321:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7888              		.loc 1 2321 0
 7889 0ba8 8B4B     		ldr	r3, .L580+4
 7890 0baa 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 183


 7891 0bac 1A70     		strb	r2, [r3]
2322:..\src/interruptions.c ****                 interrupt_manager();
 7892              		.loc 1 2322 0
 7893 0bae FFF7FEFF 		bl	interrupt_manager
 7894              	.L497:
2323:..\src/interruptions.c ****             }
2324:..\src/interruptions.c ****             
2325:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7895              		.loc 1 2325 0
 7896 0bb2 884B     		ldr	r3, .L580
 7897 0bb4 1B88     		ldrh	r3, [r3]
 7898 0bb6 B3F57A7F 		cmp	r3, #1000
 7899 0bba 40F0DE80 		bne	.L561
2326:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7900              		.loc 1 2326 0
 7901 0bbe 8B4B     		ldr	r3, .L580+24
 7902 0bc0 D3F80032 		ldr	r3, [r3, #512]
 7903 0bc4 8A4A     		ldr	r2, .L580+28
 7904 0bc6 A2FB0323 		umull	r2, r3, r2, r3
 7905 0bca 9B09     		lsrs	r3, r3, #6
 7906 0bcc 874A     		ldr	r2, .L580+24
 7907 0bce C2F80032 		str	r3, [r2, #512]
2327:..\src/interruptions.c ****                 LED_control(0);
 7908              		.loc 1 2327 0
 7909 0bd2 0020     		movs	r0, #0
 7910 0bd4 FFF7FEFF 		bl	LED_control
2328:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7911              		.loc 1 2328 0
 7912 0bd8 7E4B     		ldr	r3, .L580
 7913 0bda 0022     		movs	r2, #0
 7914 0bdc 1A80     		strh	r2, [r3]	@ movhi
2329:..\src/interruptions.c ****             
2330:..\src/interruptions.c ****                 if (interrupt_flag){
 7915              		.loc 1 2330 0
 7916 0bde 7E4B     		ldr	r3, .L580+4
 7917 0be0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7918 0be2 002B     		cmp	r3, #0
 7919 0be4 04D0     		beq	.L499
2331:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7920              		.loc 1 2331 0
 7921 0be6 7C4B     		ldr	r3, .L580+4
 7922 0be8 0022     		movs	r2, #0
 7923 0bea 1A70     		strb	r2, [r3]
2332:..\src/interruptions.c ****                     interrupt_manager();
 7924              		.loc 1 2332 0
 7925 0bec FFF7FEFF 		bl	interrupt_manager
 7926              	.L499:
2333:..\src/interruptions.c ****                 }
2334:..\src/interruptions.c ****                 
2335:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7927              		.loc 1 2335 0
 7928 0bf0 7A4B     		ldr	r3, .L580+8
 7929 0bf2 0522     		movs	r2, #5
 7930 0bf4 1A70     		strb	r2, [r3]
2336:..\src/interruptions.c ****             }
2337:..\src/interruptions.c ****             break;
 7931              		.loc 1 2337 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 184


 7932 0bf6 C0E0     		b	.L561
 7933              	.L484:
2338:..\src/interruptions.c **** 
2339:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2340:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7934              		.loc 1 2340 0
 7935 0bf8 7E4B     		ldr	r3, .L580+32
 7936 0bfa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7937 0bfc 002B     		cmp	r3, #0
 7938 0bfe 40F0BE80 		bne	.L562
2341:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7939              		.loc 1 2341 0
 7940 0c02 764B     		ldr	r3, .L580+8
 7941 0c04 0222     		movs	r2, #2
 7942 0c06 1A70     		strb	r2, [r3]
2342:..\src/interruptions.c ****             break;
 7943              		.loc 1 2342 0
 7944 0c08 B9E0     		b	.L562
 7945              	.L485:
2343:..\src/interruptions.c **** 
2344:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2345:..\src/interruptions.c ****             emg_counter_2++;
 7946              		.loc 1 2345 0
 7947 0c0a 724B     		ldr	r3, .L580
 7948 0c0c 1B88     		ldrh	r3, [r3]
 7949 0c0e 0133     		adds	r3, r3, #1
 7950 0c10 9AB2     		uxth	r2, r3
 7951 0c12 704B     		ldr	r3, .L580
 7952 0c14 1A80     		strh	r2, [r3]	@ movhi
2346:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7953              		.loc 1 2346 0
 7954 0c16 6F4B     		ldr	r3, .L580
 7955 0c18 1B88     		ldrh	r3, [r3]
 7956 0c1a B3F5FA7F 		cmp	r3, #500
 7957 0c1e 40F0B080 		bne	.L563
2347:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7958              		.loc 1 2347 0
 7959 0c22 6C4B     		ldr	r3, .L580
 7960 0c24 0022     		movs	r2, #0
 7961 0c26 1A80     		strh	r2, [r3]	@ movhi
2348:..\src/interruptions.c ****                 
2349:..\src/interruptions.c ****                 if (interrupt_flag){
 7962              		.loc 1 2349 0
 7963 0c28 6B4B     		ldr	r3, .L580+4
 7964 0c2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7965 0c2c 002B     		cmp	r3, #0
 7966 0c2e 04D0     		beq	.L502
2350:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7967              		.loc 1 2350 0
 7968 0c30 694B     		ldr	r3, .L580+4
 7969 0c32 0022     		movs	r2, #0
 7970 0c34 1A70     		strb	r2, [r3]
2351:..\src/interruptions.c ****                     interrupt_manager();
 7971              		.loc 1 2351 0
 7972 0c36 FFF7FEFF 		bl	interrupt_manager
 7973              	.L502:
2352:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 185


2353:..\src/interruptions.c ****                 
2354:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7974              		.loc 1 2354 0
 7975 0c3a 6F4B     		ldr	r3, .L580+36
 7976 0c3c 0022     		movs	r2, #0
 7977 0c3e 1A70     		strb	r2, [r3]
 7978 0c40 8BE0     		b	.L503
 7979              	.L507:
2355:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7980              		.loc 1 2355 0
 7981 0c42 6D4B     		ldr	r3, .L580+36
 7982 0c44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7983 0c46 1946     		mov	r1, r3
 7984 0c48 654A     		ldr	r2, .L580+12
 7985 0c4a 7423     		movs	r3, #116
 7986 0c4c 03FB01F3 		mul	r3, r3, r1
 7987 0c50 1344     		add	r3, r3, r2
 7988 0c52 03F58773 		add	r3, r3, #270
 7989 0c56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7990 0c58 022B     		cmp	r3, #2
 7991 0c5a 33D0     		beq	.L504
2356:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 7992              		.loc 1 2356 0 discriminator 1
 7993 0c5c 664B     		ldr	r3, .L580+36
 7994 0c5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7995 0c60 1946     		mov	r1, r3
 7996 0c62 5F4A     		ldr	r2, .L580+12
 7997 0c64 7423     		movs	r3, #116
 7998 0c66 03FB01F3 		mul	r3, r3, r1
 7999 0c6a 1344     		add	r3, r3, r2
 8000 0c6c 03F58773 		add	r3, r3, #270
 8001 0c70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2355:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8002              		.loc 1 2355 0 discriminator 1
 8003 0c72 032B     		cmp	r3, #3
 8004 0c74 26D0     		beq	.L504
2357:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8005              		.loc 1 2357 0
 8006 0c76 604B     		ldr	r3, .L580+36
 8007 0c78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8008 0c7a 1946     		mov	r1, r3
 8009 0c7c 584A     		ldr	r2, .L580+12
 8010 0c7e 7423     		movs	r3, #116
 8011 0c80 03FB01F3 		mul	r3, r3, r1
 8012 0c84 1344     		add	r3, r3, r2
 8013 0c86 03F58773 		add	r3, r3, #270
 8014 0c8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2356:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 8015              		.loc 1 2356 0
 8016 0c8c 042B     		cmp	r3, #4
 8017 0c8e 19D0     		beq	.L504
2358:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8018              		.loc 1 2358 0
 8019 0c90 594B     		ldr	r3, .L580+36
 8020 0c92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8021 0c94 1946     		mov	r1, r3
 8022 0c96 524A     		ldr	r2, .L580+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 186


 8023 0c98 7423     		movs	r3, #116
 8024 0c9a 03FB01F3 		mul	r3, r3, r1
 8025 0c9e 1344     		add	r3, r3, r2
 8026 0ca0 03F58773 		add	r3, r3, #270
 8027 0ca4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2357:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8028              		.loc 1 2357 0
 8029 0ca6 052B     		cmp	r3, #5
 8030 0ca8 0CD0     		beq	.L504
2359:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 8031              		.loc 1 2359 0
 8032 0caa 534B     		ldr	r3, .L580+36
 8033 0cac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8034 0cae 1946     		mov	r1, r3
 8035 0cb0 4B4A     		ldr	r2, .L580+12
 8036 0cb2 7423     		movs	r3, #116
 8037 0cb4 03FB01F3 		mul	r3, r3, r1
 8038 0cb8 1344     		add	r3, r3, r2
 8039 0cba 03F58773 		add	r3, r3, #270
 8040 0cbe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2358:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8041              		.loc 1 2358 0
 8042 0cc0 072B     		cmp	r3, #7
 8043 0cc2 44D1     		bne	.L505
 8044              	.L504:
2360:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 8045              		.loc 1 2360 0
 8046 0cc4 4C4B     		ldr	r3, .L580+36
 8047 0cc6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8048 0cc8 1946     		mov	r1, r3
 8049 0cca 454A     		ldr	r2, .L580+12
 8050 0ccc 7423     		movs	r3, #116
 8051 0cce 03FB01F3 		mul	r3, r3, r1
 8052 0cd2 1344     		add	r3, r3, r2
 8053 0cd4 03F20F13 		addw	r3, r3, #271
 8054 0cd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8055 0cda 002B     		cmp	r3, #0
 8056 0cdc 18D1     		bne	.L506
2361:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 8057              		.loc 1 2361 0
 8058 0cde 464B     		ldr	r3, .L580+36
 8059 0ce0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8060 0ce2 1846     		mov	r0, r3
 8061 0ce4 444B     		ldr	r3, .L580+36
 8062 0ce6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8063 0ce8 1946     		mov	r1, r3
 8064 0cea 404A     		ldr	r2, .L580+24
 8065 0cec 7423     		movs	r3, #116
 8066 0cee 03FB01F3 		mul	r3, r3, r1
 8067 0cf2 1344     		add	r3, r3, r2
 8068 0cf4 03F58873 		add	r3, r3, #272
 8069 0cf8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8070 0cfa 1946     		mov	r1, r3
 8071 0cfc 3F4A     		ldr	r2, .L580+40
 8072 0cfe 3423     		movs	r3, #52
 8073 0d00 03FB01F3 		mul	r3, r3, r1
 8074 0d04 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 187


 8075 0d06 1A68     		ldr	r2, [r3]
 8076 0d08 3D49     		ldr	r1, .L580+44
 8077 0d0a 0301     		lsls	r3, r0, #4
 8078 0d0c 0B44     		add	r3, r3, r1
 8079 0d0e 1A60     		str	r2, [r3]
 8080              	.L506:
2362:..\src/interruptions.c ****                         }
2363:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 8081              		.loc 1 2363 0
 8082 0d10 394B     		ldr	r3, .L580+36
 8083 0d12 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8084 0d14 1846     		mov	r0, r3
 8085 0d16 384B     		ldr	r3, .L580+36
 8086 0d18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8087 0d1a 1946     		mov	r1, r3
 8088 0d1c 304A     		ldr	r2, .L580+12
 8089 0d1e 7423     		movs	r3, #116
 8090 0d20 03FB01F3 		mul	r3, r3, r1
 8091 0d24 1344     		add	r3, r3, r2
 8092 0d26 E033     		adds	r3, r3, #224
 8093 0d28 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 8094 0d2a 354A     		ldr	r2, .L580+44
 8095 0d2c 0301     		lsls	r3, r0, #4
 8096 0d2e 1344     		add	r3, r3, r2
 8097 0d30 0C33     		adds	r3, r3, #12
 8098 0d32 0A46     		mov	r2, r1
 8099 0d34 1A70     		strb	r2, [r3]
2364:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 8100              		.loc 1 2364 0
 8101 0d36 304B     		ldr	r3, .L580+36
 8102 0d38 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 8103 0d3a 2F4B     		ldr	r3, .L580+36
 8104 0d3c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8105 0d3e 304A     		ldr	r2, .L580+44
 8106 0d40 1B01     		lsls	r3, r3, #4
 8107 0d42 1344     		add	r3, r3, r2
 8108 0d44 0C33     		adds	r3, r3, #12
 8109 0d46 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8110 0d48 1946     		mov	r1, r3
 8111 0d4a FFF7FEFF 		bl	enable_motor
 8112              	.L505:
2354:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8113              		.loc 1 2354 0 discriminator 2
 8114 0d4e 2A4B     		ldr	r3, .L580+36
 8115 0d50 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8116 0d52 0133     		adds	r3, r3, #1
 8117 0d54 DAB2     		uxtb	r2, r3
 8118 0d56 284B     		ldr	r3, .L580+36
 8119 0d58 1A70     		strb	r2, [r3]
 8120              	.L503:
2354:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8121              		.loc 1 2354 0 is_stmt 0 discriminator 1
 8122 0d5a 274B     		ldr	r3, .L580+36
 8123 0d5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8124 0d5e 012B     		cmp	r3, #1
 8125 0d60 7FF66FAF 		bls	.L507
2365:..\src/interruptions.c ****                     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 188


2366:..\src/interruptions.c ****                 }
2367:..\src/interruptions.c ****                     
2368:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 8126              		.loc 1 2368 0 is_stmt 1
 8127 0d64 0020     		movs	r0, #0
 8128 0d66 FFF7FEFF 		bl	memStore
2369:..\src/interruptions.c ****                     
2370:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 8129              		.loc 1 2370 0
 8130 0d6a 1C4B     		ldr	r3, .L580+8
 8131 0d6c 0022     		movs	r2, #0
 8132 0d6e 1A70     		strb	r2, [r3]
2371:..\src/interruptions.c ****             }
2372:..\src/interruptions.c ****             break;
 8133              		.loc 1 2372 0
 8134 0d70 07E0     		b	.L563
 8135              	.L559:
2373:..\src/interruptions.c ****         default:
2374:..\src/interruptions.c ****             break;
 8136              		.loc 1 2374 0
 8137 0d72 00BF     		nop
 8138 0d74 06E0     		b	.L492
 8139              	.L560:
2311:..\src/interruptions.c **** 
 8140              		.loc 1 2311 0
 8141 0d76 00BF     		nop
 8142 0d78 04E0     		b	.L492
 8143              	.L561:
2337:..\src/interruptions.c **** 
 8144              		.loc 1 2337 0
 8145 0d7a 00BF     		nop
 8146 0d7c 02E0     		b	.L492
 8147              	.L562:
2342:..\src/interruptions.c **** 
 8148              		.loc 1 2342 0
 8149 0d7e 00BF     		nop
 8150 0d80 00E0     		b	.L492
 8151              	.L563:
2372:..\src/interruptions.c ****         default:
 8152              		.loc 1 2372 0
 8153 0d82 00BF     		nop
 8154              	.L492:
2375:..\src/interruptions.c ****     }
2376:..\src/interruptions.c ****         
2377:..\src/interruptions.c ****     if (interrupt_flag){
 8155              		.loc 1 2377 0
 8156 0d84 144B     		ldr	r3, .L580+4
 8157 0d86 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8158 0d88 002B     		cmp	r3, #0
 8159 0d8a 04D0     		beq	.L508
2378:..\src/interruptions.c ****         interrupt_flag = FALSE;
 8160              		.loc 1 2378 0
 8161 0d8c 124B     		ldr	r3, .L580+4
 8162 0d8e 0022     		movs	r2, #0
 8163 0d90 1A70     		strb	r2, [r3]
2379:..\src/interruptions.c ****         interrupt_manager();
 8164              		.loc 1 2379 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 189


 8165 0d92 FFF7FEFF 		bl	interrupt_manager
 8166              	.L508:
2380:..\src/interruptions.c ****     }
2381:..\src/interruptions.c ****     
2382:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 8167              		.loc 1 2382 0
 8168 0d96 124B     		ldr	r3, .L580+12
 8169 0d98 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8170 0d9c 062B     		cmp	r3, #6
 8171 0d9e 05D0     		beq	.L509
 8172              		.loc 1 2382 0 is_stmt 0 discriminator 1
 8173 0da0 0F4B     		ldr	r3, .L580+12
 8174 0da2 93F88231 		ldrb	r3, [r3, #386]	@ zero_extendqisi2
 8175 0da6 062B     		cmp	r3, #6
 8176 0da8 40F0DF81 		bne	.L510
 8177              	.L509:
2383:..\src/interruptions.c ****         // Read joystick
2384:..\src/interruptions.c ****         
2385:..\src/interruptions.c ****         switch (joy_UD_status) {
 8178              		.loc 1 2385 0 is_stmt 1
 8179 0dac 154B     		ldr	r3, .L580+48
 8180 0dae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8181 0db0 052B     		cmp	r3, #5
 8182 0db2 00F2E480 		bhi	.L511
 8183 0db6 01A2     		adr	r2, .L513
 8184 0db8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8185              		.p2align 2
 8186              	.L513:
 8187 0dbc 090E0000 		.word	.L512+1
 8188 0dc0 A50E0000 		.word	.L514+1
 8189 0dc4 B90E0000 		.word	.L515+1
 8190 0dc8 ED0E0000 		.word	.L516+1
 8191 0dcc 590F0000 		.word	.L517+1
 8192 0dd0 590F0000 		.word	.L517+1
 8193              		.p2align 1
 8194              	.L581:
 8195              		.align	2
 8196              	.L580:
 8197 0dd4 7A010000 		.word	emg_counter_2.10663
 8198 0dd8 00000000 		.word	interrupt_flag
 8199 0ddc 00000000 		.word	emg_2_status
 8200 0de0 00000000 		.word	c_mem
 8201 0de4 00000000 		.word	ADC_buf
 8202 0de8 08000000 		.word	filt_emg+8
 8203 0dec 00000000 		.word	g_mem
 8204 0df0 D34D6210 		.word	274877907
 8205 0df4 00000000 		.word	emg_1_status
 8206 0df8 72010000 		.word	idx.10672
 8207 0dfc 00000000 		.word	g_meas
 8208 0e00 00000000 		.word	g_ref
 8209 0e04 00000000 		.word	joy_UD_status
 8210              	.L512:
2386:..\src/interruptions.c ****             case NORMAL:
2387:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 8211              		.loc 1 2387 0
 8212 0e08 A44B     		ldr	r3, .L582
 8213 0e0a B3F90430 		ldrsh	r3, [r3, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 190


 8214 0e0e 7B60     		str	r3, [r7, #4]
2388:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2389:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 8215              		.loc 1 2389 0
 8216 0e10 A34B     		ldr	r3, .L582+4
 8217 0e12 1B68     		ldr	r3, [r3]
 8218 0e14 7A68     		ldr	r2, [r7, #4]
 8219 0e16 D31A     		subs	r3, r2, r3
 8220 0e18 1846     		mov	r0, r3
 8221 0e1a FFF7FEFF 		bl	__aeabi_i2f
 8222 0e1e 0446     		mov	r4, r0
 8223 0e20 9F4B     		ldr	r3, .L582+4
 8224 0e22 1B68     		ldr	r3, [r3]
 8225 0e24 1846     		mov	r0, r3
 8226 0e26 FFF7FEFF 		bl	__aeabi_i2f
 8227 0e2a 0346     		mov	r3, r0
 8228 0e2c 1946     		mov	r1, r3
 8229 0e2e 2046     		mov	r0, r4
 8230 0e30 FFF7FEFF 		bl	__aeabi_fdiv
 8231 0e34 0346     		mov	r3, r0
 8232 0e36 1C46     		mov	r4, r3
 8233 0e38 9A4B     		ldr	r3, .L582+8
 8234 0e3a B3F8BE32 		ldrh	r3, [r3, #702]
 8235 0e3e 1846     		mov	r0, r3
 8236 0e40 FFF7FEFF 		bl	__aeabi_i2f
 8237 0e44 0346     		mov	r3, r0
 8238 0e46 1946     		mov	r1, r3
 8239 0e48 2046     		mov	r0, r4
 8240 0e4a FFF7FEFF 		bl	__aeabi_fmul
 8241 0e4e 0346     		mov	r3, r0
 8242 0e50 1846     		mov	r0, r3
 8243 0e52 FFF7FEFF 		bl	__aeabi_f2iz
 8244 0e56 0346     		mov	r3, r0
 8245 0e58 7B60     		str	r3, [r7, #4]
2390:..\src/interruptions.c ****                 
2391:..\src/interruptions.c ****                 if (interrupt_flag){
 8246              		.loc 1 2391 0
 8247 0e5a 934B     		ldr	r3, .L582+12
 8248 0e5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8249 0e5e 002B     		cmp	r3, #0
 8250 0e60 04D0     		beq	.L518
2392:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8251              		.loc 1 2392 0
 8252 0e62 914B     		ldr	r3, .L582+12
 8253 0e64 0022     		movs	r2, #0
 8254 0e66 1A70     		strb	r2, [r3]
2393:..\src/interruptions.c ****                     interrupt_manager();
 8255              		.loc 1 2393 0
 8256 0e68 FFF7FEFF 		bl	interrupt_manager
 8257              	.L518:
2394:..\src/interruptions.c ****                 }
2395:..\src/interruptions.c **** 
2396:..\src/interruptions.c ****                 //Saturation
2397:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8258              		.loc 1 2397 0
 8259 0e6c 7B68     		ldr	r3, [r7, #4]
 8260 0e6e 13F5806F 		cmn	r3, #1024
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 191


 8261 0e72 01DA     		bge	.L519
2398:..\src/interruptions.c ****                     i_aux = -1024;
 8262              		.loc 1 2398 0
 8263 0e74 8D4B     		ldr	r3, .L582+16
 8264 0e76 7B60     		str	r3, [r7, #4]
 8265              	.L519:
2399:..\src/interruptions.c ****                 if (i_aux > 1024)
 8266              		.loc 1 2399 0
 8267 0e78 7B68     		ldr	r3, [r7, #4]
 8268 0e7a B3F5806F 		cmp	r3, #1024
 8269 0e7e 02DD     		ble	.L520
2400:..\src/interruptions.c ****                     i_aux = 1024;
 8270              		.loc 1 2400 0
 8271 0e80 4FF48063 		mov	r3, #1024
 8272 0e84 7B60     		str	r3, [r7, #4]
 8273              	.L520:
2401:..\src/interruptions.c **** 
2402:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8274              		.loc 1 2402 0
 8275 0e86 7B68     		ldr	r3, [r7, #4]
 8276 0e88 1BB2     		sxth	r3, r3
 8277 0e8a 1A46     		mov	r2, r3
 8278 0e8c 884B     		ldr	r3, .L582+20
 8279 0e8e 5A62     		str	r2, [r3, #36]
2403:..\src/interruptions.c **** 
2404:..\src/interruptions.c ****                 if (interrupt_flag){
 8280              		.loc 1 2404 0
 8281 0e90 854B     		ldr	r3, .L582+12
 8282 0e92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8283 0e94 002B     		cmp	r3, #0
 8284 0e96 6BD0     		beq	.L564
2405:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8285              		.loc 1 2405 0
 8286 0e98 834B     		ldr	r3, .L582+12
 8287 0e9a 0022     		movs	r2, #0
 8288 0e9c 1A70     		strb	r2, [r3]
2406:..\src/interruptions.c ****                     interrupt_manager();
 8289              		.loc 1 2406 0
 8290 0e9e FFF7FEFF 		bl	interrupt_manager
2407:..\src/interruptions.c ****                 }
2408:..\src/interruptions.c **** 
2409:..\src/interruptions.c ****             break;
 8291              		.loc 1 2409 0
 8292 0ea2 65E0     		b	.L564
 8293              	.L514:
2410:..\src/interruptions.c **** 
2411:..\src/interruptions.c ****             case RESET: // reset variables
2412:..\src/interruptions.c ****                 UD_counter = 0;
 8294              		.loc 1 2412 0
 8295 0ea4 834B     		ldr	r3, .L582+24
 8296 0ea6 0022     		movs	r2, #0
 8297 0ea8 1A80     		strh	r2, [r3]	@ movhi
2413:..\src/interruptions.c ****                 UD_mean_value = 0;
 8298              		.loc 1 2413 0
 8299 0eaa 7D4B     		ldr	r3, .L582+4
 8300 0eac 0022     		movs	r2, #0
 8301 0eae 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 192


2414:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8302              		.loc 1 2414 0
 8303 0eb0 814B     		ldr	r3, .L582+28
 8304 0eb2 0422     		movs	r2, #4
 8305 0eb4 1A70     		strb	r2, [r3]
2415:..\src/interruptions.c **** 
2416:..\src/interruptions.c ****             break;
 8306              		.loc 1 2416 0
 8307 0eb6 62E0     		b	.L511
 8308              	.L515:
2417:..\src/interruptions.c **** 
2418:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2419:..\src/interruptions.c ****                 UD_counter++;
 8309              		.loc 1 2419 0
 8310 0eb8 7E4B     		ldr	r3, .L582+24
 8311 0eba 1B88     		ldrh	r3, [r3]
 8312 0ebc 0133     		adds	r3, r3, #1
 8313 0ebe 9AB2     		uxth	r2, r3
 8314 0ec0 7C4B     		ldr	r3, .L582+24
 8315 0ec2 1A80     		strh	r2, [r3]	@ movhi
2420:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8316              		.loc 1 2420 0
 8317 0ec4 7B4B     		ldr	r3, .L582+24
 8318 0ec6 1B88     		ldrh	r3, [r3]
 8319 0ec8 642B     		cmp	r3, #100
 8320 0eca 53D1     		bne	.L565
2421:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8321              		.loc 1 2421 0
 8322 0ecc 794B     		ldr	r3, .L582+24
 8323 0ece 0022     		movs	r2, #0
 8324 0ed0 1A80     		strh	r2, [r3]	@ movhi
2422:..\src/interruptions.c **** 
2423:..\src/interruptions.c ****                     if (interrupt_flag){
 8325              		.loc 1 2423 0
 8326 0ed2 754B     		ldr	r3, .L582+12
 8327 0ed4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8328 0ed6 002B     		cmp	r3, #0
 8329 0ed8 04D0     		beq	.L523
2424:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8330              		.loc 1 2424 0
 8331 0eda 734B     		ldr	r3, .L582+12
 8332 0edc 0022     		movs	r2, #0
 8333 0ede 1A70     		strb	r2, [r3]
2425:..\src/interruptions.c ****                         interrupt_manager();
 8334              		.loc 1 2425 0
 8335 0ee0 FFF7FEFF 		bl	interrupt_manager
 8336              	.L523:
2426:..\src/interruptions.c ****                     }
2427:..\src/interruptions.c **** 
2428:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8337              		.loc 1 2428 0
 8338 0ee4 744B     		ldr	r3, .L582+28
 8339 0ee6 0322     		movs	r2, #3
 8340 0ee8 1A70     		strb	r2, [r3]
2429:..\src/interruptions.c ****                 }
2430:..\src/interruptions.c **** 
2431:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 193


 8341              		.loc 1 2431 0
 8342 0eea 43E0     		b	.L565
 8343              	.L516:
2432:..\src/interruptions.c **** 
2433:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2434:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2435:..\src/interruptions.c ****                 UD_counter++;
 8344              		.loc 1 2435 0
 8345 0eec 714B     		ldr	r3, .L582+24
 8346 0eee 1B88     		ldrh	r3, [r3]
 8347 0ef0 0133     		adds	r3, r3, #1
 8348 0ef2 9AB2     		uxth	r2, r3
 8349 0ef4 6F4B     		ldr	r3, .L582+24
 8350 0ef6 1A80     		strh	r2, [r3]	@ movhi
2436:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8351              		.loc 1 2436 0
 8352 0ef8 684B     		ldr	r3, .L582
 8353 0efa B3F90430 		ldrsh	r3, [r3, #4]
 8354 0efe 1A46     		mov	r2, r3
 8355 0f00 674B     		ldr	r3, .L582+4
 8356 0f02 1B68     		ldr	r3, [r3]
 8357 0f04 1344     		add	r3, r3, r2
 8358 0f06 664A     		ldr	r2, .L582+4
 8359 0f08 1360     		str	r3, [r2]
2437:..\src/interruptions.c **** 
2438:..\src/interruptions.c ****                 if (interrupt_flag){
 8360              		.loc 1 2438 0
 8361 0f0a 674B     		ldr	r3, .L582+12
 8362 0f0c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8363 0f0e 002B     		cmp	r3, #0
 8364 0f10 04D0     		beq	.L524
2439:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8365              		.loc 1 2439 0
 8366 0f12 654B     		ldr	r3, .L582+12
 8367 0f14 0022     		movs	r2, #0
 8368 0f16 1A70     		strb	r2, [r3]
2440:..\src/interruptions.c ****                     interrupt_manager();
 8369              		.loc 1 2440 0
 8370 0f18 FFF7FEFF 		bl	interrupt_manager
 8371              	.L524:
2441:..\src/interruptions.c ****                 }
2442:..\src/interruptions.c **** 
2443:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8372              		.loc 1 2443 0
 8373 0f1c 654B     		ldr	r3, .L582+24
 8374 0f1e 1B88     		ldrh	r3, [r3]
 8375 0f20 C82B     		cmp	r3, #200
 8376 0f22 29D1     		bne	.L566
2444:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8377              		.loc 1 2444 0
 8378 0f24 5E4B     		ldr	r3, .L582+4
 8379 0f26 1B68     		ldr	r3, [r3]
 8380 0f28 644A     		ldr	r2, .L582+32
 8381 0f2a 82FB0312 		smull	r1, r2, r2, r3
 8382 0f2e 9211     		asrs	r2, r2, #6
 8383 0f30 DB17     		asrs	r3, r3, #31
 8384 0f32 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 194


 8385 0f34 5A4A     		ldr	r2, .L582+4
 8386 0f36 1360     		str	r3, [r2]
2445:..\src/interruptions.c **** 
2446:..\src/interruptions.c ****                     if (interrupt_flag){
 8387              		.loc 1 2446 0
 8388 0f38 5B4B     		ldr	r3, .L582+12
 8389 0f3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8390 0f3c 002B     		cmp	r3, #0
 8391 0f3e 04D0     		beq	.L526
2447:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8392              		.loc 1 2447 0
 8393 0f40 594B     		ldr	r3, .L582+12
 8394 0f42 0022     		movs	r2, #0
 8395 0f44 1A70     		strb	r2, [r3]
2448:..\src/interruptions.c ****                         interrupt_manager();
 8396              		.loc 1 2448 0
 8397 0f46 FFF7FEFF 		bl	interrupt_manager
 8398              	.L526:
2449:..\src/interruptions.c ****                     }
2450:..\src/interruptions.c **** 
2451:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8399              		.loc 1 2451 0
 8400 0f4a 5A4B     		ldr	r3, .L582+24
 8401 0f4c 0022     		movs	r2, #0
 8402 0f4e 1A80     		strh	r2, [r3]	@ movhi
2452:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8403              		.loc 1 2452 0
 8404 0f50 594B     		ldr	r3, .L582+28
 8405 0f52 0022     		movs	r2, #0
 8406 0f54 1A70     		strb	r2, [r3]
2453:..\src/interruptions.c ****                 }
2454:..\src/interruptions.c ****             break;
 8407              		.loc 1 2454 0
 8408 0f56 0FE0     		b	.L566
 8409              	.L517:
2455:..\src/interruptions.c **** 
2456:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2457:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8410              		.loc 1 2457 0
 8411 0f58 594B     		ldr	r3, .L582+36
 8412 0f5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8413 0f5c 002B     		cmp	r3, #0
 8414 0f5e 0DD1     		bne	.L567
 8415              		.loc 1 2457 0 is_stmt 0 discriminator 1
 8416 0f60 584B     		ldr	r3, .L582+40
 8417 0f62 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8418 0f64 002B     		cmp	r3, #0
 8419 0f66 09D1     		bne	.L567
2458:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8420              		.loc 1 2458 0 is_stmt 1
 8421 0f68 534B     		ldr	r3, .L582+28
 8422 0f6a 0222     		movs	r2, #2
 8423 0f6c 1A70     		strb	r2, [r3]
2459:..\src/interruptions.c ****             break;
 8424              		.loc 1 2459 0
 8425 0f6e 05E0     		b	.L567
 8426              	.L564:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 195


2409:..\src/interruptions.c **** 
 8427              		.loc 1 2409 0
 8428 0f70 00BF     		nop
 8429 0f72 04E0     		b	.L511
 8430              	.L565:
2431:..\src/interruptions.c **** 
 8431              		.loc 1 2431 0
 8432 0f74 00BF     		nop
 8433 0f76 02E0     		b	.L511
 8434              	.L566:
2454:..\src/interruptions.c **** 
 8435              		.loc 1 2454 0
 8436 0f78 00BF     		nop
 8437 0f7a 00E0     		b	.L511
 8438              	.L567:
 8439              		.loc 1 2459 0
 8440 0f7c 00BF     		nop
 8441              	.L511:
2460:..\src/interruptions.c ****         }
2461:..\src/interruptions.c **** 
2462:..\src/interruptions.c ****         if (interrupt_flag){
 8442              		.loc 1 2462 0
 8443 0f7e 4A4B     		ldr	r3, .L582+12
 8444 0f80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8445 0f82 002B     		cmp	r3, #0
 8446 0f84 04D0     		beq	.L528
2463:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8447              		.loc 1 2463 0
 8448 0f86 484B     		ldr	r3, .L582+12
 8449 0f88 0022     		movs	r2, #0
 8450 0f8a 1A70     		strb	r2, [r3]
2464:..\src/interruptions.c ****             interrupt_manager();
 8451              		.loc 1 2464 0
 8452 0f8c FFF7FEFF 		bl	interrupt_manager
 8453              	.L528:
2465:..\src/interruptions.c ****         }
2466:..\src/interruptions.c ****             
2467:..\src/interruptions.c ****         switch (joy_LR_status) {
 8454              		.loc 1 2467 0
 8455 0f90 4D4B     		ldr	r3, .L582+44
 8456 0f92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8457 0f94 052B     		cmp	r3, #5
 8458 0f96 00F2DF80 		bhi	.L529
 8459 0f9a 01A2     		adr	r2, .L531
 8460 0f9c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8461              		.p2align 2
 8462              	.L531:
 8463 0fa0 B90F0000 		.word	.L530+1
 8464 0fa4 55100000 		.word	.L532+1
 8465 0fa8 69100000 		.word	.L533+1
 8466 0fac D5100000 		.word	.L534+1
 8467 0fb0 2F110000 		.word	.L535+1
 8468 0fb4 2F110000 		.word	.L535+1
 8469              		.p2align 1
 8470              	.L530:
2468:..\src/interruptions.c ****             case NORMAL:
2469:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 196


 8471              		.loc 1 2469 0
 8472 0fb8 384B     		ldr	r3, .L582
 8473 0fba B3F90630 		ldrsh	r3, [r3, #6]
 8474 0fbe 7B60     		str	r3, [r7, #4]
2470:..\src/interruptions.c **** 
2471:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8475              		.loc 1 2471 0
 8476 0fc0 424B     		ldr	r3, .L582+48
 8477 0fc2 1B68     		ldr	r3, [r3]
 8478 0fc4 7A68     		ldr	r2, [r7, #4]
 8479 0fc6 D31A     		subs	r3, r2, r3
 8480 0fc8 1846     		mov	r0, r3
 8481 0fca FFF7FEFF 		bl	__aeabi_i2f
 8482 0fce 0446     		mov	r4, r0
 8483 0fd0 3E4B     		ldr	r3, .L582+48
 8484 0fd2 1B68     		ldr	r3, [r3]
 8485 0fd4 1846     		mov	r0, r3
 8486 0fd6 FFF7FEFF 		bl	__aeabi_i2f
 8487 0fda 0346     		mov	r3, r0
 8488 0fdc 1946     		mov	r1, r3
 8489 0fde 2046     		mov	r0, r4
 8490 0fe0 FFF7FEFF 		bl	__aeabi_fdiv
 8491 0fe4 0346     		mov	r3, r0
 8492 0fe6 1C46     		mov	r4, r3
 8493 0fe8 2E4B     		ldr	r3, .L582+8
 8494 0fea B3F8BC32 		ldrh	r3, [r3, #700]
 8495 0fee 1846     		mov	r0, r3
 8496 0ff0 FFF7FEFF 		bl	__aeabi_i2f
 8497 0ff4 0346     		mov	r3, r0
 8498 0ff6 1946     		mov	r1, r3
 8499 0ff8 2046     		mov	r0, r4
 8500 0ffa FFF7FEFF 		bl	__aeabi_fmul
 8501 0ffe 0346     		mov	r3, r0
 8502 1000 1846     		mov	r0, r3
 8503 1002 FFF7FEFF 		bl	__aeabi_f2iz
 8504 1006 0346     		mov	r3, r0
 8505 1008 7B60     		str	r3, [r7, #4]
2472:..\src/interruptions.c ****                 
2473:..\src/interruptions.c ****                 if (interrupt_flag){
 8506              		.loc 1 2473 0
 8507 100a 274B     		ldr	r3, .L582+12
 8508 100c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8509 100e 002B     		cmp	r3, #0
 8510 1010 04D0     		beq	.L536
2474:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8511              		.loc 1 2474 0
 8512 1012 254B     		ldr	r3, .L582+12
 8513 1014 0022     		movs	r2, #0
 8514 1016 1A70     		strb	r2, [r3]
2475:..\src/interruptions.c ****                     interrupt_manager();
 8515              		.loc 1 2475 0
 8516 1018 FFF7FEFF 		bl	interrupt_manager
 8517              	.L536:
2476:..\src/interruptions.c ****                 }
2477:..\src/interruptions.c **** 
2478:..\src/interruptions.c ****                 //Saturation
2479:..\src/interruptions.c ****                 if (i_aux < -1024)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 197


 8518              		.loc 1 2479 0
 8519 101c 7B68     		ldr	r3, [r7, #4]
 8520 101e 13F5806F 		cmn	r3, #1024
 8521 1022 01DA     		bge	.L537
2480:..\src/interruptions.c ****                     i_aux = -1024;
 8522              		.loc 1 2480 0
 8523 1024 214B     		ldr	r3, .L582+16
 8524 1026 7B60     		str	r3, [r7, #4]
 8525              	.L537:
2481:..\src/interruptions.c ****                 if (i_aux > 1024)
 8526              		.loc 1 2481 0
 8527 1028 7B68     		ldr	r3, [r7, #4]
 8528 102a B3F5806F 		cmp	r3, #1024
 8529 102e 02DD     		ble	.L538
2482:..\src/interruptions.c ****                     i_aux = 1024;
 8530              		.loc 1 2482 0
 8531 1030 4FF48063 		mov	r3, #1024
 8532 1034 7B60     		str	r3, [r7, #4]
 8533              	.L538:
2483:..\src/interruptions.c **** 
2484:..\src/interruptions.c ****                 if (interrupt_flag){
 8534              		.loc 1 2484 0
 8535 1036 1C4B     		ldr	r3, .L582+12
 8536 1038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8537 103a 002B     		cmp	r3, #0
 8538 103c 04D0     		beq	.L539
2485:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8539              		.loc 1 2485 0
 8540 103e 1A4B     		ldr	r3, .L582+12
 8541 1040 0022     		movs	r2, #0
 8542 1042 1A70     		strb	r2, [r3]
2486:..\src/interruptions.c ****                     interrupt_manager();
 8543              		.loc 1 2486 0
 8544 1044 FFF7FEFF 		bl	interrupt_manager
 8545              	.L539:
2487:..\src/interruptions.c ****                 }
2488:..\src/interruptions.c **** 
2489:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8546              		.loc 1 2489 0
 8547 1048 7B68     		ldr	r3, [r7, #4]
 8548 104a 1BB2     		sxth	r3, r3
 8549 104c 1A46     		mov	r2, r3
 8550 104e 184B     		ldr	r3, .L582+20
 8551 1050 1A62     		str	r2, [r3, #32]
2490:..\src/interruptions.c **** 
2491:..\src/interruptions.c ****             break;
 8552              		.loc 1 2491 0
 8553 1052 81E0     		b	.L529
 8554              	.L532:
2492:..\src/interruptions.c **** 
2493:..\src/interruptions.c ****             case RESET: // reset variables
2494:..\src/interruptions.c ****                 LR_counter = 0;
 8555              		.loc 1 2494 0
 8556 1054 1E4B     		ldr	r3, .L582+52
 8557 1056 0022     		movs	r2, #0
 8558 1058 1A80     		strh	r2, [r3]	@ movhi
2495:..\src/interruptions.c ****                 LR_mean_value = 0;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 198


 8559              		.loc 1 2495 0
 8560 105a 1C4B     		ldr	r3, .L582+48
 8561 105c 0022     		movs	r2, #0
 8562 105e 1A60     		str	r2, [r3]
2496:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8563              		.loc 1 2496 0
 8564 1060 194B     		ldr	r3, .L582+44
 8565 1062 0422     		movs	r2, #4
 8566 1064 1A70     		strb	r2, [r3]
2497:..\src/interruptions.c ****             break;
 8567              		.loc 1 2497 0
 8568 1066 77E0     		b	.L529
 8569              	.L533:
2498:..\src/interruptions.c **** 
2499:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2500:..\src/interruptions.c ****                 LR_counter++;
 8570              		.loc 1 2500 0
 8571 1068 194B     		ldr	r3, .L582+52
 8572 106a 1B88     		ldrh	r3, [r3]
 8573 106c 0133     		adds	r3, r3, #1
 8574 106e 9AB2     		uxth	r2, r3
 8575 1070 174B     		ldr	r3, .L582+52
 8576 1072 1A80     		strh	r2, [r3]	@ movhi
2501:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8577              		.loc 1 2501 0
 8578 1074 164B     		ldr	r3, .L582+52
 8579 1076 1B88     		ldrh	r3, [r3]
 8580 1078 642B     		cmp	r3, #100
 8581 107a 68D1     		bne	.L568
2502:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8582              		.loc 1 2502 0
 8583 107c 144B     		ldr	r3, .L582+52
 8584 107e 0022     		movs	r2, #0
 8585 1080 1A80     		strh	r2, [r3]	@ movhi
2503:..\src/interruptions.c **** 
2504:..\src/interruptions.c ****                     if (interrupt_flag){
 8586              		.loc 1 2504 0
 8587 1082 094B     		ldr	r3, .L582+12
 8588 1084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8589 1086 002B     		cmp	r3, #0
 8590 1088 04D0     		beq	.L541
2505:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8591              		.loc 1 2505 0
 8592 108a 074B     		ldr	r3, .L582+12
 8593 108c 0022     		movs	r2, #0
 8594 108e 1A70     		strb	r2, [r3]
2506:..\src/interruptions.c ****                         interrupt_manager();
 8595              		.loc 1 2506 0
 8596 1090 FFF7FEFF 		bl	interrupt_manager
 8597              	.L541:
2507:..\src/interruptions.c ****                     }
2508:..\src/interruptions.c **** 
2509:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8598              		.loc 1 2509 0
 8599 1094 0C4B     		ldr	r3, .L582+44
 8600 1096 0322     		movs	r2, #3
 8601 1098 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 199


2510:..\src/interruptions.c ****                 }
2511:..\src/interruptions.c ****             break;
 8602              		.loc 1 2511 0
 8603 109a 58E0     		b	.L568
 8604              	.L583:
 8605              		.align	2
 8606              	.L582:
 8607 109c 00000000 		.word	ADC_buf
 8608 10a0 7C010000 		.word	UD_mean_value.10666
 8609 10a4 00000000 		.word	c_mem
 8610 10a8 00000000 		.word	interrupt_flag
 8611 10ac 00FCFFFF 		.word	-1024
 8612 10b0 00000000 		.word	g_adc_meas
 8613 10b4 80010000 		.word	UD_counter.10664
 8614 10b8 00000000 		.word	joy_UD_status
 8615 10bc 1F85EB51 		.word	1374389535
 8616 10c0 00000000 		.word	emg_1_status
 8617 10c4 00000000 		.word	emg_2_status
 8618 10c8 00000000 		.word	joy_LR_status
 8619 10cc 84010000 		.word	LR_mean_value.10667
 8620 10d0 88010000 		.word	LR_counter.10665
 8621              	.L534:
2512:..\src/interruptions.c **** 
2513:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2514:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2515:..\src/interruptions.c ****                 LR_counter++;
 8622              		.loc 1 2515 0
 8623 10d4 524B     		ldr	r3, .L584
 8624 10d6 1B88     		ldrh	r3, [r3]
 8625 10d8 0133     		adds	r3, r3, #1
 8626 10da 9AB2     		uxth	r2, r3
 8627 10dc 504B     		ldr	r3, .L584
 8628 10de 1A80     		strh	r2, [r3]	@ movhi
2516:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8629              		.loc 1 2516 0
 8630 10e0 504B     		ldr	r3, .L584+4
 8631 10e2 B3F90630 		ldrsh	r3, [r3, #6]
 8632 10e6 1A46     		mov	r2, r3
 8633 10e8 4F4B     		ldr	r3, .L584+8
 8634 10ea 1B68     		ldr	r3, [r3]
 8635 10ec 1344     		add	r3, r3, r2
 8636 10ee 4E4A     		ldr	r2, .L584+8
 8637 10f0 1360     		str	r3, [r2]
2517:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8638              		.loc 1 2517 0
 8639 10f2 4B4B     		ldr	r3, .L584
 8640 10f4 1B88     		ldrh	r3, [r3]
 8641 10f6 C82B     		cmp	r3, #200
 8642 10f8 2BD1     		bne	.L569
2518:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8643              		.loc 1 2518 0
 8644 10fa 4B4B     		ldr	r3, .L584+8
 8645 10fc 1B68     		ldr	r3, [r3]
 8646 10fe 4B4A     		ldr	r2, .L584+12
 8647 1100 82FB0312 		smull	r1, r2, r2, r3
 8648 1104 9211     		asrs	r2, r2, #6
 8649 1106 DB17     		asrs	r3, r3, #31
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 200


 8650 1108 D31A     		subs	r3, r2, r3
 8651 110a 474A     		ldr	r2, .L584+8
 8652 110c 1360     		str	r3, [r2]
2519:..\src/interruptions.c ****                     
2520:..\src/interruptions.c ****                     if (interrupt_flag){
 8653              		.loc 1 2520 0
 8654 110e 484B     		ldr	r3, .L584+16
 8655 1110 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8656 1112 002B     		cmp	r3, #0
 8657 1114 04D0     		beq	.L543
2521:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8658              		.loc 1 2521 0
 8659 1116 464B     		ldr	r3, .L584+16
 8660 1118 0022     		movs	r2, #0
 8661 111a 1A70     		strb	r2, [r3]
2522:..\src/interruptions.c ****                         interrupt_manager();
 8662              		.loc 1 2522 0
 8663 111c FFF7FEFF 		bl	interrupt_manager
 8664              	.L543:
2523:..\src/interruptions.c ****                     }
2524:..\src/interruptions.c **** 
2525:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8665              		.loc 1 2525 0
 8666 1120 3F4B     		ldr	r3, .L584
 8667 1122 0022     		movs	r2, #0
 8668 1124 1A80     		strh	r2, [r3]	@ movhi
2526:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8669              		.loc 1 2526 0
 8670 1126 434B     		ldr	r3, .L584+20
 8671 1128 0022     		movs	r2, #0
 8672 112a 1A70     		strb	r2, [r3]
2527:..\src/interruptions.c ****                 }
2528:..\src/interruptions.c ****             break;
 8673              		.loc 1 2528 0
 8674 112c 11E0     		b	.L569
 8675              	.L535:
2529:..\src/interruptions.c **** 
2530:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2531:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8676              		.loc 1 2531 0
 8677 112e 424B     		ldr	r3, .L584+24
 8678 1130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8679 1132 002B     		cmp	r3, #0
 8680 1134 0FD1     		bne	.L570
 8681              		.loc 1 2531 0 is_stmt 0 discriminator 1
 8682 1136 414B     		ldr	r3, .L584+28
 8683 1138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8684 113a 002B     		cmp	r3, #0
 8685 113c 0BD1     		bne	.L570
 8686              		.loc 1 2531 0 discriminator 2
 8687 113e 404B     		ldr	r3, .L584+32
 8688 1140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8689 1142 002B     		cmp	r3, #0
 8690 1144 07D1     		bne	.L570
2532:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8691              		.loc 1 2532 0 is_stmt 1
 8692 1146 3B4B     		ldr	r3, .L584+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 201


 8693 1148 0222     		movs	r2, #2
 8694 114a 1A70     		strb	r2, [r3]
2533:..\src/interruptions.c ****             break;
 8695              		.loc 1 2533 0
 8696 114c 03E0     		b	.L570
 8697              	.L568:
2511:..\src/interruptions.c **** 
 8698              		.loc 1 2511 0
 8699 114e 00BF     		nop
 8700 1150 02E0     		b	.L529
 8701              	.L569:
2528:..\src/interruptions.c **** 
 8702              		.loc 1 2528 0
 8703 1152 00BF     		nop
 8704 1154 00E0     		b	.L529
 8705              	.L570:
 8706              		.loc 1 2533 0
 8707 1156 00BF     		nop
 8708              	.L529:
2534:..\src/interruptions.c ****         }
2535:..\src/interruptions.c ****        
2536:..\src/interruptions.c ****         if (interrupt_flag){
 8709              		.loc 1 2536 0
 8710 1158 354B     		ldr	r3, .L584+16
 8711 115a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8712 115c 002B     		cmp	r3, #0
 8713 115e 04D0     		beq	.L510
2537:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8714              		.loc 1 2537 0
 8715 1160 334B     		ldr	r3, .L584+16
 8716 1162 0022     		movs	r2, #0
 8717 1164 1A70     		strb	r2, [r3]
2538:..\src/interruptions.c ****             interrupt_manager();
 8718              		.loc 1 2538 0
 8719 1166 FFF7FEFF 		bl	interrupt_manager
 8720              	.L510:
2539:..\src/interruptions.c ****         }
2540:..\src/interruptions.c ****     }
2541:..\src/interruptions.c ****     
2542:..\src/interruptions.c ****     // Read also EMG additional sensors port
2543:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8721              		.loc 1 2543 0
 8722 116a 364B     		ldr	r3, .L584+36
 8723 116c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8724 116e 062B     		cmp	r3, #6
 8725 1170 52D9     		bls	.L571
2544:..\src/interruptions.c ****         
2545:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8726              		.loc 1 2545 0
 8727 1172 354B     		ldr	r3, .L584+40
 8728 1174 0022     		movs	r2, #0
 8729 1176 1A70     		strb	r2, [r3]
 8730 1178 4AE0     		b	.L546
 8731              	.L553:
2546:..\src/interruptions.c ****             
2547:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8732              		.loc 1 2547 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 202


 8733 117a 334B     		ldr	r3, .L584+40
 8734 117c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8735 117e 0633     		adds	r3, r3, #6
 8736 1180 284A     		ldr	r2, .L584+4
 8737 1182 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8738 1186 7B60     		str	r3, [r7, #4]
2548:..\src/interruptions.c ****             if (i_aux < 0) 
 8739              		.loc 1 2548 0
 8740 1188 7B68     		ldr	r3, [r7, #4]
 8741 118a 002B     		cmp	r3, #0
 8742 118c 01DA     		bge	.L547
2549:..\src/interruptions.c ****                 i_aux = 0;
 8743              		.loc 1 2549 0
 8744 118e 0023     		movs	r3, #0
 8745 1190 7B60     		str	r3, [r7, #4]
 8746              	.L547:
2550:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8747              		.loc 1 2550 0
 8748 1192 2D4B     		ldr	r3, .L584+40
 8749 1194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8750 1196 0233     		adds	r3, r3, #2
 8751 1198 DB00     		lsls	r3, r3, #3
 8752 119a 2C4A     		ldr	r2, .L584+44
 8753 119c 1344     		add	r3, r3, r2
 8754 119e 1946     		mov	r1, r3
 8755 11a0 7868     		ldr	r0, [r7, #4]
 8756 11a2 FFF7FEFF 		bl	filter
 8757 11a6 7860     		str	r0, [r7, #4]
2551:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8758              		.loc 1 2551 0
 8759 11a8 7B68     		ldr	r3, [r7, #4]
 8760 11aa 9B02     		lsls	r3, r3, #10
 8761 11ac 002B     		cmp	r3, #0
 8762 11ae 01DA     		bge	.L548
 8763 11b0 03F2FF33 		addw	r3, r3, #1023
 8764              	.L548:
 8765 11b4 9B12     		asrs	r3, r3, #10
 8766 11b6 7B60     		str	r3, [r7, #4]
2552:..\src/interruptions.c **** 
2553:..\src/interruptions.c ****             if (interrupt_flag){
 8767              		.loc 1 2553 0
 8768 11b8 1D4B     		ldr	r3, .L584+16
 8769 11ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8770 11bc 002B     		cmp	r3, #0
 8771 11be 04D0     		beq	.L549
2554:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8772              		.loc 1 2554 0
 8773 11c0 1B4B     		ldr	r3, .L584+16
 8774 11c2 0022     		movs	r2, #0
 8775 11c4 1A70     		strb	r2, [r3]
2555:..\src/interruptions.c ****                 interrupt_manager();
 8776              		.loc 1 2555 0
 8777 11c6 FFF7FEFF 		bl	interrupt_manager
 8778              	.L549:
2556:..\src/interruptions.c ****             }
2557:..\src/interruptions.c ****             //Saturation
2558:..\src/interruptions.c ****             if (i_aux < 0)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 203


 8779              		.loc 1 2558 0
 8780 11ca 7B68     		ldr	r3, [r7, #4]
 8781 11cc 002B     		cmp	r3, #0
 8782 11ce 02DA     		bge	.L550
2559:..\src/interruptions.c ****                 i_aux = 0;
 8783              		.loc 1 2559 0
 8784 11d0 0023     		movs	r3, #0
 8785 11d2 7B60     		str	r3, [r7, #4]
 8786 11d4 06E0     		b	.L551
 8787              	.L550:
2560:..\src/interruptions.c ****             else 
2561:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8788              		.loc 1 2561 0
 8789 11d6 7B68     		ldr	r3, [r7, #4]
 8790 11d8 B3F5806F 		cmp	r3, #1024
 8791 11dc 02DD     		ble	.L551
2562:..\src/interruptions.c ****                     i_aux = 1024;
 8792              		.loc 1 2562 0
 8793 11de 4FF48063 		mov	r3, #1024
 8794 11e2 7B60     		str	r3, [r7, #4]
 8795              	.L551:
2563:..\src/interruptions.c ****             
2564:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8796              		.loc 1 2564 0
 8797 11e4 184B     		ldr	r3, .L584+40
 8798 11e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8799 11e8 1949     		ldr	r1, .L584+48
 8800 11ea 0233     		adds	r3, r3, #2
 8801 11ec 7A68     		ldr	r2, [r7, #4]
 8802 11ee 41F82320 		str	r2, [r1, r3, lsl #2]
2565:..\src/interruptions.c **** 
2566:..\src/interruptions.c ****             if (interrupt_flag){
 8803              		.loc 1 2566 0
 8804 11f2 0F4B     		ldr	r3, .L584+16
 8805 11f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8806 11f6 002B     		cmp	r3, #0
 8807 11f8 04D0     		beq	.L552
2567:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8808              		.loc 1 2567 0
 8809 11fa 0D4B     		ldr	r3, .L584+16
 8810 11fc 0022     		movs	r2, #0
 8811 11fe 1A70     		strb	r2, [r3]
2568:..\src/interruptions.c ****                 interrupt_manager();
 8812              		.loc 1 2568 0
 8813 1200 FFF7FEFF 		bl	interrupt_manager
 8814              	.L552:
2545:..\src/interruptions.c ****             
 8815              		.loc 1 2545 0 discriminator 2
 8816 1204 104B     		ldr	r3, .L584+40
 8817 1206 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8818 1208 0133     		adds	r3, r3, #1
 8819 120a DAB2     		uxtb	r2, r3
 8820 120c 0E4B     		ldr	r3, .L584+40
 8821 120e 1A70     		strb	r2, [r3]
 8822              	.L546:
2545:..\src/interruptions.c ****             
 8823              		.loc 1 2545 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 204


 8824 1210 0D4B     		ldr	r3, .L584+40
 8825 1212 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8826 1214 052B     		cmp	r3, #5
 8827 1216 B0D9     		bls	.L553
 8828              	.L571:
2569:..\src/interruptions.c ****             }
2570:..\src/interruptions.c ****         }
2571:..\src/interruptions.c ****     }
2572:..\src/interruptions.c ****     
2573:..\src/interruptions.c **** }
 8829              		.loc 1 2573 0 is_stmt 1
 8830 1218 00BF     		nop
 8831 121a 0C37     		adds	r7, r7, #12
 8832              		.cfi_def_cfa_offset 20
 8833 121c BD46     		mov	sp, r7
 8834              		.cfi_def_cfa_register 13
 8835              		@ sp needed
 8836 121e F0BD     		pop	{r4, r5, r6, r7, pc}
 8837              	.L585:
 8838              		.align	2
 8839              	.L584:
 8840 1220 88010000 		.word	LR_counter.10665
 8841 1224 00000000 		.word	ADC_buf
 8842 1228 84010000 		.word	LR_mean_value.10667
 8843 122c 1F85EB51 		.word	1374389535
 8844 1230 00000000 		.word	interrupt_flag
 8845 1234 00000000 		.word	joy_LR_status
 8846 1238 00000000 		.word	emg_1_status
 8847 123c 00000000 		.word	emg_2_status
 8848 1240 00000000 		.word	joy_UD_status
 8849 1244 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8850 1248 72010000 		.word	idx.10672
 8851 124c 00000000 		.word	filt_emg
 8852 1250 00000000 		.word	g_adc_meas
 8853              		.cfi_endproc
 8854              	.LFE74:
 8855              		.size	analog_read_end, .-analog_read_end
 8856              		.section	.text.overcurrent_control,"ax",%progbits
 8857              		.align	2
 8858              		.global	overcurrent_control
 8859              		.thumb
 8860              		.thumb_func
 8861              		.type	overcurrent_control, %function
 8862              	overcurrent_control:
 8863              	.LFB75:
2574:..\src/interruptions.c **** 
2575:..\src/interruptions.c **** //==============================================================================
2576:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2577:..\src/interruptions.c **** //==============================================================================
2578:..\src/interruptions.c **** 
2579:..\src/interruptions.c **** void overcurrent_control() {
 8864              		.loc 1 2579 0
 8865              		.cfi_startproc
 8866              		@ args = 0, pretend = 0, frame = 8
 8867              		@ frame_needed = 1, uses_anonymous_args = 0
 8868              		@ link register save eliminated.
 8869 0000 80B4     		push	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 205


 8870              		.cfi_def_cfa_offset 4
 8871              		.cfi_offset 7, -4
 8872 0002 83B0     		sub	sp, sp, #12
 8873              		.cfi_def_cfa_offset 16
 8874 0004 00AF     		add	r7, sp, #0
 8875              		.cfi_def_cfa_register 7
 8876              	.LBB11:
2580:..\src/interruptions.c ****     
2581:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8877              		.loc 1 2581 0
 8878 0006 0023     		movs	r3, #0
 8879 0008 FB71     		strb	r3, [r7, #7]
 8880 000a 68E0     		b	.L587
 8881              	.L592:
2582:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8882              		.loc 1 2582 0
 8883 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8884 000e 384A     		ldr	r2, .L594
 8885 0010 7421     		movs	r1, #116
 8886 0012 01FB03F3 		mul	r3, r1, r3
 8887 0016 1344     		add	r3, r3, r2
 8888 0018 03F58673 		add	r3, r3, #268
 8889 001c B3F90030 		ldrsh	r3, [r3]
 8890 0020 002B     		cmp	r3, #0
 8891 0022 59D0     		beq	.L588
 8892              	.LBB12:
2583:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8893              		.loc 1 2583 0
 8894 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8895 0026 334A     		ldr	r2, .L594+4
 8896 0028 7421     		movs	r1, #116
 8897 002a 01FB03F3 		mul	r3, r1, r3
 8898 002e 1344     		add	r3, r3, r2
 8899 0030 03F58873 		add	r3, r3, #272
 8900 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8901 0036 1946     		mov	r1, r3
 8902 0038 2F4A     		ldr	r2, .L594+8
 8903 003a 3423     		movs	r3, #52
 8904 003c 03FB01F3 		mul	r3, r3, r1
 8905 0040 1344     		add	r3, r3, r2
 8906 0042 0C33     		adds	r3, r3, #12
 8907 0044 1B68     		ldr	r3, [r3]
 8908 0046 3B60     		str	r3, [r7]
2584:..\src/interruptions.c ****             // check if the current is over the limit
2585:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2586:..\src/interruptions.c ****                 if (curr < 0){
 8909              		.loc 1 2586 0
 8910 0048 3B68     		ldr	r3, [r7]
 8911 004a 002B     		cmp	r3, #0
 8912 004c 02DA     		bge	.L589
2587:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8913              		.loc 1 2587 0
 8914 004e 3B68     		ldr	r3, [r7]
 8915 0050 5B42     		negs	r3, r3
 8916 0052 3B60     		str	r3, [r7]
 8917              	.L589:
2588:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 206


2589:..\src/interruptions.c ****          //   }
2590:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8918              		.loc 1 2590 0
 8919 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8920 0056 264A     		ldr	r2, .L594
 8921 0058 7421     		movs	r1, #116
 8922 005a 01FB03F3 		mul	r3, r1, r3
 8923 005e 1344     		add	r3, r3, r2
 8924 0060 03F58673 		add	r3, r3, #268
 8925 0064 B3F90030 		ldrsh	r3, [r3]
 8926 0068 1A46     		mov	r2, r3
 8927 006a 3B68     		ldr	r3, [r7]
 8928 006c 9A42     		cmp	r2, r3
 8929 006e 09DA     		bge	.L590
2591:..\src/interruptions.c ****                 //decrease pwm_limit
2592:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8930              		.loc 1 2592 0
 8931 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8932 0072 224A     		ldr	r2, .L594+12
 8933 0074 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8934 0078 013A     		subs	r2, r2, #1
 8935 007a 91B2     		uxth	r1, r2
 8936 007c 1F4A     		ldr	r2, .L594+12
 8937 007e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8938 0082 17E0     		b	.L593
 8939              	.L590:
2593:..\src/interruptions.c ****             // check if the current is in the safe zone
2594:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8940              		.loc 1 2594 0
 8941 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8942 0086 1A4A     		ldr	r2, .L594
 8943 0088 7421     		movs	r1, #116
 8944 008a 01FB03F3 		mul	r3, r1, r3
 8945 008e 1344     		add	r3, r3, r2
 8946 0090 03F58673 		add	r3, r3, #268
 8947 0094 B3F90030 		ldrsh	r3, [r3]
 8948 0098 A3F10A02 		sub	r2, r3, #10
 8949 009c 3B68     		ldr	r3, [r7]
 8950 009e 9A42     		cmp	r2, r3
 8951 00a0 08DD     		ble	.L593
2595:..\src/interruptions.c ****                 //increase pwm_limit
2596:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8952              		.loc 1 2596 0
 8953 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8954 00a4 154A     		ldr	r2, .L594+12
 8955 00a6 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8956 00aa 0132     		adds	r2, r2, #1
 8957 00ac 91B2     		uxth	r1, r2
 8958 00ae 134A     		ldr	r2, .L594+12
 8959 00b0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8960              	.L593:
2597:..\src/interruptions.c ****             }
2598:..\src/interruptions.c **** 
2599:..\src/interruptions.c ****             // Bound pwm_limit
2600:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2601:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2602:..\src/interruptions.c ****             else 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 207


2603:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8961              		.loc 1 2603 0
 8962 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8963 00b6 114A     		ldr	r2, .L594+12
 8964 00b8 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8965 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8966 00be 1049     		ldr	r1, .L594+16
 8967 00c0 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8968 00c4 9A42     		cmp	r2, r3
 8969 00c6 07D9     		bls	.L588
2604:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8970              		.loc 1 2604 0
 8971 00c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8972 00ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8973 00cc 0C49     		ldr	r1, .L594+16
 8974 00ce 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 8975 00d2 0A4A     		ldr	r2, .L594+12
 8976 00d4 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8977              	.L588:
 8978              	.LBE12:
2581:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8979              		.loc 1 2581 0 discriminator 2
 8980 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8981 00da 0133     		adds	r3, r3, #1
 8982 00dc FB71     		strb	r3, [r7, #7]
 8983              	.L587:
2581:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8984              		.loc 1 2581 0 is_stmt 0 discriminator 1
 8985 00de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8986 00e0 012B     		cmp	r3, #1
 8987 00e2 93D9     		bls	.L592
 8988              	.LBE11:
2605:..\src/interruptions.c ****         }
2606:..\src/interruptions.c ****     }
2607:..\src/interruptions.c **** }
 8989              		.loc 1 2607 0 is_stmt 1
 8990 00e4 00BF     		nop
 8991 00e6 0C37     		adds	r7, r7, #12
 8992              		.cfi_def_cfa_offset 4
 8993 00e8 BD46     		mov	sp, r7
 8994              		.cfi_def_cfa_register 13
 8995              		@ sp needed
 8996 00ea 80BC     		pop	{r7}
 8997              		.cfi_restore 7
 8998              		.cfi_def_cfa_offset 0
 8999 00ec 7047     		bx	lr
 9000              	.L595:
 9001 00ee 00BF     		.align	2
 9002              	.L594:
 9003 00f0 00000000 		.word	c_mem
 9004 00f4 00000000 		.word	g_mem
 9005 00f8 00000000 		.word	g_meas
 9006 00fc 00000000 		.word	dev_pwm_limit
 9007 0100 00000000 		.word	dev_pwm_sat
 9008              		.cfi_endproc
 9009              	.LFE75:
 9010              		.size	overcurrent_control, .-overcurrent_control
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 208


 9011              		.global	__aeabi_ui2f
 9012              		.global	__aeabi_f2uiz
 9013              		.section	.text.pwm_limit_search,"ax",%progbits
 9014              		.align	2
 9015              		.global	pwm_limit_search
 9016              		.thumb
 9017              		.thumb_func
 9018              		.type	pwm_limit_search, %function
 9019              	pwm_limit_search:
 9020              	.LFB76:
2608:..\src/interruptions.c **** 
2609:..\src/interruptions.c **** //==============================================================================
2610:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2611:..\src/interruptions.c **** //==============================================================================
2612:..\src/interruptions.c **** 
2613:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 9021              		.loc 1 2613 0
 9022              		.cfi_startproc
 9023              		@ args = 0, pretend = 0, frame = 16
 9024              		@ frame_needed = 1, uses_anonymous_args = 0
 9025 0000 B0B5     		push	{r4, r5, r7, lr}
 9026              		.cfi_def_cfa_offset 16
 9027              		.cfi_offset 4, -16
 9028              		.cfi_offset 5, -12
 9029              		.cfi_offset 7, -8
 9030              		.cfi_offset 14, -4
 9031 0002 84B0     		sub	sp, sp, #16
 9032              		.cfi_def_cfa_offset 32
 9033 0004 00AF     		add	r7, sp, #0
 9034              		.cfi_def_cfa_register 7
 9035 0006 0346     		mov	r3, r0
 9036 0008 FB71     		strb	r3, [r7, #7]
2614:..\src/interruptions.c **** 
2615:..\src/interruptions.c ****     uint16 CYDATA max_tension = 26500;
 9037              		.loc 1 2615 0
 9038 000a 46F28473 		movw	r3, #26500
 9039 000e FB81     		strh	r3, [r7, #14]	@ movhi
2616:..\src/interruptions.c ****     uint16 CYDATA min_tension = 7000;
 9040              		.loc 1 2616 0
 9041 0010 41F65833 		movw	r3, #7000
 9042 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2617:..\src/interruptions.c ****     
2618:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 9043              		.loc 1 2618 0
 9044 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9045 0018 2A4A     		ldr	r2, .L603
 9046 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9047 001e FB89     		ldrh	r3, [r7, #14]
 9048 0020 9A42     		cmp	r2, r3
 9049 0022 05DD     		ble	.L597
2619:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 9050              		.loc 1 2619 0
 9051 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9052 0026 284A     		ldr	r2, .L603+4
 9053 0028 0021     		movs	r1, #0
 9054 002a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2620:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 209


2621:..\src/interruptions.c ****         if (c_mem.motor[mot_idx].motor_driver_type == DRIVER_BRUSHLESS){
2622:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
2623:..\src/interruptions.c ****         } else {
2624:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_DC;
2625:..\src/interruptions.c ****         }
2626:..\src/interruptions.c ****     } else {
2627:..\src/interruptions.c ****         
2628:..\src/interruptions.c ****         // Output PWM range adapted to the new maximum voltage required by the load 
2629:..\src/interruptions.c ****         // (set with the parameter "Motor N Voltage in mV:")
2630:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = (uint16)((((float)g_mem.motor[mot_idx].motor_voltage)/dev_tension[mo
2631:..\src/interruptions.c **** 
2632:..\src/interruptions.c ****     }
2633:..\src/interruptions.c **** }
 9055              		.loc 1 2633 0
 9056 002e 45E0     		b	.L602
 9057              	.L597:
2620:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 9058              		.loc 1 2620 0
 9059 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9060 0032 244A     		ldr	r2, .L603
 9061 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9062 0038 BB89     		ldrh	r3, [r7, #12]
 9063 003a 9A42     		cmp	r2, r3
 9064 003c 16DA     		bge	.L599
2621:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
 9065              		.loc 1 2621 0
 9066 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9067 0040 224A     		ldr	r2, .L603+8
 9068 0042 7421     		movs	r1, #116
 9069 0044 01FB03F3 		mul	r3, r1, r3
 9070 0048 1344     		add	r3, r3, r2
 9071 004a E233     		adds	r3, r3, #226
 9072 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9073 004e 022B     		cmp	r3, #2
 9074 0050 06D1     		bne	.L600
2622:..\src/interruptions.c ****         } else {
 9075              		.loc 1 2622 0
 9076 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9077 0054 1C4A     		ldr	r2, .L603+4
 9078 0056 40F6A931 		movw	r1, #2985
 9079 005a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9080              		.loc 1 2633 0
 9081 005e 2DE0     		b	.L602
 9082              	.L600:
2624:..\src/interruptions.c ****         }
 9083              		.loc 1 2624 0
 9084 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9085 0062 194A     		ldr	r2, .L603+4
 9086 0064 6421     		movs	r1, #100
 9087 0066 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9088              		.loc 1 2633 0
 9089 006a 27E0     		b	.L602
 9090              	.L599:
2630:..\src/interruptions.c **** 
 9091              		.loc 1 2630 0
 9092 006c FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 9093 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 210


 9094 0070 174A     		ldr	r2, .L603+12
 9095 0072 7421     		movs	r1, #116
 9096 0074 01FB03F3 		mul	r3, r1, r3
 9097 0078 1344     		add	r3, r3, r2
 9098 007a 03F58A73 		add	r3, r3, #276
 9099 007e 1B88     		ldrh	r3, [r3]
 9100 0080 1846     		mov	r0, r3
 9101 0082 FFF7FEFF 		bl	__aeabi_ui2f
 9102 0086 0546     		mov	r5, r0
 9103 0088 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9104 008a 0E4A     		ldr	r2, .L603
 9105 008c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9106 0090 1846     		mov	r0, r3
 9107 0092 FFF7FEFF 		bl	__aeabi_i2f
 9108 0096 0346     		mov	r3, r0
 9109 0098 1946     		mov	r1, r3
 9110 009a 2846     		mov	r0, r5
 9111 009c FFF7FEFF 		bl	__aeabi_fdiv
 9112 00a0 0346     		mov	r3, r0
 9113 00a2 0C49     		ldr	r1, .L603+16
 9114 00a4 1846     		mov	r0, r3
 9115 00a6 FFF7FEFF 		bl	__aeabi_fmul
 9116 00aa 0346     		mov	r3, r0
 9117 00ac 1846     		mov	r0, r3
 9118 00ae FFF7FEFF 		bl	__aeabi_f2uiz
 9119 00b2 0346     		mov	r3, r0
 9120 00b4 9AB2     		uxth	r2, r3
 9121 00b6 044B     		ldr	r3, .L603+4
 9122 00b8 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 9123              	.L602:
 9124              		.loc 1 2633 0
 9125 00bc 00BF     		nop
 9126 00be 1037     		adds	r7, r7, #16
 9127              		.cfi_def_cfa_offset 16
 9128 00c0 BD46     		mov	sp, r7
 9129              		.cfi_def_cfa_register 13
 9130              		@ sp needed
 9131 00c2 B0BD     		pop	{r4, r5, r7, pc}
 9132              	.L604:
 9133              		.align	2
 9134              	.L603:
 9135 00c4 00000000 		.word	dev_tension
 9136 00c8 00000000 		.word	dev_pwm_sat
 9137 00cc 00000000 		.word	c_mem
 9138 00d0 00000000 		.word	g_mem
 9139 00d4 0000C842 		.word	1120403456
 9140              		.cfi_endproc
 9141              	.LFE76:
 9142              		.size	pwm_limit_search, .-pwm_limit_search
 9143              		.global	__aeabi_f2d
 9144              		.global	__aeabi_ddiv
 9145              		.global	__aeabi_dcmpgt
 9146              		.section	.text.cycles_counter_update,"ax",%progbits
 9147              		.align	2
 9148              		.global	cycles_counter_update
 9149              		.thumb
 9150              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 211


 9151              		.type	cycles_counter_update, %function
 9152              	cycles_counter_update:
 9153              	.LFB77:
2634:..\src/interruptions.c **** 
2635:..\src/interruptions.c **** //==============================================================================
2636:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2637:..\src/interruptions.c **** //==============================================================================
2638:..\src/interruptions.c **** 
2639:..\src/interruptions.c **** void cycles_counter_update() {
 9154              		.loc 1 2639 0
 9155              		.cfi_startproc
 9156              		@ args = 0, pretend = 0, frame = 24
 9157              		@ frame_needed = 1, uses_anonymous_args = 0
 9158 0000 90B5     		push	{r4, r7, lr}
 9159              		.cfi_def_cfa_offset 12
 9160              		.cfi_offset 4, -12
 9161              		.cfi_offset 7, -8
 9162              		.cfi_offset 14, -4
 9163 0002 87B0     		sub	sp, sp, #28
 9164              		.cfi_def_cfa_offset 40
 9165 0004 00AF     		add	r7, sp, #0
 9166              		.cfi_def_cfa_register 7
2640:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2641:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2642:..\src/interruptions.c ****     static uint8 motion_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2643:..\src/interruptions.c ****     static uint8 emg_excess_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2644:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2645:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2646:..\src/interruptions.c ****     static int32 exc_act_thr = 980; //0.95*1024
2647:..\src/interruptions.c ****     static int32 thr_pos = 0;
2648:..\src/interruptions.c ****     static int32 max_pos = 0;
2649:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2650:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 9167              		.loc 1 2650 0
 9168 0006 0023     		movs	r3, #0
 9169 0008 FB60     		str	r3, [r7, #12]
 9170 000a 0023     		movs	r3, #0
 9171 000c BB60     		str	r3, [r7, #8]
 9172 000e 0023     		movs	r3, #0
 9173 0010 3B61     		str	r3, [r7, #16]
2651:..\src/interruptions.c ****     int32 step;
2652:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2653:..\src/interruptions.c ****     static uint32 timer_exc_s[2], timer_exc_e[2];
2654:..\src/interruptions.c ****     static int32 start_emg_pos[2] = {0,0};
2655:..\src/interruptions.c **** 
2656:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
 9174              		.loc 1 2656 0
 9175 0012 A64B     		ldr	r3, .L683
 9176 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9177 0018 1946     		mov	r1, r3
 9178 001a A54A     		ldr	r2, .L683+4
 9179 001c 3423     		movs	r3, #52
 9180 001e 03FB01F3 		mul	r3, r3, r1
 9181 0022 1344     		add	r3, r3, r2
 9182 0024 1A68     		ldr	r2, [r3]
 9183 0026 A14B     		ldr	r3, .L683
 9184 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 212


 9185 002c 1846     		mov	r0, r3
 9186 002e 9F49     		ldr	r1, .L683
 9187 0030 0346     		mov	r3, r0
 9188 0032 5B00     		lsls	r3, r3, #1
 9189 0034 0344     		add	r3, r3, r0
 9190 0036 1B01     		lsls	r3, r3, #4
 9191 0038 0B44     		add	r3, r3, r1
 9192 003a 03F29D13 		addw	r3, r3, #413
 9193 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9194 0040 42FA03F3 		asr	r3, r2, r3
 9195 0044 FB60     		str	r3, [r7, #12]
2657:..\src/interruptions.c ****         
2658:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2659:..\src/interruptions.c ****     switch (pos_cycle_status){
 9196              		.loc 1 2659 0
 9197 0046 9B4B     		ldr	r3, .L683+8
 9198 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9199 004a 012B     		cmp	r3, #1
 9200 004c 3DD0     		beq	.L607
 9201 004e 022B     		cmp	r3, #2
 9202 0050 74D0     		beq	.L608
 9203 0052 002B     		cmp	r3, #0
 9204 0054 40F02781 		bne	.L606
2660:..\src/interruptions.c ****         case STATE_INACTIVE:
2661:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 9205              		.loc 1 2661 0
 9206 0058 944B     		ldr	r3, .L683
 9207 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9208 005e 072B     		cmp	r3, #7
 9209 0060 04D0     		beq	.L610
 9210              		.loc 1 2661 0 is_stmt 0 discriminator 1
 9211 0062 954B     		ldr	r3, .L683+12
 9212 0064 93F90030 		ldrsb	r3, [r3]
 9213 0068 012B     		cmp	r3, #1
 9214 006a 0CD0     		beq	.L611
 9215              	.L610:
 9216              		.loc 1 2661 0 discriminator 3
 9217 006c 8F4B     		ldr	r3, .L683
 9218 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9219 0072 072B     		cmp	r3, #7
 9220 0074 40F01481 		bne	.L673
 9221              		.loc 1 2661 0 discriminator 4
 9222 0078 8F4B     		ldr	r3, .L683+12
 9223 007a 93F90030 		ldrsb	r3, [r3]
 9224 007e B3F1FF3F 		cmp	r3, #-1
 9225 0082 40F00D81 		bne	.L673
 9226              	.L611:
2662:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 9227              		.loc 1 2662 0 is_stmt 1
 9228 0086 8D4A     		ldr	r2, .L683+16
 9229 0088 FB68     		ldr	r3, [r7, #12]
 9230 008a 1360     		str	r3, [r2]
2663:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9231              		.loc 1 2663 0
 9232 008c 8C4B     		ldr	r3, .L683+20
 9233 008e 1A68     		ldr	r2, [r3]
 9234 0090 8A4B     		ldr	r3, .L683+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 213


 9235 0092 1B68     		ldr	r3, [r3]
 9236 0094 9A42     		cmp	r2, r3
 9237 0096 05DD     		ble	.L613
 9238              		.loc 1 2663 0 is_stmt 0 discriminator 1
 9239 0098 894B     		ldr	r3, .L683+20
 9240 009a 1A68     		ldr	r2, [r3]
 9241 009c 874B     		ldr	r3, .L683+16
 9242 009e 1B68     		ldr	r3, [r3]
 9243 00a0 D31A     		subs	r3, r2, r3
 9244 00a2 04E0     		b	.L614
 9245              	.L613:
 9246              		.loc 1 2663 0 discriminator 2
 9247 00a4 854B     		ldr	r3, .L683+16
 9248 00a6 1A68     		ldr	r2, [r3]
 9249 00a8 854B     		ldr	r3, .L683+20
 9250 00aa 1B68     		ldr	r3, [r3]
 9251 00ac D31A     		subs	r3, r2, r3
 9252              	.L614:
 9253              		.loc 1 2663 0 discriminator 4
 9254 00ae BB60     		str	r3, [r7, #8]
2664:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9255              		.loc 1 2664 0 is_stmt 1 discriminator 4
 9256 00b0 BB68     		ldr	r3, [r7, #8]
 9257 00b2 142B     		cmp	r3, #20
 9258 00b4 05DD     		ble	.L615
2665:..\src/interruptions.c ****                     g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 9259              		.loc 1 2665 0
 9260 00b6 7D4B     		ldr	r3, .L683
 9261 00b8 5A6D     		ldr	r2, [r3, #84]
 9262 00ba BB68     		ldr	r3, [r7, #8]
 9263 00bc 1344     		add	r3, r3, r2
 9264 00be 7B4A     		ldr	r2, .L683
 9265 00c0 5365     		str	r3, [r2, #84]
 9266              	.L615:
2666:..\src/interruptions.c ****                 }
2667:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 9267              		.loc 1 2667 0
 9268 00c2 7C4B     		ldr	r3, .L683+8
 9269 00c4 0122     		movs	r2, #1
 9270 00c6 1A70     		strb	r2, [r3]
2668:..\src/interruptions.c ****             }
2669:..\src/interruptions.c ****             break;
 9271              		.loc 1 2669 0
 9272 00c8 EAE0     		b	.L673
 9273              	.L607:
2670:..\src/interruptions.c ****         case STATE_ACTIVE:
2671:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 9274              		.loc 1 2671 0
 9275 00ca 784B     		ldr	r3, .L683
 9276 00cc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9277 00d0 072B     		cmp	r3, #7
 9278 00d2 05D0     		beq	.L616
 9279              		.loc 1 2671 0 is_stmt 0 discriminator 1
 9280 00d4 784B     		ldr	r3, .L683+12
 9281 00d6 93F90030 		ldrsb	r3, [r3]
 9282 00da B3F1FF3F 		cmp	r3, #-1
 9283 00de 0BD0     		beq	.L617
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 214


 9284              	.L616:
 9285              		.loc 1 2671 0 discriminator 3
 9286 00e0 724B     		ldr	r3, .L683
 9287 00e2 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9288 00e6 072B     		cmp	r3, #7
 9289 00e8 40F0DC80 		bne	.L674
 9290              		.loc 1 2671 0 discriminator 4
 9291 00ec 724B     		ldr	r3, .L683+12
 9292 00ee 93F90030 		ldrsb	r3, [r3]
 9293 00f2 012B     		cmp	r3, #1
 9294 00f4 40F0D680 		bne	.L674
 9295              	.L617:
2672:..\src/interruptions.c ****                 max_pos = curr_pos;
 9296              		.loc 1 2672 0 is_stmt 1
 9297 00f8 714A     		ldr	r2, .L683+20
 9298 00fa FB68     		ldr	r3, [r7, #12]
 9299 00fc 1360     		str	r3, [r2]
2673:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9300              		.loc 1 2673 0
 9301 00fe 704B     		ldr	r3, .L683+20
 9302 0100 1A68     		ldr	r2, [r3]
 9303 0102 6E4B     		ldr	r3, .L683+16
 9304 0104 1B68     		ldr	r3, [r3]
 9305 0106 9A42     		cmp	r2, r3
 9306 0108 05DD     		ble	.L619
 9307              		.loc 1 2673 0 is_stmt 0 discriminator 1
 9308 010a 6D4B     		ldr	r3, .L683+20
 9309 010c 1A68     		ldr	r2, [r3]
 9310 010e 6B4B     		ldr	r3, .L683+16
 9311 0110 1B68     		ldr	r3, [r3]
 9312 0112 D31A     		subs	r3, r2, r3
 9313 0114 04E0     		b	.L620
 9314              	.L619:
 9315              		.loc 1 2673 0 discriminator 2
 9316 0116 694B     		ldr	r3, .L683+16
 9317 0118 1A68     		ldr	r2, [r3]
 9318 011a 694B     		ldr	r3, .L683+20
 9319 011c 1B68     		ldr	r3, [r3]
 9320 011e D31A     		subs	r3, r2, r3
 9321              	.L620:
 9322              		.loc 1 2673 0 discriminator 4
 9323 0120 BB60     		str	r3, [r7, #8]
2674:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9324              		.loc 1 2674 0 is_stmt 1 discriminator 4
 9325 0122 BB68     		ldr	r3, [r7, #8]
 9326 0124 142B     		cmp	r3, #20
 9327 0126 05DD     		ble	.L621
2675:..\src/interruptions.c ****                    g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9328              		.loc 1 2675 0
 9329 0128 604B     		ldr	r3, .L683
 9330 012a 5A6D     		ldr	r2, [r3, #84]
 9331 012c BB68     		ldr	r3, [r7, #8]
 9332 012e 1344     		add	r3, r3, r2
 9333 0130 5E4A     		ldr	r2, .L683
 9334 0132 5365     		str	r3, [r2, #84]
 9335              	.L621:
2676:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 215


2677:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9336              		.loc 1 2677 0
 9337 0134 5F4B     		ldr	r3, .L683+8
 9338 0136 0222     		movs	r2, #2
 9339 0138 1A70     		strb	r2, [r3]
2678:..\src/interruptions.c ****             }
2679:..\src/interruptions.c ****             break;
 9340              		.loc 1 2679 0
 9341 013a B3E0     		b	.L674
 9342              	.L608:
2680:..\src/interruptions.c ****         case COUNTER_INC:
2681:..\src/interruptions.c **** 
2682:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9343              		.loc 1 2682 0
 9344 013c 604B     		ldr	r3, .L683+20
 9345 013e 1A68     		ldr	r2, [r3]
 9346 0140 5E4B     		ldr	r3, .L683+16
 9347 0142 1B68     		ldr	r3, [r3]
 9348 0144 9A42     		cmp	r2, r3
 9349 0146 05DD     		ble	.L622
 9350              		.loc 1 2682 0 is_stmt 0 discriminator 1
 9351 0148 5D4B     		ldr	r3, .L683+20
 9352 014a 1A68     		ldr	r2, [r3]
 9353 014c 5B4B     		ldr	r3, .L683+16
 9354 014e 1B68     		ldr	r3, [r3]
 9355 0150 D31A     		subs	r3, r2, r3
 9356 0152 04E0     		b	.L623
 9357              	.L622:
 9358              		.loc 1 2682 0 discriminator 2
 9359 0154 594B     		ldr	r3, .L683+16
 9360 0156 1A68     		ldr	r2, [r3]
 9361 0158 594B     		ldr	r3, .L683+20
 9362 015a 1B68     		ldr	r3, [r3]
 9363 015c D31A     		subs	r3, r2, r3
 9364              	.L623:
 9365              		.loc 1 2682 0 discriminator 4
 9366 015e BB60     		str	r3, [r7, #8]
2683:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9367              		.loc 1 2683 0 is_stmt 1 discriminator 4
 9368 0160 584B     		ldr	r3, .L683+24
 9369 0162 1B68     		ldr	r3, [r3]
 9370 0164 BA68     		ldr	r2, [r7, #8]
 9371 0166 9A42     		cmp	r2, r3
 9372 0168 40F39680 		ble	.L624
2684:..\src/interruptions.c ****                 //update position histogram
2685:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
 9373              		.loc 1 2685 0
 9374 016c 4F4B     		ldr	r3, .L683
 9375 016e D3F8E820 		ldr	r2, [r3, #232]
 9376 0172 4E4B     		ldr	r3, .L683
 9377 0174 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9378 0178 1846     		mov	r0, r3
 9379 017a 4C49     		ldr	r1, .L683
 9380 017c 0346     		mov	r3, r0
 9381 017e 5B00     		lsls	r3, r3, #1
 9382 0180 0344     		add	r3, r3, r0
 9383 0182 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 216


 9384 0184 0B44     		add	r3, r3, r1
 9385 0186 03F29D13 		addw	r3, r3, #413
 9386 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9387 018c 42FA03F3 		asr	r3, r2, r3
 9388 0190 4D4A     		ldr	r2, .L683+28
 9389 0192 82FB0312 		smull	r1, r2, r2, r3
 9390 0196 9210     		asrs	r2, r2, #2
 9391 0198 DB17     		asrs	r3, r3, #31
 9392 019a D31A     		subs	r3, r2, r3
 9393 019c 7B60     		str	r3, [r7, #4]
2686:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9394              		.loc 1 2686 0
 9395 019e 474B     		ldr	r3, .L683+16
 9396 01a0 1A68     		ldr	r2, [r3]
 9397 01a2 7B68     		ldr	r3, [r7, #4]
 9398 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9399 01a8 FB70     		strb	r3, [r7, #3]
2687:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9400              		.loc 1 2687 0
 9401 01aa 454B     		ldr	r3, .L683+20
 9402 01ac 1A68     		ldr	r2, [r3]
 9403 01ae 7B68     		ldr	r3, [r7, #4]
 9404 01b0 92FBF3F3 		sdiv	r3, r2, r3
 9405 01b4 BB70     		strb	r3, [r7, #2]
2688:..\src/interruptions.c ****                 
2689:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2690:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9406              		.loc 1 2690 0
 9407 01b6 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9408 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9409 01ba 9342     		cmp	r3, r2
 9410 01bc 28BF     		it	cs
 9411 01be 1346     		movcs	r3, r2
 9412 01c0 7B70     		strb	r3, [r7, #1]
2691:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9413              		.loc 1 2691 0
 9414 01c2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9415 01c4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9416 01c6 9342     		cmp	r3, r2
 9417 01c8 38BF     		it	cc
 9418 01ca 1346     		movcc	r3, r2
 9419 01cc 3B70     		strb	r3, [r7]
2692:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9420              		.loc 1 2692 0
 9421 01ce 7B78     		ldrb	r3, [r7, #1]
 9422 01d0 FB75     		strb	r3, [r7, #23]
 9423 01d2 0DE0     		b	.L625
 9424              	.L627:
2693:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2694:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9425              		.loc 1 2694 0 discriminator 4
 9426 01d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9427 01d6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9428 01d8 3449     		ldr	r1, .L683
 9429 01da 0632     		adds	r2, r2, #6
 9430 01dc 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9431 01e0 0132     		adds	r2, r2, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 217


 9432 01e2 3249     		ldr	r1, .L683
 9433 01e4 0633     		adds	r3, r3, #6
 9434 01e6 41F82320 		str	r2, [r1, r3, lsl #2]
2692:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9435              		.loc 1 2692 0 discriminator 4
 9436 01ea FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9437 01ec 0133     		adds	r3, r3, #1
 9438 01ee FB75     		strb	r3, [r7, #23]
 9439              	.L625:
2692:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9440              		.loc 1 2692 0 is_stmt 0 discriminator 1
 9441 01f0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9442 01f2 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9443 01f4 9A42     		cmp	r2, r3
 9444 01f6 02D8     		bhi	.L626
2692:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9445              		.loc 1 2692 0 discriminator 3
 9446 01f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9447 01fa 092B     		cmp	r3, #9
 9448 01fc EAD9     		bls	.L627
 9449              	.L626:
2695:..\src/interruptions.c ****                 }
2696:..\src/interruptions.c ****                 
2697:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2698:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9450              		.loc 1 2698 0 is_stmt 1
 9451 01fe 2B4B     		ldr	r3, .L683
 9452 0200 B3F90C31 		ldrsh	r3, [r3, #268]
 9453 0204 002B     		cmp	r3, #0
 9454 0206 00DA     		bge	.L628
 9455 0208 0333     		adds	r3, r3, #3
 9456              	.L628:
 9457 020a 9B10     		asrs	r3, r3, #2
 9458 020c 1BB2     		sxth	r3, r3
 9459 020e 7B60     		str	r3, [r7, #4]
2699:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9460              		.loc 1 2699 0
 9461 0210 264B     		ldr	r3, .L683
 9462 0212 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9463 0216 012B     		cmp	r3, #1
 9464 0218 0CD1     		bne	.L629
2700:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9465              		.loc 1 2700 0
 9466 021a 244B     		ldr	r3, .L683
 9467 021c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9468 0220 1946     		mov	r1, r3
 9469 0222 234A     		ldr	r2, .L683+4
 9470 0224 3423     		movs	r3, #52
 9471 0226 03FB01F3 		mul	r3, r3, r1
 9472 022a 1344     		add	r3, r3, r2
 9473 022c 1433     		adds	r3, r3, #20
 9474 022e 1B68     		ldr	r3, [r3]
 9475 0230 3B61     		str	r3, [r7, #16]
 9476 0232 0BE0     		b	.L630
 9477              	.L629:
2701:..\src/interruptions.c ****                 else
2702:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 218


 9478              		.loc 1 2702 0
 9479 0234 1D4B     		ldr	r3, .L683
 9480 0236 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9481 023a 1946     		mov	r1, r3
 9482 023c 1C4A     		ldr	r2, .L683+4
 9483 023e 3423     		movs	r3, #52
 9484 0240 03FB01F3 		mul	r3, r3, r1
 9485 0244 1344     		add	r3, r3, r2
 9486 0246 0C33     		adds	r3, r3, #12
 9487 0248 1B68     		ldr	r3, [r3]
 9488 024a 3B61     		str	r3, [r7, #16]
 9489              	.L630:
2703:..\src/interruptions.c **** 
2704:..\src/interruptions.c ****                 if (curr_ref < 0){
 9490              		.loc 1 2704 0
 9491 024c 3B69     		ldr	r3, [r7, #16]
 9492 024e 002B     		cmp	r3, #0
 9493 0250 02DA     		bge	.L631
2705:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9494              		.loc 1 2705 0
 9495 0252 3B69     		ldr	r3, [r7, #16]
 9496 0254 5B42     		negs	r3, r3
 9497 0256 3B61     		str	r3, [r7, #16]
 9498              	.L631:
2706:..\src/interruptions.c ****                 }
2707:..\src/interruptions.c ****                 
2708:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9499              		.loc 1 2708 0
 9500 0258 144B     		ldr	r3, .L683
 9501 025a B3F90C31 		ldrsh	r3, [r3, #268]
 9502 025e 1A46     		mov	r2, r3
 9503 0260 3B69     		ldr	r3, [r7, #16]
 9504 0262 9A42     		cmp	r2, r3
 9505 0264 05DA     		bge	.L632
2709:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9506              		.loc 1 2709 0
 9507 0266 114B     		ldr	r3, .L683
 9508 0268 DB6C     		ldr	r3, [r3, #76]
 9509 026a 0133     		adds	r3, r3, #1
 9510 026c 0F4A     		ldr	r2, .L683
 9511 026e D364     		str	r3, [r2, #76]
 9512 0270 12E0     		b	.L624
 9513              	.L632:
2710:..\src/interruptions.c ****                 else
2711:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9514              		.loc 1 2711 0
 9515 0272 3A69     		ldr	r2, [r7, #16]
 9516 0274 7B68     		ldr	r3, [r7, #4]
 9517 0276 92FBF3F3 		sdiv	r3, r2, r3
 9518 027a DBB2     		uxtb	r3, r3
 9519 027c 3969     		ldr	r1, [r7, #16]
 9520 027e 7A68     		ldr	r2, [r7, #4]
 9521 0280 91FBF2F2 		sdiv	r2, r1, r2
 9522 0284 D2B2     		uxtb	r2, r2
 9523 0286 0949     		ldr	r1, .L683
 9524 0288 1032     		adds	r2, r2, #16
 9525 028a 51F82220 		ldr	r2, [r1, r2, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 219


 9526 028e 0132     		adds	r2, r2, #1
 9527 0290 0649     		ldr	r1, .L683
 9528 0292 1033     		adds	r3, r3, #16
 9529 0294 41F82320 		str	r2, [r1, r3, lsl #2]
 9530              	.L624:
2712:..\src/interruptions.c ****             }
2713:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9531              		.loc 1 2713 0
 9532 0298 064B     		ldr	r3, .L683+8
 9533 029a 0022     		movs	r2, #0
 9534 029c 1A70     		strb	r2, [r3]
2714:..\src/interruptions.c ****             break;
 9535              		.loc 1 2714 0
 9536 029e 02E0     		b	.L606
 9537              	.L673:
2669:..\src/interruptions.c ****         case STATE_ACTIVE:
 9538              		.loc 1 2669 0
 9539 02a0 00BF     		nop
 9540 02a2 00E0     		b	.L606
 9541              	.L674:
2679:..\src/interruptions.c ****         case COUNTER_INC:
 9542              		.loc 1 2679 0
 9543 02a4 00BF     		nop
 9544              	.L606:
2715:..\src/interruptions.c ****     }
2716:..\src/interruptions.c ****     
2717:..\src/interruptions.c ****     // State machine - Evaluate EMG activation counter update
2718:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9545              		.loc 1 2718 0
 9546 02a6 0023     		movs	r3, #0
 9547 02a8 FB75     		strb	r3, [r7, #23]
 9548 02aa 4FE0     		b	.L633
 9549              	.L684:
 9550              		.align	2
 9551              	.L683:
 9552 02ac 00000000 		.word	g_mem
 9553 02b0 00000000 		.word	g_meas
 9554 02b4 8A010000 		.word	pos_cycle_status.10742
 9555 02b8 00000000 		.word	pwm_sign
 9556 02bc 8C010000 		.word	thr_pos.10749
 9557 02c0 90010000 		.word	max_pos.10750
 9558 02c4 10000000 		.word	bin_threshold.10747
 9559 02c8 67666666 		.word	1717986919
 9560              	.L641:
2719:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9561              		.loc 1 2719 0
 9562 02cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9563 02ce 9C4A     		ldr	r2, .L685
 9564 02d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9565 02d2 012B     		cmp	r3, #1
 9566 02d4 13D0     		beq	.L635
 9567 02d6 022B     		cmp	r3, #2
 9568 02d8 22D0     		beq	.L636
 9569 02da 002B     		cmp	r3, #0
 9570 02dc 33D1     		bne	.L634
2720:..\src/interruptions.c ****             case STATE_INACTIVE:
2721:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 220


 9571              		.loc 1 2721 0
 9572 02de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9573 02e0 984A     		ldr	r2, .L685+4
 9574 02e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9575 02e6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9576 02e8 9749     		ldr	r1, .L685+8
 9577 02ea FC32     		adds	r2, r2, #252
 9578 02ec 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9579 02f0 9342     		cmp	r3, r2
 9580 02f2 25DD     		ble	.L675
2722:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9581              		.loc 1 2722 0
 9582 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9583 02f6 924A     		ldr	r2, .L685
 9584 02f8 0121     		movs	r1, #1
 9585 02fa D154     		strb	r1, [r2, r3]
2723:..\src/interruptions.c ****                 }
2724:..\src/interruptions.c ****                 break;
 9586              		.loc 1 2724 0
 9587 02fc 20E0     		b	.L675
 9588              	.L635:
2725:..\src/interruptions.c ****             case STATE_ACTIVE:
2726:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9589              		.loc 1 2726 0
 9590 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9591 0300 904A     		ldr	r2, .L685+4
 9592 0302 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9593 0306 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9594 0308 8F49     		ldr	r1, .L685+8
 9595 030a FC33     		adds	r3, r3, #252
 9596 030c 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9597 0310 0A3B     		subs	r3, r3, #10
 9598 0312 9A42     		cmp	r2, r3
 9599 0314 16DA     		bge	.L676
2727:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9600              		.loc 1 2727 0
 9601 0316 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9602 0318 894A     		ldr	r2, .L685
 9603 031a 0221     		movs	r1, #2
 9604 031c D154     		strb	r1, [r2, r3]
2728:..\src/interruptions.c ****                 }
2729:..\src/interruptions.c ****                 break;
 9605              		.loc 1 2729 0
 9606 031e 11E0     		b	.L676
 9607              	.L636:
2730:..\src/interruptions.c ****             case COUNTER_INC:
2731:..\src/interruptions.c ****                 g_mem.cnt.emg_act_counter[i] = g_mem.cnt.emg_act_counter[i] + 1;
 9608              		.loc 1 2731 0
 9609 0320 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9610 0322 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9611 0324 8849     		ldr	r1, .L685+8
 9612 0326 0432     		adds	r2, r2, #4
 9613 0328 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9614 032c 0132     		adds	r2, r2, #1
 9615 032e 8649     		ldr	r1, .L685+8
 9616 0330 0433     		adds	r3, r3, #4
 9617 0332 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 221


2732:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9618              		.loc 1 2732 0
 9619 0336 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9620 0338 814A     		ldr	r2, .L685
 9621 033a 0021     		movs	r1, #0
 9622 033c D154     		strb	r1, [r2, r3]
2733:..\src/interruptions.c ****                 break;
 9623              		.loc 1 2733 0
 9624 033e 02E0     		b	.L634
 9625              	.L675:
2724:..\src/interruptions.c ****             case STATE_ACTIVE:
 9626              		.loc 1 2724 0
 9627 0340 00BF     		nop
 9628 0342 00E0     		b	.L634
 9629              	.L676:
2729:..\src/interruptions.c ****             case COUNTER_INC:
 9630              		.loc 1 2729 0
 9631 0344 00BF     		nop
 9632              	.L634:
2718:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9633              		.loc 1 2718 0 discriminator 2
 9634 0346 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9635 0348 0133     		adds	r3, r3, #1
 9636 034a FB75     		strb	r3, [r7, #23]
 9637              	.L633:
2718:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9638              		.loc 1 2718 0 is_stmt 0 discriminator 1
 9639 034c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9640 034e 012B     		cmp	r3, #1
 9641 0350 07D8     		bhi	.L640
2718:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9642              		.loc 1 2718 0 discriminator 3
 9643 0352 7E4B     		ldr	r3, .L685+12
 9644 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9645 0356 002B     		cmp	r3, #0
 9646 0358 03D1     		bne	.L640
2718:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9647              		.loc 1 2718 0 discriminator 4
 9648 035a 7D4B     		ldr	r3, .L685+16
 9649 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9650 035e 002B     		cmp	r3, #0
 9651 0360 B4D0     		beq	.L641
 9652              	.L640:
2734:..\src/interruptions.c ****         }
2735:..\src/interruptions.c ****     }
2736:..\src/interruptions.c ****     
2737:..\src/interruptions.c ****     // State machine - Evaluate Motion counter update
2738:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9653              		.loc 1 2738 0 is_stmt 1
 9654 0362 0023     		movs	r3, #0
 9655 0364 FB75     		strb	r3, [r7, #23]
 9656 0366 57E0     		b	.L642
 9657              	.L651:
2739:..\src/interruptions.c ****         switch (motion_status[i]){
 9658              		.loc 1 2739 0
 9659 0368 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9660 036a 7A4A     		ldr	r2, .L685+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 222


 9661 036c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9662 036e 012B     		cmp	r3, #1
 9663 0370 18D0     		beq	.L644
 9664 0372 022B     		cmp	r3, #2
 9665 0374 37D0     		beq	.L645
 9666 0376 002B     		cmp	r3, #0
 9667 0378 4BD1     		bne	.L643
2740:..\src/interruptions.c ****             case STATE_INACTIVE:
2741:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9668              		.loc 1 2741 0
 9669 037a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9670 037c 714A     		ldr	r2, .L685+4
 9671 037e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9672 0382 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9673 0384 7049     		ldr	r1, .L685+8
 9674 0386 FC32     		adds	r2, r2, #252
 9675 0388 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9676 038c 9342     		cmp	r3, r2
 9677 038e 3DDD     		ble	.L677
2742:..\src/interruptions.c ****                     start_emg_pos[i] = curr_pos;
 9678              		.loc 1 2742 0
 9679 0390 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9680 0392 7149     		ldr	r1, .L685+24
 9681 0394 FA68     		ldr	r2, [r7, #12]
 9682 0396 41F82320 		str	r2, [r1, r3, lsl #2]
2743:..\src/interruptions.c ****                     motion_status[i] = STATE_ACTIVE;
 9683              		.loc 1 2743 0
 9684 039a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9685 039c 6D4A     		ldr	r2, .L685+20
 9686 039e 0121     		movs	r1, #1
 9687 03a0 D154     		strb	r1, [r2, r3]
2744:..\src/interruptions.c ****                 }
2745:..\src/interruptions.c ****                 break;
 9688              		.loc 1 2745 0
 9689 03a2 33E0     		b	.L677
 9690              	.L644:
2746:..\src/interruptions.c ****             case STATE_ACTIVE:
2747:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9691              		.loc 1 2747 0
 9692 03a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9693 03a6 674A     		ldr	r2, .L685+4
 9694 03a8 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9695 03ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9696 03ae 6649     		ldr	r1, .L685+8
 9697 03b0 FC33     		adds	r3, r3, #252
 9698 03b2 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9699 03b6 0A3B     		subs	r3, r3, #10
 9700 03b8 9A42     		cmp	r2, r3
 9701 03ba 29DA     		bge	.L678
2748:..\src/interruptions.c ****                     if (abs(start_emg_pos[i] - curr_pos) > 200){     // it has to be a sensible mov
 9702              		.loc 1 2748 0
 9703 03bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9704 03be 664A     		ldr	r2, .L685+24
 9705 03c0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9706 03c4 FB68     		ldr	r3, [r7, #12]
 9707 03c6 D31A     		subs	r3, r2, r3
 9708 03c8 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 223


 9709 03ca B8BF     		it	lt
 9710 03cc 5B42     		rsblt	r3, r3, #0
 9711 03ce C82B     		cmp	r3, #200
 9712 03d0 04DD     		ble	.L649
2749:..\src/interruptions.c ****                         motion_status[i] = COUNTER_INC;
 9713              		.loc 1 2749 0
 9714 03d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9715 03d4 5F4A     		ldr	r2, .L685+20
 9716 03d6 0221     		movs	r1, #2
 9717 03d8 D154     		strb	r1, [r2, r3]
2750:..\src/interruptions.c ****                     }
2751:..\src/interruptions.c ****                     else {
2752:..\src/interruptions.c ****                         motion_status[i] = STATE_INACTIVE;
2753:..\src/interruptions.c ****                     }
2754:..\src/interruptions.c ****                 }
2755:..\src/interruptions.c ****                 break;
 9718              		.loc 1 2755 0
 9719 03da 19E0     		b	.L678
 9720              	.L649:
2752:..\src/interruptions.c ****                     }
 9721              		.loc 1 2752 0
 9722 03dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9723 03de 5D4A     		ldr	r2, .L685+20
 9724 03e0 0021     		movs	r1, #0
 9725 03e2 D154     		strb	r1, [r2, r3]
 9726              		.loc 1 2755 0
 9727 03e4 14E0     		b	.L678
 9728              	.L645:
2756:..\src/interruptions.c ****             case COUNTER_INC:
2757:..\src/interruptions.c ****                 g_mem.cnt.motion_counter[i] = g_mem.cnt.motion_counter[i] + 1;
 9729              		.loc 1 2757 0
 9730 03e6 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9731 03e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9732 03ea 574A     		ldr	r2, .L685+8
 9733 03ec 1A33     		adds	r3, r3, #26
 9734 03ee 9B00     		lsls	r3, r3, #2
 9735 03f0 1344     		add	r3, r3, r2
 9736 03f2 5B68     		ldr	r3, [r3, #4]
 9737 03f4 5A1C     		adds	r2, r3, #1
 9738 03f6 5448     		ldr	r0, .L685+8
 9739 03f8 01F11A03 		add	r3, r1, #26
 9740 03fc 9B00     		lsls	r3, r3, #2
 9741 03fe 0344     		add	r3, r3, r0
 9742 0400 5A60     		str	r2, [r3, #4]
2758:..\src/interruptions.c ****                 motion_status[i] = STATE_INACTIVE;
 9743              		.loc 1 2758 0
 9744 0402 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9745 0404 534A     		ldr	r2, .L685+20
 9746 0406 0021     		movs	r1, #0
 9747 0408 D154     		strb	r1, [r2, r3]
2759:..\src/interruptions.c ****                 break;
 9748              		.loc 1 2759 0
 9749 040a 02E0     		b	.L643
 9750              	.L677:
2745:..\src/interruptions.c ****             case STATE_ACTIVE:
 9751              		.loc 1 2745 0
 9752 040c 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 224


 9753 040e 00E0     		b	.L643
 9754              	.L678:
2755:..\src/interruptions.c ****             case COUNTER_INC:
 9755              		.loc 1 2755 0
 9756 0410 00BF     		nop
 9757              	.L643:
2738:..\src/interruptions.c ****         switch (motion_status[i]){
 9758              		.loc 1 2738 0 discriminator 2
 9759 0412 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9760 0414 0133     		adds	r3, r3, #1
 9761 0416 FB75     		strb	r3, [r7, #23]
 9762              	.L642:
2738:..\src/interruptions.c ****         switch (motion_status[i]){
 9763              		.loc 1 2738 0 is_stmt 0 discriminator 1
 9764 0418 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9765 041a 012B     		cmp	r3, #1
 9766 041c 07D8     		bhi	.L650
2738:..\src/interruptions.c ****         switch (motion_status[i]){
 9767              		.loc 1 2738 0 discriminator 3
 9768 041e 4B4B     		ldr	r3, .L685+12
 9769 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9770 0422 002B     		cmp	r3, #0
 9771 0424 03D1     		bne	.L650
2738:..\src/interruptions.c ****         switch (motion_status[i]){
 9772              		.loc 1 2738 0 discriminator 4
 9773 0426 4A4B     		ldr	r3, .L685+16
 9774 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9775 042a 002B     		cmp	r3, #0
 9776 042c 9CD0     		beq	.L651
 9777              	.L650:
2760:..\src/interruptions.c ****         }
2761:..\src/interruptions.c ****     }
2762:..\src/interruptions.c ****     
2763:..\src/interruptions.c ****     // State machine - Evaluate EMG excessive activity counter update
2764:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9778              		.loc 1 2764 0 is_stmt 1
 9779 042e 0023     		movs	r3, #0
 9780 0430 FB75     		strb	r3, [r7, #23]
 9781 0432 A3E0     		b	.L652
 9782              	.L663:
2765:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9783              		.loc 1 2765 0
 9784 0434 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9785 0436 494A     		ldr	r2, .L685+28
 9786 0438 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9787 043a 012B     		cmp	r3, #1
 9788 043c 19D0     		beq	.L654
 9789 043e 022B     		cmp	r3, #2
 9790 0440 68D0     		beq	.L655
 9791 0442 002B     		cmp	r3, #0
 9792 0444 40F09780 		bne	.L653
2766:..\src/interruptions.c ****             case STATE_INACTIVE:
2767:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > exc_act_thr){
 9793              		.loc 1 2767 0
 9794 0448 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9795 044a 3E4A     		ldr	r2, .L685+4
 9796 044c 52F82320 		ldr	r2, [r2, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 225


 9797 0450 434B     		ldr	r3, .L685+32
 9798 0452 1B68     		ldr	r3, [r3]
 9799 0454 9A42     		cmp	r2, r3
 9800 0456 70DD     		ble	.L679
2768:..\src/interruptions.c ****                     timer_exc_s[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9801              		.loc 1 2768 0
 9802 0458 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9803 045a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9804 045e 0346     		mov	r3, r0
 9805 0460 1A46     		mov	r2, r3
 9806 0462 404B     		ldr	r3, .L685+36
 9807 0464 43F82420 		str	r2, [r3, r4, lsl #2]
2769:..\src/interruptions.c ****                     emg_excess_status[i] = STATE_ACTIVE;
 9808              		.loc 1 2769 0
 9809 0468 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9810 046a 3C4A     		ldr	r2, .L685+28
 9811 046c 0121     		movs	r1, #1
 9812 046e D154     		strb	r1, [r2, r3]
2770:..\src/interruptions.c ****                 }
2771:..\src/interruptions.c ****                 break;
 9813              		.loc 1 2771 0
 9814 0470 63E0     		b	.L679
 9815              	.L654:
2772:..\src/interruptions.c ****             case STATE_ACTIVE:
2773:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < exc_act_thr-10){
 9816              		.loc 1 2773 0
 9817 0472 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9818 0474 334A     		ldr	r2, .L685+4
 9819 0476 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9820 047a 394B     		ldr	r3, .L685+32
 9821 047c 1B68     		ldr	r3, [r3]
 9822 047e 0A3B     		subs	r3, r3, #10
 9823 0480 9A42     		cmp	r2, r3
 9824 0482 77DA     		bge	.L680
2774:..\src/interruptions.c ****                     timer_exc_e[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9825              		.loc 1 2774 0
 9826 0484 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9827 0486 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9828 048a 0346     		mov	r3, r0
 9829 048c 1A46     		mov	r2, r3
 9830 048e 364B     		ldr	r3, .L685+40
 9831 0490 43F82420 		str	r2, [r3, r4, lsl #2]
2775:..\src/interruptions.c ****                     if (timer_exc_s[i] < timer_exc_e[i]) {
 9832              		.loc 1 2775 0
 9833 0494 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9834 0496 334A     		ldr	r2, .L685+36
 9835 0498 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9836 049c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9837 049e 3249     		ldr	r1, .L685+40
 9838 04a0 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9839 04a4 9A42     		cmp	r2, r3
 9840 04a6 0AD2     		bcs	.L659
2776:..\src/interruptions.c ****                         timer_exc_s[i] = timer_exc_s[i] + (uint32)6000;
 9841              		.loc 1 2776 0
 9842 04a8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9843 04aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9844 04ac 2D49     		ldr	r1, .L685+36
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 226


 9845 04ae 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9846 04b2 03F5BB53 		add	r3, r3, #5984
 9847 04b6 1033     		adds	r3, r3, #16
 9848 04b8 2A49     		ldr	r1, .L685+36
 9849 04ba 41F82230 		str	r3, [r1, r2, lsl #2]
 9850              	.L659:
2777:..\src/interruptions.c ****                     }
2778:..\src/interruptions.c ****                     if (((float)(timer_exc_s[i] - timer_exc_e[i])/50.0) > 4.0){      //50 timers ti
 9851              		.loc 1 2778 0
 9852 04be FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9853 04c0 284A     		ldr	r2, .L685+36
 9854 04c2 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9855 04c6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9856 04c8 2749     		ldr	r1, .L685+40
 9857 04ca 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9858 04ce D31A     		subs	r3, r2, r3
 9859 04d0 1846     		mov	r0, r3
 9860 04d2 FFF7FEFF 		bl	__aeabi_ui2f
 9861 04d6 0346     		mov	r3, r0
 9862 04d8 1846     		mov	r0, r3
 9863 04da FFF7FEFF 		bl	__aeabi_f2d
 9864 04de 4FF00002 		mov	r2, #0
 9865 04e2 224B     		ldr	r3, .L685+44
 9866 04e4 FFF7FEFF 		bl	__aeabi_ddiv
 9867 04e8 0346     		mov	r3, r0
 9868 04ea 0C46     		mov	r4, r1
 9869 04ec 1846     		mov	r0, r3
 9870 04ee 2146     		mov	r1, r4
 9871 04f0 4FF00002 		mov	r2, #0
 9872 04f4 1E4B     		ldr	r3, .L685+48
 9873 04f6 FFF7FEFF 		bl	__aeabi_dcmpgt
 9874 04fa 0346     		mov	r3, r0
 9875 04fc 002B     		cmp	r3, #0
 9876 04fe 04D0     		beq	.L672
2779:..\src/interruptions.c ****                         emg_excess_status[i] = COUNTER_INC;
 9877              		.loc 1 2779 0
 9878 0500 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9879 0502 164A     		ldr	r2, .L685+28
 9880 0504 0221     		movs	r1, #2
 9881 0506 D154     		strb	r1, [r2, r3]
2780:..\src/interruptions.c ****                     }
2781:..\src/interruptions.c ****                     else {
2782:..\src/interruptions.c ****                         emg_excess_status[i] = STATE_INACTIVE;
2783:..\src/interruptions.c ****                     }
2784:..\src/interruptions.c ****                 }
2785:..\src/interruptions.c ****                 break;
 9882              		.loc 1 2785 0
 9883 0508 34E0     		b	.L680
 9884              	.L672:
2782:..\src/interruptions.c ****                     }
 9885              		.loc 1 2782 0
 9886 050a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9887 050c 134A     		ldr	r2, .L685+28
 9888 050e 0021     		movs	r1, #0
 9889 0510 D154     		strb	r1, [r2, r3]
 9890              		.loc 1 2785 0
 9891 0512 2FE0     		b	.L680
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 227


 9892              	.L655:
2786:..\src/interruptions.c ****             case COUNTER_INC:
2787:..\src/interruptions.c ****                 g_mem.cnt.excessive_signal_activity[i] = g_mem.cnt.excessive_signal_activity[i] + 1
 9893              		.loc 1 2787 0
 9894 0514 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9895 0516 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9896 0518 0B4A     		ldr	r2, .L685+8
 9897 051a 1833     		adds	r3, r3, #24
 9898 051c 9B00     		lsls	r3, r3, #2
 9899 051e 1344     		add	r3, r3, r2
 9900 0520 5B68     		ldr	r3, [r3, #4]
 9901 0522 5A1C     		adds	r2, r3, #1
 9902 0524 0848     		ldr	r0, .L685+8
 9903 0526 01F11803 		add	r3, r1, #24
 9904 052a 9B00     		lsls	r3, r3, #2
 9905 052c 0344     		add	r3, r3, r0
 9906 052e 5A60     		str	r2, [r3, #4]
2788:..\src/interruptions.c ****                 emg_excess_status[i] = STATE_INACTIVE;
 9907              		.loc 1 2788 0
 9908 0530 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9909 0532 0A4A     		ldr	r2, .L685+28
 9910 0534 0021     		movs	r1, #0
 9911 0536 D154     		strb	r1, [r2, r3]
2789:..\src/interruptions.c ****                 break;
 9912              		.loc 1 2789 0
 9913 0538 1DE0     		b	.L653
 9914              	.L679:
2771:..\src/interruptions.c ****             case STATE_ACTIVE:
 9915              		.loc 1 2771 0
 9916 053a 00BF     		nop
 9917 053c 1BE0     		b	.L653
 9918              	.L686:
 9919 053e 00BF     		.align	2
 9920              	.L685:
 9921 0540 94010000 		.word	emg_cycle_status.10743
 9922 0544 00000000 		.word	g_adc_meas
 9923 0548 00000000 		.word	g_mem
 9924 054c 00000000 		.word	emg_1_status
 9925 0550 00000000 		.word	emg_2_status
 9926 0554 98010000 		.word	motion_status.10744
 9927 0558 9C010000 		.word	start_emg_pos.10764
 9928 055c A4010000 		.word	emg_excess_status.10745
 9929 0560 14000000 		.word	exc_act_thr.10748
 9930 0564 A8010000 		.word	timer_exc_s.10762
 9931 0568 B0010000 		.word	timer_exc_e.10763
 9932 056c 00004940 		.word	1078525952
 9933 0570 00001040 		.word	1074790400
 9934              	.L680:
2785:..\src/interruptions.c ****             case COUNTER_INC:
 9935              		.loc 1 2785 0
 9936 0574 00BF     		nop
 9937              	.L653:
2764:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9938              		.loc 1 2764 0 discriminator 2
 9939 0576 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9940 0578 0133     		adds	r3, r3, #1
 9941 057a FB75     		strb	r3, [r7, #23]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 228


 9942              	.L652:
2764:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9943              		.loc 1 2764 0 is_stmt 0 discriminator 1
 9944 057c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9945 057e 012B     		cmp	r3, #1
 9946 0580 08D8     		bhi	.L662
2764:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9947              		.loc 1 2764 0 discriminator 3
 9948 0582 2D4B     		ldr	r3, .L687
 9949 0584 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9950 0586 002B     		cmp	r3, #0
 9951 0588 04D1     		bne	.L662
2764:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9952              		.loc 1 2764 0 discriminator 4
 9953 058a 2C4B     		ldr	r3, .L687+4
 9954 058c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9955 058e 002B     		cmp	r3, #0
 9956 0590 3FF450AF 		beq	.L663
 9957              	.L662:
2790:..\src/interruptions.c ****         }
2791:..\src/interruptions.c ****     }
2792:..\src/interruptions.c ****     
2793:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2794:..\src/interruptions.c ****     switch (rest_cycle_status){
 9958              		.loc 1 2794 0 is_stmt 1
 9959 0594 2A4B     		ldr	r3, .L687+8
 9960 0596 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9961 0598 012B     		cmp	r3, #1
 9962 059a 11D0     		beq	.L665
 9963 059c 022B     		cmp	r3, #2
 9964 059e 2AD0     		beq	.L666
 9965 05a0 002B     		cmp	r3, #0
 9966 05a2 42D1     		bne	.L664
2795:..\src/interruptions.c ****         case STATE_INACTIVE:
2796:..\src/interruptions.c ****             if (rest_enabled){
 9967              		.loc 1 2796 0
 9968 05a4 274B     		ldr	r3, .L687+12
 9969 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9970 05a8 002B     		cmp	r3, #0
 9971 05aa 3BD0     		beq	.L681
2797:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9972              		.loc 1 2797 0
 9973 05ac FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9974 05b0 0346     		mov	r3, r0
 9975 05b2 1A46     		mov	r2, r3
 9976 05b4 244B     		ldr	r3, .L687+16
 9977 05b6 1A60     		str	r2, [r3]
2798:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9978              		.loc 1 2798 0
 9979 05b8 214B     		ldr	r3, .L687+8
 9980 05ba 0122     		movs	r2, #1
 9981 05bc 1A70     		strb	r2, [r3]
2799:..\src/interruptions.c ****             }
2800:..\src/interruptions.c ****             break;
 9982              		.loc 1 2800 0
 9983 05be 31E0     		b	.L681
 9984              	.L665:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 229


2801:..\src/interruptions.c ****         case STATE_ACTIVE:
2802:..\src/interruptions.c ****             if (!rest_enabled){
 9985              		.loc 1 2802 0
 9986 05c0 204B     		ldr	r3, .L687+12
 9987 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9988 05c4 002B     		cmp	r3, #0
 9989 05c6 2FD1     		bne	.L682
2803:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 9990              		.loc 1 2803 0
 9991 05c8 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9992 05cc 0346     		mov	r3, r0
 9993 05ce 1A46     		mov	r2, r3
 9994 05d0 1E4B     		ldr	r3, .L687+20
 9995 05d2 1A60     		str	r2, [r3]
2804:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 9996              		.loc 1 2804 0
 9997 05d4 1C4B     		ldr	r3, .L687+16
 9998 05d6 1A68     		ldr	r2, [r3]
 9999 05d8 1C4B     		ldr	r3, .L687+20
 10000 05da 1B68     		ldr	r3, [r3]
 10001 05dc 9A42     		cmp	r2, r3
 10002 05de 06D2     		bcs	.L670
2805:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 10003              		.loc 1 2805 0
 10004 05e0 194B     		ldr	r3, .L687+16
 10005 05e2 1B68     		ldr	r3, [r3]
 10006 05e4 03F5BB53 		add	r3, r3, #5984
 10007 05e8 1033     		adds	r3, r3, #16
 10008 05ea 174A     		ldr	r2, .L687+16
 10009 05ec 1360     		str	r3, [r2]
 10010              	.L670:
2806:..\src/interruptions.c ****                 }
2807:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 10011              		.loc 1 2807 0
 10012 05ee 144B     		ldr	r3, .L687+8
 10013 05f0 0222     		movs	r2, #2
 10014 05f2 1A70     		strb	r2, [r3]
2808:..\src/interruptions.c ****             }
2809:..\src/interruptions.c ****             break;
 10015              		.loc 1 2809 0
 10016 05f4 18E0     		b	.L682
 10017              	.L666:
2810:..\src/interruptions.c ****         case COUNTER_INC: 
2811:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 10018              		.loc 1 2811 0
 10019 05f6 164B     		ldr	r3, .L687+24
 10020 05f8 DA6D     		ldr	r2, [r3, #92]
 10021 05fa 134B     		ldr	r3, .L687+16
 10022 05fc 1968     		ldr	r1, [r3]
 10023 05fe 134B     		ldr	r3, .L687+20
 10024 0600 1B68     		ldr	r3, [r3]
 10025 0602 CB1A     		subs	r3, r1, r3
 10026 0604 1349     		ldr	r1, .L687+28
 10027 0606 A1FB0313 		umull	r1, r3, r1, r3
 10028 060a 1B09     		lsrs	r3, r3, #4
 10029 060c 1344     		add	r3, r3, r2
 10030 060e 104A     		ldr	r2, .L687+24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 230


 10031 0610 D365     		str	r3, [r2, #92]
2812:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 10032              		.loc 1 2812 0
 10033 0612 0F4B     		ldr	r3, .L687+24
 10034 0614 1B6D     		ldr	r3, [r3, #80]
 10035 0616 0133     		adds	r3, r3, #1
 10036 0618 0D4A     		ldr	r2, .L687+24
 10037 061a 1365     		str	r3, [r2, #80]
2813:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 10038              		.loc 1 2813 0
 10039 061c 084B     		ldr	r3, .L687+8
 10040 061e 0022     		movs	r2, #0
 10041 0620 1A70     		strb	r2, [r3]
2814:..\src/interruptions.c ****             break;
 10042              		.loc 1 2814 0
 10043 0622 02E0     		b	.L664
 10044              	.L681:
2800:..\src/interruptions.c ****         case STATE_ACTIVE:
 10045              		.loc 1 2800 0
 10046 0624 00BF     		nop
 10047 0626 00E0     		b	.L664
 10048              	.L682:
2809:..\src/interruptions.c ****         case COUNTER_INC: 
 10049              		.loc 1 2809 0
 10050 0628 00BF     		nop
 10051              	.L664:
2815:..\src/interruptions.c ****     }
2816:..\src/interruptions.c ****           
2817:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2818:..\src/interruptions.c ****     save_cycles_eeprom();
 10052              		.loc 1 2818 0
 10053 062a FFF7FEFF 		bl	save_cycles_eeprom
2819:..\src/interruptions.c ****     
2820:..\src/interruptions.c **** }
 10054              		.loc 1 2820 0
 10055 062e 00BF     		nop
 10056 0630 1C37     		adds	r7, r7, #28
 10057              		.cfi_def_cfa_offset 12
 10058 0632 BD46     		mov	sp, r7
 10059              		.cfi_def_cfa_register 13
 10060              		@ sp needed
 10061 0634 90BD     		pop	{r4, r7, pc}
 10062              	.L688:
 10063 0636 00BF     		.align	2
 10064              	.L687:
 10065 0638 00000000 		.word	emg_1_status
 10066 063c 00000000 		.word	emg_2_status
 10067 0640 B8010000 		.word	rest_cycle_status.10746
 10068 0644 00000000 		.word	rest_enabled
 10069 0648 BC010000 		.word	timer_value_s.10760
 10070 064c C0010000 		.word	timer_value_e.10761
 10071 0650 00000000 		.word	g_mem
 10072 0654 1F85EB51 		.word	1374389535
 10073              		.cfi_endproc
 10074              	.LFE77:
 10075              		.size	cycles_counter_update, .-cycles_counter_update
 10076              		.section	.text.save_cycles_eeprom,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 231


 10077              		.align	2
 10078              		.global	save_cycles_eeprom
 10079              		.thumb
 10080              		.thumb_func
 10081              		.type	save_cycles_eeprom, %function
 10082              	save_cycles_eeprom:
 10083              	.LFB78:
2821:..\src/interruptions.c **** 
2822:..\src/interruptions.c **** //==============================================================================
2823:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2824:..\src/interruptions.c **** //==============================================================================
2825:..\src/interruptions.c **** 
2826:..\src/interruptions.c **** void save_cycles_eeprom() {
 10084              		.loc 1 2826 0
 10085              		.cfi_startproc
 10086              		@ args = 0, pretend = 0, frame = 24
 10087              		@ frame_needed = 1, uses_anonymous_args = 0
 10088 0000 80B5     		push	{r7, lr}
 10089              		.cfi_def_cfa_offset 8
 10090              		.cfi_offset 7, -8
 10091              		.cfi_offset 14, -4
 10092 0002 86B0     		sub	sp, sp, #24
 10093              		.cfi_def_cfa_offset 32
 10094 0004 00AF     		add	r7, sp, #0
 10095              		.cfi_def_cfa_register 7
2827:..\src/interruptions.c **** 
2828:..\src/interruptions.c ****     cystatus status;
2829:..\src/interruptions.c ****     static uint8 row_number;
2830:..\src/interruptions.c ****     uint8 row_start = 1;
 10096              		.loc 1 2830 0
 10097 0006 0123     		movs	r3, #1
 10098 0008 FB75     		strb	r3, [r7, #23]
2831:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_act_counter[0];    //Data at beginning of the row 
 10099              		.loc 1 2831 0
 10100 000a 394B     		ldr	r3, .L705
 10101 000c 3B61     		str	r3, [r7, #16]
2832:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_act_counter[0];
 10102              		.loc 1 2832 0
 10103 000e 394B     		ldr	r3, .L705+4
 10104 0010 FB60     		str	r3, [r7, #12]
2833:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 10105              		.loc 1 2833 0
 10106 0012 FB7D     		ldrb	r3, [r7, #23]
 10107 0014 0633     		adds	r3, r3, #6
 10108 0016 FB72     		strb	r3, [r7, #11]
2834:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
2835:..\src/interruptions.c **** 
2836:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2837:..\src/interruptions.c ****     switch(cycles_status) {
 10109              		.loc 1 2837 0
 10110 0018 374B     		ldr	r3, .L705+8
 10111 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10112 001c 042B     		cmp	r3, #4
 10113 001e 63D8     		bhi	.L701
 10114 0020 01A2     		adr	r2, .L692
 10115 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 10116 0026 00BF     		.p2align 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 232


 10117              	.L692:
 10118 0028 3D000000 		.word	.L691+1
 10119 002c 5B000000 		.word	.L693+1
 10120 0030 8B000000 		.word	.L694+1
 10121 0034 C7000000 		.word	.L695+1
 10122 0038 DF000000 		.word	.L702+1
 10123              		.p2align 1
 10124              	.L691:
2838:..\src/interruptions.c ****         case PREPARE_DATA:
2839:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2840:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 10125              		.loc 1 2840 0
 10126 003c 7022     		movs	r2, #112
 10127 003e 3969     		ldr	r1, [r7, #16]
 10128 0040 F868     		ldr	r0, [r7, #12]
 10129 0042 FFF7FEFF 		bl	memcpy
2841:..\src/interruptions.c ****             m_addr = addr_start;
 10130              		.loc 1 2841 0
 10131 0046 2D4A     		ldr	r2, .L705+12
 10132 0048 3B69     		ldr	r3, [r7, #16]
 10133 004a 1360     		str	r3, [r2]
2842:..\src/interruptions.c ****             row_number = row_start;
 10134              		.loc 1 2842 0
 10135 004c 2C4A     		ldr	r2, .L705+16
 10136 004e FB7D     		ldrb	r3, [r7, #23]
 10137 0050 1370     		strb	r3, [r2]
2843:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 10138              		.loc 1 2843 0
 10139 0052 294B     		ldr	r3, .L705+8
 10140 0054 0122     		movs	r2, #1
 10141 0056 1A70     		strb	r2, [r3]
2844:..\src/interruptions.c ****             break;
 10142              		.loc 1 2844 0
 10143 0058 46E0     		b	.L690
 10144              	.L693:
2845:..\src/interruptions.c ****             
2846:..\src/interruptions.c ****         case WRITE_CYCLES:
2847:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 10145              		.loc 1 2847 0
 10146 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2848:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 10147              		.loc 1 2848 0
 10148 005e 274B     		ldr	r3, .L705+12
 10149 0060 1A68     		ldr	r2, [r3]
 10150 0062 274B     		ldr	r3, .L705+16
 10151 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10152 0066 1946     		mov	r1, r3
 10153 0068 1046     		mov	r0, r2
 10154 006a FFF7FEFF 		bl	EEPROM_StartWrite
 10155 006e 7860     		str	r0, [r7, #4]
2849:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 10156              		.loc 1 2849 0
 10157 0070 7B68     		ldr	r3, [r7, #4]
 10158 0072 072B     		cmp	r3, #7
 10159 0074 02D0     		beq	.L697
 10160              		.loc 1 2849 0 is_stmt 0 discriminator 1
 10161 0076 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 233


 10162 0078 002B     		cmp	r3, #0
 10163 007a 32D1     		bne	.L703
 10164              	.L697:
2850:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 10165              		.loc 1 2850 0 is_stmt 1
 10166 007c 1E4B     		ldr	r3, .L705+8
 10167 007e 0222     		movs	r2, #2
 10168 0080 1A70     		strb	r2, [r3]
2851:..\src/interruptions.c ****                 can_write = FALSE;
 10169              		.loc 1 2851 0
 10170 0082 204B     		ldr	r3, .L705+20
 10171 0084 0022     		movs	r2, #0
 10172 0086 1A70     		strb	r2, [r3]
2852:..\src/interruptions.c ****             }
2853:..\src/interruptions.c ****             break;
 10173              		.loc 1 2853 0
 10174 0088 2BE0     		b	.L703
 10175              	.L694:
2854:..\src/interruptions.c ****             
2855:..\src/interruptions.c ****         case WAIT_QUERY:
2856:..\src/interruptions.c ****             status = EEPROM_Query();
 10176              		.loc 1 2856 0
 10177 008a FFF7FEFF 		bl	EEPROM_Query
 10178 008e 7860     		str	r0, [r7, #4]
2857:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 10179              		.loc 1 2857 0
 10180 0090 7B68     		ldr	r3, [r7, #4]
 10181 0092 002B     		cmp	r3, #0
 10182 0094 27D1     		bne	.L704
2858:..\src/interruptions.c ****                 if (row_number < row_end) {
 10183              		.loc 1 2858 0
 10184 0096 1A4B     		ldr	r3, .L705+16
 10185 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10186 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 10187 009c 9A42     		cmp	r2, r3
 10188 009e 0ED9     		bls	.L700
2859:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 10189              		.loc 1 2859 0
 10190 00a0 164B     		ldr	r3, .L705+12
 10191 00a2 1B68     		ldr	r3, [r3]
 10192 00a4 1033     		adds	r3, r3, #16
 10193 00a6 154A     		ldr	r2, .L705+12
 10194 00a8 1360     		str	r3, [r2]
2860:..\src/interruptions.c ****                     row_number = row_number + 1;
 10195              		.loc 1 2860 0
 10196 00aa 154B     		ldr	r3, .L705+16
 10197 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10198 00ae 0133     		adds	r3, r3, #1
 10199 00b0 DAB2     		uxtb	r2, r3
 10200 00b2 134B     		ldr	r3, .L705+16
 10201 00b4 1A70     		strb	r2, [r3]
2861:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 10202              		.loc 1 2861 0
 10203 00b6 104B     		ldr	r3, .L705+8
 10204 00b8 0122     		movs	r2, #1
 10205 00ba 1A70     		strb	r2, [r3]
2862:..\src/interruptions.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 234


2863:..\src/interruptions.c ****                 else {
2864:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2865:..\src/interruptions.c ****                 }
2866:..\src/interruptions.c ****             }
2867:..\src/interruptions.c ****             break;
 10206              		.loc 1 2867 0
 10207 00bc 13E0     		b	.L704
 10208              	.L700:
2864:..\src/interruptions.c ****                 }
 10209              		.loc 1 2864 0
 10210 00be 0E4B     		ldr	r3, .L705+8
 10211 00c0 0322     		movs	r2, #3
 10212 00c2 1A70     		strb	r2, [r3]
 10213              		.loc 1 2867 0
 10214 00c4 0FE0     		b	.L704
 10215              	.L695:
2868:..\src/interruptions.c ****            
2869:..\src/interruptions.c ****         case WRITE_END:
2870:..\src/interruptions.c ****             can_write = TRUE;            
 10216              		.loc 1 2870 0
 10217 00c6 0F4B     		ldr	r3, .L705+20
 10218 00c8 0122     		movs	r2, #1
 10219 00ca 1A70     		strb	r2, [r3]
2871:..\src/interruptions.c ****             cycles_status = NONE;
 10220              		.loc 1 2871 0
 10221 00cc 0A4B     		ldr	r3, .L705+8
 10222 00ce 0422     		movs	r2, #4
 10223 00d0 1A70     		strb	r2, [r3]
2872:..\src/interruptions.c ****             
2873:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2874:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 10224              		.loc 1 2874 0
 10225 00d2 7022     		movs	r2, #112
 10226 00d4 F968     		ldr	r1, [r7, #12]
 10227 00d6 3869     		ldr	r0, [r7, #16]
 10228 00d8 FFF7FEFF 		bl	memcpy
2875:..\src/interruptions.c ****             break;
 10229              		.loc 1 2875 0
 10230 00dc 04E0     		b	.L690
 10231              	.L702:
2876:..\src/interruptions.c ****             
2877:..\src/interruptions.c ****         case NONE:
2878:..\src/interruptions.c ****             break;
 10232              		.loc 1 2878 0
 10233 00de 00BF     		nop
 10234 00e0 02E0     		b	.L701
 10235              	.L703:
2853:..\src/interruptions.c ****             
 10236              		.loc 1 2853 0
 10237 00e2 00BF     		nop
 10238 00e4 00E0     		b	.L701
 10239              	.L704:
2867:..\src/interruptions.c ****            
 10240              		.loc 1 2867 0
 10241 00e6 00BF     		nop
 10242              	.L690:
 10243              	.L701:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 235


2879:..\src/interruptions.c ****     }
2880:..\src/interruptions.c ****     
2881:..\src/interruptions.c **** }
 10244              		.loc 1 2881 0
 10245 00e8 00BF     		nop
 10246 00ea 1837     		adds	r7, r7, #24
 10247              		.cfi_def_cfa_offset 8
 10248 00ec BD46     		mov	sp, r7
 10249              		.cfi_def_cfa_register 13
 10250              		@ sp needed
 10251 00ee 80BD     		pop	{r7, pc}
 10252              	.L706:
 10253              		.align	2
 10254              	.L705:
 10255 00f0 10000000 		.word	g_mem+16
 10256 00f4 10000000 		.word	c_mem+16
 10257 00f8 00000000 		.word	cycles_status
 10258 00fc C4010000 		.word	m_addr.10805
 10259 0100 C8010000 		.word	row_number.10800
 10260 0104 00000000 		.word	can_write
 10261              		.cfi_endproc
 10262              	.LFE78:
 10263              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 10264              		.bss
 10265              	state.10464:
 10266 0000 00       		.space	1
 10267 0001 000000   		.align	2
 10268              	rx_queue.10468:
 10269 0004 000000   		.space	3
 10270              	data_packet_length.10466:
 10271 0007 00       		.space	1
 10272              	data_packet_index.10465:
 10273 0008 00       		.space	1
 10274 0009 000000   		.align	2
 10275              	data_packet_buffer.10467:
 10276 000c 00000000 		.space	128
 10276      00000000 
 10276      00000000 
 10276      00000000 
 10276      00000000 
 10277              		.data
 10278              		.align	1
 10279              		.type	counter_calibration.10484, %object
 10280              		.size	counter_calibration.10484, 2
 10281              	counter_calibration.10484:
 10282 0000 0100     		.short	1
 10283              		.align	1
 10284              		.type	counter_tension_func.10485, %object
 10285              		.size	counter_tension_func.10485, 2
 10286              	counter_tension_func.10485:
 10287 0002 0100     		.short	1
 10288              		.bss
 10289              		.align	2
 10290              	current_emg.10510:
 10291 008c 0000     		.space	2
 10292              	fsm_state.10547:
 10293 008e 00       		.space	1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 236


 10294 008f 00       		.align	2
 10295              	pos_error_sum.10574:
 10296 0090 00000000 		.space	4
 10297              		.align	2
 10298              	prev_pos_err.10576:
 10299 0094 00000000 		.space	4
 10300              	motor_dir.10579:
 10301 0098 00       		.space	1
 10302 0099 000000   		.align	2
 10303              	curr_error_sum.10575:
 10304 009c 00000000 		.space	4
 10305              		.align	2
 10306              	prev_curr_err.10577:
 10307 00a0 00000000 		.space	4
 10308              		.align	2
 10309              	prev_pwm.10578:
 10310 00a4 00000000 		.space	4
 10311              		.align	2
 10312              	position_counter.10580:
 10313 00a8 00000000 		.space	4
 10314              		.align	2
 10315              	pos_error_sum.10607:
 10316 00ac 00000000 		.space	8
 10316      00000000 
 10317              		.align	2
 10318              	prev_pos_err.10609:
 10319 00b4 00000000 		.space	8
 10319      00000000 
 10320              		.align	2
 10321              	motor_dir.10612:
 10322 00bc 0000     		.space	2
 10323 00be 0000     		.align	2
 10324              	curr_error_sum.10608:
 10325 00c0 00000000 		.space	8
 10325      00000000 
 10326              		.align	2
 10327              	prev_curr_err.10610:
 10328 00c8 00000000 		.space	8
 10328      00000000 
 10329              		.align	2
 10330              	prev_pwm.10611:
 10331 00d0 00000000 		.space	8
 10331      00000000 
 10332              		.align	2
 10333              	position_counter.10613:
 10334 00d8 00000000 		.space	8
 10334      00000000 
 10335              		.align	2
 10336              	last_value_encoder.10636:
 10337 00e0 00000000 		.space	24
 10337      00000000 
 10337      00000000 
 10337      00000000 
 10337      00000000 
 10338              		.align	2
 10339              	comp_value_encoder.10637:
 10340 00f8 00000000 		.space	24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 237


 10340      00000000 
 10340      00000000 
 10340      00000000 
 10340      00000000 
 10341              		.data
 10342              		.align	2
 10343              		.type	only_first_time.10639, %object
 10344              		.size	only_first_time.10639, 2
 10345              	only_first_time.10639:
 10346 0004 01       		.byte	1
 10347 0005 01       		.byte	1
 10348              		.bss
 10349              		.align	2
 10350              	error.10638:
 10351 0110 00000000 		.space	6
 10351      0000
 10352 0116 0000     		.align	2
 10353              	v_value.10643:
 10354 0118 00000000 		.space	24
 10354      00000000 
 10354      00000000 
 10354      00000000 
 10354      00000000 
 10355              		.align	2
 10356              	vv_value.10644:
 10357 0130 00000000 		.space	24
 10357      00000000 
 10357      00000000 
 10357      00000000 
 10357      00000000 
 10358              		.align	2
 10359              	vvv_value.10645:
 10360 0148 00000000 		.space	24
 10360      00000000 
 10360      00000000 
 10360      00000000 
 10360      00000000 
 10361              		.align	2
 10362              	one_time_execute.10641:
 10363 0160 0000     		.space	2
 10364 0162 0000     		.align	2
 10365              	safe_startup_motor_activation.10640:
 10366 0164 0000     		.space	2
 10367 0166 0000     		.align	2
 10368              	count_startup_motor.10642:
 10369 0168 00000000 		.space	8
 10369      00000000 
 10370              		.data
 10371 0006 0000     		.align	2
 10372              		.type	detect_power_cycle_prev.10669, %object
 10373              		.size	detect_power_cycle_prev.10669, 4
 10374              	detect_power_cycle_prev.10669:
 10375 0008 FDFFFFFF 		.word	-3
 10376              		.type	first_tension_valid.10668, %object
 10377              		.size	first_tension_valid.10668, 1
 10378              	first_tension_valid.10668:
 10379 000c 01       		.byte	1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 238


 10380              		.bss
 10381              		.align	1
 10382              	count.10670:
 10383 0170 0000     		.space	2
 10384              	idx.10672:
 10385 0172 00       		.space	1
 10386 0173 00       		.align	2
 10387              	v_count.10671:
 10388 0174 00000000 		.space	4
 10389              		.align	1
 10390              	emg_counter_1.10662:
 10391 0178 0000     		.space	2
 10392              		.align	1
 10393              	emg_counter_2.10663:
 10394 017a 0000     		.space	2
 10395              		.align	2
 10396              	UD_mean_value.10666:
 10397 017c 00000000 		.space	4
 10398              		.align	1
 10399              	UD_counter.10664:
 10400 0180 0000     		.space	2
 10401 0182 0000     		.align	2
 10402              	LR_mean_value.10667:
 10403 0184 00000000 		.space	4
 10404              		.align	1
 10405              	LR_counter.10665:
 10406 0188 0000     		.space	2
 10407              	pos_cycle_status.10742:
 10408 018a 00       		.space	1
 10409 018b 00       		.align	2
 10410              	thr_pos.10749:
 10411 018c 00000000 		.space	4
 10412              		.align	2
 10413              	max_pos.10750:
 10414 0190 00000000 		.space	4
 10415              		.data
 10416 000d 000000   		.align	2
 10417              		.type	bin_threshold.10747, %object
 10418              		.size	bin_threshold.10747, 4
 10419              	bin_threshold.10747:
 10420 0010 FA000000 		.word	250
 10421              		.bss
 10422              		.align	2
 10423              	emg_cycle_status.10743:
 10424 0194 0000     		.space	2
 10425 0196 0000     		.align	2
 10426              	motion_status.10744:
 10427 0198 0000     		.space	2
 10428 019a 0000     		.align	2
 10429              	start_emg_pos.10764:
 10430 019c 00000000 		.space	8
 10430      00000000 
 10431              		.align	2
 10432              	emg_excess_status.10745:
 10433 01a4 0000     		.space	2
 10434              		.data
 10435              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 239


 10436              		.type	exc_act_thr.10748, %object
 10437              		.size	exc_act_thr.10748, 4
 10438              	exc_act_thr.10748:
 10439 0014 D4030000 		.word	980
 10440              		.bss
 10441 01a6 0000     		.align	2
 10442              	timer_exc_s.10762:
 10443 01a8 00000000 		.space	8
 10443      00000000 
 10444              		.align	2
 10445              	timer_exc_e.10763:
 10446 01b0 00000000 		.space	8
 10446      00000000 
 10447              	rest_cycle_status.10746:
 10448 01b8 00       		.space	1
 10449 01b9 000000   		.align	2
 10450              	timer_value_s.10760:
 10451 01bc 00000000 		.space	4
 10452              		.align	2
 10453              	timer_value_e.10761:
 10454 01c0 00000000 		.space	4
 10455              		.align	2
 10456              	m_addr.10805:
 10457 01c4 00000000 		.space	4
 10458              	row_number.10800:
 10459 01c8 00       		.space	1
 10460              		.text
 10461              	.Letext0:
 10462              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10463              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10464              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 10465              		.file 5 "..\\src\\commands.h"
 10466              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 10467              		.file 7 "..\\src\\globals.h"
 10468              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 10469              		.section	.debug_info,"",%progbits
 10470              	.Ldebug_info0:
 10471 0000 DD1B0000 		.4byte	0x1bdd
 10472 0004 0400     		.2byte	0x4
 10473 0006 00000000 		.4byte	.Ldebug_abbrev0
 10474 000a 04       		.byte	0x4
 10475 000b 01       		.uleb128 0x1
 10476 000c 61090000 		.4byte	.LASF355
 10477 0010 0C       		.byte	0xc
 10478 0011 CC110000 		.4byte	.LASF356
 10479 0015 EC010000 		.4byte	.LASF357
 10480 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 10481 001d 00000000 		.4byte	0
 10482 0021 00000000 		.4byte	.Ldebug_line0
 10483 0025 02       		.uleb128 0x2
 10484 0026 01       		.byte	0x1
 10485 0027 06       		.byte	0x6
 10486 0028 9E040000 		.4byte	.LASF0
 10487 002c 02       		.uleb128 0x2
 10488 002d 01       		.byte	0x1
 10489 002e 08       		.byte	0x8
 10490 002f 1B050000 		.4byte	.LASF1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 240


 10491 0033 02       		.uleb128 0x2
 10492 0034 02       		.byte	0x2
 10493 0035 05       		.byte	0x5
 10494 0036 9D0F0000 		.4byte	.LASF2
 10495 003a 02       		.uleb128 0x2
 10496 003b 02       		.byte	0x2
 10497 003c 07       		.byte	0x7
 10498 003d 70110000 		.4byte	.LASF3
 10499 0041 03       		.uleb128 0x3
 10500 0042 62120000 		.4byte	.LASF9
 10501 0046 02       		.byte	0x2
 10502 0047 3F       		.byte	0x3f
 10503 0048 4C000000 		.4byte	0x4c
 10504 004c 02       		.uleb128 0x2
 10505 004d 04       		.byte	0x4
 10506 004e 05       		.byte	0x5
 10507 004f 7B030000 		.4byte	.LASF4
 10508 0053 02       		.uleb128 0x2
 10509 0054 04       		.byte	0x4
 10510 0055 07       		.byte	0x7
 10511 0056 49080000 		.4byte	.LASF5
 10512 005a 02       		.uleb128 0x2
 10513 005b 08       		.byte	0x8
 10514 005c 05       		.byte	0x5
 10515 005d 270A0000 		.4byte	.LASF6
 10516 0061 02       		.uleb128 0x2
 10517 0062 08       		.byte	0x8
 10518 0063 07       		.byte	0x7
 10519 0064 270D0000 		.4byte	.LASF7
 10520 0068 04       		.uleb128 0x4
 10521 0069 04       		.byte	0x4
 10522 006a 05       		.byte	0x5
 10523 006b 696E7400 		.ascii	"int\000"
 10524 006f 02       		.uleb128 0x2
 10525 0070 04       		.byte	0x4
 10526 0071 07       		.byte	0x7
 10527 0072 4F0B0000 		.4byte	.LASF8
 10528 0076 03       		.uleb128 0x3
 10529 0077 8B000000 		.4byte	.LASF10
 10530 007b 03       		.byte	0x3
 10531 007c 2C       		.byte	0x2c
 10532 007d 41000000 		.4byte	0x41
 10533 0081 05       		.uleb128 0x5
 10534 0082 770F0000 		.4byte	.LASF11
 10535 0086 04       		.byte	0x4
 10536 0087 E401     		.2byte	0x1e4
 10537 0089 2C000000 		.4byte	0x2c
 10538 008d 05       		.uleb128 0x5
 10539 008e BF120000 		.4byte	.LASF12
 10540 0092 04       		.byte	0x4
 10541 0093 E501     		.2byte	0x1e5
 10542 0095 3A000000 		.4byte	0x3a
 10543 0099 05       		.uleb128 0x5
 10544 009a BF000000 		.4byte	.LASF13
 10545 009e 04       		.byte	0x4
 10546 009f E601     		.2byte	0x1e6
 10547 00a1 53000000 		.4byte	0x53
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 241


 10548 00a5 05       		.uleb128 0x5
 10549 00a6 A3010000 		.4byte	.LASF14
 10550 00aa 04       		.byte	0x4
 10551 00ab E701     		.2byte	0x1e7
 10552 00ad 25000000 		.4byte	0x25
 10553 00b1 05       		.uleb128 0x5
 10554 00b2 5C100000 		.4byte	.LASF15
 10555 00b6 04       		.byte	0x4
 10556 00b7 E801     		.2byte	0x1e8
 10557 00b9 33000000 		.4byte	0x33
 10558 00bd 05       		.uleb128 0x5
 10559 00be EF110000 		.4byte	.LASF16
 10560 00c2 04       		.byte	0x4
 10561 00c3 E901     		.2byte	0x1e9
 10562 00c5 4C000000 		.4byte	0x4c
 10563 00c9 05       		.uleb128 0x5
 10564 00ca 46040000 		.4byte	.LASF17
 10565 00ce 04       		.byte	0x4
 10566 00cf EA01     		.2byte	0x1ea
 10567 00d1 D5000000 		.4byte	0xd5
 10568 00d5 02       		.uleb128 0x2
 10569 00d6 04       		.byte	0x4
 10570 00d7 04       		.byte	0x4
 10571 00d8 0F0B0000 		.4byte	.LASF18
 10572 00dc 02       		.uleb128 0x2
 10573 00dd 08       		.byte	0x8
 10574 00de 04       		.byte	0x4
 10575 00df 6A0A0000 		.4byte	.LASF19
 10576 00e3 02       		.uleb128 0x2
 10577 00e4 01       		.byte	0x1
 10578 00e5 08       		.byte	0x8
 10579 00e6 AD050000 		.4byte	.LASF20
 10580 00ea 05       		.uleb128 0x5
 10581 00eb 880B0000 		.4byte	.LASF21
 10582 00ef 04       		.byte	0x4
 10583 00f0 8602     		.2byte	0x286
 10584 00f2 53000000 		.4byte	0x53
 10585 00f6 05       		.uleb128 0x5
 10586 00f7 F30D0000 		.4byte	.LASF22
 10587 00fb 04       		.byte	0x4
 10588 00fc 8E02     		.2byte	0x28e
 10589 00fe 02010000 		.4byte	0x102
 10590 0102 06       		.uleb128 0x6
 10591 0103 81000000 		.4byte	0x81
 10592 0107 02       		.uleb128 0x2
 10593 0108 08       		.byte	0x8
 10594 0109 04       		.byte	0x4
 10595 010a 3A0C0000 		.4byte	.LASF23
 10596 010e 02       		.uleb128 0x2
 10597 010f 04       		.byte	0x4
 10598 0110 07       		.byte	0x7
 10599 0111 10000000 		.4byte	.LASF24
 10600 0115 07       		.uleb128 0x7
 10601 0116 E3000000 		.4byte	0xe3
 10602 011a 25010000 		.4byte	0x125
 10603 011e 08       		.uleb128 0x8
 10604 011f 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 242


 10605 0123 07       		.byte	0x7
 10606 0124 00       		.byte	0
 10607 0125 09       		.uleb128 0x9
 10608 0126 9C120000 		.4byte	.LASF33
 10609 012a 01       		.byte	0x1
 10610 012b 2C000000 		.4byte	0x2c
 10611 012f 05       		.byte	0x5
 10612 0130 8F       		.byte	0x8f
 10613 0131 66010000 		.4byte	0x166
 10614 0135 0A       		.uleb128 0xa
 10615 0136 BC070000 		.4byte	.LASF25
 10616 013a 00       		.byte	0
 10617 013b 0A       		.uleb128 0xa
 10618 013c 910B0000 		.4byte	.LASF26
 10619 0140 01       		.byte	0x1
 10620 0141 0A       		.uleb128 0xa
 10621 0142 D3020000 		.4byte	.LASF27
 10622 0146 02       		.byte	0x2
 10623 0147 0A       		.uleb128 0xa
 10624 0148 71010000 		.4byte	.LASF28
 10625 014c 03       		.byte	0x3
 10626 014d 0A       		.uleb128 0xa
 10627 014e 2B010000 		.4byte	.LASF29
 10628 0152 04       		.byte	0x4
 10629 0153 0A       		.uleb128 0xa
 10630 0154 53000000 		.4byte	.LASF30
 10631 0158 05       		.byte	0x5
 10632 0159 0A       		.uleb128 0xa
 10633 015a 8B080000 		.4byte	.LASF31
 10634 015e 06       		.byte	0x6
 10635 015f 0A       		.uleb128 0xa
 10636 0160 170F0000 		.4byte	.LASF32
 10637 0164 07       		.byte	0x7
 10638 0165 00       		.byte	0
 10639 0166 09       		.uleb128 0x9
 10640 0167 350A0000 		.4byte	.LASF34
 10641 016b 01       		.byte	0x1
 10642 016c 2C000000 		.4byte	0x2c
 10643 0170 05       		.byte	0x5
 10644 0171 A3       		.byte	0xa3
 10645 0172 8F010000 		.4byte	0x18f
 10646 0176 0A       		.uleb128 0xa
 10647 0177 54120000 		.4byte	.LASF35
 10648 017b 00       		.byte	0
 10649 017c 0A       		.uleb128 0xa
 10650 017d 26090000 		.4byte	.LASF36
 10651 0181 01       		.byte	0x1
 10652 0182 0A       		.uleb128 0xa
 10653 0183 2A0C0000 		.4byte	.LASF37
 10654 0187 02       		.byte	0x2
 10655 0188 0A       		.uleb128 0xa
 10656 0189 2C080000 		.4byte	.LASF38
 10657 018d 03       		.byte	0x3
 10658 018e 00       		.byte	0
 10659 018f 03       		.uleb128 0x3
 10660 0190 1F120000 		.4byte	.LASF39
 10661 0194 06       		.byte	0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 243


 10662 0195 7E       		.byte	0x7e
 10663 0196 9A010000 		.4byte	0x19a
 10664 019a 0B       		.uleb128 0xb
 10665 019b 1F120000 		.4byte	.LASF39
 10666 019f 0C       		.uleb128 0xc
 10667 01a0 04       		.byte	0x4
 10668 01a1 8F010000 		.4byte	0x18f
 10669 01a5 0D       		.uleb128 0xd
 10670 01a6 EF090000 		.4byte	.LASF42
 10671 01aa 10       		.byte	0x10
 10672 01ab 07       		.byte	0x7
 10673 01ac E5       		.byte	0xe5
 10674 01ad E2010000 		.4byte	0x1e2
 10675 01b1 0E       		.uleb128 0xe
 10676 01b2 706F7300 		.ascii	"pos\000"
 10677 01b6 07       		.byte	0x7
 10678 01b7 E6       		.byte	0xe6
 10679 01b8 BD000000 		.4byte	0xbd
 10680 01bc 00       		.byte	0
 10681 01bd 0F       		.uleb128 0xf
 10682 01be 0B090000 		.4byte	.LASF40
 10683 01c2 07       		.byte	0x7
 10684 01c3 E7       		.byte	0xe7
 10685 01c4 BD000000 		.4byte	0xbd
 10686 01c8 04       		.byte	0x4
 10687 01c9 0E       		.uleb128 0xe
 10688 01ca 70776D00 		.ascii	"pwm\000"
 10689 01ce 07       		.byte	0x7
 10690 01cf E8       		.byte	0xe8
 10691 01d0 BD000000 		.4byte	0xbd
 10692 01d4 08       		.byte	0x8
 10693 01d5 0F       		.uleb128 0xf
 10694 01d6 8A0D0000 		.4byte	.LASF41
 10695 01da 07       		.byte	0x7
 10696 01db E9       		.byte	0xe9
 10697 01dc 81000000 		.4byte	0x81
 10698 01e0 0C       		.byte	0xc
 10699 01e1 00       		.byte	0
 10700 01e2 0D       		.uleb128 0xd
 10701 01e3 DE0E0000 		.4byte	.LASF43
 10702 01e7 34       		.byte	0x34
 10703 01e8 07       		.byte	0x7
 10704 01e9 F0       		.byte	0xf0
 10705 01ea 43020000 		.4byte	0x243
 10706 01ee 0E       		.uleb128 0xe
 10707 01ef 706F7300 		.ascii	"pos\000"
 10708 01f3 07       		.byte	0x7
 10709 01f4 F1       		.byte	0xf1
 10710 01f5 43020000 		.4byte	0x243
 10711 01f9 00       		.byte	0
 10712 01fa 0F       		.uleb128 0xf
 10713 01fb 0B090000 		.4byte	.LASF40
 10714 01ff 07       		.byte	0x7
 10715 0200 F2       		.byte	0xf2
 10716 0201 BD000000 		.4byte	0xbd
 10717 0205 0C       		.byte	0xc
 10718 0206 0F       		.uleb128 0xf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 244


 10719 0207 9F100000 		.4byte	.LASF44
 10720 020b 07       		.byte	0x7
 10721 020c F3       		.byte	0xf3
 10722 020d BD000000 		.4byte	0xbd
 10723 0211 10       		.byte	0x10
 10724 0212 0F       		.uleb128 0xf
 10725 0213 81080000 		.4byte	.LASF45
 10726 0217 07       		.byte	0x7
 10727 0218 F4       		.byte	0xf4
 10728 0219 BD000000 		.4byte	0xbd
 10729 021d 14       		.byte	0x14
 10730 021e 0E       		.uleb128 0xe
 10731 021f 726F7400 		.ascii	"rot\000"
 10732 0223 07       		.byte	0x7
 10733 0224 F5       		.byte	0xf5
 10734 0225 53020000 		.4byte	0x253
 10735 0229 18       		.byte	0x18
 10736 022a 0E       		.uleb128 0xe
 10737 022b 76656C00 		.ascii	"vel\000"
 10738 022f 07       		.byte	0x7
 10739 0230 F6       		.byte	0xf6
 10740 0231 43020000 		.4byte	0x243
 10741 0235 1C       		.byte	0x1c
 10742 0236 0E       		.uleb128 0xe
 10743 0237 61636300 		.ascii	"acc\000"
 10744 023b 07       		.byte	0x7
 10745 023c F7       		.byte	0xf7
 10746 023d 43020000 		.4byte	0x243
 10747 0241 28       		.byte	0x28
 10748 0242 00       		.byte	0
 10749 0243 07       		.uleb128 0x7
 10750 0244 BD000000 		.4byte	0xbd
 10751 0248 53020000 		.4byte	0x253
 10752 024c 08       		.uleb128 0x8
 10753 024d 0E010000 		.4byte	0x10e
 10754 0251 02       		.byte	0x2
 10755 0252 00       		.byte	0
 10756 0253 07       		.uleb128 0x7
 10757 0254 A5000000 		.4byte	0xa5
 10758 0258 63020000 		.4byte	0x263
 10759 025c 08       		.uleb128 0x8
 10760 025d 0E010000 		.4byte	0x10e
 10761 0261 02       		.byte	0x2
 10762 0262 00       		.byte	0
 10763 0263 0D       		.uleb128 0xd
 10764 0264 240B0000 		.4byte	.LASF46
 10765 0268 28       		.byte	0x28
 10766 0269 07       		.byte	0x7
 10767 026a FA       		.byte	0xfa
 10768 026b 94020000 		.4byte	0x294
 10769 026f 0E       		.uleb128 0xe
 10770 0270 656D6700 		.ascii	"emg\000"
 10771 0274 07       		.byte	0x7
 10772 0275 FB       		.byte	0xfb
 10773 0276 94020000 		.4byte	0x294
 10774 027a 00       		.byte	0
 10775 027b 0F       		.uleb128 0xf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 245


 10776 027c DB0B0000 		.4byte	.LASF47
 10777 0280 07       		.byte	0x7
 10778 0281 FC       		.byte	0xfc
 10779 0282 A4020000 		.4byte	0x2a4
 10780 0286 08       		.byte	0x8
 10781 0287 0F       		.uleb128 0xf
 10782 0288 BC0F0000 		.4byte	.LASF48
 10783 028c 07       		.byte	0x7
 10784 028d FD       		.byte	0xfd
 10785 028e 94020000 		.4byte	0x294
 10786 0292 20       		.byte	0x20
 10787 0293 00       		.byte	0
 10788 0294 07       		.uleb128 0x7
 10789 0295 BD000000 		.4byte	0xbd
 10790 0299 A4020000 		.4byte	0x2a4
 10791 029d 08       		.uleb128 0x8
 10792 029e 0E010000 		.4byte	0x10e
 10793 02a2 01       		.byte	0x1
 10794 02a3 00       		.byte	0
 10795 02a4 07       		.uleb128 0x7
 10796 02a5 BD000000 		.4byte	0xbd
 10797 02a9 B4020000 		.4byte	0x2b4
 10798 02ad 08       		.uleb128 0x8
 10799 02ae 0E010000 		.4byte	0x10e
 10800 02b2 05       		.byte	0x5
 10801 02b3 00       		.byte	0
 10802 02b4 10       		.uleb128 0x10
 10803 02b5 A9000000 		.4byte	.LASF49
 10804 02b9 86       		.byte	0x86
 10805 02ba 07       		.byte	0x7
 10806 02bb 0801     		.2byte	0x108
 10807 02bd F6020000 		.4byte	0x2f6
 10808 02c1 11       		.uleb128 0x11
 10809 02c2 C6060000 		.4byte	.LASF50
 10810 02c6 07       		.byte	0x7
 10811 02c7 0901     		.2byte	0x109
 10812 02c9 F6020000 		.4byte	0x2f6
 10813 02cd 00       		.byte	0
 10814 02ce 11       		.uleb128 0x11
 10815 02cf 6D0D0000 		.4byte	.LASF51
 10816 02d3 07       		.byte	0x7
 10817 02d4 0A01     		.2byte	0x10a
 10818 02d6 B1000000 		.4byte	0xb1
 10819 02da 80       		.byte	0x80
 10820 02db 12       		.uleb128 0x12
 10821 02dc 696E6400 		.ascii	"ind\000"
 10822 02e0 07       		.byte	0x7
 10823 02e1 0B01     		.2byte	0x10b
 10824 02e3 B1000000 		.4byte	0xb1
 10825 02e7 82       		.byte	0x82
 10826 02e8 11       		.uleb128 0x11
 10827 02e9 A6020000 		.4byte	.LASF52
 10828 02ed 07       		.byte	0x7
 10829 02ee 0C01     		.2byte	0x10c
 10830 02f0 81000000 		.4byte	0x81
 10831 02f4 84       		.byte	0x84
 10832 02f5 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 246


 10833 02f6 07       		.uleb128 0x7
 10834 02f7 81000000 		.4byte	0x81
 10835 02fb 06030000 		.4byte	0x306
 10836 02ff 08       		.uleb128 0x8
 10837 0300 0E010000 		.4byte	0x10e
 10838 0304 7F       		.byte	0x7f
 10839 0305 00       		.byte	0
 10840 0306 10       		.uleb128 0x10
 10841 0307 24040000 		.4byte	.LASF53
 10842 030b 70       		.byte	0x70
 10843 030c 07       		.byte	0x7
 10844 030d 1501     		.2byte	0x115
 10845 030f A3030000 		.4byte	0x3a3
 10846 0313 11       		.uleb128 0x11
 10847 0314 00000000 		.4byte	.LASF54
 10848 0318 07       		.byte	0x7
 10849 0319 1601     		.2byte	0x116
 10850 031b A3030000 		.4byte	0x3a3
 10851 031f 00       		.byte	0
 10852 0320 11       		.uleb128 0x11
 10853 0321 BE010000 		.4byte	.LASF55
 10854 0325 07       		.byte	0x7
 10855 0326 1701     		.2byte	0x117
 10856 0328 B3030000 		.4byte	0x3b3
 10857 032c 08       		.byte	0x8
 10858 032d 11       		.uleb128 0x11
 10859 032e 1D0C0000 		.4byte	.LASF56
 10860 0332 07       		.byte	0x7
 10861 0333 1801     		.2byte	0x118
 10862 0335 C3030000 		.4byte	0x3c3
 10863 0339 30       		.byte	0x30
 10864 033a 11       		.uleb128 0x11
 10865 033b 55010000 		.4byte	.LASF57
 10866 033f 07       		.byte	0x7
 10867 0340 1901     		.2byte	0x119
 10868 0342 99000000 		.4byte	0x99
 10869 0346 40       		.byte	0x40
 10870 0347 11       		.uleb128 0x11
 10871 0348 6C120000 		.4byte	.LASF58
 10872 034c 07       		.byte	0x7
 10873 034d 1A01     		.2byte	0x11a
 10874 034f 99000000 		.4byte	0x99
 10875 0353 44       		.byte	0x44
 10876 0354 11       		.uleb128 0x11
 10877 0355 B1000000 		.4byte	.LASF59
 10878 0359 07       		.byte	0x7
 10879 035a 1B01     		.2byte	0x11b
 10880 035c 99000000 		.4byte	0x99
 10881 0360 48       		.byte	0x48
 10882 0361 11       		.uleb128 0x11
 10883 0362 9F080000 		.4byte	.LASF60
 10884 0366 07       		.byte	0x7
 10885 0367 1C01     		.2byte	0x11c
 10886 0369 99000000 		.4byte	0x99
 10887 036d 4C       		.byte	0x4c
 10888 036e 11       		.uleb128 0x11
 10889 036f 19000000 		.4byte	.LASF61
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 247


 10890 0373 07       		.byte	0x7
 10891 0374 1D01     		.2byte	0x11d
 10892 0376 99000000 		.4byte	0x99
 10893 037a 50       		.byte	0x50
 10894 037b 11       		.uleb128 0x11
 10895 037c 0D030000 		.4byte	.LASF62
 10896 0380 07       		.byte	0x7
 10897 0381 1E01     		.2byte	0x11e
 10898 0383 A3030000 		.4byte	0x3a3
 10899 0387 54       		.byte	0x54
 10900 0388 11       		.uleb128 0x11
 10901 0389 730C0000 		.4byte	.LASF63
 10902 038d 07       		.byte	0x7
 10903 038e 1F01     		.2byte	0x11f
 10904 0390 A3030000 		.4byte	0x3a3
 10905 0394 5C       		.byte	0x5c
 10906 0395 11       		.uleb128 0x11
 10907 0396 F1030000 		.4byte	.LASF64
 10908 039a 07       		.byte	0x7
 10909 039b 2001     		.2byte	0x120
 10910 039d D3030000 		.4byte	0x3d3
 10911 03a1 64       		.byte	0x64
 10912 03a2 00       		.byte	0
 10913 03a3 07       		.uleb128 0x7
 10914 03a4 99000000 		.4byte	0x99
 10915 03a8 B3030000 		.4byte	0x3b3
 10916 03ac 08       		.uleb128 0x8
 10917 03ad 0E010000 		.4byte	0x10e
 10918 03b1 01       		.byte	0x1
 10919 03b2 00       		.byte	0
 10920 03b3 07       		.uleb128 0x7
 10921 03b4 99000000 		.4byte	0x99
 10922 03b8 C3030000 		.4byte	0x3c3
 10923 03bc 08       		.uleb128 0x8
 10924 03bd 0E010000 		.4byte	0x10e
 10925 03c1 09       		.byte	0x9
 10926 03c2 00       		.byte	0
 10927 03c3 07       		.uleb128 0x7
 10928 03c4 99000000 		.4byte	0x99
 10929 03c8 D3030000 		.4byte	0x3d3
 10930 03cc 08       		.uleb128 0x8
 10931 03cd 0E010000 		.4byte	0x10e
 10932 03d1 03       		.byte	0x3
 10933 03d2 00       		.byte	0
 10934 03d3 07       		.uleb128 0x7
 10935 03d4 81000000 		.4byte	0x81
 10936 03d8 E3030000 		.4byte	0x3e3
 10937 03dc 08       		.uleb128 0x8
 10938 03dd 0E010000 		.4byte	0x10e
 10939 03e1 0B       		.byte	0xb
 10940 03e2 00       		.byte	0
 10941 03e3 10       		.uleb128 0x10
 10942 03e4 C9020000 		.4byte	.LASF65
 10943 03e8 10       		.byte	0x10
 10944 03e9 07       		.byte	0x7
 10945 03ea 2701     		.2byte	0x127
 10946 03ec 72040000 		.4byte	0x472
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 248


 10947 03f0 12       		.uleb128 0x12
 10948 03f1 696400   		.ascii	"id\000"
 10949 03f4 07       		.byte	0x7
 10950 03f5 2801     		.2byte	0x128
 10951 03f7 81000000 		.4byte	0x81
 10952 03fb 00       		.byte	0
 10953 03fc 11       		.uleb128 0x11
 10954 03fd D70F0000 		.4byte	.LASF66
 10955 0401 07       		.byte	0x7
 10956 0402 2901     		.2byte	0x129
 10957 0404 72040000 		.4byte	0x472
 10958 0408 01       		.byte	0x1
 10959 0409 11       		.uleb128 0x11
 10960 040a 13100000 		.4byte	.LASF67
 10961 040e 07       		.byte	0x7
 10962 040f 2A01     		.2byte	0x12a
 10963 0411 72040000 		.4byte	0x472
 10964 0415 04       		.byte	0x4
 10965 0416 11       		.uleb128 0x11
 10966 0417 75050000 		.4byte	.LASF68
 10967 041b 07       		.byte	0x7
 10968 041c 2B01     		.2byte	0x12b
 10969 041e 81000000 		.4byte	0x81
 10970 0422 07       		.byte	0x7
 10971 0423 11       		.uleb128 0x11
 10972 0424 AD030000 		.4byte	.LASF69
 10973 0428 07       		.byte	0x7
 10974 0429 2C01     		.2byte	0x12c
 10975 042b 81000000 		.4byte	0x81
 10976 042f 08       		.byte	0x8
 10977 0430 11       		.uleb128 0x11
 10978 0431 EF020000 		.4byte	.LASF70
 10979 0435 07       		.byte	0x7
 10980 0436 2D01     		.2byte	0x12d
 10981 0438 81000000 		.4byte	0x81
 10982 043c 09       		.byte	0x9
 10983 043d 11       		.uleb128 0x11
 10984 043e 44110000 		.4byte	.LASF71
 10985 0442 07       		.byte	0x7
 10986 0443 2E01     		.2byte	0x12e
 10987 0445 81000000 		.4byte	0x81
 10988 0449 0A       		.byte	0xa
 10989 044a 11       		.uleb128 0x11
 10990 044b D8100000 		.4byte	.LASF72
 10991 044f 07       		.byte	0x7
 10992 0450 2F01     		.2byte	0x12f
 10993 0452 81000000 		.4byte	0x81
 10994 0456 0B       		.byte	0xb
 10995 0457 11       		.uleb128 0x11
 10996 0458 8D0E0000 		.4byte	.LASF73
 10997 045c 07       		.byte	0x7
 10998 045d 3001     		.2byte	0x130
 10999 045f 81000000 		.4byte	0x81
 11000 0463 0C       		.byte	0xc
 11001 0464 11       		.uleb128 0x11
 11002 0465 F1030000 		.4byte	.LASF64
 11003 0469 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 249


 11004 046a 3101     		.2byte	0x131
 11005 046c 72040000 		.4byte	0x472
 11006 0470 0D       		.byte	0xd
 11007 0471 00       		.byte	0
 11008 0472 07       		.uleb128 0x7
 11009 0473 81000000 		.4byte	0x81
 11010 0477 82040000 		.4byte	0x482
 11011 047b 08       		.uleb128 0x8
 11012 047c 0E010000 		.4byte	0x10e
 11013 0480 02       		.byte	0x2
 11014 0481 00       		.byte	0
 11015 0482 10       		.uleb128 0x10
 11016 0483 0A120000 		.4byte	.LASF74
 11017 0487 74       		.byte	0x74
 11018 0488 07       		.byte	0x7
 11019 0489 3801     		.2byte	0x138
 11020 048b 09060000 		.4byte	0x609
 11021 048f 12       		.uleb128 0x12
 11022 0490 6B5F7000 		.ascii	"k_p\000"
 11023 0494 07       		.byte	0x7
 11024 0495 3901     		.2byte	0x139
 11025 0497 BD000000 		.4byte	0xbd
 11026 049b 00       		.byte	0
 11027 049c 12       		.uleb128 0x12
 11028 049d 6B5F6900 		.ascii	"k_i\000"
 11029 04a1 07       		.byte	0x7
 11030 04a2 3A01     		.2byte	0x13a
 11031 04a4 BD000000 		.4byte	0xbd
 11032 04a8 04       		.byte	0x4
 11033 04a9 12       		.uleb128 0x12
 11034 04aa 6B5F6400 		.ascii	"k_d\000"
 11035 04ae 07       		.byte	0x7
 11036 04af 3B01     		.2byte	0x13b
 11037 04b1 BD000000 		.4byte	0xbd
 11038 04b5 08       		.byte	0x8
 11039 04b6 11       		.uleb128 0x11
 11040 04b7 C60D0000 		.4byte	.LASF75
 11041 04bb 07       		.byte	0x7
 11042 04bc 3C01     		.2byte	0x13c
 11043 04be BD000000 		.4byte	0xbd
 11044 04c2 0C       		.byte	0xc
 11045 04c3 11       		.uleb128 0x11
 11046 04c4 2E060000 		.4byte	.LASF76
 11047 04c8 07       		.byte	0x7
 11048 04c9 3D01     		.2byte	0x13d
 11049 04cb BD000000 		.4byte	0xbd
 11050 04cf 10       		.byte	0x10
 11051 04d0 11       		.uleb128 0x11
 11052 04d1 16060000 		.4byte	.LASF77
 11053 04d5 07       		.byte	0x7
 11054 04d6 3E01     		.2byte	0x13e
 11055 04d8 BD000000 		.4byte	0xbd
 11056 04dc 14       		.byte	0x14
 11057 04dd 11       		.uleb128 0x11
 11058 04de 98100000 		.4byte	.LASF78
 11059 04e2 07       		.byte	0x7
 11060 04e3 3F01     		.2byte	0x13f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 250


 11061 04e5 BD000000 		.4byte	0xbd
 11062 04e9 18       		.byte	0x18
 11063 04ea 11       		.uleb128 0x11
 11064 04eb BF060000 		.4byte	.LASF79
 11065 04ef 07       		.byte	0x7
 11066 04f0 4001     		.2byte	0x140
 11067 04f2 BD000000 		.4byte	0xbd
 11068 04f6 1C       		.byte	0x1c
 11069 04f7 11       		.uleb128 0x11
 11070 04f8 A70F0000 		.4byte	.LASF80
 11071 04fc 07       		.byte	0x7
 11072 04fd 4101     		.2byte	0x141
 11073 04ff BD000000 		.4byte	0xbd
 11074 0503 20       		.byte	0x20
 11075 0504 11       		.uleb128 0x11
 11076 0505 CD060000 		.4byte	.LASF81
 11077 0509 07       		.byte	0x7
 11078 050a 4201     		.2byte	0x142
 11079 050c BD000000 		.4byte	0xbd
 11080 0510 24       		.byte	0x24
 11081 0511 11       		.uleb128 0x11
 11082 0512 15080000 		.4byte	.LASF82
 11083 0516 07       		.byte	0x7
 11084 0517 4301     		.2byte	0x143
 11085 0519 BD000000 		.4byte	0xbd
 11086 051d 28       		.byte	0x28
 11087 051e 11       		.uleb128 0x11
 11088 051f E4120000 		.4byte	.LASF83
 11089 0523 07       		.byte	0x7
 11090 0524 4401     		.2byte	0x144
 11091 0526 BD000000 		.4byte	0xbd
 11092 052a 2C       		.byte	0x2c
 11093 052b 11       		.uleb128 0x11
 11094 052c AF080000 		.4byte	.LASF84
 11095 0530 07       		.byte	0x7
 11096 0531 4501     		.2byte	0x145
 11097 0533 81000000 		.4byte	0x81
 11098 0537 30       		.byte	0x30
 11099 0538 11       		.uleb128 0x11
 11100 0539 81100000 		.4byte	.LASF85
 11101 053d 07       		.byte	0x7
 11102 053e 4601     		.2byte	0x146
 11103 0540 81000000 		.4byte	0x81
 11104 0544 31       		.byte	0x31
 11105 0545 11       		.uleb128 0x11
 11106 0546 D80D0000 		.4byte	.LASF86
 11107 054a 07       		.byte	0x7
 11108 054b 4701     		.2byte	0x147
 11109 054d 81000000 		.4byte	0x81
 11110 0551 32       		.byte	0x32
 11111 0552 11       		.uleb128 0x11
 11112 0553 27120000 		.4byte	.LASF87
 11113 0557 07       		.byte	0x7
 11114 0558 4801     		.2byte	0x148
 11115 055a 81000000 		.4byte	0x81
 11116 055e 33       		.byte	0x33
 11117 055f 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 251


 11118 0560 D6000000 		.4byte	.LASF88
 11119 0564 07       		.byte	0x7
 11120 0565 4901     		.2byte	0x149
 11121 0567 BD000000 		.4byte	0xbd
 11122 056b 34       		.byte	0x34
 11123 056c 11       		.uleb128 0x11
 11124 056d 53060000 		.4byte	.LASF89
 11125 0571 07       		.byte	0x7
 11126 0572 4A01     		.2byte	0x14a
 11127 0574 BD000000 		.4byte	0xbd
 11128 0578 38       		.byte	0x38
 11129 0579 11       		.uleb128 0x11
 11130 057a E00A0000 		.4byte	.LASF90
 11131 057e 07       		.byte	0x7
 11132 057f 4B01     		.2byte	0x14b
 11133 0581 BD000000 		.4byte	0xbd
 11134 0585 3C       		.byte	0x3c
 11135 0586 11       		.uleb128 0x11
 11136 0587 CA050000 		.4byte	.LASF91
 11137 058b 07       		.byte	0x7
 11138 058c 4C01     		.2byte	0x14c
 11139 058e BD000000 		.4byte	0xbd
 11140 0592 40       		.byte	0x40
 11141 0593 11       		.uleb128 0x11
 11142 0594 3F010000 		.4byte	.LASF92
 11143 0598 07       		.byte	0x7
 11144 0599 4D01     		.2byte	0x14d
 11145 059b 09060000 		.4byte	0x609
 11146 059f 44       		.byte	0x44
 11147 05a0 11       		.uleb128 0x11
 11148 05a1 8E120000 		.4byte	.LASF93
 11149 05a5 07       		.byte	0x7
 11150 05a6 4E01     		.2byte	0x14e
 11151 05a8 B1000000 		.4byte	0xb1
 11152 05ac 5C       		.byte	0x5c
 11153 05ad 11       		.uleb128 0x11
 11154 05ae 1B090000 		.4byte	.LASF94
 11155 05b2 07       		.byte	0x7
 11156 05b3 4F01     		.2byte	0x14f
 11157 05b5 81000000 		.4byte	0x81
 11158 05b9 5E       		.byte	0x5e
 11159 05ba 11       		.uleb128 0x11
 11160 05bb 7B0B0000 		.4byte	.LASF95
 11161 05bf 07       		.byte	0x7
 11162 05c0 5001     		.2byte	0x150
 11163 05c2 81000000 		.4byte	0x81
 11164 05c6 5F       		.byte	0x5f
 11165 05c7 11       		.uleb128 0x11
 11166 05c8 80050000 		.4byte	.LASF96
 11167 05cc 07       		.byte	0x7
 11168 05cd 5101     		.2byte	0x151
 11169 05cf 81000000 		.4byte	0x81
 11170 05d3 60       		.byte	0x60
 11171 05d4 11       		.uleb128 0x11
 11172 05d5 05060000 		.4byte	.LASF97
 11173 05d9 07       		.byte	0x7
 11174 05da 5201     		.2byte	0x152
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 252


 11175 05dc 81000000 		.4byte	0x81
 11176 05e0 61       		.byte	0x61
 11177 05e1 11       		.uleb128 0x11
 11178 05e2 29050000 		.4byte	.LASF98
 11179 05e6 07       		.byte	0x7
 11180 05e7 5301     		.2byte	0x153
 11181 05e9 81000000 		.4byte	0x81
 11182 05ed 62       		.byte	0x62
 11183 05ee 11       		.uleb128 0x11
 11184 05ef 45060000 		.4byte	.LASF99
 11185 05f3 07       		.byte	0x7
 11186 05f4 5401     		.2byte	0x154
 11187 05f6 8D000000 		.4byte	0x8d
 11188 05fa 64       		.byte	0x64
 11189 05fb 11       		.uleb128 0x11
 11190 05fc F1030000 		.4byte	.LASF64
 11191 0600 07       		.byte	0x7
 11192 0601 5501     		.2byte	0x155
 11193 0603 19060000 		.4byte	0x619
 11194 0607 66       		.byte	0x66
 11195 0608 00       		.byte	0
 11196 0609 07       		.uleb128 0x7
 11197 060a D5000000 		.4byte	0xd5
 11198 060e 19060000 		.4byte	0x619
 11199 0612 08       		.uleb128 0x8
 11200 0613 0E010000 		.4byte	0x10e
 11201 0617 05       		.byte	0x5
 11202 0618 00       		.byte	0
 11203 0619 07       		.uleb128 0x7
 11204 061a 81000000 		.4byte	0x81
 11205 061e 29060000 		.4byte	0x629
 11206 0622 08       		.uleb128 0x8
 11207 0623 0E010000 		.4byte	0x10e
 11208 0627 0A       		.byte	0xa
 11209 0628 00       		.byte	0
 11210 0629 10       		.uleb128 0x10
 11211 062a 83110000 		.4byte	.LASF100
 11212 062e 30       		.byte	0x30
 11213 062f 07       		.byte	0x7
 11214 0630 5C01     		.2byte	0x15c
 11215 0632 AC060000 		.4byte	0x6ac
 11216 0636 11       		.uleb128 0x11
 11217 0637 9A0A0000 		.4byte	.LASF101
 11218 063b 07       		.byte	0x7
 11219 063c 5D01     		.2byte	0x15d
 11220 063e AC060000 		.4byte	0x6ac
 11221 0642 00       		.byte	0
 11222 0643 12       		.uleb128 0x12
 11223 0644 72657300 		.ascii	"res\000"
 11224 0648 07       		.byte	0x7
 11225 0649 5E01     		.2byte	0x15e
 11226 064b 72040000 		.4byte	0x472
 11227 064f 05       		.byte	0x5
 11228 0650 11       		.uleb128 0x11
 11229 0651 DB080000 		.4byte	.LASF102
 11230 0655 07       		.byte	0x7
 11231 0656 5F01     		.2byte	0x15f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 253


 11232 0658 43020000 		.4byte	0x243
 11233 065c 08       		.byte	0x8
 11234 065d 11       		.uleb128 0x11
 11235 065e 27060000 		.4byte	.LASF103
 11236 0662 07       		.byte	0x7
 11237 0663 6001     		.2byte	0x160
 11238 0665 BC060000 		.4byte	0x6bc
 11239 0669 14       		.byte	0x14
 11240 066a 11       		.uleb128 0x11
 11241 066b BE0C0000 		.4byte	.LASF104
 11242 066f 07       		.byte	0x7
 11243 0670 6101     		.2byte	0x161
 11244 0672 81000000 		.4byte	0x81
 11245 0676 20       		.byte	0x20
 11246 0677 11       		.uleb128 0x11
 11247 0678 AC020000 		.4byte	.LASF105
 11248 067c 07       		.byte	0x7
 11249 067d 6201     		.2byte	0x162
 11250 067f 72040000 		.4byte	0x472
 11251 0683 21       		.byte	0x21
 11252 0684 11       		.uleb128 0x11
 11253 0685 0A0C0000 		.4byte	.LASF106
 11254 0689 07       		.byte	0x7
 11255 068a 6301     		.2byte	0x163
 11256 068c A5000000 		.4byte	0xa5
 11257 0690 24       		.byte	0x24
 11258 0691 11       		.uleb128 0x11
 11259 0692 AF0E0000 		.4byte	.LASF107
 11260 0696 07       		.byte	0x7
 11261 0697 6401     		.2byte	0x164
 11262 0699 53020000 		.4byte	0x253
 11263 069d 25       		.byte	0x25
 11264 069e 11       		.uleb128 0x11
 11265 069f F1030000 		.4byte	.LASF64
 11266 06a3 07       		.byte	0x7
 11267 06a4 6501     		.2byte	0x165
 11268 06a6 CC060000 		.4byte	0x6cc
 11269 06aa 28       		.byte	0x28
 11270 06ab 00       		.byte	0
 11271 06ac 07       		.uleb128 0x7
 11272 06ad 81000000 		.4byte	0x81
 11273 06b1 BC060000 		.4byte	0x6bc
 11274 06b5 08       		.uleb128 0x8
 11275 06b6 0E010000 		.4byte	0x10e
 11276 06ba 04       		.byte	0x4
 11277 06bb 00       		.byte	0
 11278 06bc 07       		.uleb128 0x7
 11279 06bd C9000000 		.4byte	0xc9
 11280 06c1 CC060000 		.4byte	0x6cc
 11281 06c5 08       		.uleb128 0x8
 11282 06c6 0E010000 		.4byte	0x10e
 11283 06ca 02       		.byte	0x2
 11284 06cb 00       		.byte	0
 11285 06cc 07       		.uleb128 0x7
 11286 06cd 81000000 		.4byte	0x81
 11287 06d1 DC060000 		.4byte	0x6dc
 11288 06d5 08       		.uleb128 0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 254


 11289 06d6 0E010000 		.4byte	0x10e
 11290 06da 07       		.byte	0x7
 11291 06db 00       		.byte	0
 11292 06dc 10       		.uleb128 0x10
 11293 06dd B7010000 		.4byte	.LASF108
 11294 06e1 10       		.byte	0x10
 11295 06e2 07       		.byte	0x7
 11296 06e3 6C01     		.2byte	0x16c
 11297 06e5 2B070000 		.4byte	0x72b
 11298 06e9 11       		.uleb128 0x11
 11299 06ea E90B0000 		.4byte	.LASF109
 11300 06ee 07       		.byte	0x7
 11301 06ef 6D01     		.2byte	0x16d
 11302 06f1 2B070000 		.4byte	0x72b
 11303 06f5 00       		.byte	0
 11304 06f6 11       		.uleb128 0x11
 11305 06f7 80120000 		.4byte	.LASF110
 11306 06fb 07       		.byte	0x7
 11307 06fc 6E01     		.2byte	0x16e
 11308 06fe A3030000 		.4byte	0x3a3
 11309 0702 04       		.byte	0x4
 11310 0703 11       		.uleb128 0x11
 11311 0704 69060000 		.4byte	.LASF111
 11312 0708 07       		.byte	0x7
 11313 0709 6F01     		.2byte	0x16f
 11314 070b 3B070000 		.4byte	0x73b
 11315 070f 0C       		.byte	0xc
 11316 0710 11       		.uleb128 0x11
 11317 0711 C90E0000 		.4byte	.LASF112
 11318 0715 07       		.byte	0x7
 11319 0716 7001     		.2byte	0x170
 11320 0718 81000000 		.4byte	0x81
 11321 071c 0E       		.byte	0xe
 11322 071d 11       		.uleb128 0x11
 11323 071e D8040000 		.4byte	.LASF113
 11324 0722 07       		.byte	0x7
 11325 0723 7101     		.2byte	0x171
 11326 0725 81000000 		.4byte	0x81
 11327 0729 0F       		.byte	0xf
 11328 072a 00       		.byte	0
 11329 072b 07       		.uleb128 0x7
 11330 072c 8D000000 		.4byte	0x8d
 11331 0730 3B070000 		.4byte	0x73b
 11332 0734 08       		.uleb128 0x8
 11333 0735 0E010000 		.4byte	0x10e
 11334 0739 01       		.byte	0x1
 11335 073a 00       		.byte	0
 11336 073b 07       		.uleb128 0x7
 11337 073c 81000000 		.4byte	0x81
 11338 0740 4B070000 		.4byte	0x74b
 11339 0744 08       		.uleb128 0x8
 11340 0745 0E010000 		.4byte	0x10e
 11341 0749 01       		.byte	0x1
 11342 074a 00       		.byte	0
 11343 074b 10       		.uleb128 0x10
 11344 074c A50B0000 		.4byte	.LASF114
 11345 0750 20       		.byte	0x20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 255


 11346 0751 07       		.byte	0x7
 11347 0752 7801     		.2byte	0x178
 11348 0754 8D070000 		.4byte	0x78d
 11349 0758 11       		.uleb128 0x11
 11350 0759 34030000 		.4byte	.LASF115
 11351 075d 07       		.byte	0x7
 11352 075e 7901     		.2byte	0x179
 11353 0760 81000000 		.4byte	0x81
 11354 0764 00       		.byte	0
 11355 0765 11       		.uleb128 0x11
 11356 0766 61110000 		.4byte	.LASF116
 11357 076a 07       		.byte	0x7
 11358 076b 7A01     		.2byte	0x17a
 11359 076d 81000000 		.4byte	0x81
 11360 0771 01       		.byte	0x1
 11361 0772 11       		.uleb128 0x11
 11362 0773 150B0000 		.4byte	.LASF117
 11363 0777 07       		.byte	0x7
 11364 0778 7B01     		.2byte	0x17b
 11365 077a 8D070000 		.4byte	0x78d
 11366 077e 02       		.byte	0x2
 11367 077f 11       		.uleb128 0x11
 11368 0780 F1030000 		.4byte	.LASF64
 11369 0784 07       		.byte	0x7
 11370 0785 7C01     		.2byte	0x17c
 11371 0787 AC060000 		.4byte	0x6ac
 11372 078b 1B       		.byte	0x1b
 11373 078c 00       		.byte	0
 11374 078d 07       		.uleb128 0x7
 11375 078e 81000000 		.4byte	0x81
 11376 0792 A3070000 		.4byte	0x7a3
 11377 0796 08       		.uleb128 0x8
 11378 0797 0E010000 		.4byte	0x10e
 11379 079b 04       		.byte	0x4
 11380 079c 08       		.uleb128 0x8
 11381 079d 0E010000 		.4byte	0x10e
 11382 07a1 04       		.byte	0x4
 11383 07a2 00       		.byte	0
 11384 07a3 10       		.uleb128 0x10
 11385 07a4 BC0E0000 		.4byte	.LASF118
 11386 07a8 20       		.byte	0x20
 11387 07a9 07       		.byte	0x7
 11388 07aa 8301     		.2byte	0x183
 11389 07ac FF070000 		.4byte	0x7ff
 11390 07b0 11       		.uleb128 0x11
 11391 07b1 B40C0000 		.4byte	.LASF119
 11392 07b5 07       		.byte	0x7
 11393 07b6 8401     		.2byte	0x184
 11394 07b8 FF070000 		.4byte	0x7ff
 11395 07bc 00       		.byte	0
 11396 07bd 11       		.uleb128 0x11
 11397 07be 62100000 		.4byte	.LASF120
 11398 07c2 07       		.byte	0x7
 11399 07c3 8501     		.2byte	0x185
 11400 07c5 81000000 		.4byte	0x81
 11401 07c9 06       		.byte	0x6
 11402 07ca 11       		.uleb128 0x11
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 256


 11403 07cb 6B000000 		.4byte	.LASF121
 11404 07cf 07       		.byte	0x7
 11405 07d0 8601     		.2byte	0x186
 11406 07d2 81000000 		.4byte	0x81
 11407 07d6 07       		.byte	0x7
 11408 07d7 11       		.uleb128 0x11
 11409 07d8 A8060000 		.4byte	.LASF122
 11410 07dc 07       		.byte	0x7
 11411 07dd 8701     		.2byte	0x187
 11412 07df D3030000 		.4byte	0x3d3
 11413 07e3 08       		.byte	0x8
 11414 07e4 11       		.uleb128 0x11
 11415 07e5 42030000 		.4byte	.LASF123
 11416 07e9 07       		.byte	0x7
 11417 07ea 8801     		.2byte	0x188
 11418 07ec 81000000 		.4byte	0x81
 11419 07f0 14       		.byte	0x14
 11420 07f1 11       		.uleb128 0x11
 11421 07f2 F1030000 		.4byte	.LASF64
 11422 07f6 07       		.byte	0x7
 11423 07f7 8901     		.2byte	0x189
 11424 07f9 19060000 		.4byte	0x619
 11425 07fd 15       		.byte	0x15
 11426 07fe 00       		.byte	0
 11427 07ff 07       		.uleb128 0x7
 11428 0800 81000000 		.4byte	0x81
 11429 0804 0F080000 		.4byte	0x80f
 11430 0808 08       		.uleb128 0x8
 11431 0809 0E010000 		.4byte	0x10e
 11432 080d 05       		.byte	0x5
 11433 080e 00       		.byte	0
 11434 080f 10       		.uleb128 0x10
 11435 0810 A70E0000 		.4byte	.LASF124
 11436 0814 20       		.byte	0x20
 11437 0815 07       		.byte	0x7
 11438 0816 9001     		.2byte	0x190
 11439 0818 44080000 		.4byte	0x844
 11440 081c 11       		.uleb128 0x11
 11441 081d AA040000 		.4byte	.LASF125
 11442 0821 07       		.byte	0x7
 11443 0822 9101     		.2byte	0x191
 11444 0824 15010000 		.4byte	0x115
 11445 0828 00       		.byte	0
 11446 0829 11       		.uleb128 0x11
 11447 082a CA030000 		.4byte	.LASF126
 11448 082e 07       		.byte	0x7
 11449 082f 9201     		.2byte	0x192
 11450 0831 DC060000 		.4byte	0x6dc
 11451 0835 08       		.byte	0x8
 11452 0836 11       		.uleb128 0x11
 11453 0837 F1030000 		.4byte	.LASF64
 11454 083b 07       		.byte	0x7
 11455 083c 9301     		.2byte	0x193
 11456 083e CC060000 		.4byte	0x6cc
 11457 0842 18       		.byte	0x18
 11458 0843 00       		.byte	0
 11459 0844 10       		.uleb128 0x10
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 257


 11460 0845 030A0000 		.4byte	.LASF127
 11461 0849 10       		.byte	0x10
 11462 084a 07       		.byte	0x7
 11463 084b 9A01     		.2byte	0x19a
 11464 084d 93080000 		.4byte	0x893
 11465 0851 11       		.uleb128 0x11
 11466 0852 02090000 		.4byte	.LASF128
 11467 0856 07       		.byte	0x7
 11468 0857 9B01     		.2byte	0x19b
 11469 0859 BD000000 		.4byte	0xbd
 11470 085d 00       		.byte	0
 11471 085e 11       		.uleb128 0x11
 11472 085f C6120000 		.4byte	.LASF129
 11473 0863 07       		.byte	0x7
 11474 0864 9C01     		.2byte	0x19c
 11475 0866 BD000000 		.4byte	0xbd
 11476 086a 04       		.byte	0x4
 11477 086b 11       		.uleb128 0x11
 11478 086c 73060000 		.4byte	.LASF130
 11479 0870 07       		.byte	0x7
 11480 0871 9D01     		.2byte	0x19d
 11481 0873 BD000000 		.4byte	0xbd
 11482 0877 08       		.byte	0x8
 11483 0878 11       		.uleb128 0x11
 11484 0879 EB070000 		.4byte	.LASF131
 11485 087d 07       		.byte	0x7
 11486 087e 9E01     		.2byte	0x19e
 11487 0880 81000000 		.4byte	0x81
 11488 0884 0C       		.byte	0xc
 11489 0885 11       		.uleb128 0x11
 11490 0886 F1030000 		.4byte	.LASF64
 11491 088a 07       		.byte	0x7
 11492 088b 9F01     		.2byte	0x19f
 11493 088d 72040000 		.4byte	0x472
 11494 0891 0D       		.byte	0xd
 11495 0892 00       		.byte	0
 11496 0893 10       		.uleb128 0x10
 11497 0894 7D0F0000 		.4byte	.LASF132
 11498 0898 10       		.byte	0x10
 11499 0899 07       		.byte	0x7
 11500 089a A601     		.2byte	0x1a6
 11501 089c D5080000 		.4byte	0x8d5
 11502 08a0 11       		.uleb128 0x11
 11503 08a1 FE070000 		.4byte	.LASF133
 11504 08a5 07       		.byte	0x7
 11505 08a6 A701     		.2byte	0x1a7
 11506 08a8 8D000000 		.4byte	0x8d
 11507 08ac 00       		.byte	0
 11508 08ad 11       		.uleb128 0x11
 11509 08ae 040F0000 		.4byte	.LASF134
 11510 08b2 07       		.byte	0x7
 11511 08b3 A801     		.2byte	0x1a8
 11512 08b5 B1000000 		.4byte	0xb1
 11513 08b9 02       		.byte	0x2
 11514 08ba 11       		.uleb128 0x11
 11515 08bb 72080000 		.4byte	.LASF135
 11516 08bf 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 258


 11517 08c0 A901     		.2byte	0x1a9
 11518 08c2 2B070000 		.4byte	0x72b
 11519 08c6 04       		.byte	0x4
 11520 08c7 11       		.uleb128 0x11
 11521 08c8 F1030000 		.4byte	.LASF64
 11522 08cc 07       		.byte	0x7
 11523 08cd AA01     		.2byte	0x1aa
 11524 08cf CC060000 		.4byte	0x6cc
 11525 08d3 08       		.byte	0x8
 11526 08d4 00       		.byte	0
 11527 08d5 10       		.uleb128 0x10
 11528 08d6 62010000 		.4byte	.LASF136
 11529 08da 10       		.byte	0x10
 11530 08db 07       		.byte	0x7
 11531 08dc B101     		.2byte	0x1b1
 11532 08de 0A090000 		.4byte	0x90a
 11533 08e2 11       		.uleb128 0x11
 11534 08e3 520E0000 		.4byte	.LASF137
 11535 08e7 07       		.byte	0x7
 11536 08e8 B201     		.2byte	0x1b2
 11537 08ea 81000000 		.4byte	0x81
 11538 08ee 00       		.byte	0
 11539 08ef 11       		.uleb128 0x11
 11540 08f0 010B0000 		.4byte	.LASF138
 11541 08f4 07       		.byte	0x7
 11542 08f5 B301     		.2byte	0x1b3
 11543 08f7 81000000 		.4byte	0x81
 11544 08fb 01       		.byte	0x1
 11545 08fc 11       		.uleb128 0x11
 11546 08fd F1030000 		.4byte	.LASF64
 11547 0901 07       		.byte	0x7
 11548 0902 B401     		.2byte	0x1b4
 11549 0904 0A090000 		.4byte	0x90a
 11550 0908 02       		.byte	0x2
 11551 0909 00       		.byte	0
 11552 090a 07       		.uleb128 0x7
 11553 090b 81000000 		.4byte	0x81
 11554 090f 1A090000 		.4byte	0x91a
 11555 0913 08       		.uleb128 0x8
 11556 0914 0E010000 		.4byte	0x10e
 11557 0918 0D       		.byte	0xd
 11558 0919 00       		.byte	0
 11559 091a 10       		.uleb128 0x10
 11560 091b 1C0A0000 		.4byte	.LASF139
 11561 091f 10       		.byte	0x10
 11562 0920 07       		.byte	0x7
 11563 0921 BB01     		.2byte	0x1bb
 11564 0923 5C090000 		.4byte	0x95c
 11565 0927 11       		.uleb128 0x11
 11566 0928 99110000 		.4byte	.LASF140
 11567 092c 07       		.byte	0x7
 11568 092d BC01     		.2byte	0x1bc
 11569 092f BD000000 		.4byte	0xbd
 11570 0933 00       		.byte	0
 11571 0934 11       		.uleb128 0x11
 11572 0935 D6070000 		.4byte	.LASF141
 11573 0939 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 259


 11574 093a BD01     		.2byte	0x1bd
 11575 093c D5000000 		.4byte	0xd5
 11576 0940 04       		.byte	0x4
 11577 0941 11       		.uleb128 0x11
 11578 0942 0A0E0000 		.4byte	.LASF142
 11579 0946 07       		.byte	0x7
 11580 0947 BE01     		.2byte	0x1be
 11581 0949 D5000000 		.4byte	0xd5
 11582 094d 08       		.byte	0x8
 11583 094e 11       		.uleb128 0x11
 11584 094f F1030000 		.4byte	.LASF64
 11585 0953 07       		.byte	0x7
 11586 0954 BF01     		.2byte	0x1bf
 11587 0956 5C090000 		.4byte	0x95c
 11588 095a 0C       		.byte	0xc
 11589 095b 00       		.byte	0
 11590 095c 07       		.uleb128 0x7
 11591 095d 81000000 		.4byte	0x81
 11592 0961 6C090000 		.4byte	0x96c
 11593 0965 08       		.uleb128 0x8
 11594 0966 0E010000 		.4byte	0x10e
 11595 096a 03       		.byte	0x3
 11596 096b 00       		.byte	0
 11597 096c 10       		.uleb128 0x10
 11598 096d 91020000 		.4byte	.LASF143
 11599 0971 12       		.byte	0x12
 11600 0972 07       		.byte	0x7
 11601 0973 C601     		.2byte	0x1c6
 11602 0975 AE090000 		.4byte	0x9ae
 11603 0979 11       		.uleb128 0x11
 11604 097a AF120000 		.4byte	.LASF144
 11605 097e 07       		.byte	0x7
 11606 097f C701     		.2byte	0x1c7
 11607 0981 81000000 		.4byte	0x81
 11608 0985 00       		.byte	0
 11609 0986 11       		.uleb128 0x11
 11610 0987 4E110000 		.4byte	.LASF145
 11611 098b 07       		.byte	0x7
 11612 098c C801     		.2byte	0x1c8
 11613 098e 2B070000 		.4byte	0x72b
 11614 0992 02       		.byte	0x2
 11615 0993 11       		.uleb128 0x11
 11616 0994 37000000 		.4byte	.LASF146
 11617 0998 07       		.byte	0x7
 11618 0999 C901     		.2byte	0x1c9
 11619 099b 81000000 		.4byte	0x81
 11620 099f 06       		.byte	0x6
 11621 09a0 11       		.uleb128 0x11
 11622 09a1 F1030000 		.4byte	.LASF64
 11623 09a5 07       		.byte	0x7
 11624 09a6 CA01     		.2byte	0x1ca
 11625 09a8 AE090000 		.4byte	0x9ae
 11626 09ac 07       		.byte	0x7
 11627 09ad 00       		.byte	0
 11628 09ae 07       		.uleb128 0x7
 11629 09af 81000000 		.4byte	0x81
 11630 09b3 BE090000 		.4byte	0x9be
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 260


 11631 09b7 08       		.uleb128 0x8
 11632 09b8 0E010000 		.4byte	0x10e
 11633 09bc 09       		.byte	0x9
 11634 09bd 00       		.byte	0
 11635 09be 13       		.uleb128 0x13
 11636 09bf B4110000 		.4byte	.LASF147
 11637 09c3 FC02     		.2byte	0x2fc
 11638 09c5 07       		.byte	0x7
 11639 09c6 D301     		.2byte	0x1d3
 11640 09c8 A30A0000 		.4byte	0xaa3
 11641 09cc 11       		.uleb128 0x11
 11642 09cd 760B0000 		.4byte	.LASF148
 11643 09d1 07       		.byte	0x7
 11644 09d2 D501     		.2byte	0x1d5
 11645 09d4 81000000 		.4byte	0x81
 11646 09d8 00       		.byte	0
 11647 09d9 11       		.uleb128 0x11
 11648 09da F1030000 		.4byte	.LASF64
 11649 09de 07       		.byte	0x7
 11650 09df D601     		.2byte	0x1d6
 11651 09e1 A30A0000 		.4byte	0xaa3
 11652 09e5 01       		.byte	0x1
 11653 09e6 12       		.uleb128 0x12
 11654 09e7 636E7400 		.ascii	"cnt\000"
 11655 09eb 07       		.byte	0x7
 11656 09ec D701     		.2byte	0x1d7
 11657 09ee 06030000 		.4byte	0x306
 11658 09f2 10       		.byte	0x10
 11659 09f3 11       		.uleb128 0x11
 11660 09f4 84030000 		.4byte	.LASF149
 11661 09f8 07       		.byte	0x7
 11662 09f9 D801     		.2byte	0x1d8
 11663 09fb B30A0000 		.4byte	0xab3
 11664 09ff 80       		.byte	0x80
 11665 0a00 12       		.uleb128 0x12
 11666 0a01 64657600 		.ascii	"dev\000"
 11667 0a05 07       		.byte	0x7
 11668 0a06 D901     		.2byte	0x1d9
 11669 0a08 E3030000 		.4byte	0x3e3
 11670 0a0c A0       		.byte	0xa0
 11671 0a0d 11       		.uleb128 0x11
 11672 0a0e C50F0000 		.4byte	.LASF150
 11673 0a12 07       		.byte	0x7
 11674 0a13 DA01     		.2byte	0x1da
 11675 0a15 C30A0000 		.4byte	0xac3
 11676 0a19 B0       		.byte	0xb0
 11677 0a1a 14       		.uleb128 0x14
 11678 0a1b 656E6300 		.ascii	"enc\000"
 11679 0a1f 07       		.byte	0x7
 11680 0a20 DB01     		.2byte	0x1db
 11681 0a22 D30A0000 		.4byte	0xad3
 11682 0a26 9801     		.2byte	0x198
 11683 0a28 14       		.uleb128 0x14
 11684 0a29 656D6700 		.ascii	"emg\000"
 11685 0a2d 07       		.byte	0x7
 11686 0a2e DC01     		.2byte	0x1dc
 11687 0a30 DC060000 		.4byte	0x6dc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 261


 11688 0a34 F801     		.2byte	0x1f8
 11689 0a36 14       		.uleb128 0x14
 11690 0a37 696D7500 		.ascii	"imu\000"
 11691 0a3b 07       		.byte	0x7
 11692 0a3c DD01     		.2byte	0x1dd
 11693 0a3e 4B070000 		.4byte	0x74b
 11694 0a42 0802     		.2byte	0x208
 11695 0a44 14       		.uleb128 0x14
 11696 0a45 65787000 		.ascii	"exp\000"
 11697 0a49 07       		.byte	0x7
 11698 0a4a DE01     		.2byte	0x1de
 11699 0a4c A3070000 		.4byte	0x7a3
 11700 0a50 2802     		.2byte	0x228
 11701 0a52 15       		.uleb128 0x15
 11702 0a53 86000000 		.4byte	.LASF151
 11703 0a57 07       		.byte	0x7
 11704 0a58 DF01     		.2byte	0x1df
 11705 0a5a E30A0000 		.4byte	0xae3
 11706 0a5e 4802     		.2byte	0x248
 11707 0a60 14       		.uleb128 0x14
 11708 0a61 534800   		.ascii	"SH\000"
 11709 0a64 07       		.byte	0x7
 11710 0a65 E101     		.2byte	0x1e1
 11711 0a67 44080000 		.4byte	0x844
 11712 0a6b A802     		.2byte	0x2a8
 11713 0a6d 15       		.uleb128 0x15
 11714 0a6e CD000000 		.4byte	.LASF152
 11715 0a72 07       		.byte	0x7
 11716 0a73 E201     		.2byte	0x1e2
 11717 0a75 93080000 		.4byte	0x893
 11718 0a79 B802     		.2byte	0x2b8
 11719 0a7b 14       		.uleb128 0x14
 11720 0a7c 4D5300   		.ascii	"MS\000"
 11721 0a7f 07       		.byte	0x7
 11722 0a80 E301     		.2byte	0x1e3
 11723 0a82 D5080000 		.4byte	0x8d5
 11724 0a86 C802     		.2byte	0x2c8
 11725 0a88 14       		.uleb128 0x14
 11726 0a89 464200   		.ascii	"FB\000"
 11727 0a8c 07       		.byte	0x7
 11728 0a8d E401     		.2byte	0x1e4
 11729 0a8f 1A090000 		.4byte	0x91a
 11730 0a93 D802     		.2byte	0x2d8
 11731 0a95 14       		.uleb128 0x14
 11732 0a96 575200   		.ascii	"WR\000"
 11733 0a99 07       		.byte	0x7
 11734 0a9a E501     		.2byte	0x1e5
 11735 0a9c 6C090000 		.4byte	0x96c
 11736 0aa0 E802     		.2byte	0x2e8
 11737 0aa2 00       		.byte	0
 11738 0aa3 07       		.uleb128 0x7
 11739 0aa4 81000000 		.4byte	0x81
 11740 0aa8 B30A0000 		.4byte	0xab3
 11741 0aac 08       		.uleb128 0x8
 11742 0aad 0E010000 		.4byte	0x10e
 11743 0ab1 0E       		.byte	0xe
 11744 0ab2 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 262


 11745 0ab3 07       		.uleb128 0x7
 11746 0ab4 81000000 		.4byte	0x81
 11747 0ab8 C30A0000 		.4byte	0xac3
 11748 0abc 08       		.uleb128 0x8
 11749 0abd 0E010000 		.4byte	0x10e
 11750 0ac1 1F       		.byte	0x1f
 11751 0ac2 00       		.byte	0
 11752 0ac3 07       		.uleb128 0x7
 11753 0ac4 82040000 		.4byte	0x482
 11754 0ac8 D30A0000 		.4byte	0xad3
 11755 0acc 08       		.uleb128 0x8
 11756 0acd 0E010000 		.4byte	0x10e
 11757 0ad1 01       		.byte	0x1
 11758 0ad2 00       		.byte	0
 11759 0ad3 07       		.uleb128 0x7
 11760 0ad4 29060000 		.4byte	0x629
 11761 0ad8 E30A0000 		.4byte	0xae3
 11762 0adc 08       		.uleb128 0x8
 11763 0add 0E010000 		.4byte	0x10e
 11764 0ae1 01       		.byte	0x1
 11765 0ae2 00       		.byte	0
 11766 0ae3 07       		.uleb128 0x7
 11767 0ae4 0F080000 		.4byte	0x80f
 11768 0ae8 F30A0000 		.4byte	0xaf3
 11769 0aec 08       		.uleb128 0x8
 11770 0aed 0E010000 		.4byte	0x10e
 11771 0af1 02       		.byte	0x2
 11772 0af2 00       		.byte	0
 11773 0af3 10       		.uleb128 0x10
 11774 0af4 740D0000 		.4byte	.LASF153
 11775 0af8 28       		.byte	0x28
 11776 0af9 07       		.byte	0x7
 11777 0afa F001     		.2byte	0x1f0
 11778 0afc 4F0B0000 		.4byte	0xb4f
 11779 0b00 11       		.uleb128 0x11
 11780 0b01 9A050000 		.4byte	.LASF154
 11781 0b05 07       		.byte	0x7
 11782 0b06 F101     		.2byte	0x1f1
 11783 0b08 81000000 		.4byte	0x81
 11784 0b0c 00       		.byte	0
 11785 0b0d 11       		.uleb128 0x11
 11786 0b0e FE030000 		.4byte	.LASF155
 11787 0b12 07       		.byte	0x7
 11788 0b13 F201     		.2byte	0x1f2
 11789 0b15 4F0B0000 		.4byte	0xb4f
 11790 0b19 02       		.byte	0x2
 11791 0b1a 11       		.uleb128 0x11
 11792 0b1b A90C0000 		.4byte	.LASF156
 11793 0b1f 07       		.byte	0x7
 11794 0b20 F301     		.2byte	0x1f3
 11795 0b22 4F0B0000 		.4byte	0xb4f
 11796 0b26 08       		.byte	0x8
 11797 0b27 11       		.uleb128 0x11
 11798 0b28 800D0000 		.4byte	.LASF157
 11799 0b2c 07       		.byte	0x7
 11800 0b2d F401     		.2byte	0x1f4
 11801 0b2f 4F0B0000 		.4byte	0xb4f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 263


 11802 0b33 0E       		.byte	0xe
 11803 0b34 11       		.uleb128 0x11
 11804 0b35 F7080000 		.4byte	.LASF158
 11805 0b39 07       		.byte	0x7
 11806 0b3a F501     		.2byte	0x1f5
 11807 0b3c 5F0B0000 		.4byte	0xb5f
 11808 0b40 14       		.byte	0x14
 11809 0b41 11       		.uleb128 0x11
 11810 0b42 D9010000 		.4byte	.LASF159
 11811 0b46 07       		.byte	0x7
 11812 0b47 F601     		.2byte	0x1f6
 11813 0b49 B1000000 		.4byte	0xb1
 11814 0b4d 24       		.byte	0x24
 11815 0b4e 00       		.byte	0
 11816 0b4f 07       		.uleb128 0x7
 11817 0b50 B1000000 		.4byte	0xb1
 11818 0b54 5F0B0000 		.4byte	0xb5f
 11819 0b58 08       		.uleb128 0x8
 11820 0b59 0E010000 		.4byte	0x10e
 11821 0b5d 02       		.byte	0x2
 11822 0b5e 00       		.byte	0
 11823 0b5f 07       		.uleb128 0x7
 11824 0b60 D5000000 		.4byte	0xd5
 11825 0b64 6F0B0000 		.4byte	0xb6f
 11826 0b68 08       		.uleb128 0x8
 11827 0b69 0E010000 		.4byte	0x10e
 11828 0b6d 03       		.byte	0x3
 11829 0b6e 00       		.byte	0
 11830 0b6f 10       		.uleb128 0x10
 11831 0b70 D1120000 		.4byte	.LASF160
 11832 0b74 08       		.byte	0x8
 11833 0b75 07       		.byte	0x7
 11834 0b76 FD01     		.2byte	0x1fd
 11835 0b78 970B0000 		.4byte	0xb97
 11836 0b7c 11       		.uleb128 0x11
 11837 0b7d 5F060000 		.4byte	.LASF161
 11838 0b81 07       		.byte	0x7
 11839 0b82 FE01     		.2byte	0x1fe
 11840 0b84 BD000000 		.4byte	0xbd
 11841 0b88 00       		.byte	0
 11842 0b89 11       		.uleb128 0x11
 11843 0b8a C4020000 		.4byte	.LASF162
 11844 0b8e 07       		.byte	0x7
 11845 0b8f FF01     		.2byte	0x1ff
 11846 0b91 BD000000 		.4byte	0xbd
 11847 0b95 04       		.byte	0x4
 11848 0b96 00       		.byte	0
 11849 0b97 10       		.uleb128 0x10
 11850 0b98 BB040000 		.4byte	.LASF163
 11851 0b9c 06       		.byte	0x6
 11852 0b9d 07       		.byte	0x7
 11853 0b9e 0602     		.2byte	0x206
 11854 0ba0 D90B0000 		.4byte	0xbd9
 11855 0ba4 11       		.uleb128 0x11
 11856 0ba5 41080000 		.4byte	.LASF164
 11857 0ba9 07       		.byte	0x7
 11858 0baa 0702     		.2byte	0x207
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 264


 11859 0bac 81000000 		.4byte	0x81
 11860 0bb0 00       		.byte	0
 11861 0bb1 11       		.uleb128 0x11
 11862 0bb2 ED120000 		.4byte	.LASF165
 11863 0bb6 07       		.byte	0x7
 11864 0bb7 0802     		.2byte	0x208
 11865 0bb9 81000000 		.4byte	0x81
 11866 0bbd 01       		.byte	0x1
 11867 0bbe 11       		.uleb128 0x11
 11868 0bbf EC060000 		.4byte	.LASF166
 11869 0bc3 07       		.byte	0x7
 11870 0bc4 0902     		.2byte	0x209
 11871 0bc6 B1000000 		.4byte	0xb1
 11872 0bca 02       		.byte	0x2
 11873 0bcb 11       		.uleb128 0x11
 11874 0bcc D40A0000 		.4byte	.LASF167
 11875 0bd0 07       		.byte	0x7
 11876 0bd1 0A02     		.2byte	0x20a
 11877 0bd3 B1000000 		.4byte	0xb1
 11878 0bd7 04       		.byte	0x4
 11879 0bd8 00       		.byte	0
 11880 0bd9 16       		.uleb128 0x16
 11881 0bda 01       		.byte	0x1
 11882 0bdb 2C000000 		.4byte	0x2c
 11883 0bdf 07       		.byte	0x7
 11884 0be0 0E02     		.2byte	0x20e
 11885 0be2 0B0C0000 		.4byte	0xc0b
 11886 0be6 0A       		.uleb128 0xa
 11887 0be7 7C060000 		.4byte	.LASF168
 11888 0beb 00       		.byte	0
 11889 0bec 0A       		.uleb128 0xa
 11890 0bed 4C0E0000 		.4byte	.LASF169
 11891 0bf1 01       		.byte	0x1
 11892 0bf2 0A       		.uleb128 0xa
 11893 0bf3 460C0000 		.4byte	.LASF170
 11894 0bf7 02       		.byte	0x2
 11895 0bf8 0A       		.uleb128 0xa
 11896 0bf9 27030000 		.4byte	.LASF171
 11897 0bfd 03       		.byte	0x3
 11898 0bfe 0A       		.uleb128 0xa
 11899 0bff 0A0B0000 		.4byte	.LASF172
 11900 0c03 04       		.byte	0x4
 11901 0c04 0A       		.uleb128 0xa
 11902 0c05 EA0D0000 		.4byte	.LASF173
 11903 0c09 05       		.byte	0x5
 11904 0c0a 00       		.byte	0
 11905 0c0b 05       		.uleb128 0x5
 11906 0c0c 1C060000 		.4byte	.LASF174
 11907 0c10 07       		.byte	0x7
 11908 0c11 1602     		.2byte	0x216
 11909 0c13 D90B0000 		.4byte	0xbd9
 11910 0c17 16       		.uleb128 0x16
 11911 0c18 01       		.byte	0x1
 11912 0c19 2C000000 		.4byte	0x2c
 11913 0c1d 07       		.byte	0x7
 11914 0c1e 1802     		.2byte	0x218
 11915 0c20 430C0000 		.4byte	0xc43
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 265


 11916 0c24 0A       		.uleb128 0xa
 11917 0c25 CC010000 		.4byte	.LASF175
 11918 0c29 00       		.byte	0
 11919 0c2a 0A       		.uleb128 0xa
 11920 0c2b 65080000 		.4byte	.LASF176
 11921 0c2f 01       		.byte	0x1
 11922 0c30 0A       		.uleb128 0xa
 11923 0c31 10090000 		.4byte	.LASF177
 11924 0c35 02       		.byte	0x2
 11925 0c36 0A       		.uleb128 0xa
 11926 0c37 68040000 		.4byte	.LASF178
 11927 0c3b 03       		.byte	0x3
 11928 0c3c 0A       		.uleb128 0xa
 11929 0c3d AA120000 		.4byte	.LASF179
 11930 0c41 04       		.byte	0x4
 11931 0c42 00       		.byte	0
 11932 0c43 05       		.uleb128 0x5
 11933 0c44 360F0000 		.4byte	.LASF180
 11934 0c48 07       		.byte	0x7
 11935 0c49 1F02     		.2byte	0x21f
 11936 0c4b 170C0000 		.4byte	0xc17
 11937 0c4f 17       		.uleb128 0x17
 11938 0c50 48090000 		.4byte	.LASF181
 11939 0c54 01       		.byte	0x1
 11940 0c55 62       		.byte	0x62
 11941 0c56 00000000 		.4byte	.LFB64
 11942 0c5a 18000000 		.4byte	.LFE64-.LFB64
 11943 0c5e 01       		.uleb128 0x1
 11944 0c5f 9C       		.byte	0x9c
 11945 0c60 17       		.uleb128 0x17
 11946 0c61 31110000 		.4byte	.LASF182
 11947 0c65 01       		.byte	0x1
 11948 0c66 6D       		.byte	0x6d
 11949 0c67 00000000 		.4byte	.LFB65
 11950 0c6b 20000000 		.4byte	.LFE65-.LFB65
 11951 0c6f 01       		.uleb128 0x1
 11952 0c70 9C       		.byte	0x9c
 11953 0c71 18       		.uleb128 0x18
 11954 0c72 880A0000 		.4byte	.LASF214
 11955 0c76 01       		.byte	0x1
 11956 0c77 86       		.byte	0x86
 11957 0c78 00000000 		.4byte	.LFB66
 11958 0c7c F4010000 		.4byte	.LFE66-.LFB66
 11959 0c80 01       		.uleb128 0x1
 11960 0c81 9C       		.byte	0x9c
 11961 0c82 060D0000 		.4byte	0xd06
 11962 0c86 19       		.uleb128 0x19
 11963 0c87 FA000000 		.4byte	.LASF183
 11964 0c8b 01       		.byte	0x1
 11965 0c8c 8B       		.byte	0x8b
 11966 0c8d 81000000 		.4byte	0x81
 11967 0c91 05       		.uleb128 0x5
 11968 0c92 03       		.byte	0x3
 11969 0c93 00000000 		.4byte	state.10464
 11970 0c97 19       		.uleb128 0x19
 11971 0c98 11070000 		.4byte	.LASF184
 11972 0c9c 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 266


 11973 0c9d 8E       		.byte	0x8e
 11974 0c9e 81000000 		.4byte	0x81
 11975 0ca2 05       		.uleb128 0x5
 11976 0ca3 03       		.byte	0x3
 11977 0ca4 08000000 		.4byte	data_packet_index.10465
 11978 0ca8 19       		.uleb128 0x19
 11979 0ca9 B30D0000 		.4byte	.LASF185
 11980 0cad 01       		.byte	0x1
 11981 0cae 8F       		.byte	0x8f
 11982 0caf 81000000 		.4byte	0x81
 11983 0cb3 05       		.uleb128 0x5
 11984 0cb4 03       		.byte	0x3
 11985 0cb5 07000000 		.4byte	data_packet_length.10466
 11986 0cb9 19       		.uleb128 0x19
 11987 0cba 23070000 		.4byte	.LASF186
 11988 0cbe 01       		.byte	0x1
 11989 0cbf 90       		.byte	0x90
 11990 0cc0 F6020000 		.4byte	0x2f6
 11991 0cc4 05       		.uleb128 0x5
 11992 0cc5 03       		.byte	0x3
 11993 0cc6 0C000000 		.4byte	data_packet_buffer.10467
 11994 0cca 19       		.uleb128 0x19
 11995 0ccb B80B0000 		.4byte	.LASF187
 11996 0ccf 01       		.byte	0x1
 11997 0cd0 91       		.byte	0x91
 11998 0cd1 72040000 		.4byte	0x472
 11999 0cd5 05       		.uleb128 0x5
 12000 0cd6 03       		.byte	0x3
 12001 0cd7 04000000 		.4byte	rx_queue.10468
 12002 0cdb 19       		.uleb128 0x19
 12003 0cdc 91010000 		.4byte	.LASF188
 12004 0ce0 01       		.byte	0x1
 12005 0ce1 94       		.byte	0x94
 12006 0ce2 81000000 		.4byte	0x81
 12007 0ce6 02       		.uleb128 0x2
 12008 0ce7 91       		.byte	0x91
 12009 0ce8 75       		.sleb128 -11
 12010 0ce9 19       		.uleb128 0x19
 12011 0cea D6060000 		.4byte	.LASF189
 12012 0cee 01       		.byte	0x1
 12013 0cef 95       		.byte	0x95
 12014 0cf0 81000000 		.4byte	0x81
 12015 0cf4 02       		.uleb128 0x2
 12016 0cf5 91       		.byte	0x91
 12017 0cf6 77       		.sleb128 -9
 12018 0cf7 19       		.uleb128 0x19
 12019 0cf8 1E080000 		.4byte	.LASF190
 12020 0cfc 01       		.byte	0x1
 12021 0cfd 96       		.byte	0x96
 12022 0cfe 81000000 		.4byte	0x81
 12023 0d02 02       		.uleb128 0x2
 12024 0d03 91       		.byte	0x91
 12025 0d04 76       		.sleb128 -10
 12026 0d05 00       		.byte	0
 12027 0d06 1A       		.uleb128 0x1a
 12028 0d07 E50F0000 		.4byte	.LASF197
 12029 0d0b 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 267


 12030 0d0c 0C01     		.2byte	0x10c
 12031 0d0e 00000000 		.4byte	.LFB67
 12032 0d12 60080000 		.4byte	.LFE67-.LFB67
 12033 0d16 01       		.uleb128 0x1
 12034 0d17 9C       		.byte	0x9c
 12035 0d18 A50D0000 		.4byte	0xda5
 12036 0d1c 1B       		.uleb128 0x1b
 12037 0d1d 4D070000 		.4byte	.LASF191
 12038 0d21 01       		.byte	0x1
 12039 0d22 0E01     		.2byte	0x10e
 12040 0d24 8D000000 		.4byte	0x8d
 12041 0d28 05       		.uleb128 0x5
 12042 0d29 03       		.byte	0x3
 12043 0d2a 00000000 		.4byte	counter_calibration.10484
 12044 0d2e 1B       		.uleb128 0x1b
 12045 0d2f FD0C0000 		.4byte	.LASF192
 12046 0d33 01       		.byte	0x1
 12047 0d34 0F01     		.2byte	0x10f
 12048 0d36 8D000000 		.4byte	0x8d
 12049 0d3a 05       		.uleb128 0x5
 12050 0d3b 03       		.byte	0x3
 12051 0d3c 02000000 		.4byte	counter_tension_func.10485
 12052 0d40 1B       		.uleb128 0x1b
 12053 0d41 A8010000 		.4byte	.LASF193
 12054 0d45 01       		.byte	0x1
 12055 0d46 1001     		.2byte	0x110
 12056 0d48 A50D0000 		.4byte	0xda5
 12057 0d4c 03       		.uleb128 0x3
 12058 0d4d 91       		.byte	0x91
 12059 0d4e A86C     		.sleb128 -2520
 12060 0d50 1B       		.uleb128 0x1b
 12061 0d51 E00C0000 		.4byte	.LASF194
 12062 0d55 01       		.byte	0x1
 12063 0d56 1201     		.2byte	0x112
 12064 0d58 81000000 		.4byte	0x81
 12065 0d5c 02       		.uleb128 0x2
 12066 0d5d 91       		.byte	0x91
 12067 0d5e 6E       		.sleb128 -18
 12068 0d5f 1B       		.uleb128 0x1b
 12069 0d60 450A0000 		.4byte	.LASF195
 12070 0d64 01       		.byte	0x1
 12071 0d65 1301     		.2byte	0x113
 12072 0d67 81000000 		.4byte	0x81
 12073 0d6b 02       		.uleb128 0x2
 12074 0d6c 91       		.byte	0x91
 12075 0d6d 6D       		.sleb128 -19
 12076 0d6e 1C       		.uleb128 0x1c
 12077 0d6f 8E010000 		.4byte	.LBB2
 12078 0d73 30010000 		.4byte	.LBE2-.LBB2
 12079 0d77 890D0000 		.4byte	0xd89
 12080 0d7b 1D       		.uleb128 0x1d
 12081 0d7c 6900     		.ascii	"i\000"
 12082 0d7e 01       		.byte	0x1
 12083 0d7f 4D01     		.2byte	0x14d
 12084 0d81 81000000 		.4byte	0x81
 12085 0d85 02       		.uleb128 0x2
 12086 0d86 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 268


 12087 0d87 6F       		.sleb128 -17
 12088 0d88 00       		.byte	0
 12089 0d89 1E       		.uleb128 0x1e
 12090 0d8a 38060000 		.4byte	.LBB3
 12091 0d8e 50000000 		.4byte	.LBE3-.LBB3
 12092 0d92 1B       		.uleb128 0x1b
 12093 0d93 92030000 		.4byte	.LASF196
 12094 0d97 01       		.byte	0x1
 12095 0d98 4402     		.2byte	0x244
 12096 0d9a B60D0000 		.4byte	0xdb6
 12097 0d9e 04       		.uleb128 0x4
 12098 0d9f 91       		.byte	0x91
 12099 0da0 90F77E   		.sleb128 -17520
 12100 0da3 00       		.byte	0
 12101 0da4 00       		.byte	0
 12102 0da5 07       		.uleb128 0x7
 12103 0da6 E3000000 		.4byte	0xe3
 12104 0daa B60D0000 		.4byte	0xdb6
 12105 0dae 1F       		.uleb128 0x1f
 12106 0daf 0E010000 		.4byte	0x10e
 12107 0db3 C309     		.2byte	0x9c3
 12108 0db5 00       		.byte	0
 12109 0db6 07       		.uleb128 0x7
 12110 0db7 E3000000 		.4byte	0xe3
 12111 0dbb C70D0000 		.4byte	0xdc7
 12112 0dbf 1F       		.uleb128 0x1f
 12113 0dc0 0E010000 		.4byte	0x10e
 12114 0dc4 973A     		.2byte	0x3a97
 12115 0dc6 00       		.byte	0
 12116 0dc7 1A       		.uleb128 0x1a
 12117 0dc8 F80F0000 		.4byte	.LASF198
 12118 0dcc 01       		.byte	0x1
 12119 0dcd 9802     		.2byte	0x298
 12120 0dcf 00000000 		.4byte	.LFB68
 12121 0dd3 C4050000 		.4byte	.LFE68-.LFB68
 12122 0dd7 01       		.uleb128 0x1
 12123 0dd8 9C       		.byte	0x9c
 12124 0dd9 7D0E0000 		.4byte	0xe7d
 12125 0ddd 20       		.uleb128 0x20
 12126 0dde D1080000 		.4byte	.LASF199
 12127 0de2 01       		.byte	0x1
 12128 0de3 9802     		.2byte	0x298
 12129 0de5 81000000 		.4byte	0x81
 12130 0de9 02       		.uleb128 0x2
 12131 0dea 91       		.byte	0x91
 12132 0deb 5F       		.sleb128 -33
 12133 0dec 20       		.uleb128 0x20
 12134 0ded 36070000 		.4byte	.LASF200
 12135 0df1 01       		.byte	0x1
 12136 0df2 9802     		.2byte	0x298
 12137 0df4 7D0E0000 		.4byte	0xe7d
 12138 0df8 02       		.uleb128 0x2
 12139 0df9 91       		.byte	0x91
 12140 0dfa 58       		.sleb128 -40
 12141 0dfb 20       		.uleb128 0x20
 12142 0dfc E3110000 		.4byte	.LASF201
 12143 0e00 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 269


 12144 0e01 9802     		.2byte	0x298
 12145 0e03 7D0E0000 		.4byte	0xe7d
 12146 0e07 02       		.uleb128 0x2
 12147 0e08 91       		.byte	0x91
 12148 0e09 54       		.sleb128 -44
 12149 0e0a 1B       		.uleb128 0x1b
 12150 0e0b A0050000 		.4byte	.LASF202
 12151 0e0f 01       		.byte	0x1
 12152 0e10 9A02     		.2byte	0x29a
 12153 0e12 BD000000 		.4byte	0xbd
 12154 0e16 02       		.uleb128 0x2
 12155 0e17 91       		.byte	0x91
 12156 0e18 74       		.sleb128 -12
 12157 0e19 1B       		.uleb128 0x1b
 12158 0e1a C4040000 		.4byte	.LASF203
 12159 0e1e 01       		.byte	0x1
 12160 0e1f 9B02     		.2byte	0x29b
 12161 0e21 BD000000 		.4byte	0xbd
 12162 0e25 02       		.uleb128 0x2
 12163 0e26 91       		.byte	0x91
 12164 0e27 68       		.sleb128 -24
 12165 0e28 1B       		.uleb128 0x1b
 12166 0e29 CE040000 		.4byte	.LASF204
 12167 0e2d 01       		.byte	0x1
 12168 0e2e 9B02     		.2byte	0x29b
 12169 0e30 BD000000 		.4byte	0xbd
 12170 0e34 02       		.uleb128 0x2
 12171 0e35 91       		.byte	0x91
 12172 0e36 64       		.sleb128 -28
 12173 0e37 1D       		.uleb128 0x1d
 12174 0e38 4D4F5400 		.ascii	"MOT\000"
 12175 0e3c 01       		.byte	0x1
 12176 0e3d 9C02     		.2byte	0x29c
 12177 0e3f 830E0000 		.4byte	0xe83
 12178 0e43 02       		.uleb128 0x2
 12179 0e44 91       		.byte	0x91
 12180 0e45 70       		.sleb128 -16
 12181 0e46 1B       		.uleb128 0x1b
 12182 0e47 AE110000 		.4byte	.LASF205
 12183 0e4b 01       		.byte	0x1
 12184 0e4c 9D02     		.2byte	0x29d
 12185 0e4e 81000000 		.4byte	0x81
 12186 0e52 02       		.uleb128 0x2
 12187 0e53 91       		.byte	0x91
 12188 0e54 6F       		.sleb128 -17
 12189 0e55 1B       		.uleb128 0x1b
 12190 0e56 AC0B0000 		.4byte	.LASF206
 12191 0e5a 01       		.byte	0x1
 12192 0e5b 9F02     		.2byte	0x29f
 12193 0e5d 3B070000 		.4byte	0x73b
 12194 0e61 05       		.uleb128 0x5
 12195 0e62 03       		.byte	0x3
 12196 0e63 8C000000 		.4byte	current_emg.10510
 12197 0e67 21       		.uleb128 0x21
 12198 0e68 00000000 		.4byte	.Ldebug_ranges0+0
 12199 0e6c 1B       		.uleb128 0x1b
 12200 0e6d F0000000 		.4byte	.LASF207
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 270


 12201 0e71 01       		.byte	0x1
 12202 0e72 C402     		.2byte	0x2c4
 12203 0e74 BD000000 		.4byte	0xbd
 12204 0e78 02       		.uleb128 0x2
 12205 0e79 91       		.byte	0x91
 12206 0e7a 60       		.sleb128 -32
 12207 0e7b 00       		.byte	0
 12208 0e7c 00       		.byte	0
 12209 0e7d 0C       		.uleb128 0xc
 12210 0e7e 04       		.byte	0x4
 12211 0e7f A5010000 		.4byte	0x1a5
 12212 0e83 0C       		.uleb128 0xc
 12213 0e84 04       		.byte	0x4
 12214 0e85 82040000 		.4byte	0x482
 12215 0e89 22       		.uleb128 0x22
 12216 0e8a F2100000 		.4byte	.LASF208
 12217 0e8e 01       		.byte	0x1
 12218 0e8f 7703     		.2byte	0x377
 12219 0e91 00000000 		.4byte	.LFB69
 12220 0e95 34030000 		.4byte	.LFE69-.LFB69
 12221 0e99 01       		.uleb128 0x1
 12222 0e9a 9C       		.byte	0x9c
 12223 0e9b 190F0000 		.4byte	0xf19
 12224 0e9f 20       		.uleb128 0x20
 12225 0ea0 D1080000 		.4byte	.LASF199
 12226 0ea4 01       		.byte	0x1
 12227 0ea5 7703     		.2byte	0x377
 12228 0ea7 81000000 		.4byte	0x81
 12229 0eab 02       		.uleb128 0x2
 12230 0eac 91       		.byte	0x91
 12231 0ead 67       		.sleb128 -25
 12232 0eae 20       		.uleb128 0x20
 12233 0eaf 36070000 		.4byte	.LASF200
 12234 0eb3 01       		.byte	0x1
 12235 0eb4 7703     		.2byte	0x377
 12236 0eb6 7D0E0000 		.4byte	0xe7d
 12237 0eba 02       		.uleb128 0x2
 12238 0ebb 91       		.byte	0x91
 12239 0ebc 60       		.sleb128 -32
 12240 0ebd 20       		.uleb128 0x20
 12241 0ebe E3110000 		.4byte	.LASF201
 12242 0ec2 01       		.byte	0x1
 12243 0ec3 7703     		.2byte	0x377
 12244 0ec5 7D0E0000 		.4byte	0xe7d
 12245 0ec9 02       		.uleb128 0x2
 12246 0eca 91       		.byte	0x91
 12247 0ecb 5C       		.sleb128 -36
 12248 0ecc 23       		.uleb128 0x23
 12249 0ecd 18000000 		.4byte	.Ldebug_ranges0+0x18
 12250 0ed1 F40E0000 		.4byte	0xef4
 12251 0ed5 1B       		.uleb128 0x1b
 12252 0ed6 F0000000 		.4byte	.LASF207
 12253 0eda 01       		.byte	0x1
 12254 0edb 7E03     		.2byte	0x37e
 12255 0edd BD000000 		.4byte	0xbd
 12256 0ee1 02       		.uleb128 0x2
 12257 0ee2 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 271


 12258 0ee3 74       		.sleb128 -12
 12259 0ee4 1B       		.uleb128 0x1b
 12260 0ee5 9C020000 		.4byte	.LASF209
 12261 0ee9 01       		.byte	0x1
 12262 0eea 7F03     		.2byte	0x37f
 12263 0eec BD000000 		.4byte	0xbd
 12264 0ef0 02       		.uleb128 0x2
 12265 0ef1 91       		.byte	0x91
 12266 0ef2 70       		.sleb128 -16
 12267 0ef3 00       		.byte	0
 12268 0ef4 21       		.uleb128 0x21
 12269 0ef5 30000000 		.4byte	.Ldebug_ranges0+0x30
 12270 0ef9 1B       		.uleb128 0x1b
 12271 0efa 1B0E0000 		.4byte	.LASF210
 12272 0efe 01       		.byte	0x1
 12273 0eff A403     		.2byte	0x3a4
 12274 0f01 BD000000 		.4byte	0xbd
 12275 0f05 02       		.uleb128 0x2
 12276 0f06 91       		.byte	0x91
 12277 0f07 6C       		.sleb128 -20
 12278 0f08 1B       		.uleb128 0x1b
 12279 0f09 800A0000 		.4byte	.LASF211
 12280 0f0d 01       		.byte	0x1
 12281 0f0e A503     		.2byte	0x3a5
 12282 0f10 BD000000 		.4byte	0xbd
 12283 0f14 02       		.uleb128 0x2
 12284 0f15 91       		.byte	0x91
 12285 0f16 68       		.sleb128 -24
 12286 0f17 00       		.byte	0
 12287 0f18 00       		.byte	0
 12288 0f19 1A       		.uleb128 0x1a
 12289 0f1a AC0A0000 		.4byte	.LASF212
 12290 0f1e 01       		.byte	0x1
 12291 0f1f D003     		.2byte	0x3d0
 12292 0f21 00000000 		.4byte	.LFB70
 12293 0f25 B0010000 		.4byte	.LFE70-.LFB70
 12294 0f29 01       		.uleb128 0x1
 12295 0f2a 9C       		.byte	0x9c
 12296 0f2b 8D0F0000 		.4byte	0xf8d
 12297 0f2f 20       		.uleb128 0x20
 12298 0f30 D1080000 		.4byte	.LASF199
 12299 0f34 01       		.byte	0x1
 12300 0f35 D003     		.2byte	0x3d0
 12301 0f37 81000000 		.4byte	0x81
 12302 0f3b 02       		.uleb128 0x2
 12303 0f3c 91       		.byte	0x91
 12304 0f3d 77       		.sleb128 -9
 12305 0f3e 20       		.uleb128 0x20
 12306 0f3f 36070000 		.4byte	.LASF200
 12307 0f43 01       		.byte	0x1
 12308 0f44 D003     		.2byte	0x3d0
 12309 0f46 7D0E0000 		.4byte	0xe7d
 12310 0f4a 02       		.uleb128 0x2
 12311 0f4b 91       		.byte	0x91
 12312 0f4c 70       		.sleb128 -16
 12313 0f4d 20       		.uleb128 0x20
 12314 0f4e E3110000 		.4byte	.LASF201
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 272


 12315 0f52 01       		.byte	0x1
 12316 0f53 D003     		.2byte	0x3d0
 12317 0f55 7D0E0000 		.4byte	0xe7d
 12318 0f59 02       		.uleb128 0x2
 12319 0f5a 91       		.byte	0x91
 12320 0f5b 6C       		.sleb128 -20
 12321 0f5c 20       		.uleb128 0x20
 12322 0f5d C4040000 		.4byte	.LASF203
 12323 0f61 01       		.byte	0x1
 12324 0f62 D103     		.2byte	0x3d1
 12325 0f64 BD000000 		.4byte	0xbd
 12326 0f68 02       		.uleb128 0x2
 12327 0f69 91       		.byte	0x91
 12328 0f6a 68       		.sleb128 -24
 12329 0f6b 20       		.uleb128 0x20
 12330 0f6c CE040000 		.4byte	.LASF204
 12331 0f70 01       		.byte	0x1
 12332 0f71 D103     		.2byte	0x3d1
 12333 0f73 BD000000 		.4byte	0xbd
 12334 0f77 02       		.uleb128 0x2
 12335 0f78 91       		.byte	0x91
 12336 0f79 00       		.sleb128 0
 12337 0f7a 1B       		.uleb128 0x1b
 12338 0f7b 1D0D0000 		.4byte	.LASF213
 12339 0f7f 01       		.byte	0x1
 12340 0f80 D403     		.2byte	0x3d4
 12341 0f82 81000000 		.4byte	0x81
 12342 0f86 05       		.uleb128 0x5
 12343 0f87 03       		.byte	0x3
 12344 0f88 8E000000 		.4byte	fsm_state.10547
 12345 0f8c 00       		.byte	0
 12346 0f8d 24       		.uleb128 0x24
 12347 0f8e 83060000 		.4byte	.LASF215
 12348 0f92 01       		.byte	0x1
 12349 0f93 0604     		.2byte	0x406
 12350 0f95 00000000 		.4byte	.LFB71
 12351 0f99 0C070000 		.4byte	.LFE71-.LFB71
 12352 0f9d 01       		.uleb128 0x1
 12353 0f9e 9C       		.byte	0x9c
 12354 0f9f 44110000 		.4byte	0x1144
 12355 0fa3 1B       		.uleb128 0x1b
 12356 0fa4 4B010000 		.4byte	.LASF216
 12357 0fa8 01       		.byte	0x1
 12358 0fa9 0804     		.2byte	0x408
 12359 0fab BD000000 		.4byte	0xbd
 12360 0faf 02       		.uleb128 0x2
 12361 0fb0 91       		.byte	0x91
 12362 0fb1 74       		.sleb128 -12
 12363 0fb2 1B       		.uleb128 0x1b
 12364 0fb3 9F0C0000 		.4byte	.LASF217
 12365 0fb7 01       		.byte	0x1
 12366 0fb8 0904     		.2byte	0x409
 12367 0fba BD000000 		.4byte	0xbd
 12368 0fbe 03       		.uleb128 0x3
 12369 0fbf 91       		.byte	0x91
 12370 0fc0 B07F     		.sleb128 -80
 12371 0fc2 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 273


 12372 0fc3 BF100000 		.4byte	.LASF218
 12373 0fc7 01       		.byte	0x1
 12374 0fc8 0A04     		.2byte	0x40a
 12375 0fca BD000000 		.4byte	0xbd
 12376 0fce 03       		.uleb128 0x3
 12377 0fcf 91       		.byte	0x91
 12378 0fd0 AC7F     		.sleb128 -84
 12379 0fd2 1B       		.uleb128 0x1b
 12380 0fd3 E30B0000 		.4byte	.LASF219
 12381 0fd7 01       		.byte	0x1
 12382 0fd8 0B04     		.2byte	0x40b
 12383 0fda BD000000 		.4byte	0xbd
 12384 0fde 02       		.uleb128 0x2
 12385 0fdf 91       		.byte	0x91
 12386 0fe0 70       		.sleb128 -16
 12387 0fe1 1B       		.uleb128 0x1b
 12388 0fe2 E00C0000 		.4byte	.LASF194
 12389 0fe6 01       		.byte	0x1
 12390 0fe7 0D04     		.2byte	0x40d
 12391 0fe9 81000000 		.4byte	0x81
 12392 0fed 02       		.uleb128 0x2
 12393 0fee 91       		.byte	0x91
 12394 0fef 6F       		.sleb128 -17
 12395 0ff0 1B       		.uleb128 0x1b
 12396 0ff1 30040000 		.4byte	.LASF220
 12397 0ff5 01       		.byte	0x1
 12398 0ff6 0F04     		.2byte	0x40f
 12399 0ff8 830E0000 		.4byte	0xe83
 12400 0ffc 02       		.uleb128 0x2
 12401 0ffd 91       		.byte	0x91
 12402 0ffe 68       		.sleb128 -24
 12403 0fff 1B       		.uleb128 0x1b
 12404 1000 A4030000 		.4byte	.LASF221
 12405 1004 01       		.byte	0x1
 12406 1005 1004     		.2byte	0x410
 12407 1007 81000000 		.4byte	0x81
 12408 100b 02       		.uleb128 0x2
 12409 100c 91       		.byte	0x91
 12410 100d 67       		.sleb128 -25
 12411 100e 1D       		.uleb128 0x1d
 12412 100f 6B5F7000 		.ascii	"k_p\000"
 12413 1013 01       		.byte	0x1
 12414 1014 1204     		.2byte	0x412
 12415 1016 BD000000 		.4byte	0xbd
 12416 101a 02       		.uleb128 0x2
 12417 101b 91       		.byte	0x91
 12418 101c 60       		.sleb128 -32
 12419 101d 1D       		.uleb128 0x1d
 12420 101e 6B5F6900 		.ascii	"k_i\000"
 12421 1022 01       		.byte	0x1
 12422 1023 1304     		.2byte	0x413
 12423 1025 BD000000 		.4byte	0xbd
 12424 1029 02       		.uleb128 0x2
 12425 102a 91       		.byte	0x91
 12426 102b 5C       		.sleb128 -36
 12427 102c 1D       		.uleb128 0x1d
 12428 102d 6B5F6400 		.ascii	"k_d\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 274


 12429 1031 01       		.byte	0x1
 12430 1032 1404     		.2byte	0x414
 12431 1034 BD000000 		.4byte	0xbd
 12432 1038 02       		.uleb128 0x2
 12433 1039 91       		.byte	0x91
 12434 103a 58       		.sleb128 -40
 12435 103b 1B       		.uleb128 0x1b
 12436 103c C60D0000 		.4byte	.LASF75
 12437 1040 01       		.byte	0x1
 12438 1041 1604     		.2byte	0x416
 12439 1043 BD000000 		.4byte	0xbd
 12440 1047 02       		.uleb128 0x2
 12441 1048 91       		.byte	0x91
 12442 1049 54       		.sleb128 -44
 12443 104a 1B       		.uleb128 0x1b
 12444 104b 2E060000 		.4byte	.LASF76
 12445 104f 01       		.byte	0x1
 12446 1050 1704     		.2byte	0x417
 12447 1052 BD000000 		.4byte	0xbd
 12448 1056 02       		.uleb128 0x2
 12449 1057 91       		.byte	0x91
 12450 1058 50       		.sleb128 -48
 12451 1059 1B       		.uleb128 0x1b
 12452 105a 16060000 		.4byte	.LASF77
 12453 105e 01       		.byte	0x1
 12454 105f 1804     		.2byte	0x418
 12455 1061 BD000000 		.4byte	0xbd
 12456 1065 02       		.uleb128 0x2
 12457 1066 91       		.byte	0x91
 12458 1067 4C       		.sleb128 -52
 12459 1068 1B       		.uleb128 0x1b
 12460 1069 98100000 		.4byte	.LASF78
 12461 106d 01       		.byte	0x1
 12462 106e 1A04     		.2byte	0x41a
 12463 1070 BD000000 		.4byte	0xbd
 12464 1074 02       		.uleb128 0x2
 12465 1075 91       		.byte	0x91
 12466 1076 48       		.sleb128 -56
 12467 1077 1B       		.uleb128 0x1b
 12468 1078 BF060000 		.4byte	.LASF79
 12469 107c 01       		.byte	0x1
 12470 107d 1B04     		.2byte	0x41b
 12471 107f BD000000 		.4byte	0xbd
 12472 1083 02       		.uleb128 0x2
 12473 1084 91       		.byte	0x91
 12474 1085 44       		.sleb128 -60
 12475 1086 1B       		.uleb128 0x1b
 12476 1087 A70F0000 		.4byte	.LASF80
 12477 108b 01       		.byte	0x1
 12478 108c 1C04     		.2byte	0x41c
 12479 108e BD000000 		.4byte	0xbd
 12480 1092 02       		.uleb128 0x2
 12481 1093 91       		.byte	0x91
 12482 1094 40       		.sleb128 -64
 12483 1095 1B       		.uleb128 0x1b
 12484 1096 CD060000 		.4byte	.LASF81
 12485 109a 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 275


 12486 109b 1E04     		.2byte	0x41e
 12487 109d BD000000 		.4byte	0xbd
 12488 10a1 03       		.uleb128 0x3
 12489 10a2 91       		.byte	0x91
 12490 10a3 BC7F     		.sleb128 -68
 12491 10a5 1B       		.uleb128 0x1b
 12492 10a6 15080000 		.4byte	.LASF82
 12493 10aa 01       		.byte	0x1
 12494 10ab 1F04     		.2byte	0x41f
 12495 10ad BD000000 		.4byte	0xbd
 12496 10b1 03       		.uleb128 0x3
 12497 10b2 91       		.byte	0x91
 12498 10b3 B87F     		.sleb128 -72
 12499 10b5 1B       		.uleb128 0x1b
 12500 10b6 E4120000 		.4byte	.LASF83
 12501 10ba 01       		.byte	0x1
 12502 10bb 2004     		.2byte	0x420
 12503 10bd BD000000 		.4byte	0xbd
 12504 10c1 03       		.uleb128 0x3
 12505 10c2 91       		.byte	0x91
 12506 10c3 B47F     		.sleb128 -76
 12507 10c5 1B       		.uleb128 0x1b
 12508 10c6 9A060000 		.4byte	.LASF222
 12509 10ca 01       		.byte	0x1
 12510 10cb 2404     		.2byte	0x424
 12511 10cd BD000000 		.4byte	0xbd
 12512 10d1 05       		.uleb128 0x5
 12513 10d2 03       		.byte	0x3
 12514 10d3 90000000 		.4byte	pos_error_sum.10574
 12515 10d7 1B       		.uleb128 0x1b
 12516 10d8 0C050000 		.4byte	.LASF223
 12517 10dc 01       		.byte	0x1
 12518 10dd 2504     		.2byte	0x425
 12519 10df BD000000 		.4byte	0xbd
 12520 10e3 05       		.uleb128 0x5
 12521 10e4 03       		.byte	0x3
 12522 10e5 9C000000 		.4byte	curr_error_sum.10575
 12523 10e9 1B       		.uleb128 0x1b
 12524 10ea 4E0C0000 		.4byte	.LASF224
 12525 10ee 01       		.byte	0x1
 12526 10ef 2704     		.2byte	0x427
 12527 10f1 BD000000 		.4byte	0xbd
 12528 10f5 05       		.uleb128 0x5
 12529 10f6 03       		.byte	0x3
 12530 10f7 94000000 		.4byte	prev_pos_err.10576
 12531 10fb 1B       		.uleb128 0x1b
 12532 10fc A50D0000 		.4byte	.LASF225
 12533 1100 01       		.byte	0x1
 12534 1101 2804     		.2byte	0x428
 12535 1103 BD000000 		.4byte	0xbd
 12536 1107 05       		.uleb128 0x5
 12537 1108 03       		.byte	0x3
 12538 1109 A0000000 		.4byte	prev_curr_err.10577
 12539 110d 1B       		.uleb128 0x1b
 12540 110e 0A100000 		.4byte	.LASF226
 12541 1112 01       		.byte	0x1
 12542 1113 2904     		.2byte	0x429
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 276


 12543 1115 BD000000 		.4byte	0xbd
 12544 1119 05       		.uleb128 0x5
 12545 111a 03       		.byte	0x3
 12546 111b A4000000 		.4byte	prev_pwm.10578
 12547 111f 1B       		.uleb128 0x1b
 12548 1120 34060000 		.4byte	.LASF227
 12549 1124 01       		.byte	0x1
 12550 1125 2B04     		.2byte	0x42b
 12551 1127 81000000 		.4byte	0x81
 12552 112b 05       		.uleb128 0x5
 12553 112c 03       		.byte	0x3
 12554 112d 98000000 		.4byte	motor_dir.10579
 12555 1131 1B       		.uleb128 0x1b
 12556 1132 F2060000 		.4byte	.LASF228
 12557 1136 01       		.byte	0x1
 12558 1137 2C04     		.2byte	0x42c
 12559 1139 99000000 		.4byte	0x99
 12560 113d 05       		.uleb128 0x5
 12561 113e 03       		.byte	0x3
 12562 113f A8000000 		.4byte	position_counter.10580
 12563 1143 00       		.byte	0
 12564 1144 1A       		.uleb128 0x1a
 12565 1145 E0050000 		.4byte	.LASF229
 12566 1149 01       		.byte	0x1
 12567 114a 3605     		.2byte	0x536
 12568 114c 00000000 		.4byte	.LFB72
 12569 1150 4C090000 		.4byte	.LFE72-.LFB72
 12570 1154 01       		.uleb128 0x1
 12571 1155 9C       		.byte	0x9c
 12572 1156 FB120000 		.4byte	0x12fb
 12573 115a 25       		.uleb128 0x25
 12574 115b 69647800 		.ascii	"idx\000"
 12575 115f 01       		.byte	0x1
 12576 1160 3605     		.2byte	0x536
 12577 1162 81000000 		.4byte	0x81
 12578 1166 03       		.uleb128 0x3
 12579 1167 91       		.byte	0x91
 12580 1168 AF7F     		.sleb128 -81
 12581 116a 1B       		.uleb128 0x1b
 12582 116b 4B010000 		.4byte	.LASF216
 12583 116f 01       		.byte	0x1
 12584 1170 3805     		.2byte	0x538
 12585 1172 BD000000 		.4byte	0xbd
 12586 1176 02       		.uleb128 0x2
 12587 1177 91       		.byte	0x91
 12588 1178 74       		.sleb128 -12
 12589 1179 1B       		.uleb128 0x1b
 12590 117a 9F0C0000 		.4byte	.LASF217
 12591 117e 01       		.byte	0x1
 12592 117f 3905     		.2byte	0x539
 12593 1181 BD000000 		.4byte	0xbd
 12594 1185 03       		.uleb128 0x3
 12595 1186 91       		.byte	0x91
 12596 1187 B47F     		.sleb128 -76
 12597 1189 1B       		.uleb128 0x1b
 12598 118a BF100000 		.4byte	.LASF218
 12599 118e 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 277


 12600 118f 3A05     		.2byte	0x53a
 12601 1191 BD000000 		.4byte	0xbd
 12602 1195 03       		.uleb128 0x3
 12603 1196 91       		.byte	0x91
 12604 1197 B07F     		.sleb128 -80
 12605 1199 1B       		.uleb128 0x1b
 12606 119a E30B0000 		.4byte	.LASF219
 12607 119e 01       		.byte	0x1
 12608 119f 3B05     		.2byte	0x53b
 12609 11a1 BD000000 		.4byte	0xbd
 12610 11a5 02       		.uleb128 0x2
 12611 11a6 91       		.byte	0x91
 12612 11a7 70       		.sleb128 -16
 12613 11a8 1D       		.uleb128 0x1d
 12614 11a9 4D4F5400 		.ascii	"MOT\000"
 12615 11ad 01       		.byte	0x1
 12616 11ae 3D05     		.2byte	0x53d
 12617 11b0 830E0000 		.4byte	0xe83
 12618 11b4 02       		.uleb128 0x2
 12619 11b5 91       		.byte	0x91
 12620 11b6 6C       		.sleb128 -20
 12621 11b7 1B       		.uleb128 0x1b
 12622 11b8 AE110000 		.4byte	.LASF205
 12623 11bc 01       		.byte	0x1
 12624 11bd 3E05     		.2byte	0x53e
 12625 11bf 81000000 		.4byte	0x81
 12626 11c3 02       		.uleb128 0x2
 12627 11c4 91       		.byte	0x91
 12628 11c5 6B       		.sleb128 -21
 12629 11c6 1D       		.uleb128 0x1d
 12630 11c7 6B5F7000 		.ascii	"k_p\000"
 12631 11cb 01       		.byte	0x1
 12632 11cc 4005     		.2byte	0x540
 12633 11ce BD000000 		.4byte	0xbd
 12634 11d2 02       		.uleb128 0x2
 12635 11d3 91       		.byte	0x91
 12636 11d4 64       		.sleb128 -28
 12637 11d5 1D       		.uleb128 0x1d
 12638 11d6 6B5F6900 		.ascii	"k_i\000"
 12639 11da 01       		.byte	0x1
 12640 11db 4105     		.2byte	0x541
 12641 11dd BD000000 		.4byte	0xbd
 12642 11e1 02       		.uleb128 0x2
 12643 11e2 91       		.byte	0x91
 12644 11e3 60       		.sleb128 -32
 12645 11e4 1D       		.uleb128 0x1d
 12646 11e5 6B5F6400 		.ascii	"k_d\000"
 12647 11e9 01       		.byte	0x1
 12648 11ea 4205     		.2byte	0x542
 12649 11ec BD000000 		.4byte	0xbd
 12650 11f0 02       		.uleb128 0x2
 12651 11f1 91       		.byte	0x91
 12652 11f2 5C       		.sleb128 -36
 12653 11f3 1B       		.uleb128 0x1b
 12654 11f4 C60D0000 		.4byte	.LASF75
 12655 11f8 01       		.byte	0x1
 12656 11f9 4405     		.2byte	0x544
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 278


 12657 11fb BD000000 		.4byte	0xbd
 12658 11ff 02       		.uleb128 0x2
 12659 1200 91       		.byte	0x91
 12660 1201 58       		.sleb128 -40
 12661 1202 1B       		.uleb128 0x1b
 12662 1203 2E060000 		.4byte	.LASF76
 12663 1207 01       		.byte	0x1
 12664 1208 4505     		.2byte	0x545
 12665 120a BD000000 		.4byte	0xbd
 12666 120e 02       		.uleb128 0x2
 12667 120f 91       		.byte	0x91
 12668 1210 54       		.sleb128 -44
 12669 1211 1B       		.uleb128 0x1b
 12670 1212 16060000 		.4byte	.LASF77
 12671 1216 01       		.byte	0x1
 12672 1217 4605     		.2byte	0x546
 12673 1219 BD000000 		.4byte	0xbd
 12674 121d 02       		.uleb128 0x2
 12675 121e 91       		.byte	0x91
 12676 121f 50       		.sleb128 -48
 12677 1220 1B       		.uleb128 0x1b
 12678 1221 98100000 		.4byte	.LASF78
 12679 1225 01       		.byte	0x1
 12680 1226 4805     		.2byte	0x548
 12681 1228 BD000000 		.4byte	0xbd
 12682 122c 02       		.uleb128 0x2
 12683 122d 91       		.byte	0x91
 12684 122e 4C       		.sleb128 -52
 12685 122f 1B       		.uleb128 0x1b
 12686 1230 BF060000 		.4byte	.LASF79
 12687 1234 01       		.byte	0x1
 12688 1235 4905     		.2byte	0x549
 12689 1237 BD000000 		.4byte	0xbd
 12690 123b 02       		.uleb128 0x2
 12691 123c 91       		.byte	0x91
 12692 123d 48       		.sleb128 -56
 12693 123e 1B       		.uleb128 0x1b
 12694 123f A70F0000 		.4byte	.LASF80
 12695 1243 01       		.byte	0x1
 12696 1244 4A05     		.2byte	0x54a
 12697 1246 BD000000 		.4byte	0xbd
 12698 124a 02       		.uleb128 0x2
 12699 124b 91       		.byte	0x91
 12700 124c 44       		.sleb128 -60
 12701 124d 1B       		.uleb128 0x1b
 12702 124e CD060000 		.4byte	.LASF81
 12703 1252 01       		.byte	0x1
 12704 1253 4C05     		.2byte	0x54c
 12705 1255 BD000000 		.4byte	0xbd
 12706 1259 02       		.uleb128 0x2
 12707 125a 91       		.byte	0x91
 12708 125b 40       		.sleb128 -64
 12709 125c 1B       		.uleb128 0x1b
 12710 125d 15080000 		.4byte	.LASF82
 12711 1261 01       		.byte	0x1
 12712 1262 4D05     		.2byte	0x54d
 12713 1264 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 279


 12714 1268 03       		.uleb128 0x3
 12715 1269 91       		.byte	0x91
 12716 126a BC7F     		.sleb128 -68
 12717 126c 1B       		.uleb128 0x1b
 12718 126d E4120000 		.4byte	.LASF83
 12719 1271 01       		.byte	0x1
 12720 1272 4E05     		.2byte	0x54e
 12721 1274 BD000000 		.4byte	0xbd
 12722 1278 03       		.uleb128 0x3
 12723 1279 91       		.byte	0x91
 12724 127a B87F     		.sleb128 -72
 12725 127c 1B       		.uleb128 0x1b
 12726 127d 9A060000 		.4byte	.LASF222
 12727 1281 01       		.byte	0x1
 12728 1282 5205     		.2byte	0x552
 12729 1284 94020000 		.4byte	0x294
 12730 1288 05       		.uleb128 0x5
 12731 1289 03       		.byte	0x3
 12732 128a AC000000 		.4byte	pos_error_sum.10607
 12733 128e 1B       		.uleb128 0x1b
 12734 128f 0C050000 		.4byte	.LASF223
 12735 1293 01       		.byte	0x1
 12736 1294 5305     		.2byte	0x553
 12737 1296 94020000 		.4byte	0x294
 12738 129a 05       		.uleb128 0x5
 12739 129b 03       		.byte	0x3
 12740 129c C0000000 		.4byte	curr_error_sum.10608
 12741 12a0 1B       		.uleb128 0x1b
 12742 12a1 4E0C0000 		.4byte	.LASF224
 12743 12a5 01       		.byte	0x1
 12744 12a6 5505     		.2byte	0x555
 12745 12a8 94020000 		.4byte	0x294
 12746 12ac 05       		.uleb128 0x5
 12747 12ad 03       		.byte	0x3
 12748 12ae B4000000 		.4byte	prev_pos_err.10609
 12749 12b2 1B       		.uleb128 0x1b
 12750 12b3 A50D0000 		.4byte	.LASF225
 12751 12b7 01       		.byte	0x1
 12752 12b8 5605     		.2byte	0x556
 12753 12ba 94020000 		.4byte	0x294
 12754 12be 05       		.uleb128 0x5
 12755 12bf 03       		.byte	0x3
 12756 12c0 C8000000 		.4byte	prev_curr_err.10610
 12757 12c4 1B       		.uleb128 0x1b
 12758 12c5 0A100000 		.4byte	.LASF226
 12759 12c9 01       		.byte	0x1
 12760 12ca 5705     		.2byte	0x557
 12761 12cc 94020000 		.4byte	0x294
 12762 12d0 05       		.uleb128 0x5
 12763 12d1 03       		.byte	0x3
 12764 12d2 D0000000 		.4byte	prev_pwm.10611
 12765 12d6 1B       		.uleb128 0x1b
 12766 12d7 34060000 		.4byte	.LASF227
 12767 12db 01       		.byte	0x1
 12768 12dc 5905     		.2byte	0x559
 12769 12de 3B070000 		.4byte	0x73b
 12770 12e2 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 280


 12771 12e3 03       		.byte	0x3
 12772 12e4 BC000000 		.4byte	motor_dir.10612
 12773 12e8 1B       		.uleb128 0x1b
 12774 12e9 F2060000 		.4byte	.LASF228
 12775 12ed 01       		.byte	0x1
 12776 12ee 5A05     		.2byte	0x55a
 12777 12f0 A3030000 		.4byte	0x3a3
 12778 12f4 05       		.uleb128 0x5
 12779 12f5 03       		.byte	0x3
 12780 12f6 D8000000 		.4byte	position_counter.10613
 12781 12fa 00       		.byte	0
 12782 12fb 1A       		.uleb128 0x1a
 12783 12fc 4E040000 		.4byte	.LASF230
 12784 1300 01       		.byte	0x1
 12785 1301 B306     		.2byte	0x6b3
 12786 1303 00000000 		.4byte	.LFB73
 12787 1307 14080000 		.4byte	.LFE73-.LFB73
 12788 130b 01       		.uleb128 0x1
 12789 130c 9C       		.byte	0x9c
 12790 130d 83140000 		.4byte	0x1483
 12791 1311 20       		.uleb128 0x20
 12792 1312 C6000000 		.4byte	.LASF231
 12793 1316 01       		.byte	0x1
 12794 1317 B306     		.2byte	0x6b3
 12795 1319 81000000 		.4byte	0x81
 12796 131d 03       		.uleb128 0x3
 12797 131e 91       		.byte	0x91
 12798 131f BF7F     		.sleb128 -65
 12799 1321 20       		.uleb128 0x20
 12800 1322 CF0B0000 		.4byte	.LASF232
 12801 1326 01       		.byte	0x1
 12802 1327 B306     		.2byte	0x6b3
 12803 1329 81000000 		.4byte	0x81
 12804 132d 03       		.uleb128 0x3
 12805 132e 91       		.byte	0x91
 12806 132f BE7F     		.sleb128 -66
 12807 1331 1B       		.uleb128 0x1b
 12808 1332 D0070000 		.4byte	.LASF233
 12809 1336 01       		.byte	0x1
 12810 1337 B506     		.2byte	0x6b5
 12811 1339 81000000 		.4byte	0x81
 12812 133d 02       		.uleb128 0x2
 12813 133e 91       		.byte	0x91
 12814 133f 67       		.sleb128 -25
 12815 1340 1D       		.uleb128 0x1d
 12816 1341 6A6A00   		.ascii	"jj\000"
 12817 1344 01       		.byte	0x1
 12818 1345 B806     		.2byte	0x6b8
 12819 1347 81000000 		.4byte	0x81
 12820 134b 02       		.uleb128 0x2
 12821 134c 91       		.byte	0x91
 12822 134d 66       		.sleb128 -26
 12823 134e 1B       		.uleb128 0x1b
 12824 134f 18040000 		.4byte	.LASF234
 12825 1353 01       		.byte	0x1
 12826 1354 BA06     		.2byte	0x6ba
 12827 1356 83140000 		.4byte	0x1483
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 281


 12828 135a 02       		.uleb128 0x2
 12829 135b 91       		.byte	0x91
 12830 135c 40       		.sleb128 -64
 12831 135d 1B       		.uleb128 0x1b
 12832 135e 1F110000 		.4byte	.LASF235
 12833 1362 01       		.byte	0x1
 12834 1363 BB06     		.2byte	0x6bb
 12835 1365 B1000000 		.4byte	0xb1
 12836 1369 02       		.uleb128 0x2
 12837 136a 91       		.byte	0x91
 12838 136b 64       		.sleb128 -28
 12839 136c 1B       		.uleb128 0x1b
 12840 136d 900D0000 		.4byte	.LASF236
 12841 1371 01       		.byte	0x1
 12842 1372 BC06     		.2byte	0x6bc
 12843 1374 BD000000 		.4byte	0xbd
 12844 1378 02       		.uleb128 0x2
 12845 1379 91       		.byte	0x91
 12846 137a 54       		.sleb128 -44
 12847 137b 1B       		.uleb128 0x1b
 12848 137c AE0F0000 		.4byte	.LASF237
 12849 1380 01       		.byte	0x1
 12850 1381 BD06     		.2byte	0x6bd
 12851 1383 BD000000 		.4byte	0xbd
 12852 1387 02       		.uleb128 0x2
 12853 1388 91       		.byte	0x91
 12854 1389 60       		.sleb128 -32
 12855 138a 1B       		.uleb128 0x1b
 12856 138b 55050000 		.4byte	.LASF238
 12857 138f 01       		.byte	0x1
 12858 1390 BE06     		.2byte	0x6be
 12859 1392 BD000000 		.4byte	0xbd
 12860 1396 02       		.uleb128 0x2
 12861 1397 91       		.byte	0x91
 12862 1398 4C       		.sleb128 -52
 12863 1399 1B       		.uleb128 0x1b
 12864 139a 890F0000 		.4byte	.LASF239
 12865 139e 01       		.byte	0x1
 12866 139f BF06     		.2byte	0x6bf
 12867 13a1 BD000000 		.4byte	0xbd
 12868 13a5 02       		.uleb128 0x2
 12869 13a6 91       		.byte	0x91
 12870 13a7 50       		.sleb128 -48
 12871 13a8 1B       		.uleb128 0x1b
 12872 13a9 5B0C0000 		.4byte	.LASF240
 12873 13ad 01       		.byte	0x1
 12874 13ae C006     		.2byte	0x6c0
 12875 13b0 A5000000 		.4byte	0xa5
 12876 13b4 02       		.uleb128 0x2
 12877 13b5 91       		.byte	0x91
 12878 13b6 5F       		.sleb128 -33
 12879 13b7 1B       		.uleb128 0x1b
 12880 13b8 EA0C0000 		.4byte	.LASF241
 12881 13bc 01       		.byte	0x1
 12882 13bd C206     		.2byte	0x6c2
 12883 13bf 93140000 		.4byte	0x1493
 12884 13c3 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 282


 12885 13c4 03       		.byte	0x3
 12886 13c5 E0000000 		.4byte	last_value_encoder.10636
 12887 13c9 1B       		.uleb128 0x1b
 12888 13ca 84070000 		.4byte	.LASF242
 12889 13ce 01       		.byte	0x1
 12890 13cf C306     		.2byte	0x6c3
 12891 13d1 93140000 		.4byte	0x1493
 12892 13d5 05       		.uleb128 0x5
 12893 13d6 03       		.byte	0x3
 12894 13d7 F8000000 		.4byte	comp_value_encoder.10637
 12895 13db 1B       		.uleb128 0x1b
 12896 13dc 62040000 		.4byte	.LASF243
 12897 13e0 01       		.byte	0x1
 12898 13e1 C406     		.2byte	0x6c4
 12899 13e3 A9140000 		.4byte	0x14a9
 12900 13e7 05       		.uleb128 0x5
 12901 13e8 03       		.byte	0x3
 12902 13e9 10010000 		.4byte	error.10638
 12903 13ed 1B       		.uleb128 0x1b
 12904 13ee 670F0000 		.4byte	.LASF244
 12905 13f2 01       		.byte	0x1
 12906 13f3 C606     		.2byte	0x6c6
 12907 13f5 3B070000 		.4byte	0x73b
 12908 13f9 05       		.uleb128 0x5
 12909 13fa 03       		.byte	0x3
 12910 13fb 04000000 		.4byte	only_first_time.10639
 12911 13ff 1B       		.uleb128 0x1b
 12912 1400 D3030000 		.4byte	.LASF245
 12913 1404 01       		.byte	0x1
 12914 1405 C706     		.2byte	0x6c7
 12915 1407 3B070000 		.4byte	0x73b
 12916 140b 05       		.uleb128 0x5
 12917 140c 03       		.byte	0x3
 12918 140d 64010000 		.4byte	safe_startup_motor_activation.10640
 12919 1411 1B       		.uleb128 0x1b
 12920 1412 98000000 		.4byte	.LASF246
 12921 1416 01       		.byte	0x1
 12922 1417 C806     		.2byte	0x6c8
 12923 1419 3B070000 		.4byte	0x73b
 12924 141d 05       		.uleb128 0x5
 12925 141e 03       		.byte	0x3
 12926 141f 60010000 		.4byte	one_time_execute.10641
 12927 1423 1B       		.uleb128 0x1b
 12928 1424 ED0A0000 		.4byte	.LASF247
 12929 1428 01       		.byte	0x1
 12930 1429 C906     		.2byte	0x6c9
 12931 142b A3030000 		.4byte	0x3a3
 12932 142f 05       		.uleb128 0x5
 12933 1430 03       		.byte	0x3
 12934 1431 68010000 		.4byte	count_startup_motor.10642
 12935 1435 1B       		.uleb128 0x1b
 12936 1436 0E0A0000 		.4byte	.LASF248
 12937 143a 01       		.byte	0x1
 12938 143b CB06     		.2byte	0x6cb
 12939 143d 93140000 		.4byte	0x1493
 12940 1441 05       		.uleb128 0x5
 12941 1442 03       		.byte	0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 283


 12942 1443 18010000 		.4byte	v_value.10643
 12943 1447 1B       		.uleb128 0x1b
 12944 1448 DB120000 		.4byte	.LASF249
 12945 144c 01       		.byte	0x1
 12946 144d CC06     		.2byte	0x6cc
 12947 144f 93140000 		.4byte	0x1493
 12948 1453 05       		.uleb128 0x5
 12949 1454 03       		.byte	0x3
 12950 1455 30010000 		.4byte	vv_value.10644
 12951 1459 1B       		.uleb128 0x1b
 12952 145a 99010000 		.4byte	.LASF250
 12953 145e 01       		.byte	0x1
 12954 145f CD06     		.2byte	0x6cd
 12955 1461 93140000 		.4byte	0x1493
 12956 1465 05       		.uleb128 0x5
 12957 1466 03       		.byte	0x3
 12958 1467 48010000 		.4byte	vvv_value.10645
 12959 146b 1E       		.uleb128 0x1e
 12960 146c 98000000 		.4byte	.LBB10
 12961 1470 6A000000 		.4byte	.LBE10-.LBB10
 12962 1474 1D       		.uleb128 0x1d
 12963 1475 6A00     		.ascii	"j\000"
 12964 1477 01       		.byte	0x1
 12965 1478 DD06     		.2byte	0x6dd
 12966 147a 68000000 		.4byte	0x68
 12967 147e 02       		.uleb128 0x2
 12968 147f 91       		.byte	0x91
 12969 1480 58       		.sleb128 -40
 12970 1481 00       		.byte	0
 12971 1482 00       		.byte	0
 12972 1483 07       		.uleb128 0x7
 12973 1484 99000000 		.4byte	0x99
 12974 1488 93140000 		.4byte	0x1493
 12975 148c 08       		.uleb128 0x8
 12976 148d 0E010000 		.4byte	0x10e
 12977 1491 02       		.byte	0x2
 12978 1492 00       		.byte	0
 12979 1493 07       		.uleb128 0x7
 12980 1494 BD000000 		.4byte	0xbd
 12981 1498 A9140000 		.4byte	0x14a9
 12982 149c 08       		.uleb128 0x8
 12983 149d 0E010000 		.4byte	0x10e
 12984 14a1 01       		.byte	0x1
 12985 14a2 08       		.uleb128 0x8
 12986 14a3 0E010000 		.4byte	0x10e
 12987 14a7 02       		.byte	0x2
 12988 14a8 00       		.byte	0
 12989 14a9 07       		.uleb128 0x7
 12990 14aa 81000000 		.4byte	0x81
 12991 14ae BF140000 		.4byte	0x14bf
 12992 14b2 08       		.uleb128 0x8
 12993 14b3 0E010000 		.4byte	0x10e
 12994 14b7 01       		.byte	0x1
 12995 14b8 08       		.uleb128 0x8
 12996 14b9 0E010000 		.4byte	0x10e
 12997 14bd 02       		.byte	0x2
 12998 14be 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 284


 12999 14bf 24       		.uleb128 0x24
 13000 14c0 640E0000 		.4byte	.LASF251
 13001 14c4 01       		.byte	0x1
 13002 14c5 9007     		.2byte	0x790
 13003 14c7 00000000 		.4byte	.LFB74
 13004 14cb 54120000 		.4byte	.LFE74-.LFB74
 13005 14cf 01       		.uleb128 0x1
 13006 14d0 9C       		.byte	0x9c
 13007 14d1 AB150000 		.4byte	0x15ab
 13008 14d5 1B       		.uleb128 0x1b
 13009 14d6 040E0000 		.4byte	.LASF252
 13010 14da 01       		.byte	0x1
 13011 14db A407     		.2byte	0x7a4
 13012 14dd BD000000 		.4byte	0xbd
 13013 14e1 02       		.uleb128 0x2
 13014 14e2 91       		.byte	0x91
 13015 14e3 64       		.sleb128 -28
 13016 14e4 1B       		.uleb128 0x1b
 13017 14e5 4B0F0000 		.4byte	.LASF253
 13018 14e9 01       		.byte	0x1
 13019 14ea A607     		.2byte	0x7a6
 13020 14ec 8D000000 		.4byte	0x8d
 13021 14f0 05       		.uleb128 0x5
 13022 14f1 03       		.byte	0x3
 13023 14f2 78010000 		.4byte	emg_counter_1.10662
 13024 14f6 1B       		.uleb128 0x1b
 13025 14f7 590F0000 		.4byte	.LASF254
 13026 14fb 01       		.byte	0x1
 13027 14fc A707     		.2byte	0x7a7
 13028 14fe 8D000000 		.4byte	0x8d
 13029 1502 05       		.uleb128 0x5
 13030 1503 03       		.byte	0x3
 13031 1504 7A010000 		.4byte	emg_counter_2.10663
 13032 1508 1B       		.uleb128 0x1b
 13033 1509 02030000 		.4byte	.LASF255
 13034 150d 01       		.byte	0x1
 13035 150e A807     		.2byte	0x7a8
 13036 1510 8D000000 		.4byte	0x8d
 13037 1514 05       		.uleb128 0x5
 13038 1515 03       		.byte	0x3
 13039 1516 80010000 		.4byte	UD_counter.10664
 13040 151a 1B       		.uleb128 0x1b
 13041 151b 72040000 		.4byte	.LASF256
 13042 151f 01       		.byte	0x1
 13043 1520 A907     		.2byte	0x7a9
 13044 1522 8D000000 		.4byte	0x8d
 13045 1526 05       		.uleb128 0x5
 13046 1527 03       		.byte	0x3
 13047 1528 88010000 		.4byte	LR_counter.10665
 13048 152c 1B       		.uleb128 0x1b
 13049 152d C10B0000 		.4byte	.LASF257
 13050 1531 01       		.byte	0x1
 13051 1532 AA07     		.2byte	0x7aa
 13052 1534 BD000000 		.4byte	0xbd
 13053 1538 05       		.uleb128 0x5
 13054 1539 03       		.byte	0x3
 13055 153a 7C010000 		.4byte	UD_mean_value.10666
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 285


 13056 153e 1B       		.uleb128 0x1b
 13057 153f 34120000 		.4byte	.LASF258
 13058 1543 01       		.byte	0x1
 13059 1544 AB07     		.2byte	0x7ab
 13060 1546 BD000000 		.4byte	0xbd
 13061 154a 05       		.uleb128 0x5
 13062 154b 03       		.byte	0x3
 13063 154c 84010000 		.4byte	LR_mean_value.10667
 13064 1550 1B       		.uleb128 0x1b
 13065 1551 5B030000 		.4byte	.LASF259
 13066 1555 01       		.byte	0x1
 13067 1556 AC07     		.2byte	0x7ac
 13068 1558 81000000 		.4byte	0x81
 13069 155c 05       		.uleb128 0x5
 13070 155d 03       		.byte	0x3
 13071 155e 0C000000 		.4byte	first_tension_valid.10668
 13072 1562 1B       		.uleb128 0x1b
 13073 1563 B2050000 		.4byte	.LASF260
 13074 1567 01       		.byte	0x1
 13075 1568 AD07     		.2byte	0x7ad
 13076 156a BD000000 		.4byte	0xbd
 13077 156e 05       		.uleb128 0x5
 13078 156f 03       		.byte	0x3
 13079 1570 08000000 		.4byte	detect_power_cycle_prev.10669
 13080 1574 1B       		.uleb128 0x1b
 13081 1575 1E0B0000 		.4byte	.LASF261
 13082 1579 01       		.byte	0x1
 13083 157a AE07     		.2byte	0x7ae
 13084 157c 8D000000 		.4byte	0x8d
 13085 1580 05       		.uleb128 0x5
 13086 1581 03       		.byte	0x3
 13087 1582 70010000 		.4byte	count.10670
 13088 1586 1B       		.uleb128 0x1b
 13089 1587 89010000 		.4byte	.LASF262
 13090 158b 01       		.byte	0x1
 13091 158c AF07     		.2byte	0x7af
 13092 158e 99000000 		.4byte	0x99
 13093 1592 05       		.uleb128 0x5
 13094 1593 03       		.byte	0x3
 13095 1594 74010000 		.4byte	v_count.10671
 13096 1598 1D       		.uleb128 0x1d
 13097 1599 69647800 		.ascii	"idx\000"
 13098 159d 01       		.byte	0x1
 13099 159e B007     		.2byte	0x7b0
 13100 15a0 81000000 		.4byte	0x81
 13101 15a4 05       		.uleb128 0x5
 13102 15a5 03       		.byte	0x3
 13103 15a6 72010000 		.4byte	idx.10672
 13104 15aa 00       		.byte	0
 13105 15ab 26       		.uleb128 0x26
 13106 15ac 2F0E0000 		.4byte	.LASF263
 13107 15b0 01       		.byte	0x1
 13108 15b1 130A     		.2byte	0xa13
 13109 15b3 00000000 		.4byte	.LFB75
 13110 15b7 04010000 		.4byte	.LFE75-.LFB75
 13111 15bb 01       		.uleb128 0x1
 13112 15bc 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 286


 13113 15bd F2150000 		.4byte	0x15f2
 13114 15c1 1E       		.uleb128 0x1e
 13115 15c2 06000000 		.4byte	.LBB11
 13116 15c6 DE000000 		.4byte	.LBE11-.LBB11
 13117 15ca 1D       		.uleb128 0x1d
 13118 15cb 6900     		.ascii	"i\000"
 13119 15cd 01       		.byte	0x1
 13120 15ce 150A     		.2byte	0xa15
 13121 15d0 81000000 		.4byte	0x81
 13122 15d4 02       		.uleb128 0x2
 13123 15d5 91       		.byte	0x91
 13124 15d6 77       		.sleb128 -9
 13125 15d7 1E       		.uleb128 0x1e
 13126 15d8 24000000 		.4byte	.LBB12
 13127 15dc B4000000 		.4byte	.LBE12-.LBB12
 13128 15e0 1B       		.uleb128 0x1b
 13129 15e1 0B090000 		.4byte	.LASF40
 13130 15e5 01       		.byte	0x1
 13131 15e6 170A     		.2byte	0xa17
 13132 15e8 BD000000 		.4byte	0xbd
 13133 15ec 02       		.uleb128 0x2
 13134 15ed 91       		.byte	0x91
 13135 15ee 70       		.sleb128 -16
 13136 15ef 00       		.byte	0
 13137 15f0 00       		.byte	0
 13138 15f1 00       		.byte	0
 13139 15f2 1A       		.uleb128 0x1a
 13140 15f3 8D040000 		.4byte	.LASF264
 13141 15f7 01       		.byte	0x1
 13142 15f8 350A     		.2byte	0xa35
 13143 15fa 00000000 		.4byte	.LFB76
 13144 15fe D8000000 		.4byte	.LFE76-.LFB76
 13145 1602 01       		.uleb128 0x1
 13146 1603 9C       		.byte	0x9c
 13147 1604 36160000 		.4byte	0x1636
 13148 1608 20       		.uleb128 0x20
 13149 1609 640C0000 		.4byte	.LASF265
 13150 160d 01       		.byte	0x1
 13151 160e 350A     		.2byte	0xa35
 13152 1610 81000000 		.4byte	0x81
 13153 1614 02       		.uleb128 0x2
 13154 1615 91       		.byte	0x91
 13155 1616 67       		.sleb128 -25
 13156 1617 1B       		.uleb128 0x1b
 13157 1618 D40C0000 		.4byte	.LASF266
 13158 161c 01       		.byte	0x1
 13159 161d 370A     		.2byte	0xa37
 13160 161f 8D000000 		.4byte	0x8d
 13161 1623 02       		.uleb128 0x2
 13162 1624 91       		.byte	0x91
 13163 1625 6E       		.sleb128 -18
 13164 1626 1B       		.uleb128 0x1b
 13165 1627 B5080000 		.4byte	.LASF267
 13166 162b 01       		.byte	0x1
 13167 162c 380A     		.2byte	0xa38
 13168 162e 8D000000 		.4byte	0x8d
 13169 1632 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 287


 13170 1633 91       		.byte	0x91
 13171 1634 6C       		.sleb128 -20
 13172 1635 00       		.byte	0
 13173 1636 24       		.uleb128 0x24
 13174 1637 32090000 		.4byte	.LASF268
 13175 163b 01       		.byte	0x1
 13176 163c 4F0A     		.2byte	0xa4f
 13177 163e 00000000 		.4byte	.LFB77
 13178 1642 58060000 		.4byte	.LFE77-.LFB77
 13179 1646 01       		.uleb128 0x1
 13180 1647 9C       		.byte	0x9c
 13181 1648 CE170000 		.4byte	0x17ce
 13182 164c 1B       		.uleb128 0x1b
 13183 164d 26000000 		.4byte	.LASF269
 13184 1651 01       		.byte	0x1
 13185 1652 500A     		.2byte	0xa50
 13186 1654 81000000 		.4byte	0x81
 13187 1658 05       		.uleb128 0x5
 13188 1659 03       		.byte	0x3
 13189 165a 8A010000 		.4byte	pos_cycle_status.10742
 13190 165e 1B       		.uleb128 0x1b
 13191 165f 960E0000 		.4byte	.LASF270
 13192 1663 01       		.byte	0x1
 13193 1664 510A     		.2byte	0xa51
 13194 1666 3B070000 		.4byte	0x73b
 13195 166a 05       		.uleb128 0x5
 13196 166b 03       		.byte	0x3
 13197 166c 94010000 		.4byte	emg_cycle_status.10743
 13198 1670 1B       		.uleb128 0x1b
 13199 1671 5F0D0000 		.4byte	.LASF271
 13200 1675 01       		.byte	0x1
 13201 1676 520A     		.2byte	0xa52
 13202 1678 3B070000 		.4byte	0x73b
 13203 167c 05       		.uleb128 0x5
 13204 167d 03       		.byte	0x3
 13205 167e 98010000 		.4byte	motion_status.10744
 13206 1682 1B       		.uleb128 0x1b
 13207 1683 300B0000 		.4byte	.LASF272
 13208 1687 01       		.byte	0x1
 13209 1688 530A     		.2byte	0xa53
 13210 168a 3B070000 		.4byte	0x73b
 13211 168e 05       		.uleb128 0x5
 13212 168f 03       		.byte	0x3
 13213 1690 A4010000 		.4byte	emg_excess_status.10745
 13214 1694 1B       		.uleb128 0x1b
 13215 1695 E0100000 		.4byte	.LASF273
 13216 1699 01       		.byte	0x1
 13217 169a 540A     		.2byte	0xa54
 13218 169c 81000000 		.4byte	0x81
 13219 16a0 05       		.uleb128 0x5
 13220 16a1 03       		.byte	0x3
 13221 16a2 B8010000 		.4byte	rest_cycle_status.10746
 13222 16a6 1B       		.uleb128 0x1b
 13223 16a7 BC030000 		.4byte	.LASF274
 13224 16ab 01       		.byte	0x1
 13225 16ac 550A     		.2byte	0xa55
 13226 16ae BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 288


 13227 16b2 05       		.uleb128 0x5
 13228 16b3 03       		.byte	0x3
 13229 16b4 10000000 		.4byte	bin_threshold.10747
 13230 16b8 1B       		.uleb128 0x1b
 13231 16b9 75100000 		.4byte	.LASF275
 13232 16bd 01       		.byte	0x1
 13233 16be 560A     		.2byte	0xa56
 13234 16c0 BD000000 		.4byte	0xbd
 13235 16c4 05       		.uleb128 0x5
 13236 16c5 03       		.byte	0x3
 13237 16c6 14000000 		.4byte	exc_act_thr.10748
 13238 16ca 1B       		.uleb128 0x1b
 13239 16cb E4010000 		.4byte	.LASF276
 13240 16cf 01       		.byte	0x1
 13241 16d0 570A     		.2byte	0xa57
 13242 16d2 BD000000 		.4byte	0xbd
 13243 16d6 05       		.uleb128 0x5
 13244 16d7 03       		.byte	0x3
 13245 16d8 8C010000 		.4byte	thr_pos.10749
 13246 16dc 1B       		.uleb128 0x1b
 13247 16dd 5C0B0000 		.4byte	.LASF277
 13248 16e1 01       		.byte	0x1
 13249 16e2 580A     		.2byte	0xa58
 13250 16e4 BD000000 		.4byte	0xbd
 13251 16e8 05       		.uleb128 0x5
 13252 16e9 03       		.byte	0x3
 13253 16ea 90010000 		.4byte	max_pos.10750
 13254 16ee 1D       		.uleb128 0x1d
 13255 16ef 6900     		.ascii	"i\000"
 13256 16f1 01       		.byte	0x1
 13257 16f2 590A     		.2byte	0xa59
 13258 16f4 81000000 		.4byte	0x81
 13259 16f8 02       		.uleb128 0x2
 13260 16f9 91       		.byte	0x91
 13261 16fa 6F       		.sleb128 -17
 13262 16fb 1B       		.uleb128 0x1b
 13263 16fc 3E060000 		.4byte	.LASF278
 13264 1700 01       		.byte	0x1
 13265 1701 590A     		.2byte	0xa59
 13266 1703 81000000 		.4byte	0x81
 13267 1707 02       		.uleb128 0x2
 13268 1708 91       		.byte	0x91
 13269 1709 5B       		.sleb128 -37
 13270 170a 1B       		.uleb128 0x1b
 13271 170b 16010000 		.4byte	.LASF279
 13272 170f 01       		.byte	0x1
 13273 1710 590A     		.2byte	0xa59
 13274 1712 81000000 		.4byte	0x81
 13275 1716 02       		.uleb128 0x2
 13276 1717 91       		.byte	0x91
 13277 1718 5A       		.sleb128 -38
 13278 1719 1B       		.uleb128 0x1b
 13279 171a F80D0000 		.4byte	.LASF280
 13280 171e 01       		.byte	0x1
 13281 171f 590A     		.2byte	0xa59
 13282 1721 81000000 		.4byte	0x81
 13283 1725 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 289


 13284 1726 91       		.byte	0x91
 13285 1727 59       		.sleb128 -39
 13286 1728 1B       		.uleb128 0x1b
 13287 1729 FE0D0000 		.4byte	.LASF281
 13288 172d 01       		.byte	0x1
 13289 172e 590A     		.2byte	0xa59
 13290 1730 81000000 		.4byte	0x81
 13291 1734 02       		.uleb128 0x2
 13292 1735 91       		.byte	0x91
 13293 1736 58       		.sleb128 -40
 13294 1737 1B       		.uleb128 0x1b
 13295 1738 430E0000 		.4byte	.LASF282
 13296 173c 01       		.byte	0x1
 13297 173d 5A0A     		.2byte	0xa5a
 13298 173f BD000000 		.4byte	0xbd
 13299 1743 02       		.uleb128 0x2
 13300 1744 91       		.byte	0x91
 13301 1745 64       		.sleb128 -28
 13302 1746 1B       		.uleb128 0x1b
 13303 1747 6C050000 		.4byte	.LASF283
 13304 174b 01       		.byte	0x1
 13305 174c 5A0A     		.2byte	0xa5a
 13306 174e BD000000 		.4byte	0xbd
 13307 1752 02       		.uleb128 0x2
 13308 1753 91       		.byte	0x91
 13309 1754 60       		.sleb128 -32
 13310 1755 1B       		.uleb128 0x1b
 13311 1756 940F0000 		.4byte	.LASF284
 13312 175a 01       		.byte	0x1
 13313 175b 5A0A     		.2byte	0xa5a
 13314 175d BD000000 		.4byte	0xbd
 13315 1761 02       		.uleb128 0x2
 13316 1762 91       		.byte	0x91
 13317 1763 68       		.sleb128 -24
 13318 1764 1B       		.uleb128 0x1b
 13319 1765 07050000 		.4byte	.LASF285
 13320 1769 01       		.byte	0x1
 13321 176a 5B0A     		.2byte	0xa5b
 13322 176c BD000000 		.4byte	0xbd
 13323 1770 02       		.uleb128 0x2
 13324 1771 91       		.byte	0x91
 13325 1772 5C       		.sleb128 -36
 13326 1773 1B       		.uleb128 0x1b
 13327 1774 68070000 		.4byte	.LASF286
 13328 1778 01       		.byte	0x1
 13329 1779 5C0A     		.2byte	0xa5c
 13330 177b 99000000 		.4byte	0x99
 13331 177f 05       		.uleb128 0x5
 13332 1780 03       		.byte	0x3
 13333 1781 BC010000 		.4byte	timer_value_s.10760
 13334 1785 1B       		.uleb128 0x1b
 13335 1786 03070000 		.4byte	.LASF287
 13336 178a 01       		.byte	0x1
 13337 178b 5C0A     		.2byte	0xa5c
 13338 178d 99000000 		.4byte	0x99
 13339 1791 05       		.uleb128 0x5
 13340 1792 03       		.byte	0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 290


 13341 1793 C0010000 		.4byte	timer_value_e.10761
 13342 1797 1B       		.uleb128 0x1b
 13343 1798 50100000 		.4byte	.LASF288
 13344 179c 01       		.byte	0x1
 13345 179d 5D0A     		.2byte	0xa5d
 13346 179f A3030000 		.4byte	0x3a3
 13347 17a3 05       		.uleb128 0x5
 13348 17a4 03       		.byte	0x3
 13349 17a5 A8010000 		.4byte	timer_exc_s.10762
 13350 17a9 1B       		.uleb128 0x1b
 13351 17aa 2B100000 		.4byte	.LASF289
 13352 17ae 01       		.byte	0x1
 13353 17af 5D0A     		.2byte	0xa5d
 13354 17b1 A3030000 		.4byte	0x3a3
 13355 17b5 05       		.uleb128 0x5
 13356 17b6 03       		.byte	0x3
 13357 17b7 B0010000 		.4byte	timer_exc_e.10763
 13358 17bb 1B       		.uleb128 0x1b
 13359 17bc 97070000 		.4byte	.LASF290
 13360 17c0 01       		.byte	0x1
 13361 17c1 5E0A     		.2byte	0xa5e
 13362 17c3 94020000 		.4byte	0x294
 13363 17c7 05       		.uleb128 0x5
 13364 17c8 03       		.byte	0x3
 13365 17c9 9C010000 		.4byte	start_emg_pos.10764
 13366 17cd 00       		.byte	0
 13367 17ce 24       		.uleb128 0x24
 13368 17cf F70B0000 		.4byte	.LASF291
 13369 17d3 01       		.byte	0x1
 13370 17d4 0A0B     		.2byte	0xb0a
 13371 17d6 00000000 		.4byte	.LFB78
 13372 17da 08010000 		.4byte	.LFE78-.LFB78
 13373 17de 01       		.uleb128 0x1
 13374 17df 9C       		.byte	0x9c
 13375 17e0 54180000 		.4byte	0x1854
 13376 17e4 1B       		.uleb128 0x1b
 13377 17e5 B8100000 		.4byte	.LASF292
 13378 17e9 01       		.byte	0x1
 13379 17ea 0C0B     		.2byte	0xb0c
 13380 17ec EA000000 		.4byte	0xea
 13381 17f0 02       		.uleb128 0x2
 13382 17f1 91       		.byte	0x91
 13383 17f2 64       		.sleb128 -28
 13384 17f3 1B       		.uleb128 0x1b
 13385 17f4 240E0000 		.4byte	.LASF293
 13386 17f8 01       		.byte	0x1
 13387 17f9 0D0B     		.2byte	0xb0d
 13388 17fb 81000000 		.4byte	0x81
 13389 17ff 05       		.uleb128 0x5
 13390 1800 03       		.byte	0x3
 13391 1801 C8010000 		.4byte	row_number.10800
 13392 1805 1B       		.uleb128 0x1b
 13393 1806 3F050000 		.4byte	.LASF294
 13394 180a 01       		.byte	0x1
 13395 180b 0E0B     		.2byte	0xb0e
 13396 180d 81000000 		.4byte	0x81
 13397 1811 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 291


 13398 1812 91       		.byte	0x91
 13399 1813 77       		.sleb128 -9
 13400 1814 1B       		.uleb128 0x1b
 13401 1815 E60E0000 		.4byte	.LASF295
 13402 1819 01       		.byte	0x1
 13403 181a 0F0B     		.2byte	0xb0f
 13404 181c 54180000 		.4byte	0x1854
 13405 1820 02       		.uleb128 0x2
 13406 1821 91       		.byte	0x91
 13407 1822 70       		.sleb128 -16
 13408 1823 1B       		.uleb128 0x1b
 13409 1824 1E010000 		.4byte	.LASF296
 13410 1828 01       		.byte	0x1
 13411 1829 100B     		.2byte	0xb10
 13412 182b 54180000 		.4byte	0x1854
 13413 182f 02       		.uleb128 0x2
 13414 1830 91       		.byte	0x91
 13415 1831 6C       		.sleb128 -20
 13416 1832 1B       		.uleb128 0x1b
 13417 1833 4C120000 		.4byte	.LASF297
 13418 1837 01       		.byte	0x1
 13419 1838 110B     		.2byte	0xb11
 13420 183a 81000000 		.4byte	0x81
 13421 183e 02       		.uleb128 0x2
 13422 183f 91       		.byte	0x91
 13423 1840 6B       		.sleb128 -21
 13424 1841 1B       		.uleb128 0x1b
 13425 1842 420B0000 		.4byte	.LASF298
 13426 1846 01       		.byte	0x1
 13427 1847 120B     		.2byte	0xb12
 13428 1849 54180000 		.4byte	0x1854
 13429 184d 05       		.uleb128 0x5
 13430 184e 03       		.byte	0x3
 13431 184f C4010000 		.4byte	m_addr.10805
 13432 1853 00       		.byte	0
 13433 1854 0C       		.uleb128 0xc
 13434 1855 04       		.byte	0x4
 13435 1856 81000000 		.4byte	0x81
 13436 185a 07       		.uleb128 0x7
 13437 185b 6A180000 		.4byte	0x186a
 13438 185f 6A180000 		.4byte	0x186a
 13439 1863 08       		.uleb128 0x8
 13440 1864 0E010000 		.4byte	0x10e
 13441 1868 1C       		.byte	0x1c
 13442 1869 00       		.byte	0
 13443 186a 27       		.uleb128 0x27
 13444 186b 81000000 		.4byte	0x81
 13445 186f 19       		.uleb128 0x19
 13446 1870 F10E0000 		.4byte	.LASF299
 13447 1874 01       		.byte	0x1
 13448 1875 40       		.byte	0x40
 13449 1876 80180000 		.4byte	0x1880
 13450 187a 05       		.uleb128 0x5
 13451 187b 03       		.byte	0x3
 13452 187c 00000000 		.4byte	pwm_preload_values
 13453 1880 27       		.uleb128 0x27
 13454 1881 5A180000 		.4byte	0x185a
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 292


 13455 1885 28       		.uleb128 0x28
 13456 1886 37100000 		.4byte	.LASF300
 13457 188a 08       		.byte	0x8
 13458 188b 1207     		.2byte	0x712
 13459 188d 91180000 		.4byte	0x1891
 13460 1891 06       		.uleb128 0x6
 13461 1892 76000000 		.4byte	0x76
 13462 1896 07       		.uleb128 0x7
 13463 1897 A5010000 		.4byte	0x1a5
 13464 189b A6180000 		.4byte	0x18a6
 13465 189f 08       		.uleb128 0x8
 13466 18a0 0E010000 		.4byte	0x10e
 13467 18a4 01       		.byte	0x1
 13468 18a5 00       		.byte	0
 13469 18a6 28       		.uleb128 0x28
 13470 18a7 B6070000 		.4byte	.LASF301
 13471 18ab 07       		.byte	0x7
 13472 18ac 2302     		.2byte	0x223
 13473 18ae 96180000 		.4byte	0x1896
 13474 18b2 28       		.uleb128 0x28
 13475 18b3 63050000 		.4byte	.LASF302
 13476 18b7 07       		.byte	0x7
 13477 18b8 2302     		.2byte	0x223
 13478 18ba 96180000 		.4byte	0x1896
 13479 18be 28       		.uleb128 0x28
 13480 18bf 960C0000 		.4byte	.LASF303
 13481 18c3 07       		.byte	0x7
 13482 18c4 2302     		.2byte	0x223
 13483 18c6 96180000 		.4byte	0x1896
 13484 18ca 07       		.uleb128 0x7
 13485 18cb E2010000 		.4byte	0x1e2
 13486 18cf DA180000 		.4byte	0x18da
 13487 18d3 08       		.uleb128 0x8
 13488 18d4 0E010000 		.4byte	0x10e
 13489 18d8 01       		.byte	0x1
 13490 18d9 00       		.byte	0
 13491 18da 28       		.uleb128 0x28
 13492 18db 61070000 		.4byte	.LASF304
 13493 18df 07       		.byte	0x7
 13494 18e0 2402     		.2byte	0x224
 13495 18e2 CA180000 		.4byte	0x18ca
 13496 18e6 28       		.uleb128 0x28
 13497 18e7 42120000 		.4byte	.LASF305
 13498 18eb 07       		.byte	0x7
 13499 18ec 2402     		.2byte	0x224
 13500 18ee CA180000 		.4byte	0x18ca
 13501 18f2 28       		.uleb128 0x28
 13502 18f3 8E110000 		.4byte	.LASF306
 13503 18f7 07       		.byte	0x7
 13504 18f8 2502     		.2byte	0x225
 13505 18fa 63020000 		.4byte	0x263
 13506 18fe 28       		.uleb128 0x28
 13507 18ff 0A040000 		.4byte	.LASF307
 13508 1903 07       		.byte	0x7
 13509 1904 2502     		.2byte	0x225
 13510 1906 63020000 		.4byte	0x263
 13511 190a 28       		.uleb128 0x28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 293


 13512 190b 93000000 		.4byte	.LASF308
 13513 190f 07       		.byte	0x7
 13514 1910 2702     		.2byte	0x227
 13515 1912 B4020000 		.4byte	0x2b4
 13516 1916 28       		.uleb128 0x28
 13517 1917 450F0000 		.4byte	.LASF309
 13518 191b 07       		.byte	0x7
 13519 191c 2802     		.2byte	0x228
 13520 191e BE090000 		.4byte	0x9be
 13521 1922 28       		.uleb128 0x28
 13522 1923 490B0000 		.4byte	.LASF310
 13523 1927 07       		.byte	0x7
 13524 1928 2802     		.2byte	0x228
 13525 192a BE090000 		.4byte	0x9be
 13526 192e 28       		.uleb128 0x28
 13527 192f 160A0000 		.4byte	.LASF311
 13528 1933 07       		.byte	0x7
 13529 1934 2902     		.2byte	0x229
 13530 1936 970B0000 		.4byte	0xb97
 13531 193a 07       		.uleb128 0x7
 13532 193b 6F0B0000 		.4byte	0xb6f
 13533 193f 4A190000 		.4byte	0x194a
 13534 1943 08       		.uleb128 0x8
 13535 1944 0E010000 		.4byte	0x10e
 13536 1948 01       		.byte	0x1
 13537 1949 00       		.byte	0
 13538 194a 28       		.uleb128 0x28
 13539 194b 820C0000 		.4byte	.LASF312
 13540 194f 07       		.byte	0x7
 13541 1950 2A02     		.2byte	0x22a
 13542 1952 3A190000 		.4byte	0x193a
 13543 1956 28       		.uleb128 0x28
 13544 1957 710A0000 		.4byte	.LASF313
 13545 195b 07       		.byte	0x7
 13546 195c 2A02     		.2byte	0x22a
 13547 195e 3A190000 		.4byte	0x193a
 13548 1962 28       		.uleb128 0x28
 13549 1963 6C0C0000 		.4byte	.LASF314
 13550 1967 07       		.byte	0x7
 13551 1968 2A02     		.2byte	0x22a
 13552 196a 3A190000 		.4byte	0x193a
 13553 196e 07       		.uleb128 0x7
 13554 196f 6F0B0000 		.4byte	0xb6f
 13555 1973 7E190000 		.4byte	0x197e
 13556 1977 08       		.uleb128 0x8
 13557 1978 0E010000 		.4byte	0x10e
 13558 197c 02       		.byte	0x2
 13559 197d 00       		.byte	0
 13560 197e 28       		.uleb128 0x28
 13561 197f FC050000 		.4byte	.LASF315
 13562 1983 07       		.byte	0x7
 13563 1984 2B02     		.2byte	0x22b
 13564 1986 6E190000 		.4byte	0x196e
 13565 198a 07       		.uleb128 0x7
 13566 198b 6F0B0000 		.4byte	0xb6f
 13567 198f 9A190000 		.4byte	0x199a
 13568 1993 08       		.uleb128 0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 294


 13569 1994 0E010000 		.4byte	0x10e
 13570 1998 07       		.byte	0x7
 13571 1999 00       		.byte	0
 13572 199a 28       		.uleb128 0x28
 13573 199b AE010000 		.4byte	.LASF316
 13574 199f 07       		.byte	0x7
 13575 19a0 2C02     		.2byte	0x22c
 13576 19a2 8A190000 		.4byte	0x198a
 13577 19a6 28       		.uleb128 0x28
 13578 19a7 37040000 		.4byte	.LASF317
 13579 19ab 07       		.byte	0x7
 13580 19ac 2D02     		.2byte	0x22d
 13581 19ae 6F0B0000 		.4byte	0xb6f
 13582 19b2 28       		.uleb128 0x28
 13583 19b3 6F030000 		.4byte	.LASF318
 13584 19b7 07       		.byte	0x7
 13585 19b8 2F02     		.2byte	0x22f
 13586 19ba 8D000000 		.4byte	0x8d
 13587 19be 28       		.uleb128 0x28
 13588 19bf F6090000 		.4byte	.LASF319
 13589 19c3 07       		.byte	0x7
 13590 19c4 3002     		.2byte	0x230
 13591 19c6 8D000000 		.4byte	0x8d
 13592 19ca 28       		.uleb128 0x28
 13593 19cb 120D0000 		.4byte	.LASF320
 13594 19cf 07       		.byte	0x7
 13595 19d0 3102     		.2byte	0x231
 13596 19d2 D5000000 		.4byte	0xd5
 13597 19d6 28       		.uleb128 0x28
 13598 19d7 CC0D0000 		.4byte	.LASF321
 13599 19db 07       		.byte	0x7
 13600 19dc 3302     		.2byte	0x233
 13601 19de 94020000 		.4byte	0x294
 13602 19e2 28       		.uleb128 0x28
 13603 19e3 AA100000 		.4byte	.LASF322
 13604 19e7 07       		.byte	0x7
 13605 19e8 3402     		.2byte	0x234
 13606 19ea 2B070000 		.4byte	0x72b
 13607 19ee 28       		.uleb128 0x28
 13608 19ef CB0F0000 		.4byte	.LASF323
 13609 19f3 07       		.byte	0x7
 13610 19f4 3502     		.2byte	0x235
 13611 19f6 2B070000 		.4byte	0x72b
 13612 19fa 28       		.uleb128 0x28
 13613 19fb B1060000 		.4byte	.LASF324
 13614 19ff 07       		.byte	0x7
 13615 1a00 3602     		.2byte	0x236
 13616 1a02 94020000 		.4byte	0x294
 13617 1a06 28       		.uleb128 0x28
 13618 1a07 44100000 		.4byte	.LASF325
 13619 1a0b 07       		.byte	0x7
 13620 1a0c 3702     		.2byte	0x237
 13621 1a0e 94020000 		.4byte	0x294
 13622 1a12 28       		.uleb128 0x28
 13623 1a13 3E0D0000 		.4byte	.LASF326
 13624 1a17 07       		.byte	0x7
 13625 1a18 3802     		.2byte	0x238
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 295


 13626 1a1a BD000000 		.4byte	0xbd
 13627 1a1e 28       		.uleb128 0x28
 13628 1a1f 3F070000 		.4byte	.LASF327
 13629 1a23 07       		.byte	0x7
 13630 1a24 3A02     		.2byte	0x23a
 13631 1a26 430C0000 		.4byte	0xc43
 13632 1a2a 28       		.uleb128 0x28
 13633 1a2b 8D050000 		.4byte	.LASF328
 13634 1a2f 07       		.byte	0x7
 13635 1a30 3B02     		.2byte	0x23b
 13636 1a32 0B0C0000 		.4byte	0xc0b
 13637 1a36 28       		.uleb128 0x28
 13638 1a37 E3040000 		.4byte	.LASF329
 13639 1a3b 07       		.byte	0x7
 13640 1a3c 3C02     		.2byte	0x23c
 13641 1a3e 0B0C0000 		.4byte	0xc0b
 13642 1a42 28       		.uleb128 0x28
 13643 1a43 510D0000 		.4byte	.LASF330
 13644 1a47 07       		.byte	0x7
 13645 1a48 3D02     		.2byte	0x23d
 13646 1a4a 0B0C0000 		.4byte	0xc0b
 13647 1a4e 28       		.uleb128 0x28
 13648 1a4f BE110000 		.4byte	.LASF331
 13649 1a53 07       		.byte	0x7
 13650 1a54 3E02     		.2byte	0x23e
 13651 1a56 0B0C0000 		.4byte	0xc0b
 13652 1a5a 28       		.uleb128 0x28
 13653 1a5b E1080000 		.4byte	.LASF332
 13654 1a5f 07       		.byte	0x7
 13655 1a60 4102     		.2byte	0x241
 13656 1a62 3B070000 		.4byte	0x73b
 13657 1a66 28       		.uleb128 0x28
 13658 1a67 E2000000 		.4byte	.LASF333
 13659 1a6b 07       		.byte	0x7
 13660 1a6c 4202     		.2byte	0x242
 13661 1a6e 81000000 		.4byte	0x81
 13662 1a72 28       		.uleb128 0x28
 13663 1a73 F8040000 		.4byte	.LASF334
 13664 1a77 07       		.byte	0x7
 13665 1a78 4302     		.2byte	0x243
 13666 1a7a 81000000 		.4byte	0x81
 13667 1a7e 28       		.uleb128 0x28
 13668 1a7f 00010000 		.4byte	.LASF335
 13669 1a83 07       		.byte	0x7
 13670 1a84 4402     		.2byte	0x244
 13671 1a86 81000000 		.4byte	0x81
 13672 1a8a 28       		.uleb128 0x28
 13673 1a8b 76120000 		.4byte	.LASF336
 13674 1a8f 07       		.byte	0x7
 13675 1a90 4602     		.2byte	0x246
 13676 1a92 81000000 		.4byte	0x81
 13677 1a96 28       		.uleb128 0x28
 13678 1a97 890C0000 		.4byte	.LASF337
 13679 1a9b 07       		.byte	0x7
 13680 1a9c 4702     		.2byte	0x247
 13681 1a9e 81000000 		.4byte	0x81
 13682 1aa2 28       		.uleb128 0x28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 296


 13683 1aa3 49050000 		.4byte	.LASF338
 13684 1aa7 07       		.byte	0x7
 13685 1aa8 4802     		.2byte	0x248
 13686 1aaa 81000000 		.4byte	0x81
 13687 1aae 28       		.uleb128 0x28
 13688 1aaf C1080000 		.4byte	.LASF339
 13689 1ab3 07       		.byte	0x7
 13690 1ab4 4902     		.2byte	0x249
 13691 1ab6 81000000 		.4byte	0x81
 13692 1aba 28       		.uleb128 0x28
 13693 1abb 560A0000 		.4byte	.LASF340
 13694 1abf 07       		.byte	0x7
 13695 1ac0 4A02     		.2byte	0x24a
 13696 1ac2 3B070000 		.4byte	0x73b
 13697 1ac6 07       		.uleb128 0x7
 13698 1ac7 B1000000 		.4byte	0xb1
 13699 1acb D61A0000 		.4byte	0x1ad6
 13700 1acf 08       		.uleb128 0x8
 13701 1ad0 0E010000 		.4byte	0x10e
 13702 1ad4 0B       		.byte	0xb
 13703 1ad5 00       		.byte	0
 13704 1ad6 28       		.uleb128 0x28
 13705 1ad7 F0040000 		.4byte	.LASF341
 13706 1adb 07       		.byte	0x7
 13707 1adc 4E02     		.2byte	0x24e
 13708 1ade C61A0000 		.4byte	0x1ac6
 13709 1ae2 28       		.uleb128 0x28
 13710 1ae3 F5110000 		.4byte	.LASF342
 13711 1ae7 07       		.byte	0x7
 13712 1ae8 4F02     		.2byte	0x24f
 13713 1aea 81000000 		.4byte	0x81
 13714 1aee 07       		.uleb128 0x7
 13715 1aef A5000000 		.4byte	0xa5
 13716 1af3 FE1A0000 		.4byte	0x1afe
 13717 1af7 08       		.uleb128 0x8
 13718 1af8 0E010000 		.4byte	0x10e
 13719 1afc 01       		.byte	0x1
 13720 1afd 00       		.byte	0
 13721 1afe 28       		.uleb128 0x28
 13722 1aff D7050000 		.4byte	.LASF343
 13723 1b03 07       		.byte	0x7
 13724 1b04 5202     		.2byte	0x252
 13725 1b06 EE1A0000 		.4byte	0x1aee
 13726 1b0a 07       		.uleb128 0x7
 13727 1b0b 99000000 		.4byte	0x99
 13728 1b0f 201B0000 		.4byte	0x1b20
 13729 1b13 08       		.uleb128 0x8
 13730 1b14 0E010000 		.4byte	0x10e
 13731 1b18 01       		.byte	0x1
 13732 1b19 08       		.uleb128 0x8
 13733 1b1a 0E010000 		.4byte	0x10e
 13734 1b1e 04       		.byte	0x4
 13735 1b1f 00       		.byte	0
 13736 1b20 28       		.uleb128 0x28
 13737 1b21 A5070000 		.4byte	.LASF344
 13738 1b25 07       		.byte	0x7
 13739 1b26 5502     		.2byte	0x255
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 297


 13740 1b28 0A1B0000 		.4byte	0x1b0a
 13741 1b2c 28       		.uleb128 0x28
 13742 1b2d 740E0000 		.4byte	.LASF345
 13743 1b31 07       		.byte	0x7
 13744 1b32 5602     		.2byte	0x256
 13745 1b34 3B070000 		.4byte	0x73b
 13746 1b38 07       		.uleb128 0x7
 13747 1b39 8D000000 		.4byte	0x8d
 13748 1b3d 4E1B0000 		.4byte	0x1b4e
 13749 1b41 08       		.uleb128 0x8
 13750 1b42 0E010000 		.4byte	0x10e
 13751 1b46 01       		.byte	0x1
 13752 1b47 08       		.uleb128 0x8
 13753 1b48 0E010000 		.4byte	0x10e
 13754 1b4c 04       		.byte	0x4
 13755 1b4d 00       		.byte	0
 13756 1b4e 28       		.uleb128 0x28
 13757 1b4f CA100000 		.4byte	.LASF346
 13758 1b53 07       		.byte	0x7
 13759 1b54 5702     		.2byte	0x257
 13760 1b56 381B0000 		.4byte	0x1b38
 13761 1b5a 07       		.uleb128 0x7
 13762 1b5b 81000000 		.4byte	0x81
 13763 1b5f 701B0000 		.4byte	0x1b70
 13764 1b63 08       		.uleb128 0x8
 13765 1b64 0E010000 		.4byte	0x10e
 13766 1b68 01       		.byte	0x1
 13767 1b69 08       		.uleb128 0x8
 13768 1b6a 0E010000 		.4byte	0x10e
 13769 1b6e 04       		.byte	0x4
 13770 1b6f 00       		.byte	0
 13771 1b70 28       		.uleb128 0x28
 13772 1b71 76070000 		.4byte	.LASF347
 13773 1b75 07       		.byte	0x7
 13774 1b76 5802     		.2byte	0x258
 13775 1b78 5A1B0000 		.4byte	0x1b5a
 13776 1b7c 28       		.uleb128 0x28
 13777 1b7d 7D040000 		.4byte	.LASF348
 13778 1b81 07       		.byte	0x7
 13779 1b82 5902     		.2byte	0x259
 13780 1b84 3B070000 		.4byte	0x73b
 13781 1b88 28       		.uleb128 0x28
 13782 1b89 640B0000 		.4byte	.LASF349
 13783 1b8d 07       		.byte	0x7
 13784 1b8e 5C02     		.2byte	0x25c
 13785 1b90 BD000000 		.4byte	0xbd
 13786 1b94 28       		.uleb128 0x28
 13787 1b95 94060000 		.4byte	.LASF350
 13788 1b99 07       		.byte	0x7
 13789 1b9a 5F02     		.2byte	0x25f
 13790 1b9c 9F010000 		.4byte	0x19f
 13791 1ba0 28       		.uleb128 0x28
 13792 1ba1 5B080000 		.4byte	.LASF351
 13793 1ba5 07       		.byte	0x7
 13794 1ba6 6202     		.2byte	0x262
 13795 1ba8 9F010000 		.4byte	0x19f
 13796 1bac 07       		.uleb128 0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 298


 13797 1bad F30A0000 		.4byte	0xaf3
 13798 1bb1 BC1B0000 		.4byte	0x1bbc
 13799 1bb5 08       		.uleb128 0x8
 13800 1bb6 0E010000 		.4byte	0x10e
 13801 1bba 04       		.byte	0x4
 13802 1bbb 00       		.byte	0
 13803 1bbc 28       		.uleb128 0x28
 13804 1bbd F6050000 		.4byte	.LASF352
 13805 1bc1 07       		.byte	0x7
 13806 1bc2 6B02     		.2byte	0x26b
 13807 1bc4 AC1B0000 		.4byte	0x1bac
 13808 1bc8 28       		.uleb128 0x28
 13809 1bc9 E3060000 		.4byte	.LASF353
 13810 1bcd 07       		.byte	0x7
 13811 1bce 6B02     		.2byte	0x26b
 13812 1bd0 AC1B0000 		.4byte	0x1bac
 13813 1bd4 28       		.uleb128 0x28
 13814 1bd5 13120000 		.4byte	.LASF354
 13815 1bd9 07       		.byte	0x7
 13816 1bda 7402     		.2byte	0x274
 13817 1bdc 81000000 		.4byte	0x81
 13818 1be0 00       		.byte	0
 13819              		.section	.debug_abbrev,"",%progbits
 13820              	.Ldebug_abbrev0:
 13821 0000 01       		.uleb128 0x1
 13822 0001 11       		.uleb128 0x11
 13823 0002 01       		.byte	0x1
 13824 0003 25       		.uleb128 0x25
 13825 0004 0E       		.uleb128 0xe
 13826 0005 13       		.uleb128 0x13
 13827 0006 0B       		.uleb128 0xb
 13828 0007 03       		.uleb128 0x3
 13829 0008 0E       		.uleb128 0xe
 13830 0009 1B       		.uleb128 0x1b
 13831 000a 0E       		.uleb128 0xe
 13832 000b 55       		.uleb128 0x55
 13833 000c 17       		.uleb128 0x17
 13834 000d 11       		.uleb128 0x11
 13835 000e 01       		.uleb128 0x1
 13836 000f 10       		.uleb128 0x10
 13837 0010 17       		.uleb128 0x17
 13838 0011 00       		.byte	0
 13839 0012 00       		.byte	0
 13840 0013 02       		.uleb128 0x2
 13841 0014 24       		.uleb128 0x24
 13842 0015 00       		.byte	0
 13843 0016 0B       		.uleb128 0xb
 13844 0017 0B       		.uleb128 0xb
 13845 0018 3E       		.uleb128 0x3e
 13846 0019 0B       		.uleb128 0xb
 13847 001a 03       		.uleb128 0x3
 13848 001b 0E       		.uleb128 0xe
 13849 001c 00       		.byte	0
 13850 001d 00       		.byte	0
 13851 001e 03       		.uleb128 0x3
 13852 001f 16       		.uleb128 0x16
 13853 0020 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 299


 13854 0021 03       		.uleb128 0x3
 13855 0022 0E       		.uleb128 0xe
 13856 0023 3A       		.uleb128 0x3a
 13857 0024 0B       		.uleb128 0xb
 13858 0025 3B       		.uleb128 0x3b
 13859 0026 0B       		.uleb128 0xb
 13860 0027 49       		.uleb128 0x49
 13861 0028 13       		.uleb128 0x13
 13862 0029 00       		.byte	0
 13863 002a 00       		.byte	0
 13864 002b 04       		.uleb128 0x4
 13865 002c 24       		.uleb128 0x24
 13866 002d 00       		.byte	0
 13867 002e 0B       		.uleb128 0xb
 13868 002f 0B       		.uleb128 0xb
 13869 0030 3E       		.uleb128 0x3e
 13870 0031 0B       		.uleb128 0xb
 13871 0032 03       		.uleb128 0x3
 13872 0033 08       		.uleb128 0x8
 13873 0034 00       		.byte	0
 13874 0035 00       		.byte	0
 13875 0036 05       		.uleb128 0x5
 13876 0037 16       		.uleb128 0x16
 13877 0038 00       		.byte	0
 13878 0039 03       		.uleb128 0x3
 13879 003a 0E       		.uleb128 0xe
 13880 003b 3A       		.uleb128 0x3a
 13881 003c 0B       		.uleb128 0xb
 13882 003d 3B       		.uleb128 0x3b
 13883 003e 05       		.uleb128 0x5
 13884 003f 49       		.uleb128 0x49
 13885 0040 13       		.uleb128 0x13
 13886 0041 00       		.byte	0
 13887 0042 00       		.byte	0
 13888 0043 06       		.uleb128 0x6
 13889 0044 35       		.uleb128 0x35
 13890 0045 00       		.byte	0
 13891 0046 49       		.uleb128 0x49
 13892 0047 13       		.uleb128 0x13
 13893 0048 00       		.byte	0
 13894 0049 00       		.byte	0
 13895 004a 07       		.uleb128 0x7
 13896 004b 01       		.uleb128 0x1
 13897 004c 01       		.byte	0x1
 13898 004d 49       		.uleb128 0x49
 13899 004e 13       		.uleb128 0x13
 13900 004f 01       		.uleb128 0x1
 13901 0050 13       		.uleb128 0x13
 13902 0051 00       		.byte	0
 13903 0052 00       		.byte	0
 13904 0053 08       		.uleb128 0x8
 13905 0054 21       		.uleb128 0x21
 13906 0055 00       		.byte	0
 13907 0056 49       		.uleb128 0x49
 13908 0057 13       		.uleb128 0x13
 13909 0058 2F       		.uleb128 0x2f
 13910 0059 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 300


 13911 005a 00       		.byte	0
 13912 005b 00       		.byte	0
 13913 005c 09       		.uleb128 0x9
 13914 005d 04       		.uleb128 0x4
 13915 005e 01       		.byte	0x1
 13916 005f 03       		.uleb128 0x3
 13917 0060 0E       		.uleb128 0xe
 13918 0061 0B       		.uleb128 0xb
 13919 0062 0B       		.uleb128 0xb
 13920 0063 49       		.uleb128 0x49
 13921 0064 13       		.uleb128 0x13
 13922 0065 3A       		.uleb128 0x3a
 13923 0066 0B       		.uleb128 0xb
 13924 0067 3B       		.uleb128 0x3b
 13925 0068 0B       		.uleb128 0xb
 13926 0069 01       		.uleb128 0x1
 13927 006a 13       		.uleb128 0x13
 13928 006b 00       		.byte	0
 13929 006c 00       		.byte	0
 13930 006d 0A       		.uleb128 0xa
 13931 006e 28       		.uleb128 0x28
 13932 006f 00       		.byte	0
 13933 0070 03       		.uleb128 0x3
 13934 0071 0E       		.uleb128 0xe
 13935 0072 1C       		.uleb128 0x1c
 13936 0073 0B       		.uleb128 0xb
 13937 0074 00       		.byte	0
 13938 0075 00       		.byte	0
 13939 0076 0B       		.uleb128 0xb
 13940 0077 13       		.uleb128 0x13
 13941 0078 00       		.byte	0
 13942 0079 03       		.uleb128 0x3
 13943 007a 0E       		.uleb128 0xe
 13944 007b 3C       		.uleb128 0x3c
 13945 007c 19       		.uleb128 0x19
 13946 007d 00       		.byte	0
 13947 007e 00       		.byte	0
 13948 007f 0C       		.uleb128 0xc
 13949 0080 0F       		.uleb128 0xf
 13950 0081 00       		.byte	0
 13951 0082 0B       		.uleb128 0xb
 13952 0083 0B       		.uleb128 0xb
 13953 0084 49       		.uleb128 0x49
 13954 0085 13       		.uleb128 0x13
 13955 0086 00       		.byte	0
 13956 0087 00       		.byte	0
 13957 0088 0D       		.uleb128 0xd
 13958 0089 13       		.uleb128 0x13
 13959 008a 01       		.byte	0x1
 13960 008b 03       		.uleb128 0x3
 13961 008c 0E       		.uleb128 0xe
 13962 008d 0B       		.uleb128 0xb
 13963 008e 0B       		.uleb128 0xb
 13964 008f 3A       		.uleb128 0x3a
 13965 0090 0B       		.uleb128 0xb
 13966 0091 3B       		.uleb128 0x3b
 13967 0092 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 301


 13968 0093 01       		.uleb128 0x1
 13969 0094 13       		.uleb128 0x13
 13970 0095 00       		.byte	0
 13971 0096 00       		.byte	0
 13972 0097 0E       		.uleb128 0xe
 13973 0098 0D       		.uleb128 0xd
 13974 0099 00       		.byte	0
 13975 009a 03       		.uleb128 0x3
 13976 009b 08       		.uleb128 0x8
 13977 009c 3A       		.uleb128 0x3a
 13978 009d 0B       		.uleb128 0xb
 13979 009e 3B       		.uleb128 0x3b
 13980 009f 0B       		.uleb128 0xb
 13981 00a0 49       		.uleb128 0x49
 13982 00a1 13       		.uleb128 0x13
 13983 00a2 38       		.uleb128 0x38
 13984 00a3 0B       		.uleb128 0xb
 13985 00a4 00       		.byte	0
 13986 00a5 00       		.byte	0
 13987 00a6 0F       		.uleb128 0xf
 13988 00a7 0D       		.uleb128 0xd
 13989 00a8 00       		.byte	0
 13990 00a9 03       		.uleb128 0x3
 13991 00aa 0E       		.uleb128 0xe
 13992 00ab 3A       		.uleb128 0x3a
 13993 00ac 0B       		.uleb128 0xb
 13994 00ad 3B       		.uleb128 0x3b
 13995 00ae 0B       		.uleb128 0xb
 13996 00af 49       		.uleb128 0x49
 13997 00b0 13       		.uleb128 0x13
 13998 00b1 38       		.uleb128 0x38
 13999 00b2 0B       		.uleb128 0xb
 14000 00b3 00       		.byte	0
 14001 00b4 00       		.byte	0
 14002 00b5 10       		.uleb128 0x10
 14003 00b6 13       		.uleb128 0x13
 14004 00b7 01       		.byte	0x1
 14005 00b8 03       		.uleb128 0x3
 14006 00b9 0E       		.uleb128 0xe
 14007 00ba 0B       		.uleb128 0xb
 14008 00bb 0B       		.uleb128 0xb
 14009 00bc 3A       		.uleb128 0x3a
 14010 00bd 0B       		.uleb128 0xb
 14011 00be 3B       		.uleb128 0x3b
 14012 00bf 05       		.uleb128 0x5
 14013 00c0 01       		.uleb128 0x1
 14014 00c1 13       		.uleb128 0x13
 14015 00c2 00       		.byte	0
 14016 00c3 00       		.byte	0
 14017 00c4 11       		.uleb128 0x11
 14018 00c5 0D       		.uleb128 0xd
 14019 00c6 00       		.byte	0
 14020 00c7 03       		.uleb128 0x3
 14021 00c8 0E       		.uleb128 0xe
 14022 00c9 3A       		.uleb128 0x3a
 14023 00ca 0B       		.uleb128 0xb
 14024 00cb 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 302


 14025 00cc 05       		.uleb128 0x5
 14026 00cd 49       		.uleb128 0x49
 14027 00ce 13       		.uleb128 0x13
 14028 00cf 38       		.uleb128 0x38
 14029 00d0 0B       		.uleb128 0xb
 14030 00d1 00       		.byte	0
 14031 00d2 00       		.byte	0
 14032 00d3 12       		.uleb128 0x12
 14033 00d4 0D       		.uleb128 0xd
 14034 00d5 00       		.byte	0
 14035 00d6 03       		.uleb128 0x3
 14036 00d7 08       		.uleb128 0x8
 14037 00d8 3A       		.uleb128 0x3a
 14038 00d9 0B       		.uleb128 0xb
 14039 00da 3B       		.uleb128 0x3b
 14040 00db 05       		.uleb128 0x5
 14041 00dc 49       		.uleb128 0x49
 14042 00dd 13       		.uleb128 0x13
 14043 00de 38       		.uleb128 0x38
 14044 00df 0B       		.uleb128 0xb
 14045 00e0 00       		.byte	0
 14046 00e1 00       		.byte	0
 14047 00e2 13       		.uleb128 0x13
 14048 00e3 13       		.uleb128 0x13
 14049 00e4 01       		.byte	0x1
 14050 00e5 03       		.uleb128 0x3
 14051 00e6 0E       		.uleb128 0xe
 14052 00e7 0B       		.uleb128 0xb
 14053 00e8 05       		.uleb128 0x5
 14054 00e9 3A       		.uleb128 0x3a
 14055 00ea 0B       		.uleb128 0xb
 14056 00eb 3B       		.uleb128 0x3b
 14057 00ec 05       		.uleb128 0x5
 14058 00ed 01       		.uleb128 0x1
 14059 00ee 13       		.uleb128 0x13
 14060 00ef 00       		.byte	0
 14061 00f0 00       		.byte	0
 14062 00f1 14       		.uleb128 0x14
 14063 00f2 0D       		.uleb128 0xd
 14064 00f3 00       		.byte	0
 14065 00f4 03       		.uleb128 0x3
 14066 00f5 08       		.uleb128 0x8
 14067 00f6 3A       		.uleb128 0x3a
 14068 00f7 0B       		.uleb128 0xb
 14069 00f8 3B       		.uleb128 0x3b
 14070 00f9 05       		.uleb128 0x5
 14071 00fa 49       		.uleb128 0x49
 14072 00fb 13       		.uleb128 0x13
 14073 00fc 38       		.uleb128 0x38
 14074 00fd 05       		.uleb128 0x5
 14075 00fe 00       		.byte	0
 14076 00ff 00       		.byte	0
 14077 0100 15       		.uleb128 0x15
 14078 0101 0D       		.uleb128 0xd
 14079 0102 00       		.byte	0
 14080 0103 03       		.uleb128 0x3
 14081 0104 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 303


 14082 0105 3A       		.uleb128 0x3a
 14083 0106 0B       		.uleb128 0xb
 14084 0107 3B       		.uleb128 0x3b
 14085 0108 05       		.uleb128 0x5
 14086 0109 49       		.uleb128 0x49
 14087 010a 13       		.uleb128 0x13
 14088 010b 38       		.uleb128 0x38
 14089 010c 05       		.uleb128 0x5
 14090 010d 00       		.byte	0
 14091 010e 00       		.byte	0
 14092 010f 16       		.uleb128 0x16
 14093 0110 04       		.uleb128 0x4
 14094 0111 01       		.byte	0x1
 14095 0112 0B       		.uleb128 0xb
 14096 0113 0B       		.uleb128 0xb
 14097 0114 49       		.uleb128 0x49
 14098 0115 13       		.uleb128 0x13
 14099 0116 3A       		.uleb128 0x3a
 14100 0117 0B       		.uleb128 0xb
 14101 0118 3B       		.uleb128 0x3b
 14102 0119 05       		.uleb128 0x5
 14103 011a 01       		.uleb128 0x1
 14104 011b 13       		.uleb128 0x13
 14105 011c 00       		.byte	0
 14106 011d 00       		.byte	0
 14107 011e 17       		.uleb128 0x17
 14108 011f 2E       		.uleb128 0x2e
 14109 0120 00       		.byte	0
 14110 0121 3F       		.uleb128 0x3f
 14111 0122 19       		.uleb128 0x19
 14112 0123 03       		.uleb128 0x3
 14113 0124 0E       		.uleb128 0xe
 14114 0125 3A       		.uleb128 0x3a
 14115 0126 0B       		.uleb128 0xb
 14116 0127 3B       		.uleb128 0x3b
 14117 0128 0B       		.uleb128 0xb
 14118 0129 27       		.uleb128 0x27
 14119 012a 19       		.uleb128 0x19
 14120 012b 11       		.uleb128 0x11
 14121 012c 01       		.uleb128 0x1
 14122 012d 12       		.uleb128 0x12
 14123 012e 06       		.uleb128 0x6
 14124 012f 40       		.uleb128 0x40
 14125 0130 18       		.uleb128 0x18
 14126 0131 9742     		.uleb128 0x2117
 14127 0133 19       		.uleb128 0x19
 14128 0134 00       		.byte	0
 14129 0135 00       		.byte	0
 14130 0136 18       		.uleb128 0x18
 14131 0137 2E       		.uleb128 0x2e
 14132 0138 01       		.byte	0x1
 14133 0139 3F       		.uleb128 0x3f
 14134 013a 19       		.uleb128 0x19
 14135 013b 03       		.uleb128 0x3
 14136 013c 0E       		.uleb128 0xe
 14137 013d 3A       		.uleb128 0x3a
 14138 013e 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 304


 14139 013f 3B       		.uleb128 0x3b
 14140 0140 0B       		.uleb128 0xb
 14141 0141 11       		.uleb128 0x11
 14142 0142 01       		.uleb128 0x1
 14143 0143 12       		.uleb128 0x12
 14144 0144 06       		.uleb128 0x6
 14145 0145 40       		.uleb128 0x40
 14146 0146 18       		.uleb128 0x18
 14147 0147 9642     		.uleb128 0x2116
 14148 0149 19       		.uleb128 0x19
 14149 014a 01       		.uleb128 0x1
 14150 014b 13       		.uleb128 0x13
 14151 014c 00       		.byte	0
 14152 014d 00       		.byte	0
 14153 014e 19       		.uleb128 0x19
 14154 014f 34       		.uleb128 0x34
 14155 0150 00       		.byte	0
 14156 0151 03       		.uleb128 0x3
 14157 0152 0E       		.uleb128 0xe
 14158 0153 3A       		.uleb128 0x3a
 14159 0154 0B       		.uleb128 0xb
 14160 0155 3B       		.uleb128 0x3b
 14161 0156 0B       		.uleb128 0xb
 14162 0157 49       		.uleb128 0x49
 14163 0158 13       		.uleb128 0x13
 14164 0159 02       		.uleb128 0x2
 14165 015a 18       		.uleb128 0x18
 14166 015b 00       		.byte	0
 14167 015c 00       		.byte	0
 14168 015d 1A       		.uleb128 0x1a
 14169 015e 2E       		.uleb128 0x2e
 14170 015f 01       		.byte	0x1
 14171 0160 3F       		.uleb128 0x3f
 14172 0161 19       		.uleb128 0x19
 14173 0162 03       		.uleb128 0x3
 14174 0163 0E       		.uleb128 0xe
 14175 0164 3A       		.uleb128 0x3a
 14176 0165 0B       		.uleb128 0xb
 14177 0166 3B       		.uleb128 0x3b
 14178 0167 05       		.uleb128 0x5
 14179 0168 27       		.uleb128 0x27
 14180 0169 19       		.uleb128 0x19
 14181 016a 11       		.uleb128 0x11
 14182 016b 01       		.uleb128 0x1
 14183 016c 12       		.uleb128 0x12
 14184 016d 06       		.uleb128 0x6
 14185 016e 40       		.uleb128 0x40
 14186 016f 18       		.uleb128 0x18
 14187 0170 9642     		.uleb128 0x2116
 14188 0172 19       		.uleb128 0x19
 14189 0173 01       		.uleb128 0x1
 14190 0174 13       		.uleb128 0x13
 14191 0175 00       		.byte	0
 14192 0176 00       		.byte	0
 14193 0177 1B       		.uleb128 0x1b
 14194 0178 34       		.uleb128 0x34
 14195 0179 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 305


 14196 017a 03       		.uleb128 0x3
 14197 017b 0E       		.uleb128 0xe
 14198 017c 3A       		.uleb128 0x3a
 14199 017d 0B       		.uleb128 0xb
 14200 017e 3B       		.uleb128 0x3b
 14201 017f 05       		.uleb128 0x5
 14202 0180 49       		.uleb128 0x49
 14203 0181 13       		.uleb128 0x13
 14204 0182 02       		.uleb128 0x2
 14205 0183 18       		.uleb128 0x18
 14206 0184 00       		.byte	0
 14207 0185 00       		.byte	0
 14208 0186 1C       		.uleb128 0x1c
 14209 0187 0B       		.uleb128 0xb
 14210 0188 01       		.byte	0x1
 14211 0189 11       		.uleb128 0x11
 14212 018a 01       		.uleb128 0x1
 14213 018b 12       		.uleb128 0x12
 14214 018c 06       		.uleb128 0x6
 14215 018d 01       		.uleb128 0x1
 14216 018e 13       		.uleb128 0x13
 14217 018f 00       		.byte	0
 14218 0190 00       		.byte	0
 14219 0191 1D       		.uleb128 0x1d
 14220 0192 34       		.uleb128 0x34
 14221 0193 00       		.byte	0
 14222 0194 03       		.uleb128 0x3
 14223 0195 08       		.uleb128 0x8
 14224 0196 3A       		.uleb128 0x3a
 14225 0197 0B       		.uleb128 0xb
 14226 0198 3B       		.uleb128 0x3b
 14227 0199 05       		.uleb128 0x5
 14228 019a 49       		.uleb128 0x49
 14229 019b 13       		.uleb128 0x13
 14230 019c 02       		.uleb128 0x2
 14231 019d 18       		.uleb128 0x18
 14232 019e 00       		.byte	0
 14233 019f 00       		.byte	0
 14234 01a0 1E       		.uleb128 0x1e
 14235 01a1 0B       		.uleb128 0xb
 14236 01a2 01       		.byte	0x1
 14237 01a3 11       		.uleb128 0x11
 14238 01a4 01       		.uleb128 0x1
 14239 01a5 12       		.uleb128 0x12
 14240 01a6 06       		.uleb128 0x6
 14241 01a7 00       		.byte	0
 14242 01a8 00       		.byte	0
 14243 01a9 1F       		.uleb128 0x1f
 14244 01aa 21       		.uleb128 0x21
 14245 01ab 00       		.byte	0
 14246 01ac 49       		.uleb128 0x49
 14247 01ad 13       		.uleb128 0x13
 14248 01ae 2F       		.uleb128 0x2f
 14249 01af 05       		.uleb128 0x5
 14250 01b0 00       		.byte	0
 14251 01b1 00       		.byte	0
 14252 01b2 20       		.uleb128 0x20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 306


 14253 01b3 05       		.uleb128 0x5
 14254 01b4 00       		.byte	0
 14255 01b5 03       		.uleb128 0x3
 14256 01b6 0E       		.uleb128 0xe
 14257 01b7 3A       		.uleb128 0x3a
 14258 01b8 0B       		.uleb128 0xb
 14259 01b9 3B       		.uleb128 0x3b
 14260 01ba 05       		.uleb128 0x5
 14261 01bb 49       		.uleb128 0x49
 14262 01bc 13       		.uleb128 0x13
 14263 01bd 02       		.uleb128 0x2
 14264 01be 18       		.uleb128 0x18
 14265 01bf 00       		.byte	0
 14266 01c0 00       		.byte	0
 14267 01c1 21       		.uleb128 0x21
 14268 01c2 0B       		.uleb128 0xb
 14269 01c3 01       		.byte	0x1
 14270 01c4 55       		.uleb128 0x55
 14271 01c5 17       		.uleb128 0x17
 14272 01c6 00       		.byte	0
 14273 01c7 00       		.byte	0
 14274 01c8 22       		.uleb128 0x22
 14275 01c9 2E       		.uleb128 0x2e
 14276 01ca 01       		.byte	0x1
 14277 01cb 3F       		.uleb128 0x3f
 14278 01cc 19       		.uleb128 0x19
 14279 01cd 03       		.uleb128 0x3
 14280 01ce 0E       		.uleb128 0xe
 14281 01cf 3A       		.uleb128 0x3a
 14282 01d0 0B       		.uleb128 0xb
 14283 01d1 3B       		.uleb128 0x3b
 14284 01d2 05       		.uleb128 0x5
 14285 01d3 27       		.uleb128 0x27
 14286 01d4 19       		.uleb128 0x19
 14287 01d5 11       		.uleb128 0x11
 14288 01d6 01       		.uleb128 0x1
 14289 01d7 12       		.uleb128 0x12
 14290 01d8 06       		.uleb128 0x6
 14291 01d9 40       		.uleb128 0x40
 14292 01da 18       		.uleb128 0x18
 14293 01db 9742     		.uleb128 0x2117
 14294 01dd 19       		.uleb128 0x19
 14295 01de 01       		.uleb128 0x1
 14296 01df 13       		.uleb128 0x13
 14297 01e0 00       		.byte	0
 14298 01e1 00       		.byte	0
 14299 01e2 23       		.uleb128 0x23
 14300 01e3 0B       		.uleb128 0xb
 14301 01e4 01       		.byte	0x1
 14302 01e5 55       		.uleb128 0x55
 14303 01e6 17       		.uleb128 0x17
 14304 01e7 01       		.uleb128 0x1
 14305 01e8 13       		.uleb128 0x13
 14306 01e9 00       		.byte	0
 14307 01ea 00       		.byte	0
 14308 01eb 24       		.uleb128 0x24
 14309 01ec 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 307


 14310 01ed 01       		.byte	0x1
 14311 01ee 3F       		.uleb128 0x3f
 14312 01ef 19       		.uleb128 0x19
 14313 01f0 03       		.uleb128 0x3
 14314 01f1 0E       		.uleb128 0xe
 14315 01f2 3A       		.uleb128 0x3a
 14316 01f3 0B       		.uleb128 0xb
 14317 01f4 3B       		.uleb128 0x3b
 14318 01f5 05       		.uleb128 0x5
 14319 01f6 11       		.uleb128 0x11
 14320 01f7 01       		.uleb128 0x1
 14321 01f8 12       		.uleb128 0x12
 14322 01f9 06       		.uleb128 0x6
 14323 01fa 40       		.uleb128 0x40
 14324 01fb 18       		.uleb128 0x18
 14325 01fc 9642     		.uleb128 0x2116
 14326 01fe 19       		.uleb128 0x19
 14327 01ff 01       		.uleb128 0x1
 14328 0200 13       		.uleb128 0x13
 14329 0201 00       		.byte	0
 14330 0202 00       		.byte	0
 14331 0203 25       		.uleb128 0x25
 14332 0204 05       		.uleb128 0x5
 14333 0205 00       		.byte	0
 14334 0206 03       		.uleb128 0x3
 14335 0207 08       		.uleb128 0x8
 14336 0208 3A       		.uleb128 0x3a
 14337 0209 0B       		.uleb128 0xb
 14338 020a 3B       		.uleb128 0x3b
 14339 020b 05       		.uleb128 0x5
 14340 020c 49       		.uleb128 0x49
 14341 020d 13       		.uleb128 0x13
 14342 020e 02       		.uleb128 0x2
 14343 020f 18       		.uleb128 0x18
 14344 0210 00       		.byte	0
 14345 0211 00       		.byte	0
 14346 0212 26       		.uleb128 0x26
 14347 0213 2E       		.uleb128 0x2e
 14348 0214 01       		.byte	0x1
 14349 0215 3F       		.uleb128 0x3f
 14350 0216 19       		.uleb128 0x19
 14351 0217 03       		.uleb128 0x3
 14352 0218 0E       		.uleb128 0xe
 14353 0219 3A       		.uleb128 0x3a
 14354 021a 0B       		.uleb128 0xb
 14355 021b 3B       		.uleb128 0x3b
 14356 021c 05       		.uleb128 0x5
 14357 021d 11       		.uleb128 0x11
 14358 021e 01       		.uleb128 0x1
 14359 021f 12       		.uleb128 0x12
 14360 0220 06       		.uleb128 0x6
 14361 0221 40       		.uleb128 0x40
 14362 0222 18       		.uleb128 0x18
 14363 0223 9742     		.uleb128 0x2117
 14364 0225 19       		.uleb128 0x19
 14365 0226 01       		.uleb128 0x1
 14366 0227 13       		.uleb128 0x13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 308


 14367 0228 00       		.byte	0
 14368 0229 00       		.byte	0
 14369 022a 27       		.uleb128 0x27
 14370 022b 26       		.uleb128 0x26
 14371 022c 00       		.byte	0
 14372 022d 49       		.uleb128 0x49
 14373 022e 13       		.uleb128 0x13
 14374 022f 00       		.byte	0
 14375 0230 00       		.byte	0
 14376 0231 28       		.uleb128 0x28
 14377 0232 34       		.uleb128 0x34
 14378 0233 00       		.byte	0
 14379 0234 03       		.uleb128 0x3
 14380 0235 0E       		.uleb128 0xe
 14381 0236 3A       		.uleb128 0x3a
 14382 0237 0B       		.uleb128 0xb
 14383 0238 3B       		.uleb128 0x3b
 14384 0239 05       		.uleb128 0x5
 14385 023a 49       		.uleb128 0x49
 14386 023b 13       		.uleb128 0x13
 14387 023c 3F       		.uleb128 0x3f
 14388 023d 19       		.uleb128 0x19
 14389 023e 3C       		.uleb128 0x3c
 14390 023f 19       		.uleb128 0x19
 14391 0240 00       		.byte	0
 14392 0241 00       		.byte	0
 14393 0242 00       		.byte	0
 14394              		.section	.debug_aranges,"",%progbits
 14395 0000 8C000000 		.4byte	0x8c
 14396 0004 0200     		.2byte	0x2
 14397 0006 00000000 		.4byte	.Ldebug_info0
 14398 000a 04       		.byte	0x4
 14399 000b 00       		.byte	0
 14400 000c 0000     		.2byte	0
 14401 000e 0000     		.2byte	0
 14402 0010 00000000 		.4byte	.LFB64
 14403 0014 18000000 		.4byte	.LFE64-.LFB64
 14404 0018 00000000 		.4byte	.LFB65
 14405 001c 20000000 		.4byte	.LFE65-.LFB65
 14406 0020 00000000 		.4byte	.LFB66
 14407 0024 F4010000 		.4byte	.LFE66-.LFB66
 14408 0028 00000000 		.4byte	.LFB67
 14409 002c 60080000 		.4byte	.LFE67-.LFB67
 14410 0030 00000000 		.4byte	.LFB68
 14411 0034 C4050000 		.4byte	.LFE68-.LFB68
 14412 0038 00000000 		.4byte	.LFB69
 14413 003c 34030000 		.4byte	.LFE69-.LFB69
 14414 0040 00000000 		.4byte	.LFB70
 14415 0044 B0010000 		.4byte	.LFE70-.LFB70
 14416 0048 00000000 		.4byte	.LFB71
 14417 004c 0C070000 		.4byte	.LFE71-.LFB71
 14418 0050 00000000 		.4byte	.LFB72
 14419 0054 4C090000 		.4byte	.LFE72-.LFB72
 14420 0058 00000000 		.4byte	.LFB73
 14421 005c 14080000 		.4byte	.LFE73-.LFB73
 14422 0060 00000000 		.4byte	.LFB74
 14423 0064 54120000 		.4byte	.LFE74-.LFB74
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 309


 14424 0068 00000000 		.4byte	.LFB75
 14425 006c 04010000 		.4byte	.LFE75-.LFB75
 14426 0070 00000000 		.4byte	.LFB76
 14427 0074 D8000000 		.4byte	.LFE76-.LFB76
 14428 0078 00000000 		.4byte	.LFB77
 14429 007c 58060000 		.4byte	.LFE77-.LFB77
 14430 0080 00000000 		.4byte	.LFB78
 14431 0084 08010000 		.4byte	.LFE78-.LFB78
 14432 0088 00000000 		.4byte	0
 14433 008c 00000000 		.4byte	0
 14434              		.section	.debug_ranges,"",%progbits
 14435              	.Ldebug_ranges0:
 14436 0000 68010000 		.4byte	.LBB4
 14437 0004 AA010000 		.4byte	.LBE4
 14438 0008 AC010000 		.4byte	.LBB5
 14439 000c F2010000 		.4byte	.LBE5
 14440 0010 00000000 		.4byte	0
 14441 0014 00000000 		.4byte	0
 14442 0018 3A000000 		.4byte	.LBB6
 14443 001c 40010000 		.4byte	.LBE6
 14444 0020 42010000 		.4byte	.LBB7
 14445 0024 BC010000 		.4byte	.LBE7
 14446 0028 00000000 		.4byte	0
 14447 002c 00000000 		.4byte	0
 14448 0030 BE010000 		.4byte	.LBB8
 14449 0034 20030000 		.4byte	.LBE8
 14450 0038 22030000 		.4byte	.LBB9
 14451 003c 24030000 		.4byte	.LBE9
 14452 0040 00000000 		.4byte	0
 14453 0044 00000000 		.4byte	0
 14454 0048 00000000 		.4byte	.LFB64
 14455 004c 18000000 		.4byte	.LFE64
 14456 0050 00000000 		.4byte	.LFB65
 14457 0054 20000000 		.4byte	.LFE65
 14458 0058 00000000 		.4byte	.LFB66
 14459 005c F4010000 		.4byte	.LFE66
 14460 0060 00000000 		.4byte	.LFB67
 14461 0064 60080000 		.4byte	.LFE67
 14462 0068 00000000 		.4byte	.LFB68
 14463 006c C4050000 		.4byte	.LFE68
 14464 0070 00000000 		.4byte	.LFB69
 14465 0074 34030000 		.4byte	.LFE69
 14466 0078 00000000 		.4byte	.LFB70
 14467 007c B0010000 		.4byte	.LFE70
 14468 0080 00000000 		.4byte	.LFB71
 14469 0084 0C070000 		.4byte	.LFE71
 14470 0088 00000000 		.4byte	.LFB72
 14471 008c 4C090000 		.4byte	.LFE72
 14472 0090 00000000 		.4byte	.LFB73
 14473 0094 14080000 		.4byte	.LFE73
 14474 0098 00000000 		.4byte	.LFB74
 14475 009c 54120000 		.4byte	.LFE74
 14476 00a0 00000000 		.4byte	.LFB75
 14477 00a4 04010000 		.4byte	.LFE75
 14478 00a8 00000000 		.4byte	.LFB76
 14479 00ac D8000000 		.4byte	.LFE76
 14480 00b0 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 310


 14481 00b4 58060000 		.4byte	.LFE77
 14482 00b8 00000000 		.4byte	.LFB78
 14483 00bc 08010000 		.4byte	.LFE78
 14484 00c0 00000000 		.4byte	0
 14485 00c4 00000000 		.4byte	0
 14486              		.section	.debug_line,"",%progbits
 14487              	.Ldebug_line0:
 14488 0000 4F0C0000 		.section	.debug_str,"MS",%progbits,1
 14488      0200AC01 
 14488      00000201 
 14488      FB0E0D00 
 14488      01010101 
 14489              	.LASF54:
 14490 0000 656D675F 		.ascii	"emg_act_counter\000"
 14490      6163745F 
 14490      636F756E 
 14490      74657200 
 14491              	.LASF24:
 14492 0010 73697A65 		.ascii	"sizetype\000"
 14492      74797065 
 14492      00
 14493              	.LASF61:
 14494 0019 706F7765 		.ascii	"power_cycles\000"
 14494      725F6379 
 14494      636C6573 
 14494      00
 14495              	.LASF269:
 14496 0026 706F735F 		.ascii	"pos_cycle_status\000"
 14496      6379636C 
 14496      655F7374 
 14496      61747573 
 14496      00
 14497              	.LASF146:
 14498 0037 77726973 		.ascii	"wrist_direction_association\000"
 14498      745F6469 
 14498      72656374 
 14498      696F6E5F 
 14498      6173736F 
 14499              	.LASF30:
 14500 0053 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 14500      545F4D4F 
 14500      44455F45 
 14500      4D475F46 
 14500      4346535F 
 14501              	.LASF121:
 14502 006b 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 14502      5F414443 
 14502      5F73656E 
 14502      736F7273 
 14502      5F706F72 
 14503              	.LASF151:
 14504 0086 75736572 		.ascii	"user\000"
 14504      00
 14505              	.LASF10:
 14506 008b 696E7433 		.ascii	"int32_t\000"
 14506      325F7400 
 14507              	.LASF308:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 311


 14508 0093 675F7278 		.ascii	"g_rx\000"
 14508      00
 14509              	.LASF246:
 14510 0098 6F6E655F 		.ascii	"one_time_execute\000"
 14510      74696D65 
 14510      5F657865 
 14510      63757465 
 14510      00
 14511              	.LASF49:
 14512 00a9 73745F64 		.ascii	"st_data\000"
 14512      61746100 
 14513              	.LASF59:
 14514 00b1 746F7461 		.ascii	"total_runtime\000"
 14514      6C5F7275 
 14514      6E74696D 
 14514      6500
 14515              	.LASF13:
 14516 00bf 75696E74 		.ascii	"uint32\000"
 14516      333200
 14517              	.LASF231:
 14518 00c6 6E5F6C69 		.ascii	"n_line\000"
 14518      6E6500
 14519              	.LASF152:
 14520 00cd 4A4F595F 		.ascii	"JOY_spec\000"
 14520      73706563 
 14520      00
 14521              	.LASF88:
 14522 00d6 706F735F 		.ascii	"pos_lim_inf\000"
 14522      6C696D5F 
 14522      696E6600 
 14523              	.LASF333:
 14524 00e2 74656E73 		.ascii	"tension_valid\000"
 14524      696F6E5F 
 14524      76616C69 
 14524      6400
 14525              	.LASF207:
 14526 00f0 6572725F 		.ascii	"err_joy_1\000"
 14526      6A6F795F 
 14526      3100
 14527              	.LASF183:
 14528 00fa 73746174 		.ascii	"state\000"
 14528      6500
 14529              	.LASF335:
 14530 0100 6379636C 		.ascii	"cycles_interrupt_flag\000"
 14530      65735F69 
 14530      6E746572 
 14530      72757074 
 14530      5F666C61 
 14531              	.LASF279:
 14532 0116 62696E5F 		.ascii	"bin_max\000"
 14532      6D617800 
 14533              	.LASF296:
 14534 011e 61646472 		.ascii	"addr_start_c\000"
 14534      5F737461 
 14534      72745F63 
 14534      00
 14535              	.LASF29:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 312


 14536 012b 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 14536      545F4D4F 
 14536      44455F45 
 14536      4D475F46 
 14536      43465300 
 14537              	.LASF92:
 14538 013f 63757272 		.ascii	"curr_lookup\000"
 14538      5F6C6F6F 
 14538      6B757000 
 14539              	.LASF216:
 14540 014b 70776D5F 		.ascii	"pwm_input\000"
 14540      696E7075 
 14540      7400
 14541              	.LASF57:
 14542 0155 72657374 		.ascii	"rest_counter\000"
 14542      5F636F75 
 14542      6E746572 
 14542      00
 14543              	.LASF136:
 14544 0162 73745F4D 		.ascii	"st_MASTER_spec\000"
 14544      41535445 
 14544      525F7370 
 14544      656300
 14545              	.LASF28:
 14546 0171 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 14546      545F4D4F 
 14546      44455F45 
 14546      4D475F49 
 14546      4E544547 
 14547              	.LASF262:
 14548 0189 765F636F 		.ascii	"v_count\000"
 14548      756E7400 
 14549              	.LASF188:
 14550 0191 72785F64 		.ascii	"rx_data\000"
 14550      61746100 
 14551              	.LASF250:
 14552 0199 7676765F 		.ascii	"vvv_value\000"
 14552      76616C75 
 14552      6500
 14553              	.LASF14:
 14554 01a3 696E7438 		.ascii	"int8\000"
 14554      00
 14555              	.LASF193:
 14556 01a8 696E666F 		.ascii	"info_\000"
 14556      5F00
 14557              	.LASF316:
 14558 01ae 66696C74 		.ascii	"filt_emg\000"
 14558      5F656D67 
 14558      00
 14559              	.LASF108:
 14560 01b7 73745F65 		.ascii	"st_emg\000"
 14560      6D6700
 14561              	.LASF55:
 14562 01be 706F7369 		.ascii	"position_hist\000"
 14562      74696F6E 
 14562      5F686973 
 14562      7400
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 313


 14563              	.LASF175:
 14564 01cc 50524550 		.ascii	"PREPARE_DATA\000"
 14564      4152455F 
 14564      44415441 
 14564      00
 14565              	.LASF159:
 14566 01d9 74656D70 		.ascii	"temp_value\000"
 14566      5F76616C 
 14566      756500
 14567              	.LASF276:
 14568 01e4 7468725F 		.ascii	"thr_pos\000"
 14568      706F7300 
 14569              	.LASF357:
 14570 01ec 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 14570      73657273 
 14570      5C6D676E 
 14570      6F63636F 
 14570      5C446F63 
 14571 0219 5F47656E 		.ascii	"_Generic_ParametricPWMRescaling\\Generic_Parametric"
 14571      65726963 
 14571      5F506172 
 14571      616D6574 
 14571      72696350 
 14572 024b 50574D52 		.ascii	"PWMRescaling_NoEncoder\\Generic_ParametricPWMRescal"
 14572      65736361 
 14572      6C696E67 
 14572      5F4E6F45 
 14572      6E636F64 
 14573 027d 696E675F 		.ascii	"ing_NoEncoder.cydsn\000"
 14573      4E6F456E 
 14573      636F6465 
 14573      722E6379 
 14573      64736E00 
 14574              	.LASF143:
 14575 0291 73745F57 		.ascii	"st_WR_spec\000"
 14575      525F7370 
 14575      656300
 14576              	.LASF209:
 14577 029c 6572725F 		.ascii	"err_joy_2\000"
 14577      6A6F795F 
 14577      3200
 14578              	.LASF52:
 14579 02a6 72656164 		.ascii	"ready\000"
 14579      7900
 14580              	.LASF105:
 14581 02ac 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 14581      6964785F 
 14581      7573655F 
 14581      666F725F 
 14581      636F6E74 
 14582              	.LASF162:
 14583 02c4 6761696E 		.ascii	"gain\000"
 14583      00
 14584              	.LASF65:
 14585 02c9 73745F64 		.ascii	"st_device\000"
 14585      65766963 
 14585      6500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 314


 14586              	.LASF27:
 14587 02d3 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 14587      545F4D4F 
 14587      44455F45 
 14587      4D475F50 
 14587      524F504F 
 14588              	.LASF70:
 14589 02ef 7573655F 		.ascii	"use_2nd_motor_flag\000"
 14589      326E645F 
 14589      6D6F746F 
 14589      725F666C 
 14589      616700
 14590              	.LASF255:
 14591 0302 55445F63 		.ascii	"UD_counter\000"
 14591      6F756E74 
 14591      657200
 14592              	.LASF62:
 14593 030d 65786365 		.ascii	"excessive_signal_activity\000"
 14593      73736976 
 14593      655F7369 
 14593      676E616C 
 14593      5F616374 
 14594              	.LASF171:
 14595 0327 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 14595      414E445F 
 14595      4D45414E 
 14595      00
 14596              	.LASF115:
 14597 0334 72656164 		.ascii	"read_imu_flag\000"
 14597      5F696D75 
 14597      5F666C61 
 14597      6700
 14598              	.LASF123:
 14599 0342 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 14599      72645F45 
 14599      4D475F68 
 14599      6973746F 
 14599      72795F6F 
 14600              	.LASF259:
 14601 035b 66697273 		.ascii	"first_tension_valid\000"
 14601      745F7465 
 14601      6E73696F 
 14601      6E5F7661 
 14601      6C696400 
 14602              	.LASF318:
 14603 036f 74696D65 		.ascii	"timer_value\000"
 14603      725F7661 
 14603      6C756500 
 14604              	.LASF4:
 14605 037b 6C6F6E67 		.ascii	"long int\000"
 14605      20696E74 
 14605      00
 14606              	.LASF149:
 14607 0384 756E7573 		.ascii	"unused_bytes1\000"
 14607      65645F62 
 14607      79746573 
 14607      3100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 315


 14608              	.LASF196:
 14609 0392 454D475F 		.ascii	"EMG_history_info_\000"
 14609      68697374 
 14609      6F72795F 
 14609      696E666F 
 14609      5F00
 14610              	.LASF221:
 14611 03a4 53485F45 		.ascii	"SH_ENC_L\000"
 14611      4E435F4C 
 14611      00
 14612              	.LASF69:
 14613 03ad 72657365 		.ascii	"reset_counters\000"
 14613      745F636F 
 14613      756E7465 
 14613      727300
 14614              	.LASF274:
 14615 03bc 62696E5F 		.ascii	"bin_threshold\000"
 14615      74687265 
 14615      73686F6C 
 14615      6400
 14616              	.LASF126:
 14617 03ca 75736572 		.ascii	"user_emg\000"
 14617      5F656D67 
 14617      00
 14618              	.LASF245:
 14619 03d3 73616665 		.ascii	"safe_startup_motor_activation\000"
 14619      5F737461 
 14619      72747570 
 14619      5F6D6F74 
 14619      6F725F61 
 14620              	.LASF64:
 14621 03f1 756E7573 		.ascii	"unused_bytes\000"
 14621      65645F62 
 14621      79746573 
 14621      00
 14622              	.LASF155:
 14623 03fe 61636365 		.ascii	"accel_value\000"
 14623      6C5F7661 
 14623      6C756500 
 14624              	.LASF307:
 14625 040a 675F6164 		.ascii	"g_adc_measOld\000"
 14625      635F6D65 
 14625      61734F6C 
 14625      6400
 14626              	.LASF234:
 14627 0418 6175785F 		.ascii	"aux_encoder\000"
 14627      656E636F 
 14627      64657200 
 14628              	.LASF53:
 14629 0424 73745F63 		.ascii	"st_counters\000"
 14629      6F756E74 
 14629      65727300 
 14630              	.LASF220:
 14631 0430 53485F4D 		.ascii	"SH_MOT\000"
 14631      4F5400
 14632              	.LASF317:
 14633 0437 66696C74 		.ascii	"filt_detect_pc\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 316


 14633      5F646574 
 14633      6563745F 
 14633      706300
 14634              	.LASF17:
 14635 0446 666C6F61 		.ascii	"float32\000"
 14635      74333200 
 14636              	.LASF230:
 14637 044e 656E636F 		.ascii	"encoder_reading_SPI\000"
 14637      6465725F 
 14637      72656164 
 14637      696E675F 
 14637      53504900 
 14638              	.LASF243:
 14639 0462 6572726F 		.ascii	"error\000"
 14639      7200
 14640              	.LASF178:
 14641 0468 57524954 		.ascii	"WRITE_END\000"
 14641      455F454E 
 14641      4400
 14642              	.LASF256:
 14643 0472 4C525F63 		.ascii	"LR_counter\000"
 14643      6F756E74 
 14643      657200
 14644              	.LASF348:
 14645 047d 706F735F 		.ascii	"pos_reconstruct\000"
 14645      7265636F 
 14645      6E737472 
 14645      75637400 
 14646              	.LASF264:
 14647 048d 70776D5F 		.ascii	"pwm_limit_search\000"
 14647      6C696D69 
 14647      745F7365 
 14647      61726368 
 14647      00
 14648              	.LASF0:
 14649 049e 7369676E 		.ascii	"signed char\000"
 14649      65642063 
 14649      68617200 
 14650              	.LASF125:
 14651 04aa 75736572 		.ascii	"user_code_string\000"
 14651      5F636F64 
 14651      655F7374 
 14651      72696E67 
 14651      00
 14652              	.LASF163:
 14653 04bb 73745F63 		.ascii	"st_calib\000"
 14653      616C6962 
 14653      00
 14654              	.LASF203:
 14655 04c4 6572725F 		.ascii	"err_emg_1\000"
 14655      656D675F 
 14655      3100
 14656              	.LASF204:
 14657 04ce 6572725F 		.ascii	"err_emg_2\000"
 14657      656D675F 
 14657      3200
 14658              	.LASF113:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 317


 14659 04d8 73776974 		.ascii	"switch_emg\000"
 14659      63685F65 
 14659      6D6700
 14660              	.LASF329:
 14661 04e3 656D675F 		.ascii	"emg_2_status\000"
 14661      325F7374 
 14661      61747573 
 14661      00
 14662              	.LASF341:
 14663 04f0 4144435F 		.ascii	"ADC_buf\000"
 14663      62756600 
 14664              	.LASF334:
 14665 04f8 696E7465 		.ascii	"interrupt_flag\000"
 14665      72727570 
 14665      745F666C 
 14665      616700
 14666              	.LASF285:
 14667 0507 73746570 		.ascii	"step\000"
 14667      00
 14668              	.LASF223:
 14669 050c 63757272 		.ascii	"curr_error_sum\000"
 14669      5F657272 
 14669      6F725F73 
 14669      756D00
 14670              	.LASF1:
 14671 051b 756E7369 		.ascii	"unsigned char\000"
 14671      676E6564 
 14671      20636861 
 14671      7200
 14672              	.LASF98:
 14673 0529 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 14673      72657665 
 14673      72735F6D 
 14673      6F746F72 
 14673      5F666C61 
 14674              	.LASF294:
 14675 053f 726F775F 		.ascii	"row_start\000"
 14675      73746172 
 14675      7400
 14676              	.LASF338:
 14677 0549 666F7263 		.ascii	"forced_open\000"
 14677      65645F6F 
 14677      70656E00 
 14678              	.LASF238:
 14679 0555 73706565 		.ascii	"speed_encoder\000"
 14679      645F656E 
 14679      636F6465 
 14679      7200
 14680              	.LASF302:
 14681 0563 675F7265 		.ascii	"g_refNew\000"
 14681      664E6577 
 14681      00
 14682              	.LASF283:
 14683 056c 63757272 		.ascii	"curr_off\000"
 14683      5F6F6666 
 14683      00
 14684              	.LASF68:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 318


 14685 0575 72696768 		.ascii	"right_left\000"
 14685      745F6C65 
 14685      667400
 14686              	.LASF96:
 14687 0580 656E636F 		.ascii	"encoder_line\000"
 14687      6465725F 
 14687      6C696E65 
 14687      00
 14688              	.LASF328:
 14689 058d 656D675F 		.ascii	"emg_1_status\000"
 14689      315F7374 
 14689      61747573 
 14689      00
 14690              	.LASF154:
 14691 059a 666C6167 		.ascii	"flags\000"
 14691      7300
 14692              	.LASF202:
 14693 05a0 68616E64 		.ascii	"handle_value\000"
 14693      6C655F76 
 14693      616C7565 
 14693      00
 14694              	.LASF20:
 14695 05ad 63686172 		.ascii	"char\000"
 14695      00
 14696              	.LASF260:
 14697 05b2 64657465 		.ascii	"detect_power_cycle_prev\000"
 14697      63745F70 
 14697      6F776572 
 14697      5F637963 
 14697      6C655F70 
 14698              	.LASF91:
 14699 05ca 6D61785F 		.ascii	"max_step_pos\000"
 14699      73746570 
 14699      5F706F73 
 14699      00
 14700              	.LASF343:
 14701 05d7 70776D5F 		.ascii	"pwm_sign\000"
 14701      7369676E 
 14701      00
 14702              	.LASF229:
 14703 05e0 6D6F746F 		.ascii	"motor_control_generic\000"
 14703      725F636F 
 14703      6E74726F 
 14703      6C5F6765 
 14703      6E657269 
 14704              	.LASF352:
 14705 05f6 675F696D 		.ascii	"g_imu\000"
 14705      7500
 14706              	.LASF315:
 14707 05fc 66696C74 		.ascii	"filt_vel\000"
 14707      5F76656C 
 14707      00
 14708              	.LASF97:
 14709 0605 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14709      72617465 
 14709      5F6C696D 
 14709      69746572 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 319


 14709      00
 14710              	.LASF77:
 14711 0616 6B5F645F 		.ascii	"k_d_c\000"
 14711      6300
 14712              	.LASF174:
 14713 061c 6164635F 		.ascii	"adc_status\000"
 14713      73746174 
 14713      757300
 14714              	.LASF103:
 14715 0627 6D5F6D75 		.ascii	"m_mult\000"
 14715      6C7400
 14716              	.LASF76:
 14717 062e 6B5F695F 		.ascii	"k_i_c\000"
 14717      6300
 14718              	.LASF227:
 14719 0634 6D6F746F 		.ascii	"motor_dir\000"
 14719      725F6469 
 14719      7200
 14720              	.LASF278:
 14721 063e 62696E5F 		.ascii	"bin_st\000"
 14721      737400
 14722              	.LASF99:
 14723 0645 6D6F746F 		.ascii	"motor_voltage\000"
 14723      725F766F 
 14723      6C746167 
 14723      6500
 14724              	.LASF89:
 14725 0653 706F735F 		.ascii	"pos_lim_sup\000"
 14725      6C696D5F 
 14725      73757000 
 14726              	.LASF161:
 14727 065f 6F6C645F 		.ascii	"old_value\000"
 14727      76616C75 
 14727      6500
 14728              	.LASF111:
 14729 0669 656D675F 		.ascii	"emg_speed\000"
 14729      73706565 
 14729      6400
 14730              	.LASF130:
 14731 0673 72657374 		.ascii	"rest_vel\000"
 14731      5F76656C 
 14731      00
 14732              	.LASF168:
 14733 067c 4E4F524D 		.ascii	"NORMAL\000"
 14733      414C00
 14734              	.LASF215:
 14735 0683 6D6F746F 		.ascii	"motor_control_SH\000"
 14735      725F636F 
 14735      6E74726F 
 14735      6C5F5348 
 14735      00
 14736              	.LASF350:
 14737 0694 7046696C 		.ascii	"pFile\000"
 14737      6500
 14738              	.LASF222:
 14739 069a 706F735F 		.ascii	"pos_error_sum\000"
 14739      6572726F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 320


 14739      725F7375 
 14739      6D00
 14740              	.LASF122:
 14741 06a8 4144435F 		.ascii	"ADC_conf\000"
 14741      636F6E66 
 14741      00
 14742              	.LASF324:
 14743 06b1 6465765F 		.ascii	"dev_tension_f\000"
 14743      74656E73 
 14743      696F6E5F 
 14743      6600
 14744              	.LASF79:
 14745 06bf 6B5F695F 		.ascii	"k_i_dl\000"
 14745      646C00
 14746              	.LASF50:
 14747 06c6 62756666 		.ascii	"buffer\000"
 14747      657200
 14748              	.LASF81:
 14749 06cd 6B5F705F 		.ascii	"k_p_c_dl\000"
 14749      635F646C 
 14749      00
 14750              	.LASF189:
 14751 06d6 72785F64 		.ascii	"rx_data_type\000"
 14751      6174615F 
 14751      74797065 
 14751      00
 14752              	.LASF353:
 14753 06e3 675F696D 		.ascii	"g_imuNew\000"
 14753      754E6577 
 14753      00
 14754              	.LASF166:
 14755 06ec 73706565 		.ascii	"speed\000"
 14755      6400
 14756              	.LASF228:
 14757 06f2 706F7369 		.ascii	"position_counter\000"
 14757      74696F6E 
 14757      5F636F75 
 14757      6E746572 
 14757      00
 14758              	.LASF287:
 14759 0703 74696D65 		.ascii	"timer_value_e\000"
 14759      725F7661 
 14759      6C75655F 
 14759      6500
 14760              	.LASF184:
 14761 0711 64617461 		.ascii	"data_packet_index\000"
 14761      5F706163 
 14761      6B65745F 
 14761      696E6465 
 14761      7800
 14762              	.LASF186:
 14763 0723 64617461 		.ascii	"data_packet_buffer\000"
 14763      5F706163 
 14763      6B65745F 
 14763      62756666 
 14763      657200
 14764              	.LASF200:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 321


 14765 0736 73745F72 		.ascii	"st_ref_p\000"
 14765      65665F70 
 14765      00
 14766              	.LASF327:
 14767 073f 6379636C 		.ascii	"cycles_status\000"
 14767      65735F73 
 14767      74617475 
 14767      7300
 14768              	.LASF191:
 14769 074d 636F756E 		.ascii	"counter_calibration\000"
 14769      7465725F 
 14769      63616C69 
 14769      62726174 
 14769      696F6E00 
 14770              	.LASF304:
 14771 0761 675F6D65 		.ascii	"g_meas\000"
 14771      617300
 14772              	.LASF286:
 14773 0768 74696D65 		.ascii	"timer_value_s\000"
 14773      725F7661 
 14773      6C75655F 
 14773      7300
 14774              	.LASF347:
 14775 0776 456E636F 		.ascii	"Encoder_Check\000"
 14775      6465725F 
 14775      43686563 
 14775      6B00
 14776              	.LASF242:
 14777 0784 636F6D70 		.ascii	"comp_value_encoder\000"
 14777      5F76616C 
 14777      75655F65 
 14777      6E636F64 
 14777      657200
 14778              	.LASF290:
 14779 0797 73746172 		.ascii	"start_emg_pos\000"
 14779      745F656D 
 14779      675F706F 
 14779      7300
 14780              	.LASF344:
 14781 07a5 64617461 		.ascii	"data_encoder_raw\000"
 14781      5F656E63 
 14781      6F646572 
 14781      5F726177 
 14781      00
 14782              	.LASF301:
 14783 07b6 675F7265 		.ascii	"g_ref\000"
 14783      6600
 14784              	.LASF25:
 14785 07bc 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14785      545F4D4F 
 14785      44455F45 
 14785      58544552 
 14785      4E414C00 
 14786              	.LASF233:
 14787 07d0 696E6465 		.ascii	"index\000"
 14787      7800
 14788              	.LASF141:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 322


 14789 07d6 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14789      6D756D5F 
 14789      70726573 
 14789      73757265 
 14789      5F6B5061 
 14790              	.LASF131:
 14791 07eb 72657374 		.ascii	"rest_position_flag\000"
 14791      5F706F73 
 14791      6974696F 
 14791      6E5F666C 
 14791      616700
 14792              	.LASF133:
 14793 07fe 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14793      7469636B 
 14793      5F636C6F 
 14793      73757265 
 14793      5F737065 
 14794              	.LASF82:
 14795 0815 6B5F695F 		.ascii	"k_i_c_dl\000"
 14795      635F646C 
 14795      00
 14796              	.LASF190:
 14797 081e 7061636B 		.ascii	"package_count\000"
 14797      6167655F 
 14797      636F756E 
 14797      7400
 14798              	.LASF38:
 14799 082c 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14799      5F414E44 
 14799      5F504F53 
 14799      5F434F4E 
 14799      54524F4C 
 14800              	.LASF164:
 14801 0841 656E6162 		.ascii	"enabled\000"
 14801      6C656400 
 14802              	.LASF5:
 14803 0849 6C6F6E67 		.ascii	"long unsigned int\000"
 14803      20756E73 
 14803      69676E65 
 14803      6420696E 
 14803      7400
 14804              	.LASF351:
 14805 085b 70454D47 		.ascii	"pEMGHFile\000"
 14805      4846696C 
 14805      6500
 14806              	.LASF176:
 14807 0865 57524954 		.ascii	"WRITE_CYCLES\000"
 14807      455F4359 
 14807      434C4553 
 14807      00
 14808              	.LASF135:
 14809 0872 6A6F7973 		.ascii	"joystick_gains\000"
 14809      7469636B 
 14809      5F676169 
 14809      6E7300
 14810              	.LASF45:
 14811 0881 686F6C64 		.ascii	"hold_curr\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 323


 14811      5F637572 
 14811      7200
 14812              	.LASF31:
 14813 088b 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14813      545F4D4F 
 14813      44455F4A 
 14813      4F595354 
 14813      49434B00 
 14814              	.LASF60:
 14815 089f 746F7461 		.ascii	"total_time_rest\000"
 14815      6C5F7469 
 14815      6D655F72 
 14815      65737400 
 14816              	.LASF84:
 14817 08af 61637469 		.ascii	"activ\000"
 14817      7600
 14818              	.LASF267:
 14819 08b5 6D696E5F 		.ascii	"min_tension\000"
 14819      74656E73 
 14819      696F6E00 
 14820              	.LASF339:
 14821 08c1 62617474 		.ascii	"battery_low_SoC\000"
 14821      6572795F 
 14821      6C6F775F 
 14821      536F4300 
 14822              	.LASF199:
 14823 08d1 6D6F746F 		.ascii	"motor_idx\000"
 14823      725F6964 
 14823      7800
 14824              	.LASF102:
 14825 08db 6D5F6F66 		.ascii	"m_off\000"
 14825      6600
 14826              	.LASF332:
 14827 08e1 72657365 		.ascii	"reset_last_value_flag\000"
 14827      745F6C61 
 14827      73745F76 
 14827      616C7565 
 14827      5F666C61 
 14828              	.LASF158:
 14829 08f7 71756174 		.ascii	"quat_value\000"
 14829      5F76616C 
 14829      756500
 14830              	.LASF128:
 14831 0902 72657374 		.ascii	"rest_pos\000"
 14831      5F706F73 
 14831      00
 14832              	.LASF40:
 14833 090b 63757272 		.ascii	"curr\000"
 14833      00
 14834              	.LASF177:
 14835 0910 57414954 		.ascii	"WAIT_QUERY\000"
 14835      5F515545 
 14835      525900
 14836              	.LASF94:
 14837 091b 696E7075 		.ascii	"input_mode\000"
 14837      745F6D6F 
 14837      646500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 324


 14838              	.LASF36:
 14839 0926 434F4E54 		.ascii	"CONTROL_PWM\000"
 14839      524F4C5F 
 14839      50574D00 
 14840              	.LASF268:
 14841 0932 6379636C 		.ascii	"cycles_counter_update\000"
 14841      65735F63 
 14841      6F756E74 
 14841      65725F75 
 14841      70646174 
 14842              	.LASF181:
 14843 0948 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14843      52533438 
 14843      355F5258 
 14843      5F457849 
 14843      6E746572 
 14844              	.LASF355:
 14845 0961 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14845      43313120 
 14845      352E342E 
 14845      31203230 
 14845      31363036 
 14846 0994 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14846      20726576 
 14846      6973696F 
 14846      6E203233 
 14846      37373135 
 14847 09c7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14847      66756E63 
 14847      74696F6E 
 14847      2D736563 
 14847      74696F6E 
 14848              	.LASF42:
 14849 09ef 73745F72 		.ascii	"st_ref\000"
 14849      656600
 14850              	.LASF319:
 14851 09f6 74696D65 		.ascii	"timer_value0\000"
 14851      725F7661 
 14851      6C756530 
 14851      00
 14852              	.LASF127:
 14853 0a03 73745F53 		.ascii	"st_SH_spec\000"
 14853      485F7370 
 14853      656300
 14854              	.LASF248:
 14855 0a0e 765F7661 		.ascii	"v_value\000"
 14855      6C756500 
 14856              	.LASF311:
 14857 0a16 63616C69 		.ascii	"calib\000"
 14857      6200
 14858              	.LASF139:
 14859 0a1c 73745F46 		.ascii	"st_FB_spec\000"
 14859      425F7370 
 14859      656300
 14860              	.LASF6:
 14861 0a27 6C6F6E67 		.ascii	"long long int\000"
 14861      206C6F6E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 325


 14861      6720696E 
 14861      7400
 14862              	.LASF34:
 14863 0a35 53485F63 		.ascii	"SH_control_mode\000"
 14863      6F6E7472 
 14863      6F6C5F6D 
 14863      6F646500 
 14864              	.LASF195:
 14865 0a45 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14865      4E445F4D 
 14865      4F544F52 
 14865      5F494458 
 14865      00
 14866              	.LASF340:
 14867 0a56 6368616E 		.ascii	"change_ext_ref_flag\000"
 14867      67655F65 
 14867      78745F72 
 14867      65665F66 
 14867      6C616700 
 14868              	.LASF19:
 14869 0a6a 646F7562 		.ascii	"double\000"
 14869      6C6500
 14870              	.LASF313:
 14871 0a71 66696C74 		.ascii	"filt_curr_diff\000"
 14871      5F637572 
 14871      725F6469 
 14871      666600
 14872              	.LASF211:
 14873 0a80 706F735F 		.ascii	"pos_sum\000"
 14873      73756D00 
 14874              	.LASF214:
 14875 0a88 696E7465 		.ascii	"interrupt_manager\000"
 14875      72727570 
 14875      745F6D61 
 14875      6E616765 
 14875      7200
 14876              	.LASF101:
 14877 0a9a 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14877      7261775F 
 14877      72656164 
 14877      5F636F6E 
 14877      6600
 14878              	.LASF212:
 14879 0aac 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14879      7574655F 
 14879      536F6674 
 14879      48616E64 
 14879      5F325F6D 
 14880              	.LASF167:
 14881 0ad4 72657065 		.ascii	"repetitions\000"
 14881      74697469 
 14881      6F6E7300 
 14882              	.LASF90:
 14883 0ae0 6D61785F 		.ascii	"max_step_neg\000"
 14883      73746570 
 14883      5F6E6567 
 14883      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 326


 14884              	.LASF247:
 14885 0aed 636F756E 		.ascii	"count_startup_motor\000"
 14885      745F7374 
 14885      61727475 
 14885      705F6D6F 
 14885      746F7200 
 14886              	.LASF138:
 14887 0b01 736C6176 		.ascii	"slave_ID\000"
 14887      655F4944 
 14887      00
 14888              	.LASF172:
 14889 0b0a 57414954 		.ascii	"WAIT\000"
 14889      00
 14890              	.LASF18:
 14891 0b0f 666C6F61 		.ascii	"float\000"
 14891      7400
 14892              	.LASF117:
 14893 0b15 494D555F 		.ascii	"IMU_conf\000"
 14893      636F6E66 
 14893      00
 14894              	.LASF261:
 14895 0b1e 636F756E 		.ascii	"count\000"
 14895      7400
 14896              	.LASF46:
 14897 0b24 73745F61 		.ascii	"st_adc_meas\000"
 14897      64635F6D 
 14897      65617300 
 14898              	.LASF272:
 14899 0b30 656D675F 		.ascii	"emg_excess_status\000"
 14899      65786365 
 14899      73735F73 
 14899      74617475 
 14899      7300
 14900              	.LASF298:
 14901 0b42 6D5F6164 		.ascii	"m_addr\000"
 14901      647200
 14902              	.LASF310:
 14903 0b49 635F6D65 		.ascii	"c_mem\000"
 14903      6D00
 14904              	.LASF8:
 14905 0b4f 756E7369 		.ascii	"unsigned int\000"
 14905      676E6564 
 14905      20696E74 
 14905      00
 14906              	.LASF277:
 14907 0b5c 6D61785F 		.ascii	"max_pos\000"
 14907      706F7300 
 14908              	.LASF349:
 14909 0b64 72657374 		.ascii	"rest_pos_curr_ref\000"
 14909      5F706F73 
 14909      5F637572 
 14909      725F7265 
 14909      6600
 14910              	.LASF148:
 14911 0b76 666C6167 		.ascii	"flag\000"
 14911      00
 14912              	.LASF95:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 327


 14913 0b7b 636F6E74 		.ascii	"control_mode\000"
 14913      726F6C5F 
 14913      6D6F6465 
 14913      00
 14914              	.LASF21:
 14915 0b88 63797374 		.ascii	"cystatus\000"
 14915      61747573 
 14915      00
 14916              	.LASF26:
 14917 0b91 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14917      545F4D4F 
 14917      44455F45 
 14917      4E434F44 
 14917      45523300 
 14918              	.LASF114:
 14919 0ba5 73745F69 		.ascii	"st_imu\000"
 14919      6D7500
 14920              	.LASF206:
 14921 0bac 63757272 		.ascii	"current_emg\000"
 14921      656E745F 
 14921      656D6700 
 14922              	.LASF187:
 14923 0bb8 72785F71 		.ascii	"rx_queue\000"
 14923      75657565 
 14923      00
 14924              	.LASF257:
 14925 0bc1 55445F6D 		.ascii	"UD_mean_value\000"
 14925      65616E5F 
 14925      76616C75 
 14925      6500
 14926              	.LASF232:
 14927 0bcf 6173736F 		.ascii	"assoc_motor\000"
 14927      635F6D6F 
 14927      746F7200 
 14928              	.LASF47:
 14929 0bdb 6164645F 		.ascii	"add_emg\000"
 14929      656D6700 
 14930              	.LASF219:
 14931 0be3 695F7265 		.ascii	"i_ref\000"
 14931      6600
 14932              	.LASF109:
 14933 0be9 656D675F 		.ascii	"emg_threshold\000"
 14933      74687265 
 14933      73686F6C 
 14933      6400
 14934              	.LASF291:
 14935 0bf7 73617665 		.ascii	"save_cycles_eeprom\000"
 14935      5F637963 
 14935      6C65735F 
 14935      65657072 
 14935      6F6D00
 14936              	.LASF106:
 14937 0c0a 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14937      725F6861 
 14937      6E646C65 
 14937      5F726174 
 14937      696F00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 328


 14938              	.LASF56:
 14939 0c1d 63757272 		.ascii	"current_hist\000"
 14939      656E745F 
 14939      68697374 
 14939      00
 14940              	.LASF37:
 14941 0c2a 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14941      524F4C5F 
 14941      43555252 
 14941      454E5400 
 14942              	.LASF23:
 14943 0c3a 6C6F6E67 		.ascii	"long double\000"
 14943      20646F75 
 14943      626C6500 
 14944              	.LASF170:
 14945 0c46 44495343 		.ascii	"DISCARD\000"
 14945      41524400 
 14946              	.LASF224:
 14947 0c4e 70726576 		.ascii	"prev_pos_err\000"
 14947      5F706F73 
 14947      5F657272 
 14947      00
 14948              	.LASF240:
 14949 0c5b 696E6974 		.ascii	"init_rot\000"
 14949      5F726F74 
 14949      00
 14950              	.LASF265:
 14951 0c64 6D6F745F 		.ascii	"mot_idx\000"
 14951      69647800 
 14952              	.LASF314:
 14953 0c6c 66696C74 		.ascii	"filt_i\000"
 14953      5F6900
 14954              	.LASF63:
 14955 0c73 6D6F7469 		.ascii	"motion_counter\000"
 14955      6F6E5F63 
 14955      6F756E74 
 14955      657200
 14956              	.LASF312:
 14957 0c82 66696C74 		.ascii	"filt_v\000"
 14957      5F7600
 14958              	.LASF337:
 14959 0c89 72657374 		.ascii	"rest_enabled\000"
 14959      5F656E61 
 14959      626C6564 
 14959      00
 14960              	.LASF303:
 14961 0c96 675F7265 		.ascii	"g_refOld\000"
 14961      664F6C64 
 14961      00
 14962              	.LASF217:
 14963 0c9f 706F735F 		.ascii	"pos_error\000"
 14963      6572726F 
 14963      7200
 14964              	.LASF156:
 14965 0ca9 6779726F 		.ascii	"gyro_value\000"
 14965      5F76616C 
 14965      756500
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 329


 14966              	.LASF119:
 14967 0cb4 63757272 		.ascii	"curr_time\000"
 14967      5F74696D 
 14967      6500
 14968              	.LASF104:
 14969 0cbe 646F7562 		.ascii	"double_encoder_on_off\000"
 14969      6C655F65 
 14969      6E636F64 
 14969      65725F6F 
 14969      6E5F6F66 
 14970              	.LASF266:
 14971 0cd4 6D61785F 		.ascii	"max_tension\000"
 14971      74656E73 
 14971      696F6E00 
 14972              	.LASF194:
 14973 0ce0 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14973      525F4944 
 14973      5800
 14974              	.LASF241:
 14975 0cea 6C617374 		.ascii	"last_value_encoder\000"
 14975      5F76616C 
 14975      75655F65 
 14975      6E636F64 
 14975      657200
 14976              	.LASF192:
 14977 0cfd 636F756E 		.ascii	"counter_tension_func\000"
 14977      7465725F 
 14977      74656E73 
 14977      696F6E5F 
 14977      66756E63 
 14978              	.LASF320:
 14979 0d12 6379636C 		.ascii	"cycle_time\000"
 14979      655F7469 
 14979      6D6500
 14980              	.LASF213:
 14981 0d1d 66736D5F 		.ascii	"fsm_state\000"
 14981      73746174 
 14981      6500
 14982              	.LASF7:
 14983 0d27 6C6F6E67 		.ascii	"long long unsigned int\000"
 14983      206C6F6E 
 14983      6720756E 
 14983      7369676E 
 14983      65642069 
 14984              	.LASF326:
 14985 0d3e 64657465 		.ascii	"detect_power_cycle\000"
 14985      63745F70 
 14985      6F776572 
 14985      5F637963 
 14985      6C6500
 14986              	.LASF330:
 14987 0d51 6A6F795F 		.ascii	"joy_UD_status\000"
 14987      55445F73 
 14987      74617475 
 14987      7300
 14988              	.LASF271:
 14989 0d5f 6D6F7469 		.ascii	"motion_status\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 330


 14989      6F6E5F73 
 14989      74617475 
 14989      7300
 14990              	.LASF51:
 14991 0d6d 6C656E67 		.ascii	"length\000"
 14991      746800
 14992              	.LASF153:
 14993 0d74 73745F69 		.ascii	"st_imu_data\000"
 14993      6D755F64 
 14993      61746100 
 14994              	.LASF157:
 14995 0d80 6D61675F 		.ascii	"mag_value\000"
 14995      76616C75 
 14995      6500
 14996              	.LASF41:
 14997 0d8a 6F6E6F66 		.ascii	"onoff\000"
 14997      6600
 14998              	.LASF236:
 14999 0d90 746D705F 		.ascii	"tmp_value_encoder_32\000"
 14999      76616C75 
 14999      655F656E 
 14999      636F6465 
 14999      725F3332 
 15000              	.LASF225:
 15001 0da5 70726576 		.ascii	"prev_curr_err\000"
 15001      5F637572 
 15001      725F6572 
 15001      7200
 15002              	.LASF185:
 15003 0db3 64617461 		.ascii	"data_packet_length\000"
 15003      5F706163 
 15003      6B65745F 
 15003      6C656E67 
 15003      746800
 15004              	.LASF75:
 15005 0dc6 6B5F705F 		.ascii	"k_p_c\000"
 15005      6300
 15006              	.LASF321:
 15007 0dcc 6465765F 		.ascii	"dev_tension\000"
 15007      74656E73 
 15007      696F6E00 
 15008              	.LASF86:
 15009 0dd8 6D6F746F 		.ascii	"motor_driver_type\000"
 15009      725F6472 
 15009      69766572 
 15009      5F747970 
 15009      6500
 15010              	.LASF173:
 15011 0dea 57414954 		.ascii	"WAIT_EoC\000"
 15011      5F456F43 
 15011      00
 15012              	.LASF22:
 15013 0df3 72656738 		.ascii	"reg8\000"
 15013      00
 15014              	.LASF280:
 15015 0df8 62696E5F 		.ascii	"bin_1\000"
 15015      3100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 331


 15016              	.LASF281:
 15017 0dfe 62696E5F 		.ascii	"bin_2\000"
 15017      3200
 15018              	.LASF252:
 15019 0e04 695F6175 		.ascii	"i_aux\000"
 15019      7800
 15020              	.LASF142:
 15021 0e0a 70726F70 		.ascii	"prop_err_fb_gain\000"
 15021      5F657272 
 15021      5F66625F 
 15021      6761696E 
 15021      00
 15022              	.LASF210:
 15023 0e1b 706F735F 		.ascii	"pos_diff\000"
 15023      64696666 
 15023      00
 15024              	.LASF293:
 15025 0e24 726F775F 		.ascii	"row_number\000"
 15025      6E756D62 
 15025      657200
 15026              	.LASF263:
 15027 0e2f 6F766572 		.ascii	"overcurrent_control\000"
 15027      63757272 
 15027      656E745F 
 15027      636F6E74 
 15027      726F6C00 
 15028              	.LASF282:
 15029 0e43 63757272 		.ascii	"curr_pos\000"
 15029      5F706F73 
 15029      00
 15030              	.LASF169:
 15031 0e4c 52455345 		.ascii	"RESET\000"
 15031      5400
 15032              	.LASF137:
 15033 0e52 736C6176 		.ascii	"slave_comm_active\000"
 15033      655F636F 
 15033      6D6D5F61 
 15033      63746976 
 15033      6500
 15034              	.LASF251:
 15035 0e64 616E616C 		.ascii	"analog_read_end\000"
 15035      6F675F72 
 15035      6561645F 
 15035      656E6400 
 15036              	.LASF345:
 15037 0e74 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 15037      636F6465 
 15037      725F4C69 
 15037      6E655F43 
 15037      6F6E6E65 
 15038              	.LASF73:
 15039 0e8d 6465765F 		.ascii	"dev_type\000"
 15039      74797065 
 15039      00
 15040              	.LASF270:
 15041 0e96 656D675F 		.ascii	"emg_cycle_status\000"
 15041      6379636C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 332


 15041      655F7374 
 15041      61747573 
 15041      00
 15042              	.LASF124:
 15043 0ea7 73745F75 		.ascii	"st_user\000"
 15043      73657200 
 15044              	.LASF107:
 15045 0eaf 67656172 		.ascii	"gears_params\000"
 15045      735F7061 
 15045      72616D73 
 15045      00
 15046              	.LASF118:
 15047 0ebc 73745F65 		.ascii	"st_expansion\000"
 15047      7870616E 
 15047      73696F6E 
 15047      00
 15048              	.LASF112:
 15049 0ec9 656D675F 		.ascii	"emg_calibration_flag\000"
 15049      63616C69 
 15049      62726174 
 15049      696F6E5F 
 15049      666C6167 
 15050              	.LASF43:
 15051 0ede 73745F6D 		.ascii	"st_meas\000"
 15051      65617300 
 15052              	.LASF295:
 15053 0ee6 61646472 		.ascii	"addr_start\000"
 15053      5F737461 
 15053      727400
 15054              	.LASF299:
 15055 0ef1 70776D5F 		.ascii	"pwm_preload_values\000"
 15055      7072656C 
 15055      6F61645F 
 15055      76616C75 
 15055      657300
 15056              	.LASF134:
 15057 0f04 6A6F7973 		.ascii	"joystick_threshold\000"
 15057      7469636B 
 15057      5F746872 
 15057      6573686F 
 15057      6C6400
 15058              	.LASF32:
 15059 0f17 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 15059      545F4D4F 
 15059      44455F45 
 15059      4D475F50 
 15059      524F504F 
 15060              	.LASF180:
 15061 0f36 636F756E 		.ascii	"counter_status\000"
 15061      7465725F 
 15061      73746174 
 15061      757300
 15062              	.LASF309:
 15063 0f45 675F6D65 		.ascii	"g_mem\000"
 15063      6D00
 15064              	.LASF253:
 15065 0f4b 656D675F 		.ascii	"emg_counter_1\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 333


 15065      636F756E 
 15065      7465725F 
 15065      3100
 15066              	.LASF254:
 15067 0f59 656D675F 		.ascii	"emg_counter_2\000"
 15067      636F756E 
 15067      7465725F 
 15067      3200
 15068              	.LASF244:
 15069 0f67 6F6E6C79 		.ascii	"only_first_time\000"
 15069      5F666972 
 15069      73745F74 
 15069      696D6500 
 15070              	.LASF11:
 15071 0f77 75696E74 		.ascii	"uint8\000"
 15071      3800
 15072              	.LASF132:
 15073 0f7d 73745F4A 		.ascii	"st_JOY_spec\000"
 15073      4F595F73 
 15073      70656300 
 15074              	.LASF239:
 15075 0f89 76616C75 		.ascii	"value_diff\000"
 15075      655F6469 
 15075      666600
 15076              	.LASF284:
 15077 0f94 63757272 		.ascii	"curr_ref\000"
 15077      5F726566 
 15077      00
 15078              	.LASF2:
 15079 0f9d 73686F72 		.ascii	"short int\000"
 15079      7420696E 
 15079      7400
 15080              	.LASF80:
 15081 0fa7 6B5F645F 		.ascii	"k_d_dl\000"
 15081      646C00
 15082              	.LASF237:
 15083 0fae 76616C75 		.ascii	"value_encoder\000"
 15083      655F656E 
 15083      636F6465 
 15083      7200
 15084              	.LASF48:
 15085 0fbc 6A6F7973 		.ascii	"joystick\000"
 15085      7469636B 
 15085      00
 15086              	.LASF150:
 15087 0fc5 6D6F746F 		.ascii	"motor\000"
 15087      7200
 15088              	.LASF323:
 15089 0fcb 6465765F 		.ascii	"dev_pwm_sat\000"
 15089      70776D5F 
 15089      73617400 
 15090              	.LASF66:
 15091 0fd7 68775F6D 		.ascii	"hw_maint_date\000"
 15091      61696E74 
 15091      5F646174 
 15091      6500
 15092              	.LASF197:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 334


 15093 0fe5 66756E63 		.ascii	"function_scheduler\000"
 15093      74696F6E 
 15093      5F736368 
 15093      6564756C 
 15093      657200
 15094              	.LASF198:
 15095 0ff8 636F6D70 		.ascii	"compute_reference\000"
 15095      7574655F 
 15095      72656665 
 15095      72656E63 
 15095      6500
 15096              	.LASF226:
 15097 100a 70726576 		.ascii	"prev_pwm\000"
 15097      5F70776D 
 15097      00
 15098              	.LASF67:
 15099 1013 73746174 		.ascii	"stats_period_begin_date\000"
 15099      735F7065 
 15099      72696F64 
 15099      5F626567 
 15099      696E5F64 
 15100              	.LASF289:
 15101 102b 74696D65 		.ascii	"timer_exc_e\000"
 15101      725F6578 
 15101      635F6500 
 15102              	.LASF300:
 15103 1037 49544D5F 		.ascii	"ITM_RxBuffer\000"
 15103      52784275 
 15103      66666572 
 15103      00
 15104              	.LASF325:
 15105 1044 706F775F 		.ascii	"pow_tension\000"
 15105      74656E73 
 15105      696F6E00 
 15106              	.LASF288:
 15107 1050 74696D65 		.ascii	"timer_exc_s\000"
 15107      725F6578 
 15107      635F7300 
 15108              	.LASF15:
 15109 105c 696E7431 		.ascii	"int16\000"
 15109      3600
 15110              	.LASF120:
 15111 1062 72656164 		.ascii	"read_exp_port_flag\000"
 15111      5F657870 
 15111      5F706F72 
 15111      745F666C 
 15111      616700
 15112              	.LASF275:
 15113 1075 6578635F 		.ascii	"exc_act_thr\000"
 15113      6163745F 
 15113      74687200 
 15114              	.LASF85:
 15115 1081 61637469 		.ascii	"activate_pwm_rescaling\000"
 15115      76617465 
 15115      5F70776D 
 15115      5F726573 
 15115      63616C69 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 335


 15116              	.LASF78:
 15117 1098 6B5F705F 		.ascii	"k_p_dl\000"
 15117      646C00
 15118              	.LASF44:
 15119 109f 65737469 		.ascii	"estim_curr\000"
 15119      6D5F6375 
 15119      727200
 15120              	.LASF322:
 15121 10aa 6465765F 		.ascii	"dev_pwm_limit\000"
 15121      70776D5F 
 15121      6C696D69 
 15121      7400
 15122              	.LASF292:
 15123 10b8 73746174 		.ascii	"status\000"
 15123      757300
 15124              	.LASF218:
 15125 10bf 63757272 		.ascii	"curr_error\000"
 15125      5F657272 
 15125      6F7200
 15126              	.LASF346:
 15127 10ca 456E636F 		.ascii	"Encoder_Value\000"
 15127      6465725F 
 15127      56616C75 
 15127      6500
 15128              	.LASF72:
 15129 10d8 75736572 		.ascii	"user_id\000"
 15129      5F696400 
 15130              	.LASF273:
 15131 10e0 72657374 		.ascii	"rest_cycle_status\000"
 15131      5F637963 
 15131      6C655F73 
 15131      74617475 
 15131      7300
 15132              	.LASF208:
 15133 10f2 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 15133      7574655F 
 15133      536F6674 
 15133      48616E64 
 15133      5F325F6D 
 15134              	.LASF235:
 15135 111f 746D705F 		.ascii	"tmp_value_encoder\000"
 15135      76616C75 
 15135      655F656E 
 15135      636F6465 
 15135      7200
 15136              	.LASF182:
 15137 1131 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 15137      4359434C 
 15137      45535F48 
 15137      616E646C 
 15137      657200
 15138              	.LASF71:
 15139 1144 62617564 		.ascii	"baud_rate\000"
 15139      5F726174 
 15139      6500
 15140              	.LASF145:
 15141 114e 66617374 		.ascii	"fast_act_threshold\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 336


 15141      5F616374 
 15141      5F746872 
 15141      6573686F 
 15141      6C6400
 15142              	.LASF116:
 15143 1161 5350495F 		.ascii	"SPI_read_delay\000"
 15143      72656164 
 15143      5F64656C 
 15143      617900
 15144              	.LASF3:
 15145 1170 73686F72 		.ascii	"short unsigned int\000"
 15145      7420756E 
 15145      7369676E 
 15145      65642069 
 15145      6E7400
 15146              	.LASF100:
 15147 1183 73745F65 		.ascii	"st_encoder\000"
 15147      6E636F64 
 15147      657200
 15148              	.LASF306:
 15149 118e 675F6164 		.ascii	"g_adc_meas\000"
 15149      635F6D65 
 15149      617300
 15150              	.LASF140:
 15151 1199 6D61785F 		.ascii	"max_residual_current\000"
 15151      72657369 
 15151      6475616C 
 15151      5F637572 
 15151      72656E74 
 15152              	.LASF205:
 15153 11ae 454E435F 		.ascii	"ENC_L\000"
 15153      4C00
 15154              	.LASF147:
 15155 11b4 73745F65 		.ascii	"st_eeprom\000"
 15155      6570726F 
 15155      6D00
 15156              	.LASF331:
 15157 11be 6A6F795F 		.ascii	"joy_LR_status\000"
 15157      4C525F73 
 15157      74617475 
 15157      7300
 15158              	.LASF356:
 15159 11cc 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 15159      72635C69 
 15159      6E746572 
 15159      72757074 
 15159      696F6E73 
 15160              	.LASF201:
 15161 11e3 73745F72 		.ascii	"st_refOld_p\000"
 15161      65664F6C 
 15161      645F7000 
 15162              	.LASF16:
 15163 11ef 696E7433 		.ascii	"int32\000"
 15163      3200
 15164              	.LASF342:
 15165 11f5 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 15165      4F465F41 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 337


 15165      4E414C4F 
 15165      475F494E 
 15165      50555453 
 15166              	.LASF74:
 15167 120a 73745F6D 		.ascii	"st_motor\000"
 15167      6F746F72 
 15167      00
 15168              	.LASF354:
 15169 1213 6D617374 		.ascii	"master_mode\000"
 15169      65725F6D 
 15169      6F646500 
 15170              	.LASF39:
 15171 121f 46535F46 		.ascii	"FS_FILE\000"
 15171      494C4500 
 15172              	.LASF87:
 15173 1227 706F735F 		.ascii	"pos_lim_flag\000"
 15173      6C696D5F 
 15173      666C6167 
 15173      00
 15174              	.LASF258:
 15175 1234 4C525F6D 		.ascii	"LR_mean_value\000"
 15175      65616E5F 
 15175      76616C75 
 15175      6500
 15176              	.LASF305:
 15177 1242 675F6D65 		.ascii	"g_measOld\000"
 15177      61734F6C 
 15177      6400
 15178              	.LASF297:
 15179 124c 726F775F 		.ascii	"row_end\000"
 15179      656E6400 
 15180              	.LASF35:
 15181 1254 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 15181      524F4C5F 
 15181      414E474C 
 15181      4500
 15182              	.LASF9:
 15183 1262 5F5F696E 		.ascii	"__int32_t\000"
 15183      7433325F 
 15183      7400
 15184              	.LASF58:
 15185 126c 77697265 		.ascii	"wire_disp\000"
 15185      5F646973 
 15185      7000
 15186              	.LASF336:
 15187 1276 63616E5F 		.ascii	"can_write\000"
 15187      77726974 
 15187      6500
 15188              	.LASF110:
 15189 1280 656D675F 		.ascii	"emg_max_value\000"
 15189      6D61785F 
 15189      76616C75 
 15189      6500
 15190              	.LASF93:
 15191 128e 63757272 		.ascii	"current_limit\000"
 15191      656E745F 
 15191      6C696D69 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\cc5tqPAT.s 			page 338


 15191      7400
 15192              	.LASF33:
 15193 129c 53485F69 		.ascii	"SH_input_mode\000"
 15193      6E707574 
 15193      5F6D6F64 
 15193      6500
 15194              	.LASF179:
 15195 12aa 4E4F4E45 		.ascii	"NONE\000"
 15195      00
 15196              	.LASF144:
 15197 12af 61637469 		.ascii	"activation_mode\000"
 15197      76617469 
 15197      6F6E5F6D 
 15197      6F646500 
 15198              	.LASF12:
 15199 12bf 75696E74 		.ascii	"uint16\000"
 15199      313600
 15200              	.LASF129:
 15201 12c6 72657374 		.ascii	"rest_delay\000"
 15201      5F64656C 
 15201      617900
 15202              	.LASF160:
 15203 12d1 73745F66 		.ascii	"st_filter\000"
 15203      696C7465 
 15203      7200
 15204              	.LASF249:
 15205 12db 76765F76 		.ascii	"vv_value\000"
 15205      616C7565 
 15205      00
 15206              	.LASF83:
 15207 12e4 6B5F645F 		.ascii	"k_d_c_dl\000"
 15207      635F646C 
 15207      00
 15208              	.LASF165:
 15209 12ed 64697265 		.ascii	"direction\000"
 15209      6374696F 
 15209      6E00
 15210              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
