ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interruptions.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	pwm_preload_values, %object
  22              		.size	pwm_preload_values, 29
  23              	pwm_preload_values:
  24 0000 64       		.byte	100
  25 0001 53       		.byte	83
  26 0002 4E       		.byte	78
  27 0003 4C       		.byte	76
  28 0004 4A       		.byte	74
  29 0005 48       		.byte	72
  30 0006 46       		.byte	70
  31 0007 44       		.byte	68
  32 0008 43       		.byte	67
  33 0009 41       		.byte	65
  34 000a 40       		.byte	64
  35 000b 3F       		.byte	63
  36 000c 3E       		.byte	62
  37 000d 3D       		.byte	61
  38 000e 3C       		.byte	60
  39 000f 3B       		.byte	59
  40 0010 3A       		.byte	58
  41 0011 39       		.byte	57
  42 0012 38       		.byte	56
  43 0013 38       		.byte	56
  44 0014 37       		.byte	55
  45 0015 36       		.byte	54
  46 0016 36       		.byte	54
  47 0017 35       		.byte	53
  48 0018 34       		.byte	52
  49 0019 34       		.byte	52
  50 001a 34       		.byte	52
  51 001b 33       		.byte	51
  52 001c 33       		.byte	51
  53              		.section	.text.ISR_RS485_RX_ExInterrupt,"ax",%progbits
  54              		.align	2
  55              		.global	ISR_RS485_RX_ExInterrupt
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 2


  58              		.type	ISR_RS485_RX_ExInterrupt, %function
  59              	ISR_RS485_RX_ExInterrupt:
  60              	.LFB64:
  61              		.file 1 "..\\src\\interruptions.c"
   1:..\src/interruptions.c **** // ----------------------------------------------------------------------------
   2:..\src/interruptions.c **** // BSD 3-Clause License
   3:..\src/interruptions.c **** 
   4:..\src/interruptions.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/interruptions.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/interruptions.c **** // All rights reserved.
   7:..\src/interruptions.c **** 
   8:..\src/interruptions.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/interruptions.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/interruptions.c **** 
  11:..\src/interruptions.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/interruptions.c **** //   list of conditions and the following disclaimer.
  13:..\src/interruptions.c **** 
  14:..\src/interruptions.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/interruptions.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/interruptions.c **** //   and/or other materials provided with the distribution.
  17:..\src/interruptions.c **** 
  18:..\src/interruptions.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/interruptions.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/interruptions.c **** //   this software without specific prior written permission.
  21:..\src/interruptions.c **** 
  22:..\src/interruptions.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/interruptions.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/interruptions.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/interruptions.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/interruptions.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/interruptions.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/interruptions.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/interruptions.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/interruptions.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/interruptions.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/interruptions.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/interruptions.c **** // ----------------------------------------------------------------------------
  34:..\src/interruptions.c **** 
  35:..\src/interruptions.c **** /**
  36:..\src/interruptions.c **** * \file         interruptions.c
  37:..\src/interruptions.c **** *
  38:..\src/interruptions.c **** * \brief        Interruption handling and firmware core functions
  39:..\src/interruptions.c **** * \date         March 20th, 2020
  40:..\src/interruptions.c **** * \author       _Centro "E.Piaggio"_
  41:..\src/interruptions.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  42:..\src/interruptions.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  43:..\src/interruptions.c **** */
  44:..\src/interruptions.c **** 
  45:..\src/interruptions.c **** 
  46:..\src/interruptions.c **** //=================================================================     includes
  47:..\src/interruptions.c **** #include "interruptions.h"
  48:..\src/interruptions.c **** 
  49:..\src/interruptions.c **** //==============================================================================
  50:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  51:..\src/interruptions.c **** //==============================================================================
  52:..\src/interruptions.c **** // Processing RS-485 data frame:
  53:..\src/interruptions.c **** //
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 3


  54:..\src/interruptions.c **** // - 0:     Waits for beginning characters
  55:..\src/interruptions.c **** // - 1:     Waits for ID;
  56:..\src/interruptions.c **** // - 2:     Data length;
  57:..\src/interruptions.c **** // - 3:     Receive all bytes;
  58:..\src/interruptions.c **** // - 4:     Wait for another device end of transmission;
  59:..\src/interruptions.c **** //
  60:..\src/interruptions.c **** //==============================================================================
  61:..\src/interruptions.c **** 
  62:..\src/interruptions.c **** // PWM values needed to obtain 11.5 V given a certain input tension
  63:..\src/interruptions.c **** // Numbers are sperimentally calculated //[index] (millivolts)
  64:..\src/interruptions.c **** static const uint8 pwm_preload_values[29] = {100,    //0 (11500)
  65:..\src/interruptions.c ****                                               83,
  66:..\src/interruptions.c ****                                               78,
  67:..\src/interruptions.c ****                                               76,
  68:..\src/interruptions.c ****                                               74,
  69:..\src/interruptions.c ****                                               72,    //5 (14000)
  70:..\src/interruptions.c ****                                               70,
  71:..\src/interruptions.c ****                                               68,
  72:..\src/interruptions.c ****                                               67,
  73:..\src/interruptions.c ****                                               65,
  74:..\src/interruptions.c ****                                               64,    //10 (16500)
  75:..\src/interruptions.c ****                                               63,
  76:..\src/interruptions.c ****                                               62,
  77:..\src/interruptions.c ****                                               61,
  78:..\src/interruptions.c ****                                               60,
  79:..\src/interruptions.c ****                                               59,    //15 (19000)
  80:..\src/interruptions.c ****                                               58,
  81:..\src/interruptions.c ****                                               57,
  82:..\src/interruptions.c ****                                               56,
  83:..\src/interruptions.c ****                                               56,
  84:..\src/interruptions.c ****                                               55,    //20 (21500)
  85:..\src/interruptions.c ****                                               54,
  86:..\src/interruptions.c ****                                               54,
  87:..\src/interruptions.c ****                                               53,
  88:..\src/interruptions.c ****                                               52,
  89:..\src/interruptions.c ****                                               52,    //25 (24000)
  90:..\src/interruptions.c ****                                               52,
  91:..\src/interruptions.c ****                                               51,
  92:..\src/interruptions.c ****                                               51};   //28 (25500)
  93:..\src/interruptions.c **** 
  94:..\src/interruptions.c **** //==============================================================================
  95:..\src/interruptions.c **** //                                                            RS485 RX INTERRUPT
  96:..\src/interruptions.c **** //==============================================================================
  97:..\src/interruptions.c **** 
  98:..\src/interruptions.c **** CY_ISR(ISR_RS485_RX_ExInterrupt) {
  62              		.loc 1 98 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  99:..\src/interruptions.c **** 
 100:..\src/interruptions.c ****     // Set RS485 flag
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 4


 101:..\src/interruptions.c ****     
 102:..\src/interruptions.c ****     interrupt_flag = TRUE;
  72              		.loc 1 102 0
  73 0004 034B     		ldr	r3, .L2
  74 0006 0122     		movs	r2, #1
  75 0008 1A70     		strb	r2, [r3]
 103:..\src/interruptions.c ****      
 104:..\src/interruptions.c **** }
  76              		.loc 1 104 0
  77 000a 00BF     		nop
  78 000c BD46     		mov	sp, r7
  79              		.cfi_def_cfa_register 13
  80              		@ sp needed
  81 000e 80BC     		pop	{r7}
  82              		.cfi_restore 7
  83              		.cfi_def_cfa_offset 0
  84 0010 7047     		bx	lr
  85              	.L3:
  86 0012 00BF     		.align	2
  87              	.L2:
  88 0014 00000000 		.word	interrupt_flag
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	ISR_RS485_RX_ExInterrupt, .-ISR_RS485_RX_ExInterrupt
  92              		.section	.text.ISR_CYCLES_Handler,"ax",%progbits
  93              		.align	2
  94              		.global	ISR_CYCLES_Handler
  95              		.thumb
  96              		.thumb_func
  97              		.type	ISR_CYCLES_Handler, %function
  98              	ISR_CYCLES_Handler:
  99              	.LFB65:
 105:..\src/interruptions.c **** 
 106:..\src/interruptions.c **** //==============================================================================
 107:..\src/interruptions.c **** //                                                        CYCLES TIMER INTERRUPT
 108:..\src/interruptions.c **** //==============================================================================
 109:..\src/interruptions.c **** CY_ISR(ISR_CYCLES_Handler){
 100              		.loc 1 109 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 110:..\src/interruptions.c **** 
 111:..\src/interruptions.c ****     // Set cycles interrupt flag
 112:..\src/interruptions.c ****     
 113:..\src/interruptions.c ****     cycles_interrupt_flag = TRUE;
 110              		.loc 1 113 0
 111 0004 044B     		ldr	r3, .L5
 112 0006 0122     		movs	r2, #1
 113 0008 1A70     		strb	r2, [r3]
 114:..\src/interruptions.c ****     
 115:..\src/interruptions.c ****     CYCLES_TIMER_STATUS;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 5


 114              		.loc 1 115 0
 115 000a 044B     		ldr	r3, .L5+4
 116 000c 1B78     		ldrb	r3, [r3]
 116:..\src/interruptions.c **** 
 117:..\src/interruptions.c **** }
 117              		.loc 1 117 0
 118 000e 00BF     		nop
 119 0010 BD46     		mov	sp, r7
 120              		.cfi_def_cfa_register 13
 121              		@ sp needed
 122 0012 80BC     		pop	{r7}
 123              		.cfi_restore 7
 124              		.cfi_def_cfa_offset 0
 125 0014 7047     		bx	lr
 126              	.L6:
 127 0016 00BF     		.align	2
 128              	.L5:
 129 0018 00000000 		.word	cycles_interrupt_flag
 130 001c 034F0040 		.word	1073762051
 131              		.cfi_endproc
 132              	.LFE65:
 133              		.size	ISR_CYCLES_Handler, .-ISR_CYCLES_Handler
 134              		.section	.text.interrupt_manager,"ax",%progbits
 135              		.align	2
 136              		.global	interrupt_manager
 137              		.thumb
 138              		.thumb_func
 139              		.type	interrupt_manager, %function
 140              	interrupt_manager:
 141              	.LFB66:
 118:..\src/interruptions.c **** 
 119:..\src/interruptions.c **** //==============================================================================
 120:..\src/interruptions.c **** //                                                             INTERRUPT MANAGER
 121:..\src/interruptions.c **** //==============================================================================
 122:..\src/interruptions.c **** // Manage interrupt from RS485 
 123:..\src/interruptions.c **** //==============================================================================
 124:..\src/interruptions.c **** // Processing RS-485 data frame:
 125:..\src/interruptions.c **** //
 126:..\src/interruptions.c **** // - WAIT_START:    Waits for beginning characters;
 127:..\src/interruptions.c **** // - WAIT_ID:       Waits for ID;
 128:..\src/interruptions.c **** // - WAIT_LENGTH:   Data length;
 129:..\src/interruptions.c **** // - RECEIVE:       Receive all bytes;
 130:..\src/interruptions.c **** // - UNLOAD:        Wait for another device end of transmission;
 131:..\src/interruptions.c **** //
 132:..\src/interruptions.c **** //==============================================================================
 133:..\src/interruptions.c **** 
 134:..\src/interruptions.c **** void interrupt_manager(){
 142              		.loc 1 134 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 6


 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 135:..\src/interruptions.c **** 
 136:..\src/interruptions.c ****     
 137:..\src/interruptions.c ****     //===========================================     local variables definition
 138:..\src/interruptions.c **** 
 139:..\src/interruptions.c ****     static uint8 CYDATA state = WAIT_START;                      // state
 140:..\src/interruptions.c ****     
 141:..\src/interruptions.c ****     //------------------------------------------------- local data packet
 142:..\src/interruptions.c ****     static uint8 CYDATA data_packet_index;
 143:..\src/interruptions.c ****     static uint8 CYDATA data_packet_length;
 144:..\src/interruptions.c ****     static uint8 data_packet_buffer[128];                     
 145:..\src/interruptions.c ****     static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 146:..\src/interruptions.c ****     //-------------------------------------------------
 147:..\src/interruptions.c **** 
 148:..\src/interruptions.c ****     uint8 CYDATA    rx_data;                            // RS485 UART rx data
 149:..\src/interruptions.c ****     CYBIT           rx_data_type = TRUE;                       // my id?
 154              		.loc 1 149 0
 155 0006 0123     		movs	r3, #1
 156 0008 FB71     		strb	r3, [r7, #7]
 150:..\src/interruptions.c ****     uint8 CYDATA    package_count = 0;                     
 157              		.loc 1 150 0
 158 000a 0023     		movs	r3, #0
 159 000c BB71     		strb	r3, [r7, #6]
 151:..\src/interruptions.c **** 
 152:..\src/interruptions.c ****     //======================================================     receive routine
 153:..\src/interruptions.c ****     
 154:..\src/interruptions.c ****     while(UART_RS485_GetRxBufferSize() && (package_count < 100)){
 160              		.loc 1 154 0
 161 000e D6E0     		b	.L8
 162              	.L28:
 155:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 156:..\src/interruptions.c **** 
 157:..\src/interruptions.c ****         // Get next char
 158:..\src/interruptions.c ****         rx_data = UART_RS485_GetChar();
 163              		.loc 1 158 0
 164 0010 FFF7FEFF 		bl	UART_RS485_GetChar
 165 0014 0346     		mov	r3, r0
 166 0016 7B71     		strb	r3, [r7, #5]
 159:..\src/interruptions.c ****         
 160:..\src/interruptions.c ****         switch (state) {
 167              		.loc 1 160 0
 168 0018 6F4B     		ldr	r3, .L31
 169 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 001c 042B     		cmp	r3, #4
 171 001e 00F2CE80 		bhi	.L8
 172 0022 01A2     		adr	r2, .L10
 173 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 174              		.p2align 2
 175              	.L10:
 176 0028 3D000000 		.word	.L9+1
 177 002c A3000000 		.word	.L11+1
 178 0030 CD000000 		.word	.L12+1
 179 0034 1B010000 		.word	.L13+1
 180 0038 85010000 		.word	.L14+1
 181              		.p2align 1
 182              	.L9:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 7


 161:..\src/interruptions.c ****             //-----     wait for frame start     -------------------------------
 162:..\src/interruptions.c ****             case WAIT_START:
 163:..\src/interruptions.c ****             
 164:..\src/interruptions.c ****                 rx_queue[0] = rx_queue[1];
 183              		.loc 1 164 0
 184 003c 674B     		ldr	r3, .L31+4
 185 003e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 186 0040 664B     		ldr	r3, .L31+4
 187 0042 1A70     		strb	r2, [r3]
 165:..\src/interruptions.c ****                 rx_queue[1] = rx_queue[2];
 188              		.loc 1 165 0
 189 0044 654B     		ldr	r3, .L31+4
 190 0046 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 191 0048 644B     		ldr	r3, .L31+4
 192 004a 5A70     		strb	r2, [r3, #1]
 166:..\src/interruptions.c ****                 rx_queue[2] = rx_data;
 193              		.loc 1 166 0
 194 004c 634A     		ldr	r2, .L31+4
 195 004e 7B79     		ldrb	r3, [r7, #5]
 196 0050 9370     		strb	r3, [r2, #2]
 167:..\src/interruptions.c ****                 
 168:..\src/interruptions.c ****                 // Check for header configuration package
 169:..\src/interruptions.c ****                 if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 197              		.loc 1 169 0
 198 0052 624B     		ldr	r3, .L31+4
 199 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 200 0056 3A2B     		cmp	r3, #58
 201 0058 10D1     		bne	.L15
 202              		.loc 1 169 0 is_stmt 0 discriminator 1
 203 005a 604B     		ldr	r3, .L31+4
 204 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 205 005e 3A2B     		cmp	r3, #58
 206 0060 0CD1     		bne	.L15
 170:..\src/interruptions.c ****                     rx_queue[0] = 0;
 207              		.loc 1 170 0 is_stmt 1
 208 0062 5E4B     		ldr	r3, .L31+4
 209 0064 0022     		movs	r2, #0
 210 0066 1A70     		strb	r2, [r3]
 171:..\src/interruptions.c ****                     rx_queue[1] = 0;
 211              		.loc 1 171 0
 212 0068 5C4B     		ldr	r3, .L31+4
 213 006a 0022     		movs	r2, #0
 214 006c 5A70     		strb	r2, [r3, #1]
 172:..\src/interruptions.c ****                     rx_queue[2] = 0;
 215              		.loc 1 172 0
 216 006e 5B4B     		ldr	r3, .L31+4
 217 0070 0022     		movs	r2, #0
 218 0072 9A70     		strb	r2, [r3, #2]
 173:..\src/interruptions.c ****                     state       = WAIT_ID;                    
 219              		.loc 1 173 0
 220 0074 584B     		ldr	r3, .L31
 221 0076 0122     		movs	r2, #1
 222 0078 1A70     		strb	r2, [r3]
 223 007a 11E0     		b	.L16
 224              	.L15:
 174:..\src/interruptions.c ****                 }else
 175:..\src/interruptions.c ****                     if ((rx_queue[0] == 63) &&      //ASCII - ?
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 8


 225              		.loc 1 175 0
 226 007c 574B     		ldr	r3, .L31+4
 227 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 228 0080 3F2B     		cmp	r3, #63
 229 0082 40F09C80 		bne	.L8
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 230              		.loc 1 176 0 discriminator 1
 231 0086 554B     		ldr	r3, .L31+4
 232 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 175:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 233              		.loc 1 175 0 discriminator 1
 234 008a 0D2B     		cmp	r3, #13
 235 008c 40F09780 		bne	.L8
 177:..\src/interruptions.c ****                         (rx_queue[2] == 10))        //ASCII - LF)
 236              		.loc 1 177 0
 237 0090 524B     		ldr	r3, .L31+4
 238 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 176:..\src/interruptions.c ****                         (rx_queue[1] == 13) &&      //ASCII - CR
 239              		.loc 1 176 0
 240 0094 0A2B     		cmp	r3, #10
 241 0096 40F09280 		bne	.L8
 178:..\src/interruptions.c ****                         infoGet(INFO_ALL);
 242              		.loc 1 178 0
 243 009a 0020     		movs	r0, #0
 244 009c FFF7FEFF 		bl	infoGet
 245              	.L16:
 179:..\src/interruptions.c ****                 break;
 246              		.loc 1 179 0
 247 00a0 8DE0     		b	.L8
 248              	.L11:
 180:..\src/interruptions.c **** 
 181:..\src/interruptions.c ****             //-----     wait for id     ----------------------------------------
 182:..\src/interruptions.c ****             case  WAIT_ID:
 183:..\src/interruptions.c **** 
 184:..\src/interruptions.c ****                 // packet is for my ID or is broadcast
 185:..\src/interruptions.c **** #ifdef MASTER_FW
 186:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0 || (c_mem.MS.slave_comm_active && rx_da
 187:..\src/interruptions.c ****                    rx_data_type = FALSE;
 188:..\src/interruptions.c ****                 else                //packet is for others
 189:..\src/interruptions.c ****                     rx_data_type = TRUE;
 190:..\src/interruptions.c **** #else
 191:..\src/interruptions.c ****                 if (rx_data == c_mem.dev.id || rx_data == 0)
 249              		.loc 1 191 0
 250 00a2 4F4B     		ldr	r3, .L31+8
 251 00a4 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 252 00a8 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 00aa 9A42     		cmp	r2, r3
 254 00ac 02D0     		beq	.L17
 255              		.loc 1 191 0 is_stmt 0 discriminator 1
 256 00ae 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 00b0 002B     		cmp	r3, #0
 258 00b2 02D1     		bne	.L18
 259              	.L17:
 192:..\src/interruptions.c ****                     rx_data_type = FALSE;
 260              		.loc 1 192 0 is_stmt 1
 261 00b4 0023     		movs	r3, #0
 262 00b6 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 9


 263 00b8 01E0     		b	.L19
 264              	.L18:
 193:..\src/interruptions.c ****                 else                //packet is for others
 194:..\src/interruptions.c ****                     rx_data_type = TRUE;
 265              		.loc 1 194 0
 266 00ba 0123     		movs	r3, #1
 267 00bc FB71     		strb	r3, [r7, #7]
 268              	.L19:
 195:..\src/interruptions.c **** #endif                
 196:..\src/interruptions.c ****                 data_packet_length = 0;
 269              		.loc 1 196 0
 270 00be 494B     		ldr	r3, .L31+12
 271 00c0 0022     		movs	r2, #0
 272 00c2 1A70     		strb	r2, [r3]
 197:..\src/interruptions.c ****                 state = WAIT_LENGTH;
 273              		.loc 1 197 0
 274 00c4 444B     		ldr	r3, .L31
 275 00c6 0222     		movs	r2, #2
 276 00c8 1A70     		strb	r2, [r3]
 198:..\src/interruptions.c ****                 break;
 277              		.loc 1 198 0
 278 00ca 78E0     		b	.L8
 279              	.L12:
 199:..\src/interruptions.c **** 
 200:..\src/interruptions.c ****             //-----     wait for length     ------------------------------------
 201:..\src/interruptions.c ****             case  WAIT_LENGTH:
 202:..\src/interruptions.c **** 
 203:..\src/interruptions.c ****                 data_packet_length = rx_data;
 280              		.loc 1 203 0
 281 00cc 454A     		ldr	r2, .L31+12
 282 00ce 7B79     		ldrb	r3, [r7, #5]
 283 00d0 1370     		strb	r3, [r2]
 204:..\src/interruptions.c ****                 // check validity of pack length
 205:..\src/interruptions.c ****                 if (data_packet_length <= 1) {
 284              		.loc 1 205 0
 285 00d2 444B     		ldr	r3, .L31+12
 286 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 00d6 012B     		cmp	r3, #1
 288 00d8 06D8     		bhi	.L20
 206:..\src/interruptions.c ****                     data_packet_length = 0;
 289              		.loc 1 206 0
 290 00da 424B     		ldr	r3, .L31+12
 291 00dc 0022     		movs	r2, #0
 292 00de 1A70     		strb	r2, [r3]
 207:..\src/interruptions.c ****                     state = WAIT_START;
 293              		.loc 1 207 0
 294 00e0 3D4B     		ldr	r3, .L31
 295 00e2 0022     		movs	r2, #0
 296 00e4 1A70     		strb	r2, [r3]
 297 00e6 6AE0     		b	.L8
 298              	.L20:
 208:..\src/interruptions.c ****                 } else if (data_packet_length > 128) {
 299              		.loc 1 208 0
 300 00e8 3E4B     		ldr	r3, .L31+12
 301 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 00ec 802B     		cmp	r3, #128
 303 00ee 06D9     		bls	.L22
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 10


 209:..\src/interruptions.c ****                     data_packet_length = 0;
 304              		.loc 1 209 0
 305 00f0 3C4B     		ldr	r3, .L31+12
 306 00f2 0022     		movs	r2, #0
 307 00f4 1A70     		strb	r2, [r3]
 210:..\src/interruptions.c ****                     state = WAIT_START;
 308              		.loc 1 210 0
 309 00f6 384B     		ldr	r3, .L31
 310 00f8 0022     		movs	r2, #0
 311 00fa 1A70     		strb	r2, [r3]
 312 00fc 5FE0     		b	.L8
 313              	.L22:
 211:..\src/interruptions.c ****                 } else {
 212:..\src/interruptions.c ****                     data_packet_index = 0;
 314              		.loc 1 212 0
 315 00fe 3A4B     		ldr	r3, .L31+16
 316 0100 0022     		movs	r2, #0
 317 0102 1A70     		strb	r2, [r3]
 213:..\src/interruptions.c ****                     
 214:..\src/interruptions.c ****                     if(rx_data_type == FALSE)
 318              		.loc 1 214 0
 319 0104 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0106 002B     		cmp	r3, #0
 321 0108 03D1     		bne	.L23
 215:..\src/interruptions.c ****                         state = RECEIVE;          // packet for me or broadcast
 322              		.loc 1 215 0
 323 010a 334B     		ldr	r3, .L31
 324 010c 0322     		movs	r2, #3
 325 010e 1A70     		strb	r2, [r3]
 326 0110 55E0     		b	.L8
 327              	.L23:
 216:..\src/interruptions.c ****                     else
 217:..\src/interruptions.c ****                         state = UNLOAD;           // packet for others
 328              		.loc 1 217 0
 329 0112 314B     		ldr	r3, .L31
 330 0114 0422     		movs	r2, #4
 331 0116 1A70     		strb	r2, [r3]
 218:..\src/interruptions.c ****                 }
 219:..\src/interruptions.c ****                 break;
 332              		.loc 1 219 0
 333 0118 51E0     		b	.L8
 334              	.L13:
 220:..\src/interruptions.c **** 
 221:..\src/interruptions.c ****             //-----     receiving     -------------------------------------------
 222:..\src/interruptions.c ****             case RECEIVE:
 223:..\src/interruptions.c **** 
 224:..\src/interruptions.c ****                 data_packet_buffer[data_packet_index] = rx_data;
 335              		.loc 1 224 0
 336 011a 334B     		ldr	r3, .L31+16
 337 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 011e 1946     		mov	r1, r3
 339 0120 324A     		ldr	r2, .L31+20
 340 0122 7B79     		ldrb	r3, [r7, #5]
 341 0124 5354     		strb	r3, [r2, r1]
 225:..\src/interruptions.c ****                 data_packet_index++;
 342              		.loc 1 225 0
 343 0126 304B     		ldr	r3, .L31+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 11


 344 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 012a 0133     		adds	r3, r3, #1
 346 012c DAB2     		uxtb	r2, r3
 347 012e 2E4B     		ldr	r3, .L31+16
 348 0130 1A70     		strb	r2, [r3]
 226:..\src/interruptions.c ****                 
 227:..\src/interruptions.c ****                 // check end of transmission
 228:..\src/interruptions.c ****                 if (data_packet_index >= data_packet_length) {
 349              		.loc 1 228 0
 350 0132 2D4B     		ldr	r3, .L31+16
 351 0134 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352 0136 2B4B     		ldr	r3, .L31+12
 353 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 013a 9A42     		cmp	r2, r3
 355 013c 3FD3     		bcc	.L8
 229:..\src/interruptions.c ****                     // verify if frame ID corresponded to the device ID
 230:..\src/interruptions.c ****                     if (rx_data_type == FALSE) {
 356              		.loc 1 230 0
 357 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 358 0140 002B     		cmp	r3, #0
 359 0142 12D1     		bne	.L25
 231:..\src/interruptions.c ****                         // copying data from buffer to global packet
 232:..\src/interruptions.c ****                         memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 360              		.loc 1 232 0
 361 0144 274B     		ldr	r3, .L31+12
 362 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0148 1A46     		mov	r2, r3
 364 014a 2849     		ldr	r1, .L31+20
 365 014c 2848     		ldr	r0, .L31+24
 366 014e FFF7FEFF 		bl	memcpy
 233:..\src/interruptions.c ****                         g_rx.length = data_packet_length;
 367              		.loc 1 233 0
 368 0152 244B     		ldr	r3, .L31+12
 369 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0156 1AB2     		sxth	r2, r3
 371 0158 254B     		ldr	r3, .L31+24
 372 015a A3F88020 		strh	r2, [r3, #128]	@ movhi
 234:..\src/interruptions.c ****                         g_rx.ready  = 1;
 373              		.loc 1 234 0
 374 015e 244B     		ldr	r3, .L31+24
 375 0160 0122     		movs	r2, #1
 376 0162 83F88420 		strb	r2, [r3, #132]
 235:..\src/interruptions.c ****                         commProcess();
 377              		.loc 1 235 0
 378 0166 FFF7FEFF 		bl	commProcess
 379              	.L25:
 236:..\src/interruptions.c ****                     }
 237:..\src/interruptions.c ****                     
 238:..\src/interruptions.c ****                     data_packet_index  = 0;
 380              		.loc 1 238 0
 381 016a 1F4B     		ldr	r3, .L31+16
 382 016c 0022     		movs	r2, #0
 383 016e 1A70     		strb	r2, [r3]
 239:..\src/interruptions.c ****                     data_packet_length = 0;
 384              		.loc 1 239 0
 385 0170 1C4B     		ldr	r3, .L31+12
 386 0172 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 12


 387 0174 1A70     		strb	r2, [r3]
 240:..\src/interruptions.c ****                     state              = WAIT_START;
 388              		.loc 1 240 0
 389 0176 184B     		ldr	r3, .L31
 390 0178 0022     		movs	r2, #0
 391 017a 1A70     		strb	r2, [r3]
 241:..\src/interruptions.c ****                     package_count++;
 392              		.loc 1 241 0
 393 017c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 394 017e 0133     		adds	r3, r3, #1
 395 0180 BB71     		strb	r3, [r7, #6]
 242:..\src/interruptions.c ****                 
 243:..\src/interruptions.c ****                 }
 244:..\src/interruptions.c ****                 break;
 396              		.loc 1 244 0
 397 0182 1CE0     		b	.L8
 398              	.L14:
 245:..\src/interruptions.c **** 
 246:..\src/interruptions.c ****             //-----     other device is receving     ---------------------------
 247:..\src/interruptions.c ****             case UNLOAD:
 248:..\src/interruptions.c ****                 if (!(--data_packet_length)) {
 399              		.loc 1 248 0
 400 0184 174B     		ldr	r3, .L31+12
 401 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 402 0188 013B     		subs	r3, r3, #1
 403 018a DAB2     		uxtb	r2, r3
 404 018c 154B     		ldr	r3, .L31+12
 405 018e 1A70     		strb	r2, [r3]
 406 0190 144B     		ldr	r3, .L31+12
 407 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 0194 002B     		cmp	r3, #0
 409 0196 11D1     		bne	.L30
 249:..\src/interruptions.c ****                     data_packet_index  = 0;
 410              		.loc 1 249 0
 411 0198 134B     		ldr	r3, .L31+16
 412 019a 0022     		movs	r2, #0
 413 019c 1A70     		strb	r2, [r3]
 250:..\src/interruptions.c ****                     data_packet_length = 0;
 414              		.loc 1 250 0
 415 019e 114B     		ldr	r3, .L31+12
 416 01a0 0022     		movs	r2, #0
 417 01a2 1A70     		strb	r2, [r3]
 251:..\src/interruptions.c ****                     RS485_CTS_Write(1);
 418              		.loc 1 251 0
 419 01a4 0120     		movs	r0, #1
 420 01a6 FFF7FEFF 		bl	RS485_CTS_Write
 252:..\src/interruptions.c ****                     RS485_CTS_Write(0);
 421              		.loc 1 252 0
 422 01aa 0020     		movs	r0, #0
 423 01ac FFF7FEFF 		bl	RS485_CTS_Write
 253:..\src/interruptions.c ****                     state              = WAIT_START;
 424              		.loc 1 253 0
 425 01b0 094B     		ldr	r3, .L31
 426 01b2 0022     		movs	r2, #0
 427 01b4 1A70     		strb	r2, [r3]
 254:..\src/interruptions.c ****                     package_count++;
 428              		.loc 1 254 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 13


 429 01b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 430 01b8 0133     		adds	r3, r3, #1
 431 01ba BB71     		strb	r3, [r7, #6]
 432              	.L30:
 255:..\src/interruptions.c ****                 }
 256:..\src/interruptions.c ****                 break;
 433              		.loc 1 256 0
 434 01bc 00BF     		nop
 435              	.L8:
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 436              		.loc 1 154 0
 437 01be FFF7FEFF 		bl	UART_RS485_GetRxBufferSize
 438 01c2 0346     		mov	r3, r0
 439 01c4 002B     		cmp	r3, #0
 440 01c6 03D0     		beq	.L29
 154:..\src/interruptions.c ****         // 100 - estimated maximum number of packets we can read without blocking firmware executio
 441              		.loc 1 154 0 is_stmt 0 discriminator 1
 442 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 443 01ca 632B     		cmp	r3, #99
 444 01cc 7FF620AF 		bls	.L28
 445              	.L29:
 257:..\src/interruptions.c ****         }
 258:..\src/interruptions.c ****     }
 259:..\src/interruptions.c **** }
 446              		.loc 1 259 0 is_stmt 1
 447 01d0 00BF     		nop
 448 01d2 0837     		adds	r7, r7, #8
 449              		.cfi_def_cfa_offset 8
 450 01d4 BD46     		mov	sp, r7
 451              		.cfi_def_cfa_register 13
 452              		@ sp needed
 453 01d6 80BD     		pop	{r7, pc}
 454              	.L32:
 455              		.align	2
 456              	.L31:
 457 01d8 00000000 		.word	state.10464
 458 01dc 04000000 		.word	rx_queue.10468
 459 01e0 00000000 		.word	c_mem
 460 01e4 07000000 		.word	data_packet_length.10466
 461 01e8 08000000 		.word	data_packet_index.10465
 462 01ec 0C000000 		.word	data_packet_buffer.10467
 463 01f0 00000000 		.word	g_rx
 464              		.cfi_endproc
 465              	.LFE66:
 466              		.size	interrupt_manager, .-interrupt_manager
 467              		.section	.rodata
 468 001d 000000   		.align	2
 469              	.LC0:
 470 0020 00       		.ascii	"\000"
 471              		.global	__aeabi_i2f
 472              		.global	__aeabi_fdiv
 473              		.section	.text.function_scheduler,"ax",%progbits
 474              		.align	2
 475              		.global	function_scheduler
 476              		.thumb
 477              		.thumb_func
 478              		.type	function_scheduler, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 14


 479              	function_scheduler:
 480              	.LFB67:
 260:..\src/interruptions.c **** //==============================================================================
 261:..\src/interruptions.c **** //                                                            FUNCTION SCHEDULER
 262:..\src/interruptions.c **** //==============================================================================
 263:..\src/interruptions.c **** // Call all the function with the right frequency
 264:..\src/interruptions.c **** //==============================================================================
 265:..\src/interruptions.c **** // Base frequency 5000 Hz (110 us - max. 200 us cycle time)
 266:..\src/interruptions.c **** //==============================================================================
 267:..\src/interruptions.c **** 
 268:..\src/interruptions.c **** void function_scheduler(void) {
 481              		.loc 1 268 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 17504
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 B0B5     		push	{r4, r5, r7, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 4, -16
 488              		.cfi_offset 5, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 ADF5884D 		sub	sp, sp, #17408
 492              		.cfi_def_cfa_offset 17424
 493 0006 98B0     		sub	sp, sp, #96
 494              		.cfi_def_cfa_offset 17520
 495 0008 00AF     		add	r7, sp, #0
 496              		.cfi_def_cfa_register 7
 269:..\src/interruptions.c ****  
 270:..\src/interruptions.c ****     static uint16 counter_calibration = DIV_INIT_VALUE;
 271:..\src/interruptions.c ****     static uint16 counter_tension_func = DIV_INIT_VALUE;
 272:..\src/interruptions.c ****     char info_[2500] = "";
 497              		.loc 1 272 0
 498 000a 07F56A53 		add	r3, r7, #14976
 499 000e 03F11803 		add	r3, r3, #24
 500 0012 0022     		movs	r2, #0
 501 0014 1A60     		str	r2, [r3]
 502 0016 0433     		adds	r3, r3, #4
 503 0018 4FF41C62 		mov	r2, #2496
 504 001c 0021     		movs	r1, #0
 505 001e 1846     		mov	r0, r3
 506 0020 FFF7FEFF 		bl	memset
 273:..\src/interruptions.c ****     
 274:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 507              		.loc 1 274 0
 508 0024 0023     		movs	r3, #0
 509 0026 07F58842 		add	r2, r7, #17408
 510 002a 02F15E02 		add	r2, r2, #94
 511 002e 1370     		strb	r3, [r2]
 275:..\src/interruptions.c ****     uint8 SECOND_MOTOR_IDX = 1;
 512              		.loc 1 275 0
 513 0030 0123     		movs	r3, #1
 514 0032 07F58842 		add	r2, r7, #17408
 515 0036 02F15D02 		add	r2, r2, #93
 516 003a 1370     		strb	r3, [r2]
 276:..\src/interruptions.c ****     
 277:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x00);
 517              		.loc 1 277 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 15


 518 003c 0020     		movs	r0, #0
 519 003e FFF7FEFF 		bl	MY_TIMER_REG_Write
 278:..\src/interruptions.c ****     timer_value0 = (uint32)MY_TIMER_ReadCounter();
 520              		.loc 1 278 0
 521 0042 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 522 0046 0346     		mov	r3, r0
 523 0048 1A46     		mov	r2, r3
 524 004a 804B     		ldr	r3, .L84
 525 004c 1A80     		strh	r2, [r3]	@ movhi
 279:..\src/interruptions.c ****     // Start ADC Conversion, SOC = 1
 280:..\src/interruptions.c **** 
 281:..\src/interruptions.c ****     ADC_SOC_Write(0x01); 
 526              		.loc 1 281 0
 527 004e 0120     		movs	r0, #1
 528 0050 FFF7FEFF 		bl	ADC_SOC_Write
 282:..\src/interruptions.c ****     
 283:..\src/interruptions.c ****     // Check Interrupt 
 284:..\src/interruptions.c **** 
 285:..\src/interruptions.c ****     if (interrupt_flag){
 529              		.loc 1 285 0
 530 0054 7E4B     		ldr	r3, .L84+4
 531 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 532 0058 002B     		cmp	r3, #0
 533 005a 04D0     		beq	.L34
 286:..\src/interruptions.c ****         interrupt_flag = FALSE;
 534              		.loc 1 286 0
 535 005c 7C4B     		ldr	r3, .L84+4
 536 005e 0022     		movs	r2, #0
 537 0060 1A70     		strb	r2, [r3]
 287:..\src/interruptions.c ****         interrupt_manager();
 538              		.loc 1 287 0
 539 0062 FFF7FEFF 		bl	interrupt_manager
 540              	.L34:
 288:..\src/interruptions.c ****     }
 289:..\src/interruptions.c ****     
 290:..\src/interruptions.c ****     switch(c_mem.dev.dev_type){
 541              		.loc 1 290 0
 542 0066 7B4B     		ldr	r3, .L84+8
 543 0068 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 544 006c 042B     		cmp	r3, #4
 545 006e 00F24E82 		bhi	.L35
 546 0072 01A2     		adr	r2, .L37
 547 0074 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 548              		.p2align 2
 549              	.L37:
 550 0078 8D000000 		.word	.L36+1
 551 007c 8F010000 		.word	.L38+1
 552 0080 F3030000 		.word	.L39+1
 553 0084 F3030000 		.word	.L39+1
 554 0088 8F010000 		.word	.L38+1
 555              		.p2align 1
 556              	.L36:
 291:..\src/interruptions.c ****         case SOFTHAND_PRO:
 292:..\src/interruptions.c ****         
 293:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 294:..\src/interruptions.c ****             
 295:..\src/interruptions.c ****             // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 16


 296:..\src/interruptions.c ****             if (N_Encoder_Line_Connected[c_mem.motor[MOTOR_IDX].encoder_line] > 0) {
 557              		.loc 1 296 0
 558 008c 07F58843 		add	r3, r7, #17408
 559 0090 03F15E03 		add	r3, r3, #94
 560 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 561 0096 6F4A     		ldr	r2, .L84+8
 562 0098 7421     		movs	r1, #116
 563 009a 01FB03F3 		mul	r3, r1, r3
 564 009e 1344     		add	r3, r3, r2
 565 00a0 03F58873 		add	r3, r3, #272
 566 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 567 00a6 1A46     		mov	r2, r3
 568 00a8 6B4B     		ldr	r3, .L84+12
 569 00aa 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 570 00ac 002B     		cmp	r3, #0
 571 00ae 29D0     		beq	.L40
 297:..\src/interruptions.c ****                 // Change CS only if there are attached encoders on the line
 298:..\src/interruptions.c ****                 Change_CS_EncoderLine(c_mem.motor[MOTOR_IDX].encoder_line);
 572              		.loc 1 298 0
 573 00b0 07F58843 		add	r3, r7, #17408
 574 00b4 03F15E03 		add	r3, r3, #94
 575 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 576 00ba 664A     		ldr	r2, .L84+8
 577 00bc 7421     		movs	r1, #116
 578 00be 01FB03F3 		mul	r3, r1, r3
 579 00c2 1344     		add	r3, r3, r2
 580 00c4 03F58873 		add	r3, r3, #272
 581 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 582 00ca 1846     		mov	r0, r3
 583 00cc FFF7FEFF 		bl	Change_CS_EncoderLine
 299:..\src/interruptions.c ****                 
 300:..\src/interruptions.c ****                 encoder_reading_SPI(c_mem.motor[MOTOR_IDX].encoder_line, 0);    // assoc_motor = 0 
 584              		.loc 1 300 0
 585 00d0 07F58843 		add	r3, r7, #17408
 586 00d4 03F15E03 		add	r3, r3, #94
 587 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 00da 5E4A     		ldr	r2, .L84+8
 589 00dc 7421     		movs	r1, #116
 590 00de 01FB03F3 		mul	r3, r1, r3
 591 00e2 1344     		add	r3, r3, r2
 592 00e4 03F58873 		add	r3, r3, #272
 593 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 594 00ea 0021     		movs	r1, #0
 595 00ec 1846     		mov	r0, r3
 596 00ee FFF7FEFF 		bl	encoder_reading_SPI
 301:..\src/interruptions.c **** 
 302:..\src/interruptions.c ****                 // Check Interrupt     
 303:..\src/interruptions.c ****                 
 304:..\src/interruptions.c ****                 if (interrupt_flag){
 597              		.loc 1 304 0
 598 00f2 574B     		ldr	r3, .L84+4
 599 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600 00f6 002B     		cmp	r3, #0
 601 00f8 04D0     		beq	.L40
 305:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 602              		.loc 1 305 0
 603 00fa 554B     		ldr	r3, .L84+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 17


 604 00fc 0022     		movs	r2, #0
 605 00fe 1A70     		strb	r2, [r3]
 306:..\src/interruptions.c ****                     interrupt_manager();
 606              		.loc 1 306 0
 607 0100 FFF7FEFF 		bl	interrupt_manager
 608              	.L40:
 307:..\src/interruptions.c ****                 }
 308:..\src/interruptions.c ****             }
 309:..\src/interruptions.c ****             
 310:..\src/interruptions.c ****             //---------------------------------- Control SH Motor
 311:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 609              		.loc 1 311 0
 610 0104 07F58843 		add	r3, r7, #17408
 611 0108 03F15E03 		add	r3, r3, #94
 612 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 613 010e 514A     		ldr	r2, .L84+8
 614 0110 7421     		movs	r1, #116
 615 0112 01FB03F3 		mul	r3, r1, r3
 616 0116 1344     		add	r3, r3, r2
 617 0118 03F58873 		add	r3, r3, #272
 618 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 619 011e 1A46     		mov	r2, r3
 620 0120 4E4B     		ldr	r3, .L84+16
 621 0122 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 622 0124 002B     		cmp	r3, #0
 623 0126 27D0     		beq	.L41
 312:..\src/interruptions.c ****                 motor_control_SH();
 624              		.loc 1 312 0
 625 0128 FFF7FEFF 		bl	motor_control_SH
 313:..\src/interruptions.c ****                 
 314:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 315:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 626              		.loc 1 315 0
 627 012c 07F58843 		add	r3, r7, #17408
 628 0130 03F15E03 		add	r3, r3, #94
 629 0134 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 630 0136 474A     		ldr	r2, .L84+8
 631 0138 7421     		movs	r1, #116
 632 013a 01FB03F3 		mul	r3, r1, r3
 633 013e 1344     		add	r3, r3, r2
 634 0140 03F58973 		add	r3, r3, #274
 635 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 636 0146 012B     		cmp	r3, #1
 637 0148 16D1     		bne	.L41
 316:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 638              		.loc 1 316 0
 639 014a 07F58843 		add	r3, r7, #17408
 640 014e 03F15E03 		add	r3, r3, #94
 641 0152 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 642 0154 3F4A     		ldr	r2, .L84+8
 643 0156 7421     		movs	r1, #116
 644 0158 01FB03F3 		mul	r3, r1, r3
 645 015c 1344     		add	r3, r3, r2
 646 015e 03F58773 		add	r3, r3, #270
 647 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 648 0164 002B     		cmp	r3, #0
 649 0166 07D1     		bne	.L41
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 18


 317:..\src/interruptions.c ****                         change_ext_ref_flag[MOTOR_IDX] = FALSE;
 650              		.loc 1 317 0
 651 0168 07F58843 		add	r3, r7, #17408
 652 016c 03F15E03 		add	r3, r3, #94
 653 0170 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 654 0172 3B4A     		ldr	r2, .L84+20
 655 0174 0021     		movs	r1, #0
 656 0176 D154     		strb	r1, [r2, r3]
 657              	.L41:
 318:..\src/interruptions.c ****                     }   
 319:..\src/interruptions.c ****                 }
 320:..\src/interruptions.c ****             }
 321:..\src/interruptions.c **** 
 322:..\src/interruptions.c ****             // Check Interrupt 
 323:..\src/interruptions.c **** 
 324:..\src/interruptions.c ****             if (interrupt_flag){
 658              		.loc 1 324 0
 659 0178 354B     		ldr	r3, .L84+4
 660 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 661 017c 002B     		cmp	r3, #0
 662 017e 00F0B281 		beq	.L81
 325:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 663              		.loc 1 325 0
 664 0182 334B     		ldr	r3, .L84+4
 665 0184 0022     		movs	r2, #0
 666 0186 1A70     		strb	r2, [r3]
 326:..\src/interruptions.c ****                 interrupt_manager();
 667              		.loc 1 326 0
 668 0188 FFF7FEFF 		bl	interrupt_manager
 327:..\src/interruptions.c ****             }
 328:..\src/interruptions.c ****             break;
 669              		.loc 1 328 0
 670 018c ABE1     		b	.L81
 671              	.L38:
 672              	.LBB2:
 329:..\src/interruptions.c ****             
 330:..\src/interruptions.c ****         case GENERIC_2_MOTORS: case SOFTHAND_2_MOTORS:
 331:..\src/interruptions.c ****             
 332:..\src/interruptions.c ****             //---------------------------------- Get Encoders
 333:..\src/interruptions.c ****             for (uint8 i = 0; i < N_ENCODER_LINE_MAX; i++) {
 673              		.loc 1 333 0
 674 018e 0023     		movs	r3, #0
 675 0190 07F58842 		add	r2, r7, #17408
 676 0194 02F15F02 		add	r2, r2, #95
 677 0198 1370     		strb	r3, [r2]
 678 019a 88E0     		b	.L43
 679              	.L48:
 334:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 680              		.loc 1 334 0
 681 019c 07F58843 		add	r3, r7, #17408
 682 01a0 03F15F03 		add	r3, r3, #95
 683 01a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 01a6 2C4A     		ldr	r2, .L84+12
 685 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 686 01aa 002B     		cmp	r3, #0
 687 01ac 74D0     		beq	.L44
 335:..\src/interruptions.c ****                     // Change CS only if there are attached encoders on the line
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 19


 336:..\src/interruptions.c ****                     Change_CS_EncoderLine(i);
 688              		.loc 1 336 0
 689 01ae 07F58843 		add	r3, r7, #17408
 690 01b2 03F15F03 		add	r3, r3, #95
 691 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 692 01b8 1846     		mov	r0, r3
 693 01ba FFF7FEFF 		bl	Change_CS_EncoderLine
 337:..\src/interruptions.c ****                               
 338:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].encoder_line == i) {
 694              		.loc 1 338 0
 695 01be 07F58843 		add	r3, r7, #17408
 696 01c2 03F15E03 		add	r3, r3, #94
 697 01c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 698 01c8 224A     		ldr	r2, .L84+8
 699 01ca 7421     		movs	r1, #116
 700 01cc 01FB03F3 		mul	r3, r1, r3
 701 01d0 1344     		add	r3, r3, r2
 702 01d2 03F58873 		add	r3, r3, #272
 703 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 704 01d8 07F58842 		add	r2, r7, #17408
 705 01dc 02F15F02 		add	r2, r2, #95
 706 01e0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 707 01e2 9A42     		cmp	r2, r3
 708 01e4 0ED1     		bne	.L45
 339:..\src/interruptions.c ****                         // Check if the line is used to control motor or not
 340:..\src/interruptions.c ****                         encoder_reading_SPI(i, MOTOR_IDX); 
 709              		.loc 1 340 0
 710 01e6 07F58843 		add	r3, r7, #17408
 711 01ea 03F15E03 		add	r3, r3, #94
 712 01ee 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 713 01f0 07F58843 		add	r3, r7, #17408
 714 01f4 03F15F03 		add	r3, r3, #95
 715 01f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 716 01fa 1146     		mov	r1, r2
 717 01fc 1846     		mov	r0, r3
 718 01fe FFF7FEFF 		bl	encoder_reading_SPI
 719 0202 40E0     		b	.L46
 720              	.L45:
 341:..\src/interruptions.c ****                     }
 342:..\src/interruptions.c ****                     else {
 343:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].encoder_line == i) {
 721              		.loc 1 343 0
 722 0204 07F58843 		add	r3, r7, #17408
 723 0208 03F15D03 		add	r3, r3, #93
 724 020c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 725 020e 114A     		ldr	r2, .L84+8
 726 0210 7421     		movs	r1, #116
 727 0212 01FB03F3 		mul	r3, r1, r3
 728 0216 1344     		add	r3, r3, r2
 729 0218 03F58873 		add	r3, r3, #272
 730 021c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 731 021e 07F58842 		add	r2, r7, #17408
 732 0222 02F15F02 		add	r2, r2, #95
 733 0226 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 734 0228 9A42     		cmp	r2, r3
 735 022a 1BD1     		bne	.L47
 344:..\src/interruptions.c ****                             // Check if the line is used to control motor or not
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 20


 345:..\src/interruptions.c ****                             encoder_reading_SPI(i, SECOND_MOTOR_IDX); 
 736              		.loc 1 345 0
 737 022c 07F58843 		add	r3, r7, #17408
 738 0230 03F15D03 		add	r3, r3, #93
 739 0234 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 740 0236 07F58843 		add	r3, r7, #17408
 741 023a 03F15F03 		add	r3, r3, #95
 742 023e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 743 0240 1146     		mov	r1, r2
 744 0242 1846     		mov	r0, r3
 745 0244 FFF7FEFF 		bl	encoder_reading_SPI
 746 0248 1DE0     		b	.L46
 747              	.L85:
 748 024a 00BF     		.align	2
 749              	.L84:
 750 024c 00000000 		.word	timer_value0
 751 0250 00000000 		.word	interrupt_flag
 752 0254 00000000 		.word	c_mem
 753 0258 00000000 		.word	N_Encoder_Line_Connected
 754 025c 00000000 		.word	pos_reconstruct
 755 0260 00000000 		.word	change_ext_ref_flag
 756              	.L47:
 346:..\src/interruptions.c ****                         }
 347:..\src/interruptions.c ****                         else {
 348:..\src/interruptions.c ****                             // Get only raw encoder value
 349:..\src/interruptions.c ****                             ReadEncoderLine(N_Encoder_Line_Connected[i], i);
 757              		.loc 1 349 0
 758 0264 07F58843 		add	r3, r7, #17408
 759 0268 03F15F03 		add	r3, r3, #95
 760 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 761 026e A04A     		ldr	r2, .L86
 762 0270 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 763 0272 1A46     		mov	r2, r3
 764 0274 07F58843 		add	r3, r7, #17408
 765 0278 03F15F03 		add	r3, r3, #95
 766 027c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 767 027e 1946     		mov	r1, r3
 768 0280 1046     		mov	r0, r2
 769 0282 FFF7FEFF 		bl	ReadEncoderLine
 770              	.L46:
 350:..\src/interruptions.c ****                             // Values are stored in Encoder_Value[i] vector
 351:..\src/interruptions.c ****                         }
 352:..\src/interruptions.c ****                     }
 353:..\src/interruptions.c **** 
 354:..\src/interruptions.c ****                     // Check Interrupt     
 355:..\src/interruptions.c ****                     
 356:..\src/interruptions.c ****                     if (interrupt_flag){
 771              		.loc 1 356 0
 772 0286 9B4B     		ldr	r3, .L86+4
 773 0288 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 028a 002B     		cmp	r3, #0
 775 028c 04D0     		beq	.L44
 357:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 776              		.loc 1 357 0
 777 028e 994B     		ldr	r3, .L86+4
 778 0290 0022     		movs	r2, #0
 779 0292 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 21


 358:..\src/interruptions.c ****                         interrupt_manager();
 780              		.loc 1 358 0
 781 0294 FFF7FEFF 		bl	interrupt_manager
 782              	.L44:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 783              		.loc 1 333 0 discriminator 2
 784 0298 07F58843 		add	r3, r7, #17408
 785 029c 03F15F03 		add	r3, r3, #95
 786 02a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 787 02a2 0133     		adds	r3, r3, #1
 788 02a4 07F58842 		add	r2, r7, #17408
 789 02a8 02F15F02 		add	r2, r2, #95
 790 02ac 1370     		strb	r3, [r2]
 791              	.L43:
 333:..\src/interruptions.c ****                 if (N_Encoder_Line_Connected[i] > 0) {
 792              		.loc 1 333 0 is_stmt 0 discriminator 1
 793 02ae 07F58843 		add	r3, r7, #17408
 794 02b2 03F15F03 		add	r3, r3, #95
 795 02b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 796 02b8 012B     		cmp	r3, #1
 797 02ba 7FF66FAF 		bls	.L48
 798              	.LBE2:
 359:..\src/interruptions.c ****                     }
 360:..\src/interruptions.c ****                 }
 361:..\src/interruptions.c ****             } 
 362:..\src/interruptions.c ****             
 363:..\src/interruptions.c ****             //---------------------------------- Control Motor
 364:..\src/interruptions.c ****             if (pos_reconstruct[c_mem.motor[MOTOR_IDX].encoder_line]){      // Once encoder line re
 799              		.loc 1 364 0 is_stmt 1
 800 02be 07F58843 		add	r3, r7, #17408
 801 02c2 03F15E03 		add	r3, r3, #94
 802 02c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 803 02c8 8B4A     		ldr	r2, .L86+8
 804 02ca 7421     		movs	r1, #116
 805 02cc 01FB03F3 		mul	r3, r1, r3
 806 02d0 1344     		add	r3, r3, r2
 807 02d2 03F58873 		add	r3, r3, #272
 808 02d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 809 02d8 1A46     		mov	r2, r3
 810 02da 884B     		ldr	r3, .L86+12
 811 02dc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 812 02de 002B     		cmp	r3, #0
 813 02e0 2DD0     		beq	.L49
 365:..\src/interruptions.c ****                 // Control MOTOR_IDX motor (always active) according to motor driver type
 366:..\src/interruptions.c ****                 motor_control_generic(MOTOR_IDX);
 814              		.loc 1 366 0
 815 02e2 07F58843 		add	r3, r7, #17408
 816 02e6 03F15E03 		add	r3, r3, #94
 817 02ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 818 02ec 1846     		mov	r0, r3
 819 02ee FFF7FEFF 		bl	motor_control_generic
 367:..\src/interruptions.c ****                 
 368:..\src/interruptions.c ****                 // Check external reference before processing other serial data and right after mot
 369:..\src/interruptions.c ****                 if (c_mem.motor[MOTOR_IDX].not_revers_motor_flag == TRUE) {
 820              		.loc 1 369 0
 821 02f2 07F58843 		add	r3, r7, #17408
 822 02f6 03F15E03 		add	r3, r3, #94
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 22


 823 02fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 824 02fc 7E4A     		ldr	r2, .L86+8
 825 02fe 7421     		movs	r1, #116
 826 0300 01FB03F3 		mul	r3, r1, r3
 827 0304 1344     		add	r3, r3, r2
 828 0306 03F58973 		add	r3, r3, #274
 829 030a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 830 030c 012B     		cmp	r3, #1
 831 030e 16D1     		bne	.L49
 370:..\src/interruptions.c ****                     if (c_mem.motor[MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 832              		.loc 1 370 0
 833 0310 07F58843 		add	r3, r7, #17408
 834 0314 03F15E03 		add	r3, r3, #94
 835 0318 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 836 031a 774A     		ldr	r2, .L86+8
 837 031c 7421     		movs	r1, #116
 838 031e 01FB03F3 		mul	r3, r1, r3
 839 0322 1344     		add	r3, r3, r2
 840 0324 03F58773 		add	r3, r3, #270
 841 0328 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 842 032a 002B     		cmp	r3, #0
 843 032c 07D1     		bne	.L49
 371:..\src/interruptions.c ****                         change_ext_ref_flag[MOTOR_IDX] = FALSE;
 844              		.loc 1 371 0
 845 032e 07F58843 		add	r3, r7, #17408
 846 0332 03F15E03 		add	r3, r3, #94
 847 0336 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 848 0338 714A     		ldr	r2, .L86+16
 849 033a 0021     		movs	r1, #0
 850 033c D154     		strb	r1, [r2, r3]
 851              	.L49:
 372:..\src/interruptions.c ****                     }   
 373:..\src/interruptions.c ****                 }
 374:..\src/interruptions.c ****                      
 375:..\src/interruptions.c ****                 
 376:..\src/interruptions.c ****             }
 377:..\src/interruptions.c ****             
 378:..\src/interruptions.c ****             // Check Interrupt 
 379:..\src/interruptions.c **** 
 380:..\src/interruptions.c ****             if (interrupt_flag){
 852              		.loc 1 380 0
 853 033e 6D4B     		ldr	r3, .L86+4
 854 0340 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 855 0342 002B     		cmp	r3, #0
 856 0344 04D0     		beq	.L50
 381:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 857              		.loc 1 381 0
 858 0346 6B4B     		ldr	r3, .L86+4
 859 0348 0022     		movs	r2, #0
 860 034a 1A70     		strb	r2, [r3]
 382:..\src/interruptions.c ****                 interrupt_manager();
 861              		.loc 1 382 0
 862 034c FFF7FEFF 		bl	interrupt_manager
 863              	.L50:
 383:..\src/interruptions.c ****             }
 384:..\src/interruptions.c ****             
 385:..\src/interruptions.c ****             // Control 2nd motor (if necessary) according to motor driver type
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 23


 386:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == TRUE){
 864              		.loc 1 386 0
 865 0350 694B     		ldr	r3, .L86+8
 866 0352 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 867 0356 012B     		cmp	r3, #1
 868 0358 40F0C780 		bne	.L82
 387:..\src/interruptions.c ****                 if (pos_reconstruct[c_mem.motor[SECOND_MOTOR_IDX].encoder_line]){      // Once enco
 869              		.loc 1 387 0
 870 035c 07F58843 		add	r3, r7, #17408
 871 0360 03F15D03 		add	r3, r3, #93
 872 0364 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 873 0366 644A     		ldr	r2, .L86+8
 874 0368 7421     		movs	r1, #116
 875 036a 01FB03F3 		mul	r3, r1, r3
 876 036e 1344     		add	r3, r3, r2
 877 0370 03F58873 		add	r3, r3, #272
 878 0374 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 879 0376 1A46     		mov	r2, r3
 880 0378 604B     		ldr	r3, .L86+12
 881 037a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 882 037c 002B     		cmp	r3, #0
 883 037e 2DD0     		beq	.L52
 388:..\src/interruptions.c ****                     motor_control_generic(SECOND_MOTOR_IDX);
 884              		.loc 1 388 0
 885 0380 07F58843 		add	r3, r7, #17408
 886 0384 03F15D03 		add	r3, r3, #93
 887 0388 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 888 038a 1846     		mov	r0, r3
 889 038c FFF7FEFF 		bl	motor_control_generic
 389:..\src/interruptions.c ****                     
 390:..\src/interruptions.c ****                     // Check external reference before processing other serial data and right after
 391:..\src/interruptions.c ****                     if (c_mem.motor[SECOND_MOTOR_IDX].not_revers_motor_flag == TRUE) {
 890              		.loc 1 391 0
 891 0390 07F58843 		add	r3, r7, #17408
 892 0394 03F15D03 		add	r3, r3, #93
 893 0398 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 894 039a 574A     		ldr	r2, .L86+8
 895 039c 7421     		movs	r1, #116
 896 039e 01FB03F3 		mul	r3, r1, r3
 897 03a2 1344     		add	r3, r3, r2
 898 03a4 03F58973 		add	r3, r3, #274
 899 03a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 900 03aa 012B     		cmp	r3, #1
 901 03ac 16D1     		bne	.L52
 392:..\src/interruptions.c ****                         if (c_mem.motor[SECOND_MOTOR_IDX].input_mode == INPUT_MODE_EXTERNAL) {
 902              		.loc 1 392 0
 903 03ae 07F58843 		add	r3, r7, #17408
 904 03b2 03F15D03 		add	r3, r3, #93
 905 03b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 03b8 4F4A     		ldr	r2, .L86+8
 907 03ba 7421     		movs	r1, #116
 908 03bc 01FB03F3 		mul	r3, r1, r3
 909 03c0 1344     		add	r3, r3, r2
 910 03c2 03F58773 		add	r3, r3, #270
 911 03c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 912 03c8 002B     		cmp	r3, #0
 913 03ca 07D1     		bne	.L52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 24


 393:..\src/interruptions.c ****                             change_ext_ref_flag[SECOND_MOTOR_IDX] = FALSE;
 914              		.loc 1 393 0
 915 03cc 07F58843 		add	r3, r7, #17408
 916 03d0 03F15D03 		add	r3, r3, #93
 917 03d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 918 03d6 4A4A     		ldr	r2, .L86+16
 919 03d8 0021     		movs	r1, #0
 920 03da D154     		strb	r1, [r2, r3]
 921              	.L52:
 394:..\src/interruptions.c ****                         }   
 395:..\src/interruptions.c ****                     }
 396:..\src/interruptions.c ****                     
 397:..\src/interruptions.c ****                   
 398:..\src/interruptions.c ****                 }
 399:..\src/interruptions.c ****                 // Check Interrupt 
 400:..\src/interruptions.c **** 
 401:..\src/interruptions.c ****                 if (interrupt_flag){
 922              		.loc 1 401 0
 923 03dc 454B     		ldr	r3, .L86+4
 924 03de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 925 03e0 002B     		cmp	r3, #0
 926 03e2 00F08280 		beq	.L82
 402:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 927              		.loc 1 402 0
 928 03e6 434B     		ldr	r3, .L86+4
 929 03e8 0022     		movs	r2, #0
 930 03ea 1A70     		strb	r2, [r3]
 403:..\src/interruptions.c ****                     interrupt_manager();
 931              		.loc 1 403 0
 932 03ec FFF7FEFF 		bl	interrupt_manager
 404:..\src/interruptions.c ****                 }
 405:..\src/interruptions.c ****             }  
 406:..\src/interruptions.c ****             break;
 933              		.loc 1 406 0
 934 03f0 7BE0     		b	.L82
 935              	.L39:
 407:..\src/interruptions.c ****             
 408:..\src/interruptions.c ****         case AIR_CHAMBERS_FB: case OTBK_ACT_WRIST_MS:
 409:..\src/interruptions.c ****             
 410:..\src/interruptions.c ****             //---------------------------------- Force Feedback control
 411:..\src/interruptions.c ****             if (master_mode && c_mem.MS.slave_comm_active) {
 936              		.loc 1 411 0
 937 03f2 444B     		ldr	r3, .L86+20
 938 03f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 939 03f6 002B     		cmp	r3, #0
 940 03f8 38D0     		beq	.L53
 941              		.loc 1 411 0 is_stmt 0 discriminator 1
 942 03fa 3F4B     		ldr	r3, .L86+8
 943 03fc 93F8C832 		ldrb	r3, [r3, #712]	@ zero_extendqisi2
 944 0400 002B     		cmp	r3, #0
 945 0402 33D0     		beq	.L53
 412:..\src/interruptions.c ****                 
 413:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
 946              		.loc 1 413 0 is_stmt 1
 947 0404 3C4B     		ldr	r3, .L86+8
 948 0406 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 949 040a 022B     		cmp	r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 25


 950 040c 08D1     		bne	.L54
 414:..\src/interruptions.c ****                     air_chambers_control(SECOND_MOTOR_IDX);
 951              		.loc 1 414 0
 952 040e 07F58843 		add	r3, r7, #17408
 953 0412 03F15D03 		add	r3, r3, #93
 954 0416 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 955 0418 1846     		mov	r0, r3
 956 041a FFF7FEFF 		bl	air_chambers_control
 957 041e 07E0     		b	.L55
 958              	.L54:
 415:..\src/interruptions.c ****                 }
 416:..\src/interruptions.c ****                 else{ //OTBK_ACT_WRIST_MS
 417:..\src/interruptions.c ****                     otbk_act_wrist_control(SECOND_MOTOR_IDX);
 959              		.loc 1 417 0
 960 0420 07F58843 		add	r3, r7, #17408
 961 0424 03F15D03 		add	r3, r3, #93
 962 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 963 042a 1846     		mov	r0, r3
 964 042c FFF7FEFF 		bl	otbk_act_wrist_control
 965              	.L55:
 418:..\src/interruptions.c ****                 }
 419:..\src/interruptions.c **** 
 420:..\src/interruptions.c ****                 // Check Interrupt 
 421:..\src/interruptions.c **** 
 422:..\src/interruptions.c ****                 if (interrupt_flag){
 966              		.loc 1 422 0
 967 0430 304B     		ldr	r3, .L86+4
 968 0432 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 969 0434 002B     		cmp	r3, #0
 970 0436 04D0     		beq	.L56
 423:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 971              		.loc 1 423 0
 972 0438 2E4B     		ldr	r3, .L86+4
 973 043a 0022     		movs	r2, #0
 974 043c 1A70     		strb	r2, [r3]
 424:..\src/interruptions.c ****                     interrupt_manager();
 975              		.loc 1 424 0
 976 043e FFF7FEFF 		bl	interrupt_manager
 977              	.L56:
 425:..\src/interruptions.c ****                 }
 426:..\src/interruptions.c ****             
 427:..\src/interruptions.c ****                 drive_slave(SECOND_MOTOR_IDX, c_mem.MS.slave_ID);
 978              		.loc 1 427 0
 979 0442 2D4B     		ldr	r3, .L86+8
 980 0444 93F8C922 		ldrb	r2, [r3, #713]	@ zero_extendqisi2
 981 0448 07F58843 		add	r3, r7, #17408
 982 044c 03F15D03 		add	r3, r3, #93
 983 0450 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 984 0452 1146     		mov	r1, r2
 985 0454 1846     		mov	r0, r3
 986 0456 FFF7FEFF 		bl	drive_slave
 428:..\src/interruptions.c ****             
 429:..\src/interruptions.c ****                 // Check Interrupt 
 430:..\src/interruptions.c **** 
 431:..\src/interruptions.c ****                 if (interrupt_flag){
 987              		.loc 1 431 0
 988 045a 264B     		ldr	r3, .L86+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 26


 989 045c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 990 045e 002B     		cmp	r3, #0
 991 0460 04D0     		beq	.L53
 432:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 992              		.loc 1 432 0
 993 0462 244B     		ldr	r3, .L86+4
 994 0464 0022     		movs	r2, #0
 995 0466 1A70     		strb	r2, [r3]
 433:..\src/interruptions.c ****                     interrupt_manager();
 996              		.loc 1 433 0
 997 0468 FFF7FEFF 		bl	interrupt_manager
 998              	.L53:
 434:..\src/interruptions.c ****                 }
 435:..\src/interruptions.c ****             }
 436:..\src/interruptions.c ****             if (!master_mode){
 999              		.loc 1 436 0
 1000 046c 254B     		ldr	r3, .L86+20
 1001 046e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1002 0470 002B     		cmp	r3, #0
 1003 0472 11D1     		bne	.L57
 437:..\src/interruptions.c ****                 
 438:..\src/interruptions.c ****                 if (c_mem.MS.slave_comm_active) {
 1004              		.loc 1 438 0
 1005 0474 204B     		ldr	r3, .L86+8
 1006 0476 93F8C832 		ldrb	r3, [r3, #712]	@ zero_extendqisi2
 1007 047a 002B     		cmp	r3, #0
 1008 047c 01D0     		beq	.L58
 439:..\src/interruptions.c ****                     // Stop feedback motors
 440:..\src/interruptions.c ****                     stop_master_device();
 1009              		.loc 1 440 0
 1010 047e FFF7FEFF 		bl	stop_master_device
 1011              	.L58:
 441:..\src/interruptions.c ****                 }
 442:..\src/interruptions.c ****                 // Disable slave or motors
 443:..\src/interruptions.c ****                 deactivate_slaves();
 1012              		.loc 1 443 0
 1013 0482 FFF7FEFF 		bl	deactivate_slaves
 444:..\src/interruptions.c ****                         
 445:..\src/interruptions.c ****                 // Check Interrupt 
 446:..\src/interruptions.c ****                 if (interrupt_flag){
 1014              		.loc 1 446 0
 1015 0486 1B4B     		ldr	r3, .L86+4
 1016 0488 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1017 048a 002B     		cmp	r3, #0
 1018 048c 04D0     		beq	.L57
 447:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 1019              		.loc 1 447 0
 1020 048e 194B     		ldr	r3, .L86+4
 1021 0490 0022     		movs	r2, #0
 1022 0492 1A70     		strb	r2, [r3]
 448:..\src/interruptions.c ****                     interrupt_manager();
 1023              		.loc 1 448 0
 1024 0494 FFF7FEFF 		bl	interrupt_manager
 1025              	.L57:
 449:..\src/interruptions.c ****                 } 
 450:..\src/interruptions.c ****             }
 451:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 27


 452:..\src/interruptions.c ****             // Control Master device main motor 
 453:..\src/interruptions.c ****             // (e.g. in AIR_CHAMBERS_FB device controls MOTOR_IDX motor [PUMP] with PWM control)
 454:..\src/interruptions.c ****             motor_control_generic(MOTOR_IDX);
 1026              		.loc 1 454 0
 1027 0498 07F58843 		add	r3, r7, #17408
 1028 049c 03F15E03 		add	r3, r3, #94
 1029 04a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1030 04a2 1846     		mov	r0, r3
 1031 04a4 FFF7FEFF 		bl	motor_control_generic
 455:..\src/interruptions.c ****                         
 456:..\src/interruptions.c ****             // Always limit output voltage on the wrist
 457:..\src/interruptions.c ****              if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
 1032              		.loc 1 457 0
 1033 04a8 134B     		ldr	r3, .L86+8
 1034 04aa 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1035 04ae 032B     		cmp	r3, #3
 1036 04b0 0FD1     		bne	.L59
 458:..\src/interruptions.c ****                 if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
 1037              		.loc 1 458 0
 1038 04b2 154B     		ldr	r3, .L86+24
 1039 04b4 9B68     		ldr	r3, [r3, #8]
 1040 04b6 432B     		cmp	r3, #67
 1041 04b8 02DD     		ble	.L60
 459:..\src/interruptions.c ****                     g_refNew[0].pwm = 67; // 67
 1042              		.loc 1 459 0
 1043 04ba 134B     		ldr	r3, .L86+24
 1044 04bc 4322     		movs	r2, #67
 1045 04be 9A60     		str	r2, [r3, #8]
 1046              	.L60:
 460:..\src/interruptions.c ****                 if (g_refNew[0].pwm < -67)
 1047              		.loc 1 460 0
 1048 04c0 114B     		ldr	r3, .L86+24
 1049 04c2 9B68     		ldr	r3, [r3, #8]
 1050 04c4 13F1430F 		cmn	r3, #67
 1051 04c8 03DA     		bge	.L59
 461:..\src/interruptions.c ****                     g_refNew[0].pwm = -67;
 1052              		.loc 1 461 0
 1053 04ca 0F4B     		ldr	r3, .L86+24
 1054 04cc 6FF04202 		mvn	r2, #66
 1055 04d0 9A60     		str	r2, [r3, #8]
 1056              	.L59:
 462:..\src/interruptions.c ****             }
 463:..\src/interruptions.c ****             
 464:..\src/interruptions.c ****             // Check Interrupt 
 465:..\src/interruptions.c **** 
 466:..\src/interruptions.c ****             if (interrupt_flag){
 1057              		.loc 1 466 0
 1058 04d2 084B     		ldr	r3, .L86+4
 1059 04d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1060 04d6 002B     		cmp	r3, #0
 1061 04d8 18D0     		beq	.L83
 467:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1062              		.loc 1 467 0
 1063 04da 064B     		ldr	r3, .L86+4
 1064 04dc 0022     		movs	r2, #0
 1065 04de 1A70     		strb	r2, [r3]
 468:..\src/interruptions.c ****                 interrupt_manager();
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 28


 1066              		.loc 1 468 0
 1067 04e0 FFF7FEFF 		bl	interrupt_manager
 469:..\src/interruptions.c ****             }
 470:..\src/interruptions.c ****             
 471:..\src/interruptions.c ****             break;
 1068              		.loc 1 471 0
 1069 04e4 12E0     		b	.L83
 1070              	.L81:
 328:..\src/interruptions.c ****             
 1071              		.loc 1 328 0
 1072 04e6 00BF     		nop
 1073 04e8 11E0     		b	.L35
 1074              	.L82:
 406:..\src/interruptions.c ****             
 1075              		.loc 1 406 0
 1076 04ea 00BF     		nop
 1077 04ec 0FE0     		b	.L35
 1078              	.L87:
 1079 04ee 00BF     		.align	2
 1080              	.L86:
 1081 04f0 00000000 		.word	N_Encoder_Line_Connected
 1082 04f4 00000000 		.word	interrupt_flag
 1083 04f8 00000000 		.word	c_mem
 1084 04fc 00000000 		.word	pos_reconstruct
 1085 0500 00000000 		.word	change_ext_ref_flag
 1086 0504 00000000 		.word	master_mode
 1087 0508 00000000 		.word	g_refNew
 1088              	.L83:
 1089              		.loc 1 471 0
 1090 050c 00BF     		nop
 1091              	.L35:
 472:..\src/interruptions.c ****     }
 473:..\src/interruptions.c **** 
 474:..\src/interruptions.c ****     //---------------------------------- Read conversion buffer - LOCK function
 475:..\src/interruptions.c **** 
 476:..\src/interruptions.c ****     analog_read_end();
 1092              		.loc 1 476 0
 1093 050e FFF7FEFF 		bl	analog_read_end
 477:..\src/interruptions.c **** 
 478:..\src/interruptions.c ****     if (interrupt_flag){
 1094              		.loc 1 478 0
 1095 0512 714B     		ldr	r3, .L88
 1096 0514 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1097 0516 002B     		cmp	r3, #0
 1098 0518 04D0     		beq	.L62
 479:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1099              		.loc 1 479 0
 1100 051a 6F4B     		ldr	r3, .L88
 1101 051c 0022     		movs	r2, #0
 1102 051e 1A70     		strb	r2, [r3]
 480:..\src/interruptions.c ****         interrupt_manager();
 1103              		.loc 1 480 0
 1104 0520 FFF7FEFF 		bl	interrupt_manager
 1105              	.L62:
 481:..\src/interruptions.c ****     }
 482:..\src/interruptions.c **** 
 483:..\src/interruptions.c ****     //---------------------------------- Control Overcurrent
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 29


 484:..\src/interruptions.c **** 
 485:..\src/interruptions.c ****     overcurrent_control();
 1106              		.loc 1 485 0
 1107 0524 FFF7FEFF 		bl	overcurrent_control
 486:..\src/interruptions.c ****     
 487:..\src/interruptions.c ****     // Check Interrupt 
 488:..\src/interruptions.c ****     
 489:..\src/interruptions.c ****     if (interrupt_flag){
 1108              		.loc 1 489 0
 1109 0528 6B4B     		ldr	r3, .L88
 1110 052a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1111 052c 002B     		cmp	r3, #0
 1112 052e 04D0     		beq	.L63
 490:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1113              		.loc 1 490 0
 1114 0530 694B     		ldr	r3, .L88
 1115 0532 0022     		movs	r2, #0
 1116 0534 1A70     		strb	r2, [r3]
 491:..\src/interruptions.c ****         interrupt_manager();
 1117              		.loc 1 491 0
 1118 0536 FFF7FEFF 		bl	interrupt_manager
 1119              	.L63:
 492:..\src/interruptions.c ****     }
 493:..\src/interruptions.c **** 
 494:..\src/interruptions.c ****     //---------------------------------- Calibration 
 495:..\src/interruptions.c **** 
 496:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 497:..\src/interruptions.c ****     if (calib.enabled == TRUE) {
 1120              		.loc 1 497 0
 1121 053a 684B     		ldr	r3, .L88+4
 1122 053c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1123 053e 012B     		cmp	r3, #1
 1124 0540 0ED1     		bne	.L64
 498:..\src/interruptions.c ****         if (counter_calibration == CALIBRATION_DIV) {
 1125              		.loc 1 498 0
 1126 0542 674B     		ldr	r3, .L88+8
 1127 0544 1B88     		ldrh	r3, [r3]
 1128 0546 0A2B     		cmp	r3, #10
 1129 0548 04D1     		bne	.L65
 499:..\src/interruptions.c ****             calibration();
 1130              		.loc 1 499 0
 1131 054a FFF7FEFF 		bl	calibration
 500:..\src/interruptions.c ****             counter_calibration = 0;
 1132              		.loc 1 500 0
 1133 054e 644B     		ldr	r3, .L88+8
 1134 0550 0022     		movs	r2, #0
 1135 0552 1A80     		strh	r2, [r3]	@ movhi
 1136              	.L65:
 501:..\src/interruptions.c ****         }
 502:..\src/interruptions.c ****         counter_calibration++;
 1137              		.loc 1 502 0
 1138 0554 624B     		ldr	r3, .L88+8
 1139 0556 1B88     		ldrh	r3, [r3]
 1140 0558 0133     		adds	r3, r3, #1
 1141 055a 9AB2     		uxth	r2, r3
 1142 055c 604B     		ldr	r3, .L88+8
 1143 055e 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 30


 1144              	.L64:
 503:..\src/interruptions.c ****     }
 504:..\src/interruptions.c **** 
 505:..\src/interruptions.c ****     // Check Interrupt 
 506:..\src/interruptions.c ****     
 507:..\src/interruptions.c ****     if (interrupt_flag){
 1145              		.loc 1 507 0
 1146 0560 5D4B     		ldr	r3, .L88
 1147 0562 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1148 0564 002B     		cmp	r3, #0
 1149 0566 04D0     		beq	.L66
 508:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1150              		.loc 1 508 0
 1151 0568 5B4B     		ldr	r3, .L88
 1152 056a 0022     		movs	r2, #0
 1153 056c 1A70     		strb	r2, [r3]
 509:..\src/interruptions.c ****         interrupt_manager();
 1154              		.loc 1 509 0
 1155 056e FFF7FEFF 		bl	interrupt_manager
 1156              	.L66:
 510:..\src/interruptions.c ****     }
 511:..\src/interruptions.c ****     
 512:..\src/interruptions.c ****     if (c_mem.dev.dev_type == SOFTHAND_PRO){   
 1157              		.loc 1 512 0
 1158 0572 5C4B     		ldr	r3, .L88+12
 1159 0574 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1160 0578 002B     		cmp	r3, #0
 1161 057a 1CD1     		bne	.L67
 513:..\src/interruptions.c ****     
 514:..\src/interruptions.c ****         //---------------------------------- Rest position check
 515:..\src/interruptions.c **** 
 516:..\src/interruptions.c ****         // Divider 10, freq = 500 Hz
 517:..\src/interruptions.c ****         if (c_mem.SH.rest_position_flag == TRUE){
 1162              		.loc 1 517 0
 1163 057c 594B     		ldr	r3, .L88+12
 1164 057e 93F8B432 		ldrb	r3, [r3, #692]	@ zero_extendqisi2
 1165 0582 012B     		cmp	r3, #1
 1166 0584 17D1     		bne	.L67
 518:..\src/interruptions.c ****             if (counter_calibration == CALIBRATION_DIV) {
 1167              		.loc 1 518 0
 1168 0586 564B     		ldr	r3, .L88+8
 1169 0588 1B88     		ldrh	r3, [r3]
 1170 058a 0A2B     		cmp	r3, #10
 1171 058c 04D1     		bne	.L68
 519:..\src/interruptions.c ****                     check_rest_position();
 1172              		.loc 1 519 0
 1173 058e FFF7FEFF 		bl	check_rest_position
 520:..\src/interruptions.c ****                     counter_calibration = 0;
 1174              		.loc 1 520 0
 1175 0592 534B     		ldr	r3, .L88+8
 1176 0594 0022     		movs	r2, #0
 1177 0596 1A80     		strh	r2, [r3]	@ movhi
 1178              	.L68:
 521:..\src/interruptions.c ****             }
 522:..\src/interruptions.c ****             counter_calibration++;
 1179              		.loc 1 522 0
 1180 0598 514B     		ldr	r3, .L88+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 31


 1181 059a 1B88     		ldrh	r3, [r3]
 1182 059c 0133     		adds	r3, r3, #1
 1183 059e 9AB2     		uxth	r2, r3
 1184 05a0 4F4B     		ldr	r3, .L88+8
 1185 05a2 1A80     		strh	r2, [r3]	@ movhi
 523:..\src/interruptions.c **** 
 524:..\src/interruptions.c ****             // Check Interrupt     
 525:..\src/interruptions.c ****             if (interrupt_flag){
 1186              		.loc 1 525 0
 1187 05a4 4C4B     		ldr	r3, .L88
 1188 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1189 05a8 002B     		cmp	r3, #0
 1190 05aa 04D0     		beq	.L67
 526:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 1191              		.loc 1 526 0
 1192 05ac 4A4B     		ldr	r3, .L88
 1193 05ae 0022     		movs	r2, #0
 1194 05b0 1A70     		strb	r2, [r3]
 527:..\src/interruptions.c ****                 interrupt_manager();
 1195              		.loc 1 527 0
 1196 05b2 FFF7FEFF 		bl	interrupt_manager
 1197              	.L67:
 528:..\src/interruptions.c ****             }
 529:..\src/interruptions.c ****         }
 530:..\src/interruptions.c ****         
 531:..\src/interruptions.c ****     }
 532:..\src/interruptions.c ****     
 533:..\src/interruptions.c ****      
 534:..\src/interruptions.c ****     //---------------------------------- EMG history Update
 535:..\src/interruptions.c ****     if (c_mem.exp.record_EMG_history_on_SD){
 1198              		.loc 1 535 0
 1199 05b6 4B4B     		ldr	r3, .L88+12
 1200 05b8 93F83C32 		ldrb	r3, [r3, #572]	@ zero_extendqisi2
 1201 05bc 002B     		cmp	r3, #0
 1202 05be 0AD0     		beq	.L69
 536:..\src/interruptions.c ****         
 537:..\src/interruptions.c ****         update_EMG_history();
 1203              		.loc 1 537 0
 1204 05c0 FFF7FEFF 		bl	update_EMG_history
 538:..\src/interruptions.c **** 
 539:..\src/interruptions.c ****         // Check Interrupt 
 540:..\src/interruptions.c **** 
 541:..\src/interruptions.c ****         if (interrupt_flag){
 1205              		.loc 1 541 0
 1206 05c4 444B     		ldr	r3, .L88
 1207 05c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1208 05c8 002B     		cmp	r3, #0
 1209 05ca 04D0     		beq	.L69
 542:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1210              		.loc 1 542 0
 1211 05cc 424B     		ldr	r3, .L88
 1212 05ce 0022     		movs	r2, #0
 1213 05d0 1A70     		strb	r2, [r3]
 543:..\src/interruptions.c ****             interrupt_manager();
 1214              		.loc 1 543 0
 1215 05d2 FFF7FEFF 		bl	interrupt_manager
 1216              	.L69:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 32


 544:..\src/interruptions.c ****         }
 545:..\src/interruptions.c ****     }
 546:..\src/interruptions.c **** 
 547:..\src/interruptions.c ****     
 548:..\src/interruptions.c ****     //---------------------------------- Control Cycles Counter
 549:..\src/interruptions.c **** 
 550:..\src/interruptions.c ****     if (pos_reconstruct[c_mem.motor[0].encoder_line]){      // Once Motor 0 encoder line reading is
 1217              		.loc 1 550 0
 1218 05d6 434B     		ldr	r3, .L88+12
 1219 05d8 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 1220 05dc 1A46     		mov	r2, r3
 1221 05de 424B     		ldr	r3, .L88+16
 1222 05e0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1223 05e2 002B     		cmp	r3, #0
 1224 05e4 01D0     		beq	.L70
 551:..\src/interruptions.c ****         cycles_counter_update();                            // Need at least one encoder to work
 1225              		.loc 1 551 0
 1226 05e6 FFF7FEFF 		bl	cycles_counter_update
 1227              	.L70:
 552:..\src/interruptions.c ****     }
 553:..\src/interruptions.c **** 
 554:..\src/interruptions.c ****     // Check Cycles Interrupt 
 555:..\src/interruptions.c ****     
 556:..\src/interruptions.c ****     if (cycles_interrupt_flag){
 1228              		.loc 1 556 0
 1229 05ea 404B     		ldr	r3, .L88+20
 1230 05ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1231 05ee 002B     		cmp	r3, #0
 1232 05f0 00F09B80 		beq	.L71
 557:..\src/interruptions.c ****         cycles_interrupt_flag = FALSE;
 1233              		.loc 1 557 0
 1234 05f4 3D4B     		ldr	r3, .L88+20
 1235 05f6 0022     		movs	r2, #0
 1236 05f8 1A70     		strb	r2, [r3]
 558:..\src/interruptions.c **** 
 559:..\src/interruptions.c ****         // Cycles are written only every 120 seconds (CYCLES_TIMER interrupt)
 560:..\src/interruptions.c ****         // to save EEPROM writings (1M maximum)
 561:..\src/interruptions.c ****         if(can_write) {
 1237              		.loc 1 561 0
 1238 05fa 3D4B     		ldr	r3, .L88+24
 1239 05fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1240 05fe 002B     		cmp	r3, #0
 1241 0600 54D0     		beq	.L72
 562:..\src/interruptions.c ****             cycles_status = PREPARE_DATA;
 1242              		.loc 1 562 0
 1243 0602 3C4B     		ldr	r3, .L88+28
 1244 0604 0022     		movs	r2, #0
 1245 0606 1A70     		strb	r2, [r3]
 563:..\src/interruptions.c ****             
 564:..\src/interruptions.c ****             //Update time variable
 565:..\src/interruptions.c ****             g_mem.cnt.total_runtime = g_mem.cnt.total_runtime + 120;  // Add 120 seconds.
 1246              		.loc 1 565 0
 1247 0608 3B4B     		ldr	r3, .L88+32
 1248 060a 9B6D     		ldr	r3, [r3, #88]
 1249 060c 7833     		adds	r3, r3, #120
 1250 060e 3A4A     		ldr	r2, .L88+32
 1251 0610 9365     		str	r3, [r2, #88]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 33


 566:..\src/interruptions.c ****             
 567:..\src/interruptions.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 1252              		.loc 1 567 0
 1253 0612 344B     		ldr	r3, .L88+12
 1254 0614 93F82E32 		ldrb	r3, [r3, #558]	@ zero_extendqisi2
 1255 0618 012B     		cmp	r3, #1
 1256 061a 47D1     		bne	.L72
 568:..\src/interruptions.c ****                 
 569:..\src/interruptions.c ****                 store_RTC_current_time();
 1257              		.loc 1 569 0
 1258 061c FFF7FEFF 		bl	store_RTC_current_time
 570:..\src/interruptions.c ****                 
 571:..\src/interruptions.c ****                 //Write in SD card
 572:..\src/interruptions.c ****                 prepare_SD_info(info_);
 1259              		.loc 1 572 0
 1260 0620 07F56A53 		add	r3, r7, #14976
 1261 0624 03F11803 		add	r3, r3, #24
 1262 0628 1846     		mov	r0, r3
 1263 062a FFF7FEFF 		bl	prepare_SD_info
 573:..\src/interruptions.c ****                 FS_Write(pFile, info_, strlen(info_));
 1264              		.loc 1 573 0
 1265 062e 334B     		ldr	r3, .L88+36
 1266 0630 1C68     		ldr	r4, [r3]
 1267 0632 07F56A53 		add	r3, r7, #14976
 1268 0636 03F11803 		add	r3, r3, #24
 1269 063a 1846     		mov	r0, r3
 1270 063c FFF7FEFF 		bl	strlen
 1271 0640 0246     		mov	r2, r0
 1272 0642 07F56A53 		add	r3, r7, #14976
 1273 0646 03F11803 		add	r3, r3, #24
 1274 064a 1946     		mov	r1, r3
 1275 064c 2046     		mov	r0, r4
 1276 064e FFF7FEFF 		bl	FS_Write
 574:..\src/interruptions.c ****                 
 575:..\src/interruptions.c ****                 if (c_mem.exp.record_EMG_history_on_SD){
 1277              		.loc 1 575 0
 1278 0652 244B     		ldr	r3, .L88+12
 1279 0654 93F83C32 		ldrb	r3, [r3, #572]	@ zero_extendqisi2
 1280 0658 002B     		cmp	r3, #0
 1281 065a 27D0     		beq	.L72
 1282              	.LBB3:
 576:..\src/interruptions.c ****                     char EMG_history_info_[15000] = "";
 1283              		.loc 1 576 0
 1284 065c 07F16003 		add	r3, r7, #96
 1285 0660 603B     		subs	r3, r3, #96
 1286 0662 0022     		movs	r2, #0
 1287 0664 1A60     		str	r2, [r3]
 1288 0666 0433     		adds	r3, r3, #4
 1289 0668 43F69422 		movw	r2, #14996
 1290 066c 0021     		movs	r1, #0
 1291 066e 1846     		mov	r0, r3
 1292 0670 FFF7FEFF 		bl	memset
 577:..\src/interruptions.c ****                     strcpy(EMG_history_info_, "");
 1293              		.loc 1 577 0
 1294 0674 224B     		ldr	r3, .L88+40
 1295 0676 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1296 0678 07F16003 		add	r3, r7, #96
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 34


 1297 067c 603B     		subs	r3, r3, #96
 1298 067e 1A70     		strb	r2, [r3]
 578:..\src/interruptions.c ****                     prepare_SD_EMG_history(EMG_history_info_);
 1299              		.loc 1 578 0
 1300 0680 07F16003 		add	r3, r7, #96
 1301 0684 603B     		subs	r3, r3, #96
 1302 0686 1846     		mov	r0, r3
 1303 0688 FFF7FEFF 		bl	prepare_SD_EMG_history
 579:..\src/interruptions.c ****                     FS_Write(pEMGHFile, EMG_history_info_, strlen(EMG_history_info_));
 1304              		.loc 1 579 0
 1305 068c 1D4B     		ldr	r3, .L88+44
 1306 068e 1C68     		ldr	r4, [r3]
 1307 0690 07F16003 		add	r3, r7, #96
 1308 0694 603B     		subs	r3, r3, #96
 1309 0696 1846     		mov	r0, r3
 1310 0698 FFF7FEFF 		bl	strlen
 1311 069c 0246     		mov	r2, r0
 1312 069e 07F16003 		add	r3, r7, #96
 1313 06a2 603B     		subs	r3, r3, #96
 1314 06a4 1946     		mov	r1, r3
 1315 06a6 2046     		mov	r0, r4
 1316 06a8 FFF7FEFF 		bl	FS_Write
 1317              	.L72:
 1318              	.LBE3:
 580:..\src/interruptions.c ****                 }
 581:..\src/interruptions.c ****             }
 582:..\src/interruptions.c ****         }
 583:..\src/interruptions.c ****         
 584:..\src/interruptions.c ****         // Deactivate the motor just for the time data are written in the EEPROM
 585:..\src/interruptions.c ****         if (cycles_status == WRITE_CYCLES || cycles_status == WAIT_QUERY){
 1319              		.loc 1 585 0
 1320 06ac 114B     		ldr	r3, .L88+28
 1321 06ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1322 06b0 012B     		cmp	r3, #1
 1323 06b2 03D0     		beq	.L73
 1324              		.loc 1 585 0 is_stmt 0 discriminator 1
 1325 06b4 0F4B     		ldr	r3, .L88+28
 1326 06b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1327 06b8 022B     		cmp	r3, #2
 1328 06ba 25D1     		bne	.L74
 1329              	.L73:
 586:..\src/interruptions.c ****             // Deactivate motors
 587:..\src/interruptions.c ****             enable_motor(0, 0x00); 
 1330              		.loc 1 587 0 is_stmt 1
 1331 06bc 0021     		movs	r1, #0
 1332 06be 0020     		movs	r0, #0
 1333 06c0 FFF7FEFF 		bl	enable_motor
 588:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1334              		.loc 1 588 0
 1335 06c4 0C4B     		ldr	r3, .L88+32
 1336 06c6 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1337 06ca 012B     		cmp	r3, #1
 1338 06cc 2DD1     		bne	.L71
 589:..\src/interruptions.c ****                 enable_motor(1, 0x00); 
 1339              		.loc 1 589 0
 1340 06ce 0021     		movs	r1, #0
 1341 06d0 0120     		movs	r0, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 35


 1342 06d2 FFF7FEFF 		bl	enable_motor
 588:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1343              		.loc 1 588 0
 1344 06d6 28E0     		b	.L71
 1345              	.L89:
 1346              		.align	2
 1347              	.L88:
 1348 06d8 00000000 		.word	interrupt_flag
 1349 06dc 00000000 		.word	calib
 1350 06e0 00000000 		.word	counter_calibration.10484
 1351 06e4 00000000 		.word	c_mem
 1352 06e8 00000000 		.word	pos_reconstruct
 1353 06ec 00000000 		.word	cycles_interrupt_flag
 1354 06f0 00000000 		.word	can_write
 1355 06f4 00000000 		.word	cycles_status
 1356 06f8 00000000 		.word	g_mem
 1357 06fc 00000000 		.word	pFile
 1358 0700 20000000 		.word	.LC0
 1359 0704 00000000 		.word	pEMGHFile
 1360              	.L74:
 590:..\src/interruptions.c ****             }
 591:..\src/interruptions.c ****         }
 592:..\src/interruptions.c ****         else {
 593:..\src/interruptions.c ****             // Activate/Deactivate motors
 594:..\src/interruptions.c ****             enable_motor(0, g_ref[0].onoff); 
 1361              		.loc 1 594 0
 1362 0708 4D4B     		ldr	r3, .L90
 1363 070a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1364 070c 1946     		mov	r1, r3
 1365 070e 0020     		movs	r0, #0
 1366 0710 FFF7FEFF 		bl	enable_motor
 595:..\src/interruptions.c ****             if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 1367              		.loc 1 595 0
 1368 0714 4B4B     		ldr	r3, .L90+4
 1369 0716 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1370 071a 012B     		cmp	r3, #1
 1371 071c 05D1     		bne	.L71
 596:..\src/interruptions.c ****                 enable_motor(1, g_ref[1].onoff); 
 1372              		.loc 1 596 0
 1373 071e 484B     		ldr	r3, .L90
 1374 0720 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1375 0722 1946     		mov	r1, r3
 1376 0724 0120     		movs	r0, #1
 1377 0726 FFF7FEFF 		bl	enable_motor
 1378              	.L71:
 597:..\src/interruptions.c ****             }
 598:..\src/interruptions.c ****         }
 599:..\src/interruptions.c ****     }
 600:..\src/interruptions.c ****     
 601:..\src/interruptions.c ****     // Check Interrupt 
 602:..\src/interruptions.c ****     
 603:..\src/interruptions.c ****     if (interrupt_flag){
 1379              		.loc 1 603 0
 1380 072a 474B     		ldr	r3, .L90+8
 1381 072c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1382 072e 002B     		cmp	r3, #0
 1383 0730 04D0     		beq	.L76
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 36


 604:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1384              		.loc 1 604 0
 1385 0732 454B     		ldr	r3, .L90+8
 1386 0734 0022     		movs	r2, #0
 1387 0736 1A70     		strb	r2, [r3]
 605:..\src/interruptions.c ****         interrupt_manager();
 1388              		.loc 1 605 0
 1389 0738 FFF7FEFF 		bl	interrupt_manager
 1390              	.L76:
 606:..\src/interruptions.c ****     }
 607:..\src/interruptions.c ****     
 608:..\src/interruptions.c ****     
 609:..\src/interruptions.c ****     //---------------------------------- Check battery
 610:..\src/interruptions.c **** 
 611:..\src/interruptions.c ****     // Divider 10, freq = 500 Hz
 612:..\src/interruptions.c ****     if (counter_tension_func == CALIBRATION_DIV) {
 1391              		.loc 1 612 0
 1392 073c 434B     		ldr	r3, .L90+12
 1393 073e 1B88     		ldrh	r3, [r3]
 1394 0740 0A2B     		cmp	r3, #10
 1395 0742 04D1     		bne	.L77
 613:..\src/interruptions.c ****         battery_management();   
 1396              		.loc 1 613 0
 1397 0744 FFF7FEFF 		bl	battery_management
 614:..\src/interruptions.c ****         counter_tension_func = 0;
 1398              		.loc 1 614 0
 1399 0748 404B     		ldr	r3, .L90+12
 1400 074a 0022     		movs	r2, #0
 1401 074c 1A80     		strh	r2, [r3]	@ movhi
 1402              	.L77:
 615:..\src/interruptions.c ****     }
 616:..\src/interruptions.c ****     counter_tension_func++;
 1403              		.loc 1 616 0
 1404 074e 3F4B     		ldr	r3, .L90+12
 1405 0750 1B88     		ldrh	r3, [r3]
 1406 0752 0133     		adds	r3, r3, #1
 1407 0754 9AB2     		uxth	r2, r3
 1408 0756 3D4B     		ldr	r3, .L90+12
 1409 0758 1A80     		strh	r2, [r3]	@ movhi
 617:..\src/interruptions.c **** 
 618:..\src/interruptions.c ****     // Check Interrupt 
 619:..\src/interruptions.c ****     
 620:..\src/interruptions.c ****     if (interrupt_flag){
 1410              		.loc 1 620 0
 1411 075a 3B4B     		ldr	r3, .L90+8
 1412 075c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1413 075e 002B     		cmp	r3, #0
 1414 0760 04D0     		beq	.L78
 621:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1415              		.loc 1 621 0
 1416 0762 394B     		ldr	r3, .L90+8
 1417 0764 0022     		movs	r2, #0
 1418 0766 1A70     		strb	r2, [r3]
 622:..\src/interruptions.c ****         interrupt_manager();
 1419              		.loc 1 622 0
 1420 0768 FFF7FEFF 		bl	interrupt_manager
 1421              	.L78:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 37


 623:..\src/interruptions.c ****     }
 624:..\src/interruptions.c ****    
 625:..\src/interruptions.c ****     //---------------------------------- Read IMUs
 626:..\src/interruptions.c ****     if (c_mem.imu.read_imu_flag) {
 1422              		.loc 1 626 0
 1423 076c 384B     		ldr	r3, .L90+16
 1424 076e 93F80832 		ldrb	r3, [r3, #520]	@ zero_extendqisi2
 1425 0772 002B     		cmp	r3, #0
 1426 0774 0AD0     		beq	.L79
 627:..\src/interruptions.c ****         ReadAllIMUs();      // IMU reading is atomic, no RS485 request is handled
 1427              		.loc 1 627 0
 1428 0776 FFF7FEFF 		bl	ReadAllIMUs
 628:..\src/interruptions.c ****         
 629:..\src/interruptions.c ****         if (interrupt_flag){
 1429              		.loc 1 629 0
 1430 077a 334B     		ldr	r3, .L90+8
 1431 077c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1432 077e 002B     		cmp	r3, #0
 1433 0780 04D0     		beq	.L79
 630:..\src/interruptions.c ****             interrupt_flag = FALSE;
 1434              		.loc 1 630 0
 1435 0782 314B     		ldr	r3, .L90+8
 1436 0784 0022     		movs	r2, #0
 1437 0786 1A70     		strb	r2, [r3]
 631:..\src/interruptions.c ****             interrupt_manager();
 1438              		.loc 1 631 0
 1439 0788 FFF7FEFF 		bl	interrupt_manager
 1440              	.L79:
 632:..\src/interruptions.c ****         }
 633:..\src/interruptions.c ****     }
 634:..\src/interruptions.c ****    
 635:..\src/interruptions.c ****     //---------------------------------- Update States
 636:..\src/interruptions.c ****     
 637:..\src/interruptions.c ****     // Load k-1 state
 638:..\src/interruptions.c ****     memcpy( &g_adc_measOld, &g_adc_meas, sizeof(g_adc_meas) );
 1441              		.loc 1 638 0
 1442 078c 314A     		ldr	r2, .L90+20
 1443 078e 324B     		ldr	r3, .L90+24
 1444 0790 1446     		mov	r4, r2
 1445 0792 1D46     		mov	r5, r3
 1446 0794 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1447 0796 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1448 0798 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1449 079a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1450 079c 95E80300 		ldmia	r5, {r0, r1}
 1451 07a0 84E80300 		stmia	r4, {r0, r1}
 639:..\src/interruptions.c ****     memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 1452              		.loc 1 639 0
 1453 07a4 2D4A     		ldr	r2, .L90+28
 1454 07a6 2E4B     		ldr	r3, .L90+32
 1455 07a8 1046     		mov	r0, r2
 1456 07aa 1946     		mov	r1, r3
 1457 07ac 6823     		movs	r3, #104
 1458 07ae 1A46     		mov	r2, r3
 1459 07b0 FFF7FEFF 		bl	memcpy
 640:..\src/interruptions.c ****     memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 1460              		.loc 1 640 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 38


 1461 07b4 2B4A     		ldr	r2, .L90+36
 1462 07b6 224B     		ldr	r3, .L90
 1463 07b8 1446     		mov	r4, r2
 1464 07ba 1D46     		mov	r5, r3
 1465 07bc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1466 07be 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1467 07c0 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1468 07c4 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 641:..\src/interruptions.c **** 
 642:..\src/interruptions.c ****     // Load k+1 state        
 643:..\src/interruptions.c ****     memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 1469              		.loc 1 643 0
 1470 07c8 1D4A     		ldr	r2, .L90
 1471 07ca 274B     		ldr	r3, .L90+40
 1472 07cc 1446     		mov	r4, r2
 1473 07ce 1D46     		mov	r5, r3
 1474 07d0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1475 07d2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1476 07d4 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1477 07d8 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 644:..\src/interruptions.c ****     memcpy( &g_imu, &g_imuNew, sizeof(g_imu) );
 1478              		.loc 1 644 0
 1479 07dc 234A     		ldr	r2, .L90+44
 1480 07de 244B     		ldr	r3, .L90+48
 1481 07e0 1046     		mov	r0, r2
 1482 07e2 1946     		mov	r1, r3
 1483 07e4 C823     		movs	r3, #200
 1484 07e6 1A46     		mov	r2, r3
 1485 07e8 FFF7FEFF 		bl	memcpy
 645:..\src/interruptions.c ****                 
 646:..\src/interruptions.c ****     if (interrupt_flag){
 1486              		.loc 1 646 0
 1487 07ec 164B     		ldr	r3, .L90+8
 1488 07ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1489 07f0 002B     		cmp	r3, #0
 1490 07f2 04D0     		beq	.L80
 647:..\src/interruptions.c ****         interrupt_flag = FALSE;
 1491              		.loc 1 647 0
 1492 07f4 144B     		ldr	r3, .L90+8
 1493 07f6 0022     		movs	r2, #0
 1494 07f8 1A70     		strb	r2, [r3]
 648:..\src/interruptions.c ****         interrupt_manager();
 1495              		.loc 1 648 0
 1496 07fa FFF7FEFF 		bl	interrupt_manager
 1497              	.L80:
 649:..\src/interruptions.c ****     }
 650:..\src/interruptions.c **** 
 651:..\src/interruptions.c ****     timer_value = (uint16)MY_TIMER_ReadCounter();
 1498              		.loc 1 651 0
 1499 07fe FFF7FEFF 		bl	MY_TIMER_ReadCounter
 1500 0802 0346     		mov	r3, r0
 1501 0804 1A46     		mov	r2, r3
 1502 0806 1B4B     		ldr	r3, .L90+52
 1503 0808 1A80     		strh	r2, [r3]	@ movhi
 652:..\src/interruptions.c ****     cycle_time = ((float)(timer_value0 - timer_value)/1000000.0);
 1504              		.loc 1 652 0
 1505 080a 1B4B     		ldr	r3, .L90+56
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 39


 1506 080c 1B88     		ldrh	r3, [r3]
 1507 080e 1A46     		mov	r2, r3
 1508 0810 184B     		ldr	r3, .L90+52
 1509 0812 1B88     		ldrh	r3, [r3]
 1510 0814 D31A     		subs	r3, r2, r3
 1511 0816 1846     		mov	r0, r3
 1512 0818 FFF7FEFF 		bl	__aeabi_i2f
 1513 081c 0346     		mov	r3, r0
 1514 081e 1749     		ldr	r1, .L90+60
 1515 0820 1846     		mov	r0, r3
 1516 0822 FFF7FEFF 		bl	__aeabi_fdiv
 1517 0826 0346     		mov	r3, r0
 1518 0828 1A46     		mov	r2, r3
 1519 082a 154B     		ldr	r3, .L90+64
 1520 082c 1A60     		str	r2, [r3]	@ float
 653:..\src/interruptions.c ****     MY_TIMER_REG_Write(0x01);   // reset timer
 1521              		.loc 1 653 0
 1522 082e 0120     		movs	r0, #1
 1523 0830 FFF7FEFF 		bl	MY_TIMER_REG_Write
 654:..\src/interruptions.c **** 
 655:..\src/interruptions.c **** }
 1524              		.loc 1 655 0
 1525 0834 00BF     		nop
 1526 0836 07F58847 		add	r7, r7, #17408
 1527 083a 6037     		adds	r7, r7, #96
 1528              		.cfi_def_cfa_offset 16
 1529 083c BD46     		mov	sp, r7
 1530              		.cfi_def_cfa_register 13
 1531              		@ sp needed
 1532 083e B0BD     		pop	{r4, r5, r7, pc}
 1533              	.L91:
 1534              		.align	2
 1535              	.L90:
 1536 0840 00000000 		.word	g_ref
 1537 0844 00000000 		.word	g_mem
 1538 0848 00000000 		.word	interrupt_flag
 1539 084c 02000000 		.word	counter_tension_func.10485
 1540 0850 00000000 		.word	c_mem
 1541 0854 00000000 		.word	g_adc_measOld
 1542 0858 00000000 		.word	g_adc_meas
 1543 085c 00000000 		.word	g_measOld
 1544 0860 00000000 		.word	g_meas
 1545 0864 00000000 		.word	g_refOld
 1546 0868 00000000 		.word	g_refNew
 1547 086c 00000000 		.word	g_imu
 1548 0870 00000000 		.word	g_imuNew
 1549 0874 00000000 		.word	timer_value
 1550 0878 00000000 		.word	timer_value0
 1551 087c 00247449 		.word	1232348160
 1552 0880 00000000 		.word	cycle_time
 1553              		.cfi_endproc
 1554              	.LFE67:
 1555              		.size	function_scheduler, .-function_scheduler
 1556              		.section	.text.compute_reference,"ax",%progbits
 1557              		.align	2
 1558              		.global	compute_reference
 1559              		.thumb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 40


 1560              		.thumb_func
 1561              		.type	compute_reference, %function
 1562              	compute_reference:
 1563              	.LFB68:
 656:..\src/interruptions.c **** 
 657:..\src/interruptions.c **** //==============================================================================
 658:..\src/interruptions.c **** //                                                       COMPUTE MOTOR REFERENCE
 659:..\src/interruptions.c **** //==============================================================================
 660:..\src/interruptions.c **** void compute_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_ref* st_refOld_p) {
 1564              		.loc 1 660 0
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 40
 1567              		@ frame_needed = 1, uses_anonymous_args = 0
 1568 0000 80B5     		push	{r7, lr}
 1569              		.cfi_def_cfa_offset 8
 1570              		.cfi_offset 7, -8
 1571              		.cfi_offset 14, -4
 1572 0002 8CB0     		sub	sp, sp, #48
 1573              		.cfi_def_cfa_offset 56
 1574 0004 02AF     		add	r7, sp, #8
 1575              		.cfi_def_cfa 7, 48
 1576 0006 0346     		mov	r3, r0
 1577 0008 B960     		str	r1, [r7, #8]
 1578 000a 7A60     		str	r2, [r7, #4]
 1579 000c FB73     		strb	r3, [r7, #15]
 661:..\src/interruptions.c ****     
 662:..\src/interruptions.c ****     int32 CYDATA handle_value;
 663:..\src/interruptions.c ****     int32 CYDATA err_emg_1, err_emg_2;
 664:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[motor_idx];      // SoftHand default motor
 1580              		.loc 1 664 0
 1581 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1582 0010 7422     		movs	r2, #116
 1583 0012 02FB03F3 		mul	r3, r2, r3
 1584 0016 B033     		adds	r3, r3, #176
 1585 0018 A54A     		ldr	r2, .L156
 1586 001a 1344     		add	r3, r3, r2
 1587 001c 3B62     		str	r3, [r7, #32]
 665:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 1588              		.loc 1 665 0
 1589 001e 3B6A     		ldr	r3, [r7, #32]
 1590 0020 93F86030 		ldrb	r3, [r3, #96]
 1591 0024 FB77     		strb	r3, [r7, #31]
 666:..\src/interruptions.c ****     
 667:..\src/interruptions.c ****     static uint8 current_emg[NUM_OF_MOTORS] = {0, 0};   // 0 NONE
 668:..\src/interruptions.c ****                                                         // 1 EMG 1
 669:..\src/interruptions.c ****                                                         // 2 EMG 2
 670:..\src/interruptions.c ****                                                         // wait for both to get down
 671:..\src/interruptions.c ****     
 672:..\src/interruptions.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 1592              		.loc 1 672 0
 1593 0026 A34B     		ldr	r3, .L156+4
 1594 0028 1B68     		ldr	r3, [r3]
 1595 002a A14A     		ldr	r2, .L156
 1596 002c B2F8F821 		ldrh	r2, [r2, #504]
 1597 0030 9B1A     		subs	r3, r3, r2
 1598 0032 BB61     		str	r3, [r7, #24]
 673:..\src/interruptions.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 41


 1599              		.loc 1 673 0
 1600 0034 9F4B     		ldr	r3, .L156+4
 1601 0036 5B68     		ldr	r3, [r3, #4]
 1602 0038 9D4A     		ldr	r2, .L156
 1603 003a B2F8FA21 		ldrh	r2, [r2, #506]
 1604 003e 9B1A     		subs	r3, r3, r2
 1605 0040 7B61     		str	r3, [r7, #20]
 674:..\src/interruptions.c ****     
 675:..\src/interruptions.c ****      // =========================== POSITION INPUT ==============================            
 676:..\src/interruptions.c ****     switch(MOT->input_mode) {
 1606              		.loc 1 676 0
 1607 0042 3B6A     		ldr	r3, [r7, #32]
 1608 0044 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 1609 0048 013B     		subs	r3, r3, #1
 1610 004a 062B     		cmp	r3, #6
 1611 004c 00F24E82 		bhi	.L148
 1612 0050 01A2     		adr	r2, .L95
 1613 0052 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1614 0056 00BF     		.p2align 2
 1615              	.L95:
 1616 0058 75000000 		.word	.L94+1
 1617 005c 21020000 		.word	.L96+1
 1618 0060 C1020000 		.word	.L97+1
 1619 0064 29030000 		.word	.L98+1
 1620 0068 09040000 		.word	.L99+1
 1621 006c 4D010000 		.word	.L100+1
 1622 0070 59020000 		.word	.L101+1
 1623              		.p2align 1
 1624              	.L94:
 677:..\src/interruptions.c ****         case INPUT_MODE_ENCODER3:
 678:..\src/interruptions.c **** 
 679:..\src/interruptions.c ****             // Calculate handle value based on position of handle in the
 680:..\src/interruptions.c ****             // sensor chain and multiplication factor between handle and motor position
 681:..\src/interruptions.c ****             if (c_mem.enc[ENC_L].double_encoder_on_off) 
 1625              		.loc 1 681 0
 1626 0074 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1627 0076 8E49     		ldr	r1, .L156
 1628 0078 1346     		mov	r3, r2
 1629 007a 5B00     		lsls	r3, r3, #1
 1630 007c 1344     		add	r3, r3, r2
 1631 007e 1B01     		lsls	r3, r3, #4
 1632 0080 0B44     		add	r3, r3, r1
 1633 0082 03F5DC73 		add	r3, r3, #440
 1634 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1635 0088 002B     		cmp	r3, #0
 1636 008a 19D0     		beq	.L102
 682:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[2] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1637              		.loc 1 682 0
 1638 008c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1639 008e 8A4A     		ldr	r2, .L156+8
 1640 0090 3421     		movs	r1, #52
 1641 0092 01FB03F3 		mul	r3, r1, r3
 1642 0096 1344     		add	r3, r3, r2
 1643 0098 0833     		adds	r3, r3, #8
 1644 009a 1968     		ldr	r1, [r3]
 1645 009c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1646 009e 8448     		ldr	r0, .L156
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 42


 1647 00a0 1346     		mov	r3, r2
 1648 00a2 5B00     		lsls	r3, r3, #1
 1649 00a4 1344     		add	r3, r3, r2
 1650 00a6 1B01     		lsls	r3, r3, #4
 1651 00a8 0344     		add	r3, r3, r0
 1652 00aa 03F5DE73 		add	r3, r3, #444
 1653 00ae 93F90030 		ldrsb	r3, [r3]
 1654 00b2 03FB01F2 		mul	r2, r3, r1
 1655 00b6 3B6A     		ldr	r3, [r7, #32]
 1656 00b8 5B6B     		ldr	r3, [r3, #52]
 1657 00ba 1344     		add	r3, r3, r2
 1658 00bc 7B62     		str	r3, [r7, #36]
 1659 00be 18E0     		b	.L103
 1660              	.L102:
 683:..\src/interruptions.c ****             else
 684:..\src/interruptions.c ****                 handle_value = (g_meas[ENC_L].pos[1] * c_mem.enc[ENC_L].motor_handle_ratio) + MOT->
 1661              		.loc 1 684 0
 1662 00c0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1663 00c2 7D4A     		ldr	r2, .L156+8
 1664 00c4 3421     		movs	r1, #52
 1665 00c6 01FB03F3 		mul	r3, r1, r3
 1666 00ca 1344     		add	r3, r3, r2
 1667 00cc 0433     		adds	r3, r3, #4
 1668 00ce 1968     		ldr	r1, [r3]
 1669 00d0 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 1670 00d2 7748     		ldr	r0, .L156
 1671 00d4 1346     		mov	r3, r2
 1672 00d6 5B00     		lsls	r3, r3, #1
 1673 00d8 1344     		add	r3, r3, r2
 1674 00da 1B01     		lsls	r3, r3, #4
 1675 00dc 0344     		add	r3, r3, r0
 1676 00de 03F5DE73 		add	r3, r3, #444
 1677 00e2 93F90030 		ldrsb	r3, [r3]
 1678 00e6 03FB01F2 		mul	r2, r3, r1
 1679 00ea 3B6A     		ldr	r3, [r7, #32]
 1680 00ec 5B6B     		ldr	r3, [r3, #52]
 1681 00ee 1344     		add	r3, r3, r2
 1682 00f0 7B62     		str	r3, [r7, #36]
 1683              	.L103:
 685:..\src/interruptions.c ****             
 686:..\src/interruptions.c **** 
 687:..\src/interruptions.c ****             // Read handle and use it as reference for the motor
 688:..\src/interruptions.c ****             if (((handle_value - st_refOld_p->pos) > MOT->max_step_pos) && (MOT->max_step_pos != 0)
 1684              		.loc 1 688 0
 1685 00f2 7B68     		ldr	r3, [r7, #4]
 1686 00f4 1B68     		ldr	r3, [r3]
 1687 00f6 7A6A     		ldr	r2, [r7, #36]
 1688 00f8 D21A     		subs	r2, r2, r3
 1689 00fa 3B6A     		ldr	r3, [r7, #32]
 1690 00fc 1B6C     		ldr	r3, [r3, #64]
 1691 00fe 9A42     		cmp	r2, r3
 1692 0100 0BDD     		ble	.L104
 1693              		.loc 1 688 0 is_stmt 0 discriminator 1
 1694 0102 3B6A     		ldr	r3, [r7, #32]
 1695 0104 1B6C     		ldr	r3, [r3, #64]
 1696 0106 002B     		cmp	r3, #0
 1697 0108 07D0     		beq	.L104
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 43


 689:..\src/interruptions.c ****                 st_ref_p->pos += MOT->max_step_pos;
 1698              		.loc 1 689 0 is_stmt 1
 1699 010a BB68     		ldr	r3, [r7, #8]
 1700 010c 1A68     		ldr	r2, [r3]
 1701 010e 3B6A     		ldr	r3, [r7, #32]
 1702 0110 1B6C     		ldr	r3, [r3, #64]
 1703 0112 1A44     		add	r2, r2, r3
 1704 0114 BB68     		ldr	r3, [r7, #8]
 1705 0116 1A60     		str	r2, [r3]
 1706 0118 17E0     		b	.L105
 1707              	.L104:
 690:..\src/interruptions.c ****             else {
 691:..\src/interruptions.c ****                 if (((handle_value - st_refOld_p->pos) < MOT->max_step_neg) && (MOT->max_step_neg !
 1708              		.loc 1 691 0
 1709 011a 7B68     		ldr	r3, [r7, #4]
 1710 011c 1B68     		ldr	r3, [r3]
 1711 011e 7A6A     		ldr	r2, [r7, #36]
 1712 0120 D21A     		subs	r2, r2, r3
 1713 0122 3B6A     		ldr	r3, [r7, #32]
 1714 0124 DB6B     		ldr	r3, [r3, #60]
 1715 0126 9A42     		cmp	r2, r3
 1716 0128 0BDA     		bge	.L106
 1717              		.loc 1 691 0 is_stmt 0 discriminator 1
 1718 012a 3B6A     		ldr	r3, [r7, #32]
 1719 012c DB6B     		ldr	r3, [r3, #60]
 1720 012e 002B     		cmp	r3, #0
 1721 0130 07D0     		beq	.L106
 692:..\src/interruptions.c ****                     st_ref_p->pos += MOT->max_step_neg;
 1722              		.loc 1 692 0 is_stmt 1
 1723 0132 BB68     		ldr	r3, [r7, #8]
 1724 0134 1A68     		ldr	r2, [r3]
 1725 0136 3B6A     		ldr	r3, [r7, #32]
 1726 0138 DB6B     		ldr	r3, [r3, #60]
 1727 013a 1A44     		add	r2, r2, r3
 1728 013c BB68     		ldr	r3, [r7, #8]
 1729 013e 1A60     		str	r2, [r3]
 1730 0140 03E0     		b	.L105
 1731              	.L106:
 693:..\src/interruptions.c ****                 else
 694:..\src/interruptions.c ****                     st_ref_p->pos = handle_value;
 1732              		.loc 1 694 0
 1733 0142 BB68     		ldr	r3, [r7, #8]
 1734 0144 7A6A     		ldr	r2, [r7, #36]
 1735 0146 1A60     		str	r2, [r3]
 695:..\src/interruptions.c ****             }
 696:..\src/interruptions.c ****             break;
 1736              		.loc 1 696 0
 1737 0148 DBE1     		b	.L107
 1738              	.L105:
 1739 014a DAE1     		b	.L107
 1740              	.L100:
 697:..\src/interruptions.c ****         
 698:..\src/interruptions.c ****         case INPUT_MODE_JOYSTICK:
 699:..\src/interruptions.c ****             
 700:..\src/interruptions.c ****             if (c_mem.dev.use_2nd_motor_flag == FALSE){
 1741              		.loc 1 700 0
 1742 014c 584B     		ldr	r3, .L156
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 44


 1743 014e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 1744 0152 002B     		cmp	r3, #0
 1745 0154 57D1     		bne	.L108
 701:..\src/interruptions.c ****                 // Code for single motor devices. Use only up/down direction to give speed referenc
 702:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos;
 1746              		.loc 1 702 0
 1747 0156 7B68     		ldr	r3, [r7, #4]
 1748 0158 1A68     		ldr	r2, [r3]
 1749 015a BB68     		ldr	r3, [r7, #8]
 1750 015c 1A60     		str	r2, [r3]
 703:..\src/interruptions.c ****                 if(!(g_adc_meas.joystick[0] > 700)) {
 1751              		.loc 1 703 0
 1752 015e 554B     		ldr	r3, .L156+4
 1753 0160 1B6A     		ldr	r3, [r3, #32]
 1754 0162 B3F52F7F 		cmp	r3, #700
 1755 0166 45DC     		bgt	.L109
 1756              	.LBB4:
 704:..\src/interruptions.c ****                     int32 CYDATA err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_thres
 1757              		.loc 1 704 0
 1758 0168 524B     		ldr	r3, .L156+4
 1759 016a 1B6A     		ldr	r3, [r3, #32]
 1760 016c 504A     		ldr	r2, .L156
 1761 016e B2F9BA22 		ldrsh	r2, [r2, #698]
 1762 0172 9B1A     		subs	r3, r3, r2
 1763 0174 3B61     		str	r3, [r7, #16]
 705:..\src/interruptions.c **** 
 706:..\src/interruptions.c ****                     if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both mot
 1764              		.loc 1 706 0
 1765 0176 4F4B     		ldr	r3, .L156+4
 1766 0178 1B6A     		ldr	r3, [r3, #32]
 1767 017a 4D4A     		ldr	r2, .L156
 1768 017c B2F9BA22 		ldrsh	r2, [r2, #698]
 1769 0180 9342     		cmp	r3, r2
 1770 0182 13DD     		ble	.L110
 707:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed
 1771              		.loc 1 707 0
 1772 0184 BB68     		ldr	r3, [r7, #8]
 1773 0186 1A68     		ldr	r2, [r3]
 1774 0188 494B     		ldr	r3, .L156
 1775 018a B3F8B832 		ldrh	r3, [r3, #696]
 1776 018e 1946     		mov	r1, r3
 1777 0190 3B69     		ldr	r3, [r7, #16]
 1778 0192 03FB01F1 		mul	r1, r3, r1
 1779 0196 464B     		ldr	r3, .L156
 1780 0198 B3F9BA32 		ldrsh	r3, [r3, #698]
 1781 019c C3F58063 		rsb	r3, r3, #1024
 1782 01a0 91FBF3F3 		sdiv	r3, r1, r3
 1783 01a4 1A44     		add	r2, r2, r3
 1784 01a6 BB68     		ldr	r3, [r7, #8]
 1785 01a8 1A60     		str	r2, [r3]
 1786              	.LBE4:
 708:..\src/interruptions.c ****                     }
 709:..\src/interruptions.c ****                     else {
 710:..\src/interruptions.c ****                         err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 711:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 712:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 713:..\src/interruptions.c ****                         }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 45


 714:..\src/interruptions.c ****                     }
 715:..\src/interruptions.c ****                 }
 716:..\src/interruptions.c ****                 else {  //The button is pressed and the motor reference is gradually set to zero 
 717:..\src/interruptions.c ****                     st_ref_p->pos -= (int32) g_mem.JOY_spec.joystick_closure_speed;
 718:..\src/interruptions.c ****                 }
 719:..\src/interruptions.c ****             }
 720:..\src/interruptions.c ****             else {
 721:..\src/interruptions.c ****                 // Code for two motors devices. Use both direction to give speed references
 722:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 723:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 724:..\src/interruptions.c ****                 }
 725:..\src/interruptions.c ****             }
 726:..\src/interruptions.c ****             break;
 1787              		.loc 1 726 0
 1788 01aa A1E1     		b	.L149
 1789              	.L110:
 1790              	.LBB5:
 710:..\src/interruptions.c ****                         if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both m
 1791              		.loc 1 710 0
 1792 01ac 414B     		ldr	r3, .L156+4
 1793 01ae 1B6A     		ldr	r3, [r3, #32]
 1794 01b0 3F4A     		ldr	r2, .L156
 1795 01b2 B2F9BA22 		ldrsh	r2, [r2, #698]
 1796 01b6 1344     		add	r3, r3, r2
 1797 01b8 3B61     		str	r3, [r7, #16]
 711:..\src/interruptions.c ****                             st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_s
 1798              		.loc 1 711 0
 1799 01ba 3E4B     		ldr	r3, .L156+4
 1800 01bc 1A6A     		ldr	r2, [r3, #32]
 1801 01be 3C4B     		ldr	r3, .L156
 1802 01c0 B3F9BA32 		ldrsh	r3, [r3, #698]
 1803 01c4 5B42     		negs	r3, r3
 1804 01c6 9A42     		cmp	r2, r3
 1805 01c8 80F29281 		bge	.L149
 712:..\src/interruptions.c ****                         }
 1806              		.loc 1 712 0
 1807 01cc BB68     		ldr	r3, [r7, #8]
 1808 01ce 1A68     		ldr	r2, [r3]
 1809 01d0 374B     		ldr	r3, .L156
 1810 01d2 B3F8B832 		ldrh	r3, [r3, #696]
 1811 01d6 1946     		mov	r1, r3
 1812 01d8 3B69     		ldr	r3, [r7, #16]
 1813 01da 03FB01F1 		mul	r1, r3, r1
 1814 01de 344B     		ldr	r3, .L156
 1815 01e0 B3F9BA32 		ldrsh	r3, [r3, #698]
 1816 01e4 C3F58063 		rsb	r3, r3, #1024
 1817 01e8 91FBF3F3 		sdiv	r3, r1, r3
 1818 01ec 1A44     		add	r2, r2, r3
 1819 01ee BB68     		ldr	r3, [r7, #8]
 1820 01f0 1A60     		str	r2, [r3]
 1821              	.LBE5:
 1822              		.loc 1 726 0
 1823 01f2 7DE1     		b	.L149
 1824              	.L109:
 717:..\src/interruptions.c ****                 }
 1825              		.loc 1 717 0
 1826 01f4 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 46


 1827 01f6 1B68     		ldr	r3, [r3]
 1828 01f8 304A     		ldr	r2, .L156+12
 1829 01fa B2F8B822 		ldrh	r2, [r2, #696]
 1830 01fe 9A1A     		subs	r2, r3, r2
 1831 0200 BB68     		ldr	r3, [r7, #8]
 1832 0202 1A60     		str	r2, [r3]
 1833              		.loc 1 726 0
 1834 0204 74E1     		b	.L149
 1835              	.L108:
 722:..\src/interruptions.c ****                     compute_SoftHand_2_motors_joystick_reference(motor_idx, st_ref_p, st_refOld_p);
 1836              		.loc 1 722 0
 1837 0206 2A4B     		ldr	r3, .L156
 1838 0208 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1839 020c 042B     		cmp	r3, #4
 1840 020e 40F06F81 		bne	.L149
 723:..\src/interruptions.c ****                 }
 1841              		.loc 1 723 0
 1842 0212 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1843 0214 7A68     		ldr	r2, [r7, #4]
 1844 0216 B968     		ldr	r1, [r7, #8]
 1845 0218 1846     		mov	r0, r3
 1846 021a FFF7FEFF 		bl	compute_SoftHand_2_motors_joystick_reference
 1847              		.loc 1 726 0
 1848 021e 67E1     		b	.L149
 1849              	.L96:
 727:..\src/interruptions.c ****             
 728:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL:
 729:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1850              		.loc 1 729 0
 1851 0220 BB69     		ldr	r3, [r7, #24]
 1852 0222 002B     		cmp	r3, #0
 1853 0224 14DD     		ble	.L114
 730:..\src/interruptions.c ****                 st_ref_p->pos = (err_emg_1 * g_mem.motor[motor_idx].pos_lim_sup) / (1024 - c_mem.em
 1854              		.loc 1 730 0
 1855 0226 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1856 0228 244A     		ldr	r2, .L156+12
 1857 022a 7421     		movs	r1, #116
 1858 022c 01FB03F3 		mul	r3, r1, r3
 1859 0230 1344     		add	r3, r3, r2
 1860 0232 E833     		adds	r3, r3, #232
 1861 0234 1B68     		ldr	r3, [r3]
 1862 0236 BA69     		ldr	r2, [r7, #24]
 1863 0238 02FB03F2 		mul	r2, r2, r3
 1864 023c 1C4B     		ldr	r3, .L156
 1865 023e B3F8F831 		ldrh	r3, [r3, #504]
 1866 0242 C3F58063 		rsb	r3, r3, #1024
 1867 0246 92FBF3F2 		sdiv	r2, r2, r3
 1868 024a BB68     		ldr	r3, [r7, #8]
 1869 024c 1A60     		str	r2, [r3]
 731:..\src/interruptions.c ****             else
 732:..\src/interruptions.c ****                 st_ref_p->pos = 0;
 733:..\src/interruptions.c ****             break;
 1870              		.loc 1 733 0
 1871 024e 58E1     		b	.L107
 1872              	.L114:
 732:..\src/interruptions.c ****             break;
 1873              		.loc 1 732 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 47


 1874 0250 BB68     		ldr	r3, [r7, #8]
 1875 0252 0022     		movs	r2, #0
 1876 0254 1A60     		str	r2, [r3]
 1877              		.loc 1 733 0
 1878 0256 54E1     		b	.L107
 1879              	.L101:
 734:..\src/interruptions.c ****         
 735:..\src/interruptions.c ****         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 736:..\src/interruptions.c ****             if (err_emg_1 > 0)
 1880              		.loc 1 736 0
 1881 0258 BB69     		ldr	r3, [r7, #24]
 1882 025a 002B     		cmp	r3, #0
 1883 025c 1DDD     		ble	.L116
 737:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup - (err_emg_1 * g_mem.motor[motor
 1884              		.loc 1 737 0
 1885 025e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1886 0260 164A     		ldr	r2, .L156+12
 1887 0262 7421     		movs	r1, #116
 1888 0264 01FB03F3 		mul	r3, r1, r3
 1889 0268 1344     		add	r3, r3, r2
 1890 026a E833     		adds	r3, r3, #232
 1891 026c 1A68     		ldr	r2, [r3]
 1892 026e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1893 0270 1249     		ldr	r1, .L156+12
 1894 0272 7420     		movs	r0, #116
 1895 0274 00FB03F3 		mul	r3, r0, r3
 1896 0278 0B44     		add	r3, r3, r1
 1897 027a E833     		adds	r3, r3, #232
 1898 027c 1B68     		ldr	r3, [r3]
 1899 027e B969     		ldr	r1, [r7, #24]
 1900 0280 01FB03F1 		mul	r1, r1, r3
 1901 0284 0A4B     		ldr	r3, .L156
 1902 0286 B3F8F831 		ldrh	r3, [r3, #504]
 1903 028a C3F58063 		rsb	r3, r3, #1024
 1904 028e 91FBF3F3 		sdiv	r3, r1, r3
 1905 0292 D21A     		subs	r2, r2, r3
 1906 0294 BB68     		ldr	r3, [r7, #8]
 1907 0296 1A60     		str	r2, [r3]
 738:..\src/interruptions.c ****             else
 739:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.motor[motor_idx].pos_lim_sup;
 740:..\src/interruptions.c ****             break;
 1908              		.loc 1 740 0
 1909 0298 33E1     		b	.L107
 1910              	.L116:
 739:..\src/interruptions.c ****             break;
 1911              		.loc 1 739 0
 1912 029a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1913 029c 074A     		ldr	r2, .L156+12
 1914 029e 7421     		movs	r1, #116
 1915 02a0 01FB03F3 		mul	r3, r1, r3
 1916 02a4 1344     		add	r3, r3, r2
 1917 02a6 E833     		adds	r3, r3, #232
 1918 02a8 1A68     		ldr	r2, [r3]
 1919 02aa BB68     		ldr	r3, [r7, #8]
 1920 02ac 1A60     		str	r2, [r3]
 1921              		.loc 1 740 0
 1922 02ae 28E1     		b	.L107
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 48


 1923              	.L157:
 1924              		.align	2
 1925              	.L156:
 1926 02b0 00000000 		.word	c_mem
 1927 02b4 00000000 		.word	g_adc_meas
 1928 02b8 00000000 		.word	g_meas
 1929 02bc 00000000 		.word	g_mem
 1930              	.L97:
 741:..\src/interruptions.c **** 
 742:..\src/interruptions.c ****         case INPUT_MODE_EMG_INTEGRAL:
 743:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1931              		.loc 1 743 0
 1932 02c0 7B68     		ldr	r3, [r7, #4]
 1933 02c2 1A68     		ldr	r2, [r3]
 1934 02c4 BB68     		ldr	r3, [r7, #8]
 1935 02c6 1A60     		str	r2, [r3]
 744:..\src/interruptions.c ****             if (err_emg_1 > 0) {
 1936              		.loc 1 744 0
 1937 02c8 BB69     		ldr	r3, [r7, #24]
 1938 02ca 002B     		cmp	r3, #0
 1939 02cc 13DD     		ble	.L118
 745:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * (int)g_mem.emg.emg_speed[0] * 2) / 
 1940              		.loc 1 745 0
 1941 02ce 7B68     		ldr	r3, [r7, #4]
 1942 02d0 1A68     		ldr	r2, [r3]
 1943 02d2 884B     		ldr	r3, .L158
 1944 02d4 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 1945 02d8 1946     		mov	r1, r3
 1946 02da BB69     		ldr	r3, [r7, #24]
 1947 02dc 03FB01F3 		mul	r3, r3, r1
 1948 02e0 5900     		lsls	r1, r3, #1
 1949 02e2 854B     		ldr	r3, .L158+4
 1950 02e4 B3F8F831 		ldrh	r3, [r3, #504]
 1951 02e8 C3F58063 		rsb	r3, r3, #1024
 1952 02ec 91FBF3F3 		sdiv	r3, r1, r3
 1953 02f0 1A44     		add	r2, r2, r3
 1954 02f2 BB68     		ldr	r3, [r7, #8]
 1955 02f4 1A60     		str	r2, [r3]
 1956              	.L118:
 746:..\src/interruptions.c ****             }
 747:..\src/interruptions.c ****             if (err_emg_2 > 0) {
 1957              		.loc 1 747 0
 1958 02f6 7B69     		ldr	r3, [r7, #20]
 1959 02f8 002B     		cmp	r3, #0
 1960 02fa 40F30181 		ble	.L150
 748:..\src/interruptions.c ****                 st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * (int)g_mem.emg.emg_speed[1] * 2) / 
 1961              		.loc 1 748 0
 1962 02fe 7B68     		ldr	r3, [r7, #4]
 1963 0300 1A68     		ldr	r2, [r3]
 1964 0302 7C4B     		ldr	r3, .L158
 1965 0304 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 1966 0308 1946     		mov	r1, r3
 1967 030a 7B69     		ldr	r3, [r7, #20]
 1968 030c 03FB01F3 		mul	r3, r3, r1
 1969 0310 5900     		lsls	r1, r3, #1
 1970 0312 794B     		ldr	r3, .L158+4
 1971 0314 B3F8FA31 		ldrh	r3, [r3, #506]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 49


 1972 0318 C3F58063 		rsb	r3, r3, #1024
 1973 031c 91FBF3F3 		sdiv	r3, r1, r3
 1974 0320 D21A     		subs	r2, r2, r3
 1975 0322 BB68     		ldr	r3, [r7, #8]
 1976 0324 1A60     		str	r2, [r3]
 749:..\src/interruptions.c ****             }
 750:..\src/interruptions.c ****             break;
 1977              		.loc 1 750 0
 1978 0326 EBE0     		b	.L150
 1979              	.L98:
 751:..\src/interruptions.c **** 
 752:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS:
 753:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 1980              		.loc 1 753 0
 1981 0328 7B68     		ldr	r3, [r7, #4]
 1982 032a 1A68     		ldr	r2, [r3]
 1983 032c BB68     		ldr	r3, [r7, #8]
 1984 032e 1A60     		str	r2, [r3]
 754:..\src/interruptions.c ****             if (c_mem.dev.dev_type != SOFTHAND_2_MOTORS){
 1985              		.loc 1 754 0
 1986 0330 714B     		ldr	r3, .L158+4
 1987 0332 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 1988 0336 042B     		cmp	r3, #4
 1989 0338 5BD0     		beq	.L120
 755:..\src/interruptions.c ****                 switch (current_emg[motor_idx]) {
 1990              		.loc 1 755 0
 1991 033a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1992 033c 6F4A     		ldr	r2, .L158+8
 1993 033e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1994 0340 012B     		cmp	r3, #1
 1995 0342 1CD0     		beq	.L122
 1996 0344 022B     		cmp	r3, #2
 1997 0346 37D0     		beq	.L123
 1998 0348 002B     		cmp	r3, #0
 1999 034a 00D0     		beq	.L124
 756:..\src/interruptions.c ****                     case 0:
 757:..\src/interruptions.c ****                         // Look for the first EMG passing the threshold
 758:..\src/interruptions.c ****                         if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 759:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 760:..\src/interruptions.c ****                             break;
 761:..\src/interruptions.c ****                         }
 762:..\src/interruptions.c ****                         if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 763:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 764:..\src/interruptions.c ****                             break;
 765:..\src/interruptions.c ****                         }
 766:..\src/interruptions.c ****                         break;
 767:..\src/interruptions.c **** 
 768:..\src/interruptions.c ****                     case 1:
 769:..\src/interruptions.c ****                         // EMG 1 is first
 770:..\src/interruptions.c ****                         if (err_emg_1 < 0) {
 771:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 772:..\src/interruptions.c ****                             break;
 773:..\src/interruptions.c ****                         }
 774:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 775:..\src/interruptions.c ****                         break;
 776:..\src/interruptions.c **** 
 777:..\src/interruptions.c ****                     case 2:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 50


 778:..\src/interruptions.c ****                         // EMG 2 is first
 779:..\src/interruptions.c ****                         if (err_emg_2 < 0) {
 780:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 781:..\src/interruptions.c ****                             break;
 782:..\src/interruptions.c ****                         }
 783:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2
 784:..\src/interruptions.c ****                         break;
 785:..\src/interruptions.c **** 
 786:..\src/interruptions.c ****                     default:
 787:..\src/interruptions.c ****                         break;
 2000              		.loc 1 787 0
 2001 034c 5BE0     		b	.L130
 2002              	.L124:
 758:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 2003              		.loc 1 758 0
 2004 034e BB69     		ldr	r3, [r7, #24]
 2005 0350 002B     		cmp	r3, #0
 2006 0352 08DD     		ble	.L125
 758:..\src/interruptions.c ****                             current_emg[motor_idx] = 1;
 2007              		.loc 1 758 0 is_stmt 0 discriminator 1
 2008 0354 BA69     		ldr	r2, [r7, #24]
 2009 0356 7B69     		ldr	r3, [r7, #20]
 2010 0358 9A42     		cmp	r2, r3
 2011 035a 04DD     		ble	.L125
 759:..\src/interruptions.c ****                             break;
 2012              		.loc 1 759 0 is_stmt 1
 2013 035c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2014 035e 674A     		ldr	r2, .L158+8
 2015 0360 0121     		movs	r1, #1
 2016 0362 D154     		strb	r1, [r2, r3]
 760:..\src/interruptions.c ****                         }
 2017              		.loc 1 760 0
 2018 0364 4FE0     		b	.L130
 2019              	.L125:
 762:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2020              		.loc 1 762 0
 2021 0366 7B69     		ldr	r3, [r7, #20]
 2022 0368 002B     		cmp	r3, #0
 2023 036a 4BDD     		ble	.L151
 762:..\src/interruptions.c ****                             current_emg[motor_idx] = 2;
 2024              		.loc 1 762 0 is_stmt 0 discriminator 1
 2025 036c 7A69     		ldr	r2, [r7, #20]
 2026 036e BB69     		ldr	r3, [r7, #24]
 2027 0370 9A42     		cmp	r2, r3
 2028 0372 47DD     		ble	.L151
 763:..\src/interruptions.c ****                             break;
 2029              		.loc 1 763 0 is_stmt 1
 2030 0374 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2031 0376 614A     		ldr	r2, .L158+8
 2032 0378 0221     		movs	r1, #2
 2033 037a D154     		strb	r1, [r2, r3]
 764:..\src/interruptions.c ****                         }
 2034              		.loc 1 764 0
 2035 037c 43E0     		b	.L130
 2036              	.L122:
 770:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2037              		.loc 1 770 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 51


 2038 037e BB69     		ldr	r3, [r7, #24]
 2039 0380 002B     		cmp	r3, #0
 2040 0382 04DA     		bge	.L128
 771:..\src/interruptions.c ****                             break;
 2041              		.loc 1 771 0
 2042 0384 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2043 0386 5D4A     		ldr	r2, .L158+8
 2044 0388 0021     		movs	r1, #0
 2045 038a D154     		strb	r1, [r2, r3]
 772:..\src/interruptions.c ****                         }
 2046              		.loc 1 772 0
 2047 038c 3BE0     		b	.L130
 2048              	.L128:
 774:..\src/interruptions.c ****                         break;
 2049              		.loc 1 774 0
 2050 038e 7B68     		ldr	r3, [r7, #4]
 2051 0390 1A68     		ldr	r2, [r3]
 2052 0392 584B     		ldr	r3, .L158
 2053 0394 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2054 0398 1946     		mov	r1, r3
 2055 039a BB69     		ldr	r3, [r7, #24]
 2056 039c 03FB01F3 		mul	r3, r3, r1
 2057 03a0 9900     		lsls	r1, r3, #2
 2058 03a2 554B     		ldr	r3, .L158+4
 2059 03a4 B3F8F831 		ldrh	r3, [r3, #504]
 2060 03a8 C3F58063 		rsb	r3, r3, #1024
 2061 03ac 91FBF3F3 		sdiv	r3, r1, r3
 2062 03b0 1A44     		add	r2, r2, r3
 2063 03b2 BB68     		ldr	r3, [r7, #8]
 2064 03b4 1A60     		str	r2, [r3]
 775:..\src/interruptions.c **** 
 2065              		.loc 1 775 0
 2066 03b6 26E0     		b	.L130
 2067              	.L123:
 779:..\src/interruptions.c ****                             current_emg[motor_idx] = 0;
 2068              		.loc 1 779 0
 2069 03b8 7B69     		ldr	r3, [r7, #20]
 2070 03ba 002B     		cmp	r3, #0
 2071 03bc 04DA     		bge	.L129
 780:..\src/interruptions.c ****                             break;
 2072              		.loc 1 780 0
 2073 03be FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2074 03c0 4E4A     		ldr	r2, .L158+8
 2075 03c2 0021     		movs	r1, #0
 2076 03c4 D154     		strb	r1, [r2, r3]
 781:..\src/interruptions.c ****                         }
 2077              		.loc 1 781 0
 2078 03c6 1EE0     		b	.L130
 2079              	.L129:
 783:..\src/interruptions.c ****                         break;
 2080              		.loc 1 783 0
 2081 03c8 7B68     		ldr	r3, [r7, #4]
 2082 03ca 1A68     		ldr	r2, [r3]
 2083 03cc 494B     		ldr	r3, .L158
 2084 03ce 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2085 03d2 1946     		mov	r1, r3
 2086 03d4 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 52


 2087 03d6 03FB01F3 		mul	r3, r3, r1
 2088 03da 9900     		lsls	r1, r3, #2
 2089 03dc 464B     		ldr	r3, .L158+4
 2090 03de B3F8FA31 		ldrh	r3, [r3, #506]
 2091 03e2 C3F58063 		rsb	r3, r3, #1024
 2092 03e6 91FBF3F3 		sdiv	r3, r1, r3
 2093 03ea D21A     		subs	r2, r2, r3
 2094 03ec BB68     		ldr	r3, [r7, #8]
 2095 03ee 1A60     		str	r2, [r3]
 784:..\src/interruptions.c **** 
 2096              		.loc 1 784 0
 2097 03f0 09E0     		b	.L130
 2098              	.L120:
 788:..\src/interruptions.c ****                 }
 789:..\src/interruptions.c ****             }
 790:..\src/interruptions.c ****             else{ // case SOFTHAND_2_MOTORS
 791:..\src/interruptions.c ****                 //compute reference using a FSM for choosing the right sinergy to activate
 792:..\src/interruptions.c ****                 compute_SoftHand_2_motors_emg_reference(motor_idx, st_ref_p, st_refOld_p, err_emg_1
 2099              		.loc 1 792 0
 2100 03f2 F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 2101 03f4 7B69     		ldr	r3, [r7, #20]
 2102 03f6 0093     		str	r3, [sp]
 2103 03f8 BB69     		ldr	r3, [r7, #24]
 2104 03fa 7A68     		ldr	r2, [r7, #4]
 2105 03fc B968     		ldr	r1, [r7, #8]
 2106 03fe FFF7FEFF 		bl	compute_SoftHand_2_motors_emg_reference
 793:..\src/interruptions.c ****             }
 794:..\src/interruptions.c ****             break;
 2107              		.loc 1 794 0
 2108 0402 7EE0     		b	.L107
 2109              	.L151:
 766:..\src/interruptions.c **** 
 2110              		.loc 1 766 0
 2111 0404 00BF     		nop
 2112              	.L130:
 2113              		.loc 1 794 0 discriminator 5
 2114 0406 7CE0     		b	.L107
 2115              	.L99:
 795:..\src/interruptions.c **** 
 796:..\src/interruptions.c ****         case INPUT_MODE_EMG_FCFS_ADV:
 797:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2116              		.loc 1 797 0
 2117 0408 7B68     		ldr	r3, [r7, #4]
 2118 040a 1A68     		ldr	r2, [r3]
 2119 040c BB68     		ldr	r3, [r7, #8]
 2120 040e 1A60     		str	r2, [r3]
 798:..\src/interruptions.c ****             switch (current_emg[motor_idx]) {
 2121              		.loc 1 798 0
 2122 0410 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2123 0412 3A4A     		ldr	r2, .L158+8
 2124 0414 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2125 0416 012B     		cmp	r3, #1
 2126 0418 1CD0     		beq	.L132
 2127 041a 022B     		cmp	r3, #2
 2128 041c 3DD0     		beq	.L133
 2129 041e 002B     		cmp	r3, #0
 2130 0420 00D0     		beq	.L134
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 53


 799:..\src/interruptions.c ****                 // Look for the first EMG passing the threshold
 800:..\src/interruptions.c ****                 case 0:
 801:..\src/interruptions.c ****                     if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {
 802:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 803:..\src/interruptions.c ****                         break;
 804:..\src/interruptions.c ****                     }
 805:..\src/interruptions.c ****                     if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {
 806:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 807:..\src/interruptions.c ****                         break;
 808:..\src/interruptions.c ****                     }
 809:..\src/interruptions.c ****                     break;
 810:..\src/interruptions.c **** 
 811:..\src/interruptions.c ****                 // EMG 1 is first
 812:..\src/interruptions.c ****                 case 1:
 813:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 814:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 815:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 816:..\src/interruptions.c ****                         break;
 817:..\src/interruptions.c ****                     }
 818:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 819:..\src/interruptions.c ****                     if (err_emg_1 > 0) 
 820:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 821:..\src/interruptions.c ****                     
 822:..\src/interruptions.c ****                     break;
 823:..\src/interruptions.c **** 
 824:..\src/interruptions.c ****                 // EMG 2 is first
 825:..\src/interruptions.c ****                 case 2:
 826:..\src/interruptions.c ****                     // If both signals are under threshold go back to status 0
 827:..\src/interruptions.c ****                     if ((err_emg_1 < 0) && (err_emg_2 < 0)) {
 828:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 829:..\src/interruptions.c ****                         break;
 830:..\src/interruptions.c ****                     }
 831:..\src/interruptions.c ****                     // but if the current signal come back over threshold, continue using it
 832:..\src/interruptions.c ****                     if (err_emg_2 > 0) {
 833:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 834:..\src/interruptions.c ****                     }
 835:..\src/interruptions.c ****                     break;
 836:..\src/interruptions.c **** 
 837:..\src/interruptions.c ****                 default:
 838:..\src/interruptions.c ****                     break;
 2131              		.loc 1 838 0
 2132 0422 62E0     		b	.L136
 2133              	.L134:
 801:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2134              		.loc 1 801 0
 2135 0424 BB69     		ldr	r3, [r7, #24]
 2136 0426 002B     		cmp	r3, #0
 2137 0428 08DD     		ble	.L135
 801:..\src/interruptions.c ****                         current_emg[motor_idx] = 1;
 2138              		.loc 1 801 0 is_stmt 0 discriminator 1
 2139 042a BA69     		ldr	r2, [r7, #24]
 2140 042c 7B69     		ldr	r3, [r7, #20]
 2141 042e 9A42     		cmp	r2, r3
 2142 0430 04DD     		ble	.L135
 802:..\src/interruptions.c ****                         break;
 2143              		.loc 1 802 0 is_stmt 1
 2144 0432 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 54


 2145 0434 314A     		ldr	r2, .L158+8
 2146 0436 0121     		movs	r1, #1
 2147 0438 D154     		strb	r1, [r2, r3]
 803:..\src/interruptions.c ****                     }
 2148              		.loc 1 803 0
 2149 043a 56E0     		b	.L136
 2150              	.L135:
 805:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2151              		.loc 1 805 0
 2152 043c 7B69     		ldr	r3, [r7, #20]
 2153 043e 002B     		cmp	r3, #0
 2154 0440 4EDD     		ble	.L152
 805:..\src/interruptions.c ****                         current_emg[motor_idx] = 2;
 2155              		.loc 1 805 0 is_stmt 0 discriminator 1
 2156 0442 7A69     		ldr	r2, [r7, #20]
 2157 0444 BB69     		ldr	r3, [r7, #24]
 2158 0446 9A42     		cmp	r2, r3
 2159 0448 4ADD     		ble	.L152
 806:..\src/interruptions.c ****                         break;
 2160              		.loc 1 806 0 is_stmt 1
 2161 044a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2162 044c 2B4A     		ldr	r2, .L158+8
 2163 044e 0221     		movs	r1, #2
 2164 0450 D154     		strb	r1, [r2, r3]
 807:..\src/interruptions.c ****                     }
 2165              		.loc 1 807 0
 2166 0452 4AE0     		b	.L136
 2167              	.L132:
 814:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2168              		.loc 1 814 0
 2169 0454 BB69     		ldr	r3, [r7, #24]
 2170 0456 002B     		cmp	r3, #0
 2171 0458 07DA     		bge	.L138
 814:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2172              		.loc 1 814 0 is_stmt 0 discriminator 1
 2173 045a 7B69     		ldr	r3, [r7, #20]
 2174 045c 002B     		cmp	r3, #0
 2175 045e 04DA     		bge	.L138
 815:..\src/interruptions.c ****                         break;
 2176              		.loc 1 815 0 is_stmt 1
 2177 0460 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2178 0462 264A     		ldr	r2, .L158+8
 2179 0464 0021     		movs	r1, #0
 2180 0466 D154     		strb	r1, [r2, r3]
 816:..\src/interruptions.c ****                     }
 2181              		.loc 1 816 0
 2182 0468 3FE0     		b	.L136
 2183              	.L138:
 819:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2
 2184              		.loc 1 819 0
 2185 046a BB69     		ldr	r3, [r7, #24]
 2186 046c 002B     		cmp	r3, #0
 2187 046e 39DD     		ble	.L153
 820:..\src/interruptions.c ****                     
 2188              		.loc 1 820 0
 2189 0470 7B68     		ldr	r3, [r7, #4]
 2190 0472 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 55


 2191 0474 1F4B     		ldr	r3, .L158
 2192 0476 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2193 047a 1946     		mov	r1, r3
 2194 047c BB69     		ldr	r3, [r7, #24]
 2195 047e 03FB01F3 		mul	r3, r3, r1
 2196 0482 9900     		lsls	r1, r3, #2
 2197 0484 1C4B     		ldr	r3, .L158+4
 2198 0486 B3F8F831 		ldrh	r3, [r3, #504]
 2199 048a C3F58063 		rsb	r3, r3, #1024
 2200 048e 91FBF3F3 		sdiv	r3, r1, r3
 2201 0492 1A44     		add	r2, r2, r3
 2202 0494 BB68     		ldr	r3, [r7, #8]
 2203 0496 1A60     		str	r2, [r3]
 822:..\src/interruptions.c **** 
 2204              		.loc 1 822 0
 2205 0498 24E0     		b	.L153
 2206              	.L133:
 827:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2207              		.loc 1 827 0
 2208 049a BB69     		ldr	r3, [r7, #24]
 2209 049c 002B     		cmp	r3, #0
 2210 049e 07DA     		bge	.L140
 827:..\src/interruptions.c ****                         current_emg[motor_idx] = 0;
 2211              		.loc 1 827 0 is_stmt 0 discriminator 1
 2212 04a0 7B69     		ldr	r3, [r7, #20]
 2213 04a2 002B     		cmp	r3, #0
 2214 04a4 04DA     		bge	.L140
 828:..\src/interruptions.c ****                         break;
 2215              		.loc 1 828 0 is_stmt 1
 2216 04a6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2217 04a8 144A     		ldr	r2, .L158+8
 2218 04aa 0021     		movs	r1, #0
 2219 04ac D154     		strb	r1, [r2, r3]
 829:..\src/interruptions.c ****                     }
 2220              		.loc 1 829 0
 2221 04ae 1CE0     		b	.L136
 2222              	.L140:
 832:..\src/interruptions.c ****                         st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * c_mem.emg.emg_speed[1] << 2
 2223              		.loc 1 832 0
 2224 04b0 7B69     		ldr	r3, [r7, #20]
 2225 04b2 002B     		cmp	r3, #0
 2226 04b4 18DD     		ble	.L154
 833:..\src/interruptions.c ****                     }
 2227              		.loc 1 833 0
 2228 04b6 7B68     		ldr	r3, [r7, #4]
 2229 04b8 1A68     		ldr	r2, [r3]
 2230 04ba 0F4B     		ldr	r3, .L158+4
 2231 04bc 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2232 04c0 1946     		mov	r1, r3
 2233 04c2 7B69     		ldr	r3, [r7, #20]
 2234 04c4 03FB01F3 		mul	r3, r3, r1
 2235 04c8 9900     		lsls	r1, r3, #2
 2236 04ca 0B4B     		ldr	r3, .L158+4
 2237 04cc B3F8FA31 		ldrh	r3, [r3, #506]
 2238 04d0 C3F58063 		rsb	r3, r3, #1024
 2239 04d4 91FBF3F3 		sdiv	r3, r1, r3
 2240 04d8 D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 56


 2241 04da BB68     		ldr	r3, [r7, #8]
 2242 04dc 1A60     		str	r2, [r3]
 835:..\src/interruptions.c **** 
 2243              		.loc 1 835 0
 2244 04de 03E0     		b	.L154
 2245              	.L152:
 809:..\src/interruptions.c **** 
 2246              		.loc 1 809 0
 2247 04e0 00BF     		nop
 2248 04e2 0EE0     		b	.L107
 2249              	.L153:
 822:..\src/interruptions.c **** 
 2250              		.loc 1 822 0
 2251 04e4 00BF     		nop
 2252 04e6 0CE0     		b	.L107
 2253              	.L154:
 835:..\src/interruptions.c **** 
 2254              		.loc 1 835 0
 2255 04e8 00BF     		nop
 2256              	.L136:
 839:..\src/interruptions.c ****             }
 840:..\src/interruptions.c ****             break;
 2257              		.loc 1 840 0 discriminator 6
 2258 04ea 0AE0     		b	.L107
 2259              	.L148:
 841:..\src/interruptions.c **** 
 842:..\src/interruptions.c ****         default:
 843:..\src/interruptions.c ****             break;
 2260              		.loc 1 843 0
 2261 04ec 00BF     		nop
 2262 04ee 08E0     		b	.L107
 2263              	.L149:
 726:..\src/interruptions.c ****             
 2264              		.loc 1 726 0
 2265 04f0 00BF     		nop
 2266 04f2 06E0     		b	.L107
 2267              	.L159:
 2268              		.align	2
 2269              	.L158:
 2270 04f4 00000000 		.word	g_mem
 2271 04f8 00000000 		.word	c_mem
 2272 04fc 8C000000 		.word	current_emg.10510
 2273              	.L150:
 750:..\src/interruptions.c **** 
 2274              		.loc 1 750 0
 2275 0500 00BF     		nop
 2276              	.L107:
 844:..\src/interruptions.c ****     }
 845:..\src/interruptions.c **** 
 846:..\src/interruptions.c ****     // Position limit saturation
 847:..\src/interruptions.c ****     if (MOT->pos_lim_flag) {
 2277              		.loc 1 847 0
 2278 0502 3B6A     		ldr	r3, [r7, #32]
 2279 0504 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 2280 0508 002B     		cmp	r3, #0
 2281 050a 13D0     		beq	.L142
 848:..\src/interruptions.c ****         if (st_ref_p->pos < MOT->pos_lim_inf) 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 57


 2282              		.loc 1 848 0
 2283 050c BB68     		ldr	r3, [r7, #8]
 2284 050e 1A68     		ldr	r2, [r3]
 2285 0510 3B6A     		ldr	r3, [r7, #32]
 2286 0512 5B6B     		ldr	r3, [r3, #52]
 2287 0514 9A42     		cmp	r2, r3
 2288 0516 03DA     		bge	.L143
 849:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_inf;
 2289              		.loc 1 849 0
 2290 0518 3B6A     		ldr	r3, [r7, #32]
 2291 051a 5A6B     		ldr	r2, [r3, #52]
 2292 051c BB68     		ldr	r3, [r7, #8]
 2293 051e 1A60     		str	r2, [r3]
 2294              	.L143:
 850:..\src/interruptions.c ****         if (st_ref_p->pos > MOT->pos_lim_sup) 
 2295              		.loc 1 850 0
 2296 0520 BB68     		ldr	r3, [r7, #8]
 2297 0522 1A68     		ldr	r2, [r3]
 2298 0524 3B6A     		ldr	r3, [r7, #32]
 2299 0526 9B6B     		ldr	r3, [r3, #56]
 2300 0528 9A42     		cmp	r2, r3
 2301 052a 03DD     		ble	.L142
 851:..\src/interruptions.c ****             st_ref_p->pos = MOT->pos_lim_sup;
 2302              		.loc 1 851 0
 2303 052c 3B6A     		ldr	r3, [r7, #32]
 2304 052e 9A6B     		ldr	r2, [r3, #56]
 2305 0530 BB68     		ldr	r3, [r7, #8]
 2306 0532 1A60     		str	r2, [r3]
 2307              	.L142:
 852:..\src/interruptions.c ****     }
 853:..\src/interruptions.c ****     
 854:..\src/interruptions.c ****     // SAFETY
 855:..\src/interruptions.c ****     if (battery_low_SoC == TRUE) {
 2308              		.loc 1 855 0
 2309 0534 1D4B     		ldr	r3, .L160
 2310 0536 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2311 0538 012B     		cmp	r3, #1
 2312 053a 02D1     		bne	.L144
 856:..\src/interruptions.c ****         //Reopen the terminal device before disabling motor
 857:..\src/interruptions.c ****         st_ref_p->pos = 0;
 2313              		.loc 1 857 0
 2314 053c BB68     		ldr	r3, [r7, #8]
 2315 053e 0022     		movs	r2, #0
 2316 0540 1A60     		str	r2, [r3]
 2317              	.L144:
 858:..\src/interruptions.c ****     }      
 859:..\src/interruptions.c ****     
 860:..\src/interruptions.c ****        
 861:..\src/interruptions.c ****     if (c_mem.SH.rest_position_flag == TRUE) {
 2318              		.loc 1 861 0
 2319 0542 1B4B     		ldr	r3, .L160+4
 2320 0544 93F8B432 		ldrb	r3, [r3, #692]	@ zero_extendqisi2
 2321 0548 012B     		cmp	r3, #1
 2322 054a 2AD1     		bne	.L155
 862:..\src/interruptions.c ****         if (rest_enabled == 1){
 2323              		.loc 1 862 0
 2324 054c 194B     		ldr	r3, .L160+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 58


 2325 054e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2326 0550 012B     		cmp	r3, #1
 2327 0552 03D1     		bne	.L146
 863:..\src/interruptions.c ****             // Change position reference to drive motor to rest position smoothly
 864:..\src/interruptions.c ****             st_ref_p->pos = rest_pos_curr_ref;
 2328              		.loc 1 864 0
 2329 0554 184B     		ldr	r3, .L160+12
 2330 0556 1A68     		ldr	r2, [r3]
 2331 0558 BB68     		ldr	r3, [r7, #8]
 2332 055a 1A60     		str	r2, [r3]
 2333              	.L146:
 865:..\src/interruptions.c ****         }
 866:..\src/interruptions.c ****         
 867:..\src/interruptions.c ****         if (forced_open == 1) {
 2334              		.loc 1 867 0
 2335 055c 174B     		ldr	r3, .L160+16
 2336 055e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2337 0560 012B     		cmp	r3, #1
 2338 0562 1ED1     		bne	.L155
 868:..\src/interruptions.c ****             // Open the SoftHand as EMG PROPORTIONAL input mode 
 869:..\src/interruptions.c ****             if (err_emg_2 > 0)
 2339              		.loc 1 869 0
 2340 0564 7B69     		ldr	r3, [r7, #20]
 2341 0566 002B     		cmp	r3, #0
 2342 0568 13DD     		ble	.L147
 870:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos - (err_emg_2 * g_mem.SH.rest_pos) / (1024 - c_mem
 2343              		.loc 1 870 0
 2344 056a 154B     		ldr	r3, .L160+20
 2345 056c D3F8A822 		ldr	r2, [r3, #680]
 2346 0570 134B     		ldr	r3, .L160+20
 2347 0572 D3F8A832 		ldr	r3, [r3, #680]
 2348 0576 7969     		ldr	r1, [r7, #20]
 2349 0578 01FB03F1 		mul	r1, r1, r3
 2350 057c 0C4B     		ldr	r3, .L160+4
 2351 057e B3F8FA31 		ldrh	r3, [r3, #506]
 2352 0582 C3F58063 		rsb	r3, r3, #1024
 2353 0586 91FBF3F3 		sdiv	r3, r1, r3
 2354 058a D21A     		subs	r2, r2, r3
 2355 058c BB68     		ldr	r3, [r7, #8]
 2356 058e 1A60     		str	r2, [r3]
 871:..\src/interruptions.c ****             else {
 872:..\src/interruptions.c ****                 st_ref_p->pos = g_mem.SH.rest_pos;
 873:..\src/interruptions.c ****                 forced_open = 0;
 874:..\src/interruptions.c ****             }
 875:..\src/interruptions.c ****         }
 876:..\src/interruptions.c ****     }
 877:..\src/interruptions.c **** }
 2357              		.loc 1 877 0
 2358 0590 07E0     		b	.L155
 2359              	.L147:
 872:..\src/interruptions.c ****                 forced_open = 0;
 2360              		.loc 1 872 0
 2361 0592 0B4B     		ldr	r3, .L160+20
 2362 0594 D3F8A822 		ldr	r2, [r3, #680]
 2363 0598 BB68     		ldr	r3, [r7, #8]
 2364 059a 1A60     		str	r2, [r3]
 873:..\src/interruptions.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 59


 2365              		.loc 1 873 0
 2366 059c 074B     		ldr	r3, .L160+16
 2367 059e 0022     		movs	r2, #0
 2368 05a0 1A70     		strb	r2, [r3]
 2369              	.L155:
 2370              		.loc 1 877 0
 2371 05a2 00BF     		nop
 2372 05a4 2837     		adds	r7, r7, #40
 2373              		.cfi_def_cfa_offset 8
 2374 05a6 BD46     		mov	sp, r7
 2375              		.cfi_def_cfa_register 13
 2376              		@ sp needed
 2377 05a8 80BD     		pop	{r7, pc}
 2378              	.L161:
 2379 05aa 00BF     		.align	2
 2380              	.L160:
 2381 05ac 00000000 		.word	battery_low_SoC
 2382 05b0 00000000 		.word	c_mem
 2383 05b4 00000000 		.word	rest_enabled
 2384 05b8 00000000 		.word	rest_pos_curr_ref
 2385 05bc 00000000 		.word	forced_open
 2386 05c0 00000000 		.word	g_mem
 2387              		.cfi_endproc
 2388              	.LFE68:
 2389              		.size	compute_reference, .-compute_reference
 2390              		.section	.text.compute_SoftHand_2_motors_joystick_reference,"ax",%progbits
 2391              		.align	2
 2392              		.global	compute_SoftHand_2_motors_joystick_reference
 2393              		.thumb
 2394              		.thumb_func
 2395              		.type	compute_SoftHand_2_motors_joystick_reference, %function
 2396              	compute_SoftHand_2_motors_joystick_reference:
 2397              	.LFB69:
 878:..\src/interruptions.c **** 
 879:..\src/interruptions.c **** 
 880:..\src/interruptions.c **** //==============================================================================
 881:..\src/interruptions.c **** //                                  COMPUTE SOFTHAND 2 MOTORS JOYSTICK REFERENCE
 882:..\src/interruptions.c **** //==============================================================================
 883:..\src/interruptions.c **** void compute_SoftHand_2_motors_joystick_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct 
 2398              		.loc 1 883 0
 2399              		.cfi_startproc
 2400              		@ args = 0, pretend = 0, frame = 32
 2401              		@ frame_needed = 1, uses_anonymous_args = 0
 2402              		@ link register save eliminated.
 2403 0000 80B4     		push	{r7}
 2404              		.cfi_def_cfa_offset 4
 2405              		.cfi_offset 7, -4
 2406 0002 89B0     		sub	sp, sp, #36
 2407              		.cfi_def_cfa_offset 40
 2408 0004 00AF     		add	r7, sp, #0
 2409              		.cfi_def_cfa_register 7
 2410 0006 0346     		mov	r3, r0
 2411 0008 B960     		str	r1, [r7, #8]
 2412 000a 7A60     		str	r2, [r7, #4]
 2413 000c FB73     		strb	r3, [r7, #15]
 884:..\src/interruptions.c ****     
 885:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK && c_mem.motor[1].input_mode == INPUT_MODE
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 60


 2414              		.loc 1 885 0
 2415 000e B04B     		ldr	r3, .L183
 2416 0010 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 2417 0014 062B     		cmp	r3, #6
 2418 0016 40F08581 		bne	.L181
 2419              		.loc 1 885 0 is_stmt 0 discriminator 1
 2420 001a AD4B     		ldr	r3, .L183
 2421 001c 93F88231 		ldrb	r3, [r3, #386]	@ zero_extendqisi2
 2422 0020 062B     		cmp	r3, #6
 2423 0022 40F07F81 		bne	.L181
 886:..\src/interruptions.c ****         st_ref_p->pos = st_refOld_p->pos;
 2424              		.loc 1 886 0 is_stmt 1
 2425 0026 7B68     		ldr	r3, [r7, #4]
 2426 0028 1A68     		ldr	r2, [r3]
 2427 002a BB68     		ldr	r3, [r7, #8]
 2428 002c 1A60     		str	r2, [r3]
 887:..\src/interruptions.c ****     
 888:..\src/interruptions.c ****         if(!(g_adc_meas.joystick[0] > 700)) {
 2429              		.loc 1 888 0
 2430 002e A94B     		ldr	r3, .L183+4
 2431 0030 1B6A     		ldr	r3, [r3, #32]
 2432 0032 B3F52F7F 		cmp	r3, #700
 2433 0036 00F3C280 		bgt	.L164
 2434              	.LBB6:
 889:..\src/interruptions.c ****              
 890:..\src/interruptions.c ****             int32 CYDATA err_joy_1 = 0;
 2435              		.loc 1 890 0
 2436 003a 0023     		movs	r3, #0
 2437 003c FB61     		str	r3, [r7, #28]
 891:..\src/interruptions.c ****             int32 CYDATA err_joy_2 = 0;
 2438              		.loc 1 891 0
 2439 003e 0023     		movs	r3, #0
 2440 0040 BB61     		str	r3, [r7, #24]
 892:..\src/interruptions.c ****         
 893:..\src/interruptions.c ****             if(g_adc_meas.joystick[0] > c_mem.JOY_spec.joystick_threshold) {     //both motors wind
 2441              		.loc 1 893 0
 2442 0042 A44B     		ldr	r3, .L183+4
 2443 0044 1B6A     		ldr	r3, [r3, #32]
 2444 0046 A24A     		ldr	r2, .L183
 2445 0048 B2F9BA22 		ldrsh	r2, [r2, #698]
 2446 004c 9342     		cmp	r3, r2
 2447 004e 1ADD     		ble	.L165
 894:..\src/interruptions.c ****                 err_joy_1 = g_adc_meas.joystick[0] - c_mem.JOY_spec.joystick_threshold;
 2448              		.loc 1 894 0
 2449 0050 A04B     		ldr	r3, .L183+4
 2450 0052 1B6A     		ldr	r3, [r3, #32]
 2451 0054 9E4A     		ldr	r2, .L183
 2452 0056 B2F9BA22 		ldrsh	r2, [r2, #698]
 2453 005a 9B1A     		subs	r3, r3, r2
 2454 005c FB61     		str	r3, [r7, #28]
 895:..\src/interruptions.c ****                 st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / (102
 2455              		.loc 1 895 0
 2456 005e BB68     		ldr	r3, [r7, #8]
 2457 0060 1A68     		ldr	r2, [r3]
 2458 0062 9B4B     		ldr	r3, .L183
 2459 0064 B3F8B832 		ldrh	r3, [r3, #696]
 2460 0068 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 61


 2461 006a FB69     		ldr	r3, [r7, #28]
 2462 006c 03FB01F1 		mul	r1, r3, r1
 2463 0070 974B     		ldr	r3, .L183
 2464 0072 B3F9BA32 		ldrsh	r3, [r3, #698]
 2465 0076 C3F58063 		rsb	r3, r3, #1024
 2466 007a 91FBF3F3 		sdiv	r3, r1, r3
 2467 007e 1A44     		add	r2, r2, r3
 2468 0080 BB68     		ldr	r3, [r7, #8]
 2469 0082 1A60     		str	r2, [r3]
 2470 0084 21E0     		b	.L166
 2471              	.L165:
 896:..\src/interruptions.c ****             }
 897:..\src/interruptions.c ****             else {
 898:..\src/interruptions.c ****                 if(g_adc_meas.joystick[0] < -c_mem.JOY_spec.joystick_threshold) {  //both motors un
 2472              		.loc 1 898 0
 2473 0086 934B     		ldr	r3, .L183+4
 2474 0088 1A6A     		ldr	r2, [r3, #32]
 2475 008a 914B     		ldr	r3, .L183
 2476 008c B3F9BA32 		ldrsh	r3, [r3, #698]
 2477 0090 5B42     		negs	r3, r3
 2478 0092 9A42     		cmp	r2, r3
 2479 0094 19DA     		bge	.L166
 899:..\src/interruptions.c ****                     err_joy_1 = g_adc_meas.joystick[0] + c_mem.JOY_spec.joystick_threshold;
 2480              		.loc 1 899 0
 2481 0096 8F4B     		ldr	r3, .L183+4
 2482 0098 1B6A     		ldr	r3, [r3, #32]
 2483 009a 8D4A     		ldr	r2, .L183
 2484 009c B2F9BA22 		ldrsh	r2, [r2, #698]
 2485 00a0 1344     		add	r3, r3, r2
 2486 00a2 FB61     		str	r3, [r7, #28]
 900:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_1 * c_mem.JOY_spec.joystick_closure_speed) / 
 2487              		.loc 1 900 0
 2488 00a4 BB68     		ldr	r3, [r7, #8]
 2489 00a6 1A68     		ldr	r2, [r3]
 2490 00a8 894B     		ldr	r3, .L183
 2491 00aa B3F8B832 		ldrh	r3, [r3, #696]
 2492 00ae 1946     		mov	r1, r3
 2493 00b0 FB69     		ldr	r3, [r7, #28]
 2494 00b2 03FB01F1 		mul	r1, r3, r1
 2495 00b6 864B     		ldr	r3, .L183
 2496 00b8 B3F9BA32 		ldrsh	r3, [r3, #698]
 2497 00bc C3F58063 		rsb	r3, r3, #1024
 2498 00c0 91FBF3F3 		sdiv	r3, r1, r3
 2499 00c4 1A44     		add	r2, r2, r3
 2500 00c6 BB68     		ldr	r3, [r7, #8]
 2501 00c8 1A60     		str	r2, [r3]
 2502              	.L166:
 901:..\src/interruptions.c ****                 }
 902:..\src/interruptions.c ****             }
 903:..\src/interruptions.c **** 
 904:..\src/interruptions.c ****             if(g_adc_meas.joystick[1] > c_mem.JOY_spec.joystick_threshold) {    //The wire is winde
 2503              		.loc 1 904 0
 2504 00ca 824B     		ldr	r3, .L183+4
 2505 00cc 5B6A     		ldr	r3, [r3, #36]
 2506 00ce 804A     		ldr	r2, .L183
 2507 00d0 B2F9BA22 		ldrsh	r2, [r2, #698]
 2508 00d4 9342     		cmp	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 62


 2509 00d6 34DD     		ble	.L167
 905:..\src/interruptions.c ****                 err_joy_2 = g_adc_meas.joystick[1] - c_mem.JOY_spec.joystick_threshold;
 2510              		.loc 1 905 0
 2511 00d8 7E4B     		ldr	r3, .L183+4
 2512 00da 5B6A     		ldr	r3, [r3, #36]
 2513 00dc 7C4A     		ldr	r2, .L183
 2514 00de B2F9BA22 		ldrsh	r2, [r2, #698]
 2515 00e2 9B1A     		subs	r3, r3, r2
 2516 00e4 BB61     		str	r3, [r7, #24]
 906:..\src/interruptions.c ****                 if (motor_idx == 0){
 2517              		.loc 1 906 0
 2518 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2519 00e8 002B     		cmp	r3, #0
 2520 00ea 12D1     		bne	.L168
 907:..\src/interruptions.c ****                     st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2521              		.loc 1 907 0
 2522 00ec BB68     		ldr	r3, [r7, #8]
 2523 00ee 1A68     		ldr	r2, [r3]
 2524 00f0 774B     		ldr	r3, .L183
 2525 00f2 B3F8B832 		ldrh	r3, [r3, #696]
 2526 00f6 1946     		mov	r1, r3
 2527 00f8 BB69     		ldr	r3, [r7, #24]
 2528 00fa 03FB01F1 		mul	r1, r3, r1
 2529 00fe 744B     		ldr	r3, .L183
 2530 0100 B3F9BA32 		ldrsh	r3, [r3, #698]
 2531 0104 C3F58063 		rsb	r3, r3, #1024
 2532 0108 91FBF3F3 		sdiv	r3, r1, r3
 2533 010c 1A44     		add	r2, r2, r3
 2534 010e BB68     		ldr	r3, [r7, #8]
 2535 0110 1A60     		str	r2, [r3]
 2536              	.L168:
 908:..\src/interruptions.c ****                 }
 909:..\src/interruptions.c ****                 if (motor_idx == 1){
 2537              		.loc 1 909 0
 2538 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2539 0114 012B     		cmp	r3, #1
 2540 0116 40F00581 		bne	.L181
 910:..\src/interruptions.c ****                     st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed) / 
 2541              		.loc 1 910 0
 2542 011a BB68     		ldr	r3, [r7, #8]
 2543 011c 1A68     		ldr	r2, [r3]
 2544 011e 6C4B     		ldr	r3, .L183
 2545 0120 B3F8B832 		ldrh	r3, [r3, #696]
 2546 0124 1946     		mov	r1, r3
 2547 0126 BB69     		ldr	r3, [r7, #24]
 2548 0128 03FB01F1 		mul	r1, r3, r1
 2549 012c 684B     		ldr	r3, .L183
 2550 012e B3F9BA32 		ldrsh	r3, [r3, #698]
 2551 0132 C3F58063 		rsb	r3, r3, #1024
 2552 0136 91FBF3F3 		sdiv	r3, r1, r3
 2553 013a D21A     		subs	r2, r2, r3
 2554 013c BB68     		ldr	r3, [r7, #8]
 2555 013e 1A60     		str	r2, [r3]
 2556              	.LBE6:
 911:..\src/interruptions.c ****                 }          
 912:..\src/interruptions.c ****             }
 913:..\src/interruptions.c ****             else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 63


 914:..\src/interruptions.c ****                 if(g_adc_meas.joystick[1] < -c_mem.JOY_spec.joystick_threshold) {  //The wire is un
 915:..\src/interruptions.c ****                     
 916:..\src/interruptions.c ****                     err_joy_2 = g_adc_meas.joystick[1] + c_mem.JOY_spec.joystick_threshold;
 917:..\src/interruptions.c ****                     if (motor_idx == 0){
 918:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 919:..\src/interruptions.c ****                     }
 920:..\src/interruptions.c ****                     if (motor_idx == 1){
 921:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 922:..\src/interruptions.c ****                     }
 923:..\src/interruptions.c ****                 }
 924:..\src/interruptions.c ****             }
 925:..\src/interruptions.c ****         }
 926:..\src/interruptions.c ****         else {  //The button is pressed and the hand is opened firstly making the position differen
 927:..\src/interruptions.c ****                 //equal to zero, then the position sum is gradually set to zero 
 928:..\src/interruptions.c ****             int32 pos_diff = (g_meas[c_mem.motor[0].encoder_line].pos[0] - g_meas[c_mem.motor[0].en
 929:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 930:..\src/interruptions.c **** 
 931:..\src/interruptions.c ****             if(pos_diff > 500 || pos_diff < -500) {
 932:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 933:..\src/interruptions.c ****                     if (motor_idx == 1){
 934:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 935:..\src/interruptions.c ****                     }
 936:..\src/interruptions.c ****                     if (motor_idx == 0){
 937:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 938:..\src/interruptions.c ****                     }                    
 939:..\src/interruptions.c ****                 }
 940:..\src/interruptions.c ****                 else {
 941:..\src/interruptions.c ****                     if (motor_idx == 0){
 942:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 943:..\src/interruptions.c ****                     }
 944:..\src/interruptions.c ****                     if (motor_idx == 1){
 945:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 946:..\src/interruptions.c ****                     }
 947:..\src/interruptions.c ****                 }
 948:..\src/interruptions.c ****                 
 949:..\src/interruptions.c ****             }
 950:..\src/interruptions.c ****             else {
 951:..\src/interruptions.c ****                 if(pos_sum > 0) {
 952:..\src/interruptions.c ****                     if (motor_idx == 0){
 953:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 954:..\src/interruptions.c ****                     }
 955:..\src/interruptions.c ****                     if (motor_idx == 1){
 956:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 957:..\src/interruptions.c ****                     }
 958:..\src/interruptions.c ****                     
 959:..\src/interruptions.c ****                     if (st_ref_p->pos < 0){
 960:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 961:..\src/interruptions.c ****                     }
 962:..\src/interruptions.c ****                 }
 963:..\src/interruptions.c ****             }
 964:..\src/interruptions.c ****         }
 965:..\src/interruptions.c ****     }           
 966:..\src/interruptions.c **** }
 2557              		.loc 1 966 0
 2558 0140 F0E0     		b	.L181
 2559              	.L167:
 2560              	.LBB7:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 64


 914:..\src/interruptions.c ****                     
 2561              		.loc 1 914 0
 2562 0142 644B     		ldr	r3, .L183+4
 2563 0144 5A6A     		ldr	r2, [r3, #36]
 2564 0146 624B     		ldr	r3, .L183
 2565 0148 B3F9BA32 		ldrsh	r3, [r3, #698]
 2566 014c 5B42     		negs	r3, r3
 2567 014e 9A42     		cmp	r2, r3
 2568 0150 80F2E880 		bge	.L181
 916:..\src/interruptions.c ****                     if (motor_idx == 0){
 2569              		.loc 1 916 0
 2570 0154 5F4B     		ldr	r3, .L183+4
 2571 0156 5B6A     		ldr	r3, [r3, #36]
 2572 0158 5D4A     		ldr	r2, .L183
 2573 015a B2F9BA22 		ldrsh	r2, [r2, #698]
 2574 015e 1344     		add	r3, r3, r2
 2575 0160 BB61     		str	r3, [r7, #24]
 917:..\src/interruptions.c ****                         st_ref_p->pos += ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2576              		.loc 1 917 0
 2577 0162 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2578 0164 002B     		cmp	r3, #0
 2579 0166 12D1     		bne	.L171
 918:..\src/interruptions.c ****                     }
 2580              		.loc 1 918 0
 2581 0168 BB68     		ldr	r3, [r7, #8]
 2582 016a 1A68     		ldr	r2, [r3]
 2583 016c 584B     		ldr	r3, .L183
 2584 016e B3F8B832 		ldrh	r3, [r3, #696]
 2585 0172 1946     		mov	r1, r3
 2586 0174 BB69     		ldr	r3, [r7, #24]
 2587 0176 03FB01F1 		mul	r1, r3, r1
 2588 017a 554B     		ldr	r3, .L183
 2589 017c B3F9BA32 		ldrsh	r3, [r3, #698]
 2590 0180 C3F58063 		rsb	r3, r3, #1024
 2591 0184 91FBF3F3 		sdiv	r3, r1, r3
 2592 0188 1A44     		add	r2, r2, r3
 2593 018a BB68     		ldr	r3, [r7, #8]
 2594 018c 1A60     		str	r2, [r3]
 2595              	.L171:
 920:..\src/interruptions.c ****                         st_ref_p->pos -= ((int32) err_joy_2 * c_mem.JOY_spec.joystick_closure_speed
 2596              		.loc 1 920 0
 2597 018e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2598 0190 012B     		cmp	r3, #1
 2599 0192 40F0C780 		bne	.L181
 921:..\src/interruptions.c ****                     }
 2600              		.loc 1 921 0
 2601 0196 BB68     		ldr	r3, [r7, #8]
 2602 0198 1A68     		ldr	r2, [r3]
 2603 019a 4D4B     		ldr	r3, .L183
 2604 019c B3F8B832 		ldrh	r3, [r3, #696]
 2605 01a0 1946     		mov	r1, r3
 2606 01a2 BB69     		ldr	r3, [r7, #24]
 2607 01a4 03FB01F1 		mul	r1, r3, r1
 2608 01a8 494B     		ldr	r3, .L183
 2609 01aa B3F9BA32 		ldrsh	r3, [r3, #698]
 2610 01ae C3F58063 		rsb	r3, r3, #1024
 2611 01b2 91FBF3F3 		sdiv	r3, r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 65


 2612 01b6 D21A     		subs	r2, r2, r3
 2613 01b8 BB68     		ldr	r3, [r7, #8]
 2614 01ba 1A60     		str	r2, [r3]
 2615              	.LBE7:
 2616              		.loc 1 966 0
 2617 01bc B2E0     		b	.L181
 2618              	.L164:
 2619              	.LBB8:
 928:..\src/interruptions.c ****             int32 pos_sum = (g_meas[c_mem.motor[0].encoder_line].pos[0] + g_meas[c_mem.motor[0].enc
 2620              		.loc 1 928 0
 2621 01be 444B     		ldr	r3, .L183
 2622 01c0 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2623 01c4 1946     		mov	r1, r3
 2624 01c6 444A     		ldr	r2, .L183+8
 2625 01c8 3423     		movs	r3, #52
 2626 01ca 03FB01F3 		mul	r3, r3, r1
 2627 01ce 1344     		add	r3, r3, r2
 2628 01d0 1A68     		ldr	r2, [r3]
 2629 01d2 3F4B     		ldr	r3, .L183
 2630 01d4 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2631 01d8 1846     		mov	r0, r3
 2632 01da 3F49     		ldr	r1, .L183+8
 2633 01dc 3423     		movs	r3, #52
 2634 01de 03FB00F3 		mul	r3, r3, r0
 2635 01e2 0B44     		add	r3, r3, r1
 2636 01e4 0433     		adds	r3, r3, #4
 2637 01e6 1B68     		ldr	r3, [r3]
 2638 01e8 D21A     		subs	r2, r2, r3
 2639 01ea 394B     		ldr	r3, .L183
 2640 01ec 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2641 01f0 1846     		mov	r0, r3
 2642 01f2 3749     		ldr	r1, .L183
 2643 01f4 0346     		mov	r3, r0
 2644 01f6 5B00     		lsls	r3, r3, #1
 2645 01f8 0344     		add	r3, r3, r0
 2646 01fa 1B01     		lsls	r3, r3, #4
 2647 01fc 0B44     		add	r3, r3, r1
 2648 01fe 03F29D13 		addw	r3, r3, #413
 2649 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2650 0204 42FA03F3 		asr	r3, r2, r3
 2651 0208 7B61     		str	r3, [r7, #20]
 929:..\src/interruptions.c **** 
 2652              		.loc 1 929 0
 2653 020a 314B     		ldr	r3, .L183
 2654 020c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2655 0210 1946     		mov	r1, r3
 2656 0212 314A     		ldr	r2, .L183+8
 2657 0214 3423     		movs	r3, #52
 2658 0216 03FB01F3 		mul	r3, r3, r1
 2659 021a 1344     		add	r3, r3, r2
 2660 021c 1A68     		ldr	r2, [r3]
 2661 021e 2C4B     		ldr	r3, .L183
 2662 0220 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2663 0224 1846     		mov	r0, r3
 2664 0226 2C49     		ldr	r1, .L183+8
 2665 0228 3423     		movs	r3, #52
 2666 022a 03FB00F3 		mul	r3, r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 66


 2667 022e 0B44     		add	r3, r3, r1
 2668 0230 0433     		adds	r3, r3, #4
 2669 0232 1B68     		ldr	r3, [r3]
 2670 0234 1A44     		add	r2, r2, r3
 2671 0236 264B     		ldr	r3, .L183
 2672 0238 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 2673 023c 1846     		mov	r0, r3
 2674 023e 2449     		ldr	r1, .L183
 2675 0240 0346     		mov	r3, r0
 2676 0242 5B00     		lsls	r3, r3, #1
 2677 0244 0344     		add	r3, r3, r0
 2678 0246 1B01     		lsls	r3, r3, #4
 2679 0248 0B44     		add	r3, r3, r1
 2680 024a 03F29D13 		addw	r3, r3, #413
 2681 024e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2682 0250 42FA03F3 		asr	r3, r2, r3
 2683 0254 3B61     		str	r3, [r7, #16]
 931:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2684              		.loc 1 931 0
 2685 0256 7B69     		ldr	r3, [r7, #20]
 2686 0258 B3F5FA7F 		cmp	r3, #500
 2687 025c 03DC     		bgt	.L172
 931:..\src/interruptions.c ****                 if(SIGN(pos_diff) == 1) {
 2688              		.loc 1 931 0 is_stmt 0 discriminator 1
 2689 025e 7B69     		ldr	r3, [r7, #20]
 2690 0260 13F5FA7F 		cmn	r3, #500
 2691 0264 3ADA     		bge	.L173
 2692              	.L172:
 932:..\src/interruptions.c ****                     if (motor_idx == 1){
 2693              		.loc 1 932 0 is_stmt 1
 2694 0266 7B69     		ldr	r3, [r7, #20]
 2695 0268 002B     		cmp	r3, #0
 2696 026a 18DB     		blt	.L174
 933:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2697              		.loc 1 933 0
 2698 026c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2699 026e 012B     		cmp	r3, #1
 2700 0270 07D1     		bne	.L175
 934:..\src/interruptions.c ****                     }
 2701              		.loc 1 934 0
 2702 0272 BB68     		ldr	r3, [r7, #8]
 2703 0274 1B68     		ldr	r3, [r3]
 2704 0276 164A     		ldr	r2, .L183
 2705 0278 B2F8B822 		ldrh	r2, [r2, #696]
 2706 027c 1A44     		add	r2, r2, r3
 2707 027e BB68     		ldr	r3, [r7, #8]
 2708 0280 1A60     		str	r2, [r3]
 2709              	.L175:
 936:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2710              		.loc 1 936 0
 2711 0282 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2712 0284 002B     		cmp	r3, #0
 2713 0286 4CD1     		bne	.L182
 937:..\src/interruptions.c ****                     }                    
 2714              		.loc 1 937 0
 2715 0288 BB68     		ldr	r3, [r7, #8]
 2716 028a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 67


 2717 028c 104A     		ldr	r2, .L183
 2718 028e B2F8B822 		ldrh	r2, [r2, #696]
 2719 0292 5208     		lsrs	r2, r2, #1
 2720 0294 92B2     		uxth	r2, r2
 2721 0296 9A1A     		subs	r2, r3, r2
 2722 0298 BB68     		ldr	r3, [r7, #8]
 2723 029a 1A60     		str	r2, [r3]
 932:..\src/interruptions.c ****                     if (motor_idx == 1){
 2724              		.loc 1 932 0
 2725 029c 41E0     		b	.L182
 2726              	.L174:
 941:..\src/interruptions.c ****                         st_ref_p->pos += c_mem.JOY_spec.joystick_closure_speed;
 2727              		.loc 1 941 0
 2728 029e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2729 02a0 002B     		cmp	r3, #0
 2730 02a2 07D1     		bne	.L178
 942:..\src/interruptions.c ****                     }
 2731              		.loc 1 942 0
 2732 02a4 BB68     		ldr	r3, [r7, #8]
 2733 02a6 1B68     		ldr	r3, [r3]
 2734 02a8 094A     		ldr	r2, .L183
 2735 02aa B2F8B822 		ldrh	r2, [r2, #696]
 2736 02ae 1A44     		add	r2, r2, r3
 2737 02b0 BB68     		ldr	r3, [r7, #8]
 2738 02b2 1A60     		str	r2, [r3]
 2739              	.L178:
 944:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed / 2;
 2740              		.loc 1 944 0
 2741 02b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2742 02b6 012B     		cmp	r3, #1
 2743 02b8 33D1     		bne	.L182
 945:..\src/interruptions.c ****                     }
 2744              		.loc 1 945 0
 2745 02ba BB68     		ldr	r3, [r7, #8]
 2746 02bc 1B68     		ldr	r3, [r3]
 2747 02be 044A     		ldr	r2, .L183
 2748 02c0 B2F8B822 		ldrh	r2, [r2, #696]
 2749 02c4 5208     		lsrs	r2, r2, #1
 2750 02c6 92B2     		uxth	r2, r2
 2751 02c8 9A1A     		subs	r2, r3, r2
 2752 02ca BB68     		ldr	r3, [r7, #8]
 2753 02cc 1A60     		str	r2, [r3]
 932:..\src/interruptions.c ****                     if (motor_idx == 1){
 2754              		.loc 1 932 0
 2755 02ce 28E0     		b	.L182
 2756              	.L184:
 2757              		.align	2
 2758              	.L183:
 2759 02d0 00000000 		.word	c_mem
 2760 02d4 00000000 		.word	g_adc_meas
 2761 02d8 00000000 		.word	g_meas
 2762              	.L173:
 951:..\src/interruptions.c ****                     if (motor_idx == 0){
 2763              		.loc 1 951 0
 2764 02dc 3B69     		ldr	r3, [r7, #16]
 2765 02de 002B     		cmp	r3, #0
 2766 02e0 20DD     		ble	.L181
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 68


 952:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2767              		.loc 1 952 0
 2768 02e2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2769 02e4 002B     		cmp	r3, #0
 2770 02e6 08D1     		bne	.L179
 953:..\src/interruptions.c ****                     }
 2771              		.loc 1 953 0
 2772 02e8 BB68     		ldr	r3, [r7, #8]
 2773 02ea 1A68     		ldr	r2, [r3]
 2774 02ec 104B     		ldr	r3, .L185
 2775 02ee B3F8B832 		ldrh	r3, [r3, #696]
 2776 02f2 5B00     		lsls	r3, r3, #1
 2777 02f4 D21A     		subs	r2, r2, r3
 2778 02f6 BB68     		ldr	r3, [r7, #8]
 2779 02f8 1A60     		str	r2, [r3]
 2780              	.L179:
 955:..\src/interruptions.c ****                         st_ref_p->pos -= c_mem.JOY_spec.joystick_closure_speed * 2;
 2781              		.loc 1 955 0
 2782 02fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2783 02fc 012B     		cmp	r3, #1
 2784 02fe 08D1     		bne	.L180
 956:..\src/interruptions.c ****                     }
 2785              		.loc 1 956 0
 2786 0300 BB68     		ldr	r3, [r7, #8]
 2787 0302 1A68     		ldr	r2, [r3]
 2788 0304 0A4B     		ldr	r3, .L185
 2789 0306 B3F8B832 		ldrh	r3, [r3, #696]
 2790 030a 5B00     		lsls	r3, r3, #1
 2791 030c D21A     		subs	r2, r2, r3
 2792 030e BB68     		ldr	r3, [r7, #8]
 2793 0310 1A60     		str	r2, [r3]
 2794              	.L180:
 959:..\src/interruptions.c ****                         st_ref_p->pos = 0;
 2795              		.loc 1 959 0
 2796 0312 BB68     		ldr	r3, [r7, #8]
 2797 0314 1B68     		ldr	r3, [r3]
 2798 0316 002B     		cmp	r3, #0
 2799 0318 04DA     		bge	.L181
 960:..\src/interruptions.c ****                     }
 2800              		.loc 1 960 0
 2801 031a BB68     		ldr	r3, [r7, #8]
 2802 031c 0022     		movs	r2, #0
 2803 031e 1A60     		str	r2, [r3]
 2804              	.LBE8:
 2805              		.loc 1 966 0
 2806 0320 00E0     		b	.L181
 2807              	.L182:
 2808              	.LBB9:
 932:..\src/interruptions.c ****                     if (motor_idx == 1){
 2809              		.loc 1 932 0
 2810 0322 00BF     		nop
 2811              	.L181:
 2812              	.LBE9:
 2813              		.loc 1 966 0
 2814 0324 00BF     		nop
 2815 0326 2437     		adds	r7, r7, #36
 2816              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 69


 2817 0328 BD46     		mov	sp, r7
 2818              		.cfi_def_cfa_register 13
 2819              		@ sp needed
 2820 032a 80BC     		pop	{r7}
 2821              		.cfi_restore 7
 2822              		.cfi_def_cfa_offset 0
 2823 032c 7047     		bx	lr
 2824              	.L186:
 2825 032e 00BF     		.align	2
 2826              	.L185:
 2827 0330 00000000 		.word	c_mem
 2828              		.cfi_endproc
 2829              	.LFE69:
 2830              		.size	compute_SoftHand_2_motors_joystick_reference, .-compute_SoftHand_2_motors_joystick_reference
 2831              		.section	.text.compute_SoftHand_2_motors_emg_reference,"ax",%progbits
 2832              		.align	2
 2833              		.global	compute_SoftHand_2_motors_emg_reference
 2834              		.thumb
 2835              		.thumb_func
 2836              		.type	compute_SoftHand_2_motors_emg_reference, %function
 2837              	compute_SoftHand_2_motors_emg_reference:
 2838              	.LFB70:
 967:..\src/interruptions.c **** 
 968:..\src/interruptions.c **** 
 969:..\src/interruptions.c **** //==============================================================================
 970:..\src/interruptions.c **** //                                       COMPUTE SOFTHAND 2 MOTORS EMG REFERENCE
 971:..\src/interruptions.c **** //==============================================================================
 972:..\src/interruptions.c **** void compute_SoftHand_2_motors_emg_reference(uint8 motor_idx, struct st_ref* st_ref_p, struct st_re
 973:..\src/interruptions.c ****     int32 err_emg_1, int32 err_emg_2) {
 2839              		.loc 1 973 0
 2840              		.cfi_startproc
 2841              		@ args = 4, pretend = 0, frame = 16
 2842              		@ frame_needed = 1, uses_anonymous_args = 0
 2843 0000 80B5     		push	{r7, lr}
 2844              		.cfi_def_cfa_offset 8
 2845              		.cfi_offset 7, -8
 2846              		.cfi_offset 14, -4
 2847 0002 84B0     		sub	sp, sp, #16
 2848              		.cfi_def_cfa_offset 24
 2849 0004 00AF     		add	r7, sp, #0
 2850              		.cfi_def_cfa_register 7
 2851 0006 B960     		str	r1, [r7, #8]
 2852 0008 7A60     		str	r2, [r7, #4]
 2853 000a 3B60     		str	r3, [r7]
 2854 000c 0346     		mov	r3, r0
 2855 000e FB73     		strb	r3, [r7, #15]
 974:..\src/interruptions.c ****     
 975:..\src/interruptions.c ****     //Compute reference using a FSM for choosing the right sinergy to activate (call this routine o
 976:..\src/interruptions.c ****     static uint8 fsm_state;     
 977:..\src/interruptions.c ****     if (motor_idx == 0){        //update the fsm only at motor 0 compute reference call and hold th
 2856              		.loc 1 977 0
 2857 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2858 0012 002B     		cmp	r3, #0
 2859 0014 05D1     		bne	.L188
 978:..\src/interruptions.c ****         fsm_state = emg_activation_velocity_fsm();
 2860              		.loc 1 978 0
 2861 0016 FFF7FEFF 		bl	emg_activation_velocity_fsm
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 70


 2862 001a 0346     		mov	r3, r0
 2863 001c 1A46     		mov	r2, r3
 2864 001e 614B     		ldr	r3, .L203
 2865 0020 1A70     		strb	r2, [r3]
 2866              	.L188:
 979:..\src/interruptions.c ****     }
 980:..\src/interruptions.c ****        
 981:..\src/interruptions.c ****     switch (fsm_state){
 2867              		.loc 1 981 0
 2868 0022 604B     		ldr	r3, .L203
 2869 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2870 0026 032B     		cmp	r3, #3
 2871 0028 00F2B780 		bhi	.L200
 2872 002c 01A2     		adr	r2, .L191
 2873 002e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2874 0032 00BF     		.p2align 2
 2875              	.L191:
 2876 0034 45000000 		.word	.L190+1
 2877 0038 45000000 		.word	.L190+1
 2878 003c BF000000 		.word	.L192+1
 2879 0040 4F000000 		.word	.L193+1
 2880              		.p2align 1
 2881              	.L190:
 982:..\src/interruptions.c ****         case RELAX_STATE: case TIMER_STATE:
 983:..\src/interruptions.c ****              
 984:..\src/interruptions.c ****             st_ref_p->pos = st_refOld_p->pos;
 2882              		.loc 1 984 0
 2883 0044 7B68     		ldr	r3, [r7, #4]
 2884 0046 1A68     		ldr	r2, [r3]
 2885 0048 BB68     		ldr	r3, [r7, #8]
 2886 004a 1A60     		str	r2, [r3]
 985:..\src/interruptions.c ****     
 986:..\src/interruptions.c ****             break;
 2887              		.loc 1 986 0
 2888 004c A5E0     		b	.L189
 2889              	.L193:
 987:..\src/interruptions.c ****         
 988:..\src/interruptions.c ****         case MOVE_SLOW_ACT: // First sinergy movement (related to default slow activation)
 989:..\src/interruptions.c **** 
 990:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //both motors wind the wire around the 
 2890              		.loc 1 990 0
 2891 004e 3B68     		ldr	r3, [r7]
 2892 0050 002B     		cmp	r3, #0
 2893 0052 17DD     		ble	.L194
 2894              		.loc 1 990 0 is_stmt 0 discriminator 1
 2895 0054 3A68     		ldr	r2, [r7]
 2896 0056 BB69     		ldr	r3, [r7, #24]
 2897 0058 9A42     		cmp	r2, r3
 2898 005a 13DD     		ble	.L194
 991:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / (1024
 2899              		.loc 1 991 0 is_stmt 1
 2900 005c 7B68     		ldr	r3, [r7, #4]
 2901 005e 1A68     		ldr	r2, [r3]
 2902 0060 514B     		ldr	r3, .L203+4
 2903 0062 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2904 0066 1946     		mov	r1, r3
 2905 0068 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 71


 2906 006a 03FB01F3 		mul	r3, r3, r1
 2907 006e 9900     		lsls	r1, r3, #2
 2908 0070 4E4B     		ldr	r3, .L203+8
 2909 0072 B3F8F831 		ldrh	r3, [r3, #504]
 2910 0076 C3F58063 		rsb	r3, r3, #1024
 2911 007a 91FBF3F3 		sdiv	r3, r1, r3
 2912 007e 1A44     		add	r2, r2, r3
 2913 0080 BB68     		ldr	r3, [r7, #8]
 2914 0082 1A60     		str	r2, [r3]
 2915              	.L194:
 992:..\src/interruptions.c ****             }
 993:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //both motors unroll the wire around th
 2916              		.loc 1 993 0
 2917 0084 BB69     		ldr	r3, [r7, #24]
 2918 0086 002B     		cmp	r3, #0
 2919 0088 40F38480 		ble	.L201
 2920              		.loc 1 993 0 is_stmt 0 discriminator 1
 2921 008c BA69     		ldr	r2, [r7, #24]
 2922 008e 3B68     		ldr	r3, [r7]
 2923 0090 9A42     		cmp	r2, r3
 2924 0092 7FDD     		ble	.L201
 994:..\src/interruptions.c ****                st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / (1024
 2925              		.loc 1 994 0 is_stmt 1
 2926 0094 7B68     		ldr	r3, [r7, #4]
 2927 0096 1A68     		ldr	r2, [r3]
 2928 0098 434B     		ldr	r3, .L203+4
 2929 009a 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 2930 009e 1946     		mov	r1, r3
 2931 00a0 BB69     		ldr	r3, [r7, #24]
 2932 00a2 03FB01F3 		mul	r3, r3, r1
 2933 00a6 9900     		lsls	r1, r3, #2
 2934 00a8 404B     		ldr	r3, .L203+8
 2935 00aa B3F8FA31 		ldrh	r3, [r3, #506]
 2936 00ae C3F58063 		rsb	r3, r3, #1024
 2937 00b2 91FBF3F3 		sdiv	r3, r1, r3
 2938 00b6 D21A     		subs	r2, r2, r3
 2939 00b8 BB68     		ldr	r3, [r7, #8]
 2940 00ba 1A60     		str	r2, [r3]
 995:..\src/interruptions.c ****             }
 996:..\src/interruptions.c ****             
 997:..\src/interruptions.c ****             break;
 2941              		.loc 1 997 0
 2942 00bc 6AE0     		b	.L201
 2943              	.L192:
 998:..\src/interruptions.c ****             
 999:..\src/interruptions.c ****         case MOVE_FAST_ACT: // Second sinergy movement (related to default fast activation)
1000:..\src/interruptions.c ****             
1001:..\src/interruptions.c ****             if (err_emg_1 > 0 && err_emg_1 > err_emg_2) {   //(Pinch) The wire is winded around the
 2944              		.loc 1 1001 0
 2945 00be 3B68     		ldr	r3, [r7]
 2946 00c0 002B     		cmp	r3, #0
 2947 00c2 31DD     		ble	.L196
 2948              		.loc 1 1001 0 is_stmt 0 discriminator 1
 2949 00c4 3A68     		ldr	r2, [r7]
 2950 00c6 BB69     		ldr	r3, [r7, #24]
 2951 00c8 9A42     		cmp	r2, r3
 2952 00ca 2DDD     		ble	.L196
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 72


1002:..\src/interruptions.c ****                 if (motor_idx == 0){
 2953              		.loc 1 1002 0 is_stmt 1
 2954 00cc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2955 00ce 002B     		cmp	r3, #0
 2956 00d0 13D1     		bne	.L197
1003:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2957              		.loc 1 1003 0
 2958 00d2 7B68     		ldr	r3, [r7, #4]
 2959 00d4 1A68     		ldr	r2, [r3]
 2960 00d6 344B     		ldr	r3, .L203+4
 2961 00d8 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2962 00dc 1946     		mov	r1, r3
 2963 00de 3B68     		ldr	r3, [r7]
 2964 00e0 03FB01F3 		mul	r3, r3, r1
 2965 00e4 9900     		lsls	r1, r3, #2
 2966 00e6 314B     		ldr	r3, .L203+8
 2967 00e8 B3F8F831 		ldrh	r3, [r3, #504]
 2968 00ec C3F58063 		rsb	r3, r3, #1024
 2969 00f0 91FBF3F3 		sdiv	r3, r1, r3
 2970 00f4 1A44     		add	r2, r2, r3
 2971 00f6 BB68     		ldr	r3, [r7, #8]
 2972 00f8 1A60     		str	r2, [r3]
 2973              	.L197:
1004:..\src/interruptions.c ****                 }
1005:..\src/interruptions.c ****                 if (motor_idx == 1){
 2974              		.loc 1 1005 0
 2975 00fa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2976 00fc 012B     		cmp	r3, #1
 2977 00fe 13D1     		bne	.L196
1006:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_1 * g_mem.emg.emg_speed[0] << 2) / 
 2978              		.loc 1 1006 0
 2979 0100 7B68     		ldr	r3, [r7, #4]
 2980 0102 1A68     		ldr	r2, [r3]
 2981 0104 284B     		ldr	r3, .L203+4
 2982 0106 93F80432 		ldrb	r3, [r3, #516]	@ zero_extendqisi2
 2983 010a 1946     		mov	r1, r3
 2984 010c 3B68     		ldr	r3, [r7]
 2985 010e 03FB01F3 		mul	r3, r3, r1
 2986 0112 9900     		lsls	r1, r3, #2
 2987 0114 254B     		ldr	r3, .L203+8
 2988 0116 B3F8F831 		ldrh	r3, [r3, #504]
 2989 011a C3F58063 		rsb	r3, r3, #1024
 2990 011e 91FBF3F3 		sdiv	r3, r1, r3
 2991 0122 D21A     		subs	r2, r2, r3
 2992 0124 BB68     		ldr	r3, [r7, #8]
 2993 0126 1A60     		str	r2, [r3]
 2994              	.L196:
1007:..\src/interruptions.c ****                 }   
1008:..\src/interruptions.c ****             }
1009:..\src/interruptions.c ****             if (err_emg_2 > 0 && err_emg_2 > err_emg_1) {   //(Index point) The wire is unwinded fr
 2995              		.loc 1 1009 0
 2996 0128 BB69     		ldr	r3, [r7, #24]
 2997 012a 002B     		cmp	r3, #0
 2998 012c 34DD     		ble	.L202
 2999              		.loc 1 1009 0 is_stmt 0 discriminator 1
 3000 012e BA69     		ldr	r2, [r7, #24]
 3001 0130 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 73


 3002 0132 9A42     		cmp	r2, r3
 3003 0134 30DD     		ble	.L202
1010:..\src/interruptions.c ****                 if (motor_idx == 0){
 3004              		.loc 1 1010 0 is_stmt 1
 3005 0136 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3006 0138 002B     		cmp	r3, #0
 3007 013a 13D1     		bne	.L199
1011:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos - (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 3008              		.loc 1 1011 0
 3009 013c 7B68     		ldr	r3, [r7, #4]
 3010 013e 1A68     		ldr	r2, [r3]
 3011 0140 194B     		ldr	r3, .L203+4
 3012 0142 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 3013 0146 1946     		mov	r1, r3
 3014 0148 BB69     		ldr	r3, [r7, #24]
 3015 014a 03FB01F3 		mul	r3, r3, r1
 3016 014e 9900     		lsls	r1, r3, #2
 3017 0150 164B     		ldr	r3, .L203+8
 3018 0152 B3F8FA31 		ldrh	r3, [r3, #506]
 3019 0156 C3F58063 		rsb	r3, r3, #1024
 3020 015a 91FBF3F3 		sdiv	r3, r1, r3
 3021 015e D21A     		subs	r2, r2, r3
 3022 0160 BB68     		ldr	r3, [r7, #8]
 3023 0162 1A60     		str	r2, [r3]
 3024              	.L199:
1012:..\src/interruptions.c ****                 }
1013:..\src/interruptions.c ****                 if (motor_idx == 1){
 3025              		.loc 1 1013 0
 3026 0164 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3027 0166 012B     		cmp	r3, #1
 3028 0168 16D1     		bne	.L202
1014:..\src/interruptions.c ****                     st_ref_p->pos = st_refOld_p->pos + (err_emg_2 * g_mem.emg.emg_speed[1] << 2) / 
 3029              		.loc 1 1014 0
 3030 016a 7B68     		ldr	r3, [r7, #4]
 3031 016c 1A68     		ldr	r2, [r3]
 3032 016e 0E4B     		ldr	r3, .L203+4
 3033 0170 93F80532 		ldrb	r3, [r3, #517]	@ zero_extendqisi2
 3034 0174 1946     		mov	r1, r3
 3035 0176 BB69     		ldr	r3, [r7, #24]
 3036 0178 03FB01F3 		mul	r3, r3, r1
 3037 017c 9900     		lsls	r1, r3, #2
 3038 017e 0B4B     		ldr	r3, .L203+8
 3039 0180 B3F8FA31 		ldrh	r3, [r3, #506]
 3040 0184 C3F58063 		rsb	r3, r3, #1024
 3041 0188 91FBF3F3 		sdiv	r3, r1, r3
 3042 018c 1A44     		add	r2, r2, r3
 3043 018e BB68     		ldr	r3, [r7, #8]
 3044 0190 1A60     		str	r2, [r3]
1015:..\src/interruptions.c ****                 }
1016:..\src/interruptions.c ****             }
1017:..\src/interruptions.c ****             
1018:..\src/interruptions.c ****             break;
 3045              		.loc 1 1018 0
 3046 0192 01E0     		b	.L202
 3047              	.L201:
 997:..\src/interruptions.c ****             
 3048              		.loc 1 997 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 74


 3049 0194 00BF     		nop
 3050 0196 00E0     		b	.L200
 3051              	.L202:
 3052              		.loc 1 1018 0
 3053 0198 00BF     		nop
 3054              	.L189:
 3055              	.L200:
1019:..\src/interruptions.c ****     }
1020:..\src/interruptions.c ****  
1021:..\src/interruptions.c **** }
 3056              		.loc 1 1021 0
 3057 019a 00BF     		nop
 3058 019c 1037     		adds	r7, r7, #16
 3059              		.cfi_def_cfa_offset 8
 3060 019e BD46     		mov	sp, r7
 3061              		.cfi_def_cfa_register 13
 3062              		@ sp needed
 3063 01a0 80BD     		pop	{r7, pc}
 3064              	.L204:
 3065 01a2 00BF     		.align	2
 3066              	.L203:
 3067 01a4 8E000000 		.word	fsm_state.10547
 3068 01a8 00000000 		.word	g_mem
 3069 01ac 00000000 		.word	c_mem
 3070              		.cfi_endproc
 3071              	.LFE70:
 3072              		.size	compute_SoftHand_2_motors_emg_reference, .-compute_SoftHand_2_motors_emg_reference
 3073              		.section	.text.motor_control_SH,"ax",%progbits
 3074              		.align	2
 3075              		.global	motor_control_SH
 3076              		.thumb
 3077              		.thumb_func
 3078              		.type	motor_control_SH, %function
 3079              	motor_control_SH:
 3080              	.LFB71:
1022:..\src/interruptions.c **** 
1023:..\src/interruptions.c **** //==============================================================================
1024:..\src/interruptions.c **** //                                                        MOTOR CONTROL SOFTHAND
1025:..\src/interruptions.c **** //==============================================================================
1026:..\src/interruptions.c **** void motor_control_SH() {
 3081              		.loc 1 1026 0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 80
 3084              		@ frame_needed = 1, uses_anonymous_args = 0
 3085 0000 80B5     		push	{r7, lr}
 3086              		.cfi_def_cfa_offset 8
 3087              		.cfi_offset 7, -8
 3088              		.cfi_offset 14, -4
 3089 0002 94B0     		sub	sp, sp, #80
 3090              		.cfi_def_cfa_offset 88
 3091 0004 00AF     		add	r7, sp, #0
 3092              		.cfi_def_cfa_register 7
1027:..\src/interruptions.c **** 
1028:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 3093              		.loc 1 1028 0
 3094 0006 0023     		movs	r3, #0
 3095 0008 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 75


1029:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1030:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1031:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1032:..\src/interruptions.c ****  
1033:..\src/interruptions.c ****     uint8 MOTOR_IDX = 0;
 3096              		.loc 1 1033 0
 3097 000a 0023     		movs	r3, #0
 3098 000c 87F84730 		strb	r3, [r7, #71]
1034:..\src/interruptions.c ****     
1035:..\src/interruptions.c ****     struct st_motor* SH_MOT = &c_mem.motor[MOTOR_IDX];      // SoftHand default motor
 3099              		.loc 1 1035 0
 3100 0010 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3101 0014 7422     		movs	r2, #116
 3102 0016 02FB03F3 		mul	r3, r2, r3
 3103 001a B033     		adds	r3, r3, #176
 3104 001c 9C4A     		ldr	r2, .L266
 3105 001e 1344     		add	r3, r3, r2
 3106 0020 3B64     		str	r3, [r7, #64]
1036:..\src/interruptions.c ****     uint8 SH_ENC_L = SH_MOT->encoder_line;          // Associated encoder line
 3107              		.loc 1 1036 0
 3108 0022 3B6C     		ldr	r3, [r7, #64]
 3109 0024 93F86030 		ldrb	r3, [r3, #96]
 3110 0028 87F83F30 		strb	r3, [r7, #63]
1037:..\src/interruptions.c ****     
1038:..\src/interruptions.c ****     int32 CYDATA k_p = SH_MOT->k_p;  
 3111              		.loc 1 1038 0
 3112 002c 3B6C     		ldr	r3, [r7, #64]
 3113 002e 1B68     		ldr	r3, [r3]
 3114 0030 BB63     		str	r3, [r7, #56]
1039:..\src/interruptions.c ****     int32 CYDATA k_i = SH_MOT->k_i; 
 3115              		.loc 1 1039 0
 3116 0032 3B6C     		ldr	r3, [r7, #64]
 3117 0034 5B68     		ldr	r3, [r3, #4]
 3118 0036 7B63     		str	r3, [r7, #52]
1040:..\src/interruptions.c ****     int32 CYDATA k_d = SH_MOT->k_d; 
 3119              		.loc 1 1040 0
 3120 0038 3B6C     		ldr	r3, [r7, #64]
 3121 003a 9B68     		ldr	r3, [r3, #8]
 3122 003c 3B63     		str	r3, [r7, #48]
1041:..\src/interruptions.c **** 
1042:..\src/interruptions.c ****     int32 CYDATA k_p_c = SH_MOT->k_p_c;  
 3123              		.loc 1 1042 0
 3124 003e 3B6C     		ldr	r3, [r7, #64]
 3125 0040 DB68     		ldr	r3, [r3, #12]
 3126 0042 FB62     		str	r3, [r7, #44]
1043:..\src/interruptions.c ****     int32 CYDATA k_i_c = SH_MOT->k_i_c; 
 3127              		.loc 1 1043 0
 3128 0044 3B6C     		ldr	r3, [r7, #64]
 3129 0046 1B69     		ldr	r3, [r3, #16]
 3130 0048 BB62     		str	r3, [r7, #40]
1044:..\src/interruptions.c ****     int32 CYDATA k_d_c = SH_MOT->k_d_c;   
 3131              		.loc 1 1044 0
 3132 004a 3B6C     		ldr	r3, [r7, #64]
 3133 004c 5B69     		ldr	r3, [r3, #20]
 3134 004e 7B62     		str	r3, [r7, #36]
1045:..\src/interruptions.c **** 
1046:..\src/interruptions.c ****     int32 CYDATA k_p_dl = SH_MOT->k_p_dl;  
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 76


 3135              		.loc 1 1046 0
 3136 0050 3B6C     		ldr	r3, [r7, #64]
 3137 0052 9B69     		ldr	r3, [r3, #24]
 3138 0054 3B62     		str	r3, [r7, #32]
1047:..\src/interruptions.c ****     int32 CYDATA k_i_dl = SH_MOT->k_i_dl; 
 3139              		.loc 1 1047 0
 3140 0056 3B6C     		ldr	r3, [r7, #64]
 3141 0058 DB69     		ldr	r3, [r3, #28]
 3142 005a FB61     		str	r3, [r7, #28]
1048:..\src/interruptions.c ****     int32 CYDATA k_d_dl = SH_MOT->k_d_dl;
 3143              		.loc 1 1048 0
 3144 005c 3B6C     		ldr	r3, [r7, #64]
 3145 005e 1B6A     		ldr	r3, [r3, #32]
 3146 0060 BB61     		str	r3, [r7, #24]
1049:..\src/interruptions.c ****     
1050:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = SH_MOT->k_p_c_dl;  
 3147              		.loc 1 1050 0
 3148 0062 3B6C     		ldr	r3, [r7, #64]
 3149 0064 5B6A     		ldr	r3, [r3, #36]
 3150 0066 7B61     		str	r3, [r7, #20]
1051:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = SH_MOT->k_i_c_dl; 
 3151              		.loc 1 1051 0
 3152 0068 3B6C     		ldr	r3, [r7, #64]
 3153 006a 9B6A     		ldr	r3, [r3, #40]
 3154 006c 3B61     		str	r3, [r7, #16]
1052:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = SH_MOT->k_d_c_dl;   
 3155              		.loc 1 1052 0
 3156 006e 3B6C     		ldr	r3, [r7, #64]
 3157 0070 DB6A     		ldr	r3, [r3, #44]
 3158 0072 FB60     		str	r3, [r7, #12]
1053:..\src/interruptions.c **** 
1054:..\src/interruptions.c ****     // Static Variables
1055:..\src/interruptions.c **** 
1056:..\src/interruptions.c ****     static int32 pos_error_sum;     // position error sum for integral
1057:..\src/interruptions.c ****     static int32 curr_error_sum;    // current error sum for integral
1058:..\src/interruptions.c ****     
1059:..\src/interruptions.c ****     static int32 prev_pos_err;      // previous position error for deriv. control
1060:..\src/interruptions.c ****     static int32 prev_curr_err;     // previous current error for deriv. control
1061:..\src/interruptions.c ****     static int32 prev_pwm;
1062:..\src/interruptions.c **** 
1063:..\src/interruptions.c ****     static CYBIT motor_dir = FALSE;
1064:..\src/interruptions.c ****     static uint32 position_counter = 0;
1065:..\src/interruptions.c ****   
1066:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1067:..\src/interruptions.c ****     compute_reference(MOTOR_IDX, &g_ref[MOTOR_IDX], &g_refOld[MOTOR_IDX]);
 3159              		.loc 1 1067 0
 3160 0074 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3161 0078 1B01     		lsls	r3, r3, #4
 3162 007a 864A     		ldr	r2, .L266+4
 3163 007c 9918     		adds	r1, r3, r2
 3164 007e 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3165 0082 1B01     		lsls	r3, r3, #4
 3166 0084 844A     		ldr	r2, .L266+8
 3167 0086 1A44     		add	r2, r2, r3
 3168 0088 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3169 008c 1846     		mov	r0, r3
 3170 008e FFF7FEFF 		bl	compute_reference
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 77


1068:..\src/interruptions.c ****      
1069:..\src/interruptions.c ****     switch(SH_MOT->control_mode) {
 3171              		.loc 1 1069 0
 3172 0092 3B6C     		ldr	r3, [r7, #64]
 3173 0094 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3174 0098 032B     		cmp	r3, #3
 3175 009a 00F2F681 		bhi	.L206
 3176 009e 01A2     		adr	r2, .L208
 3177 00a0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3178              		.p2align 2
 3179              	.L208:
 3180 00a4 51020000 		.word	.L207+1
 3181 00a8 45040000 		.word	.L209+1
 3182 00ac 37030000 		.word	.L210+1
 3183 00b0 B5000000 		.word	.L211+1
 3184              		.p2align 1
 3185              	.L211:
1070:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1071:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1072:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3186              		.loc 1 1072 0
 3187 00b4 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3188 00b8 764A     		ldr	r2, .L266+4
 3189 00ba 1B01     		lsls	r3, r3, #4
 3190 00bc 1344     		add	r3, r3, r2
 3191 00be 1A68     		ldr	r2, [r3]
 3192 00c0 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3193 00c4 7549     		ldr	r1, .L266+12
 3194 00c6 3420     		movs	r0, #52
 3195 00c8 00FB03F3 		mul	r3, r0, r3
 3196 00cc 0B44     		add	r3, r3, r1
 3197 00ce 1B68     		ldr	r3, [r3]
 3198 00d0 D31A     		subs	r3, r2, r3
 3199 00d2 BB60     		str	r3, [r7, #8]
1073:..\src/interruptions.c **** 
1074:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3200              		.loc 1 1074 0
 3201 00d4 724B     		ldr	r3, .L266+16
 3202 00d6 1A68     		ldr	r2, [r3]
 3203 00d8 BB68     		ldr	r3, [r7, #8]
 3204 00da 1344     		add	r3, r3, r2
 3205 00dc 704A     		ldr	r2, .L266+16
 3206 00de 1360     		str	r3, [r2]
1075:..\src/interruptions.c **** 
1076:..\src/interruptions.c ****             // error_sum saturation
1077:..\src/interruptions.c ****             if (pos_error_sum > POS_INTEGRAL_SAT_LIMIT)
 3207              		.loc 1 1077 0
 3208 00e0 6F4B     		ldr	r3, .L266+16
 3209 00e2 1B68     		ldr	r3, [r3]
 3210 00e4 6F4A     		ldr	r2, .L266+20
 3211 00e6 9342     		cmp	r3, r2
 3212 00e8 03DD     		ble	.L212
1078:..\src/interruptions.c ****                 pos_error_sum = POS_INTEGRAL_SAT_LIMIT;
 3213              		.loc 1 1078 0
 3214 00ea 6D4B     		ldr	r3, .L266+16
 3215 00ec 6D4A     		ldr	r2, .L266+20
 3216 00ee 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 78


 3217 00f0 07E0     		b	.L213
 3218              	.L212:
1079:..\src/interruptions.c ****             else {
1080:..\src/interruptions.c ****                 if (pos_error_sum < -POS_INTEGRAL_SAT_LIMIT) 
 3219              		.loc 1 1080 0
 3220 00f2 6B4B     		ldr	r3, .L266+16
 3221 00f4 1B68     		ldr	r3, [r3]
 3222 00f6 6C4A     		ldr	r2, .L266+24
 3223 00f8 9342     		cmp	r3, r2
 3224 00fa 02DA     		bge	.L213
1081:..\src/interruptions.c ****                     pos_error_sum = -POS_INTEGRAL_SAT_LIMIT;
 3225              		.loc 1 1081 0
 3226 00fc 684B     		ldr	r3, .L266+16
 3227 00fe 6A4A     		ldr	r2, .L266+24
 3228 0100 1A60     		str	r2, [r3]
 3229              	.L213:
1082:..\src/interruptions.c ****             }
1083:..\src/interruptions.c ****             
1084:..\src/interruptions.c ****             // ------ position PID control ------
1085:..\src/interruptions.c **** 
1086:..\src/interruptions.c ****             i_ref = 0;
 3230              		.loc 1 1086 0
 3231 0102 0023     		movs	r3, #0
 3232 0104 BB64     		str	r3, [r7, #72]
1087:..\src/interruptions.c ****             
1088:..\src/interruptions.c ****             // Proportional
1089:..\src/interruptions.c ****             if (k_p_dl != 0)
 3233              		.loc 1 1089 0
 3234 0106 3B6A     		ldr	r3, [r7, #32]
 3235 0108 002B     		cmp	r3, #0
 3236 010a 07D0     		beq	.L214
1090:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 3237              		.loc 1 1090 0
 3238 010c 3B6A     		ldr	r3, [r7, #32]
 3239 010e BA68     		ldr	r2, [r7, #8]
 3240 0110 02FB03F3 		mul	r3, r2, r3
 3241 0114 1B14     		asrs	r3, r3, #16
 3242 0116 BA6C     		ldr	r2, [r7, #72]
 3243 0118 1344     		add	r3, r3, r2
 3244 011a BB64     		str	r3, [r7, #72]
 3245              	.L214:
1091:..\src/interruptions.c **** 
1092:..\src/interruptions.c ****             // Integral
1093:..\src/interruptions.c ****             if (k_i_dl != 0)
 3246              		.loc 1 1093 0
 3247 011c FB69     		ldr	r3, [r7, #28]
 3248 011e 002B     		cmp	r3, #0
 3249 0120 08D0     		beq	.L215
1094:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum) >> 16;
 3250              		.loc 1 1094 0
 3251 0122 5F4B     		ldr	r3, .L266+16
 3252 0124 1B68     		ldr	r3, [r3]
 3253 0126 FA69     		ldr	r2, [r7, #28]
 3254 0128 02FB03F3 		mul	r3, r2, r3
 3255 012c 1B14     		asrs	r3, r3, #16
 3256 012e BA6C     		ldr	r2, [r7, #72]
 3257 0130 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 79


 3258 0132 BB64     		str	r3, [r7, #72]
 3259              	.L215:
1095:..\src/interruptions.c **** 
1096:..\src/interruptions.c ****             // Derivative
1097:..\src/interruptions.c ****             if (k_d_dl != 0)
 3260              		.loc 1 1097 0
 3261 0134 BB69     		ldr	r3, [r7, #24]
 3262 0136 002B     		cmp	r3, #0
 3263 0138 0AD0     		beq	.L216
1098:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err)) >> 16;
 3264              		.loc 1 1098 0
 3265 013a 5C4B     		ldr	r3, .L266+28
 3266 013c 1B68     		ldr	r3, [r3]
 3267 013e BA68     		ldr	r2, [r7, #8]
 3268 0140 D31A     		subs	r3, r2, r3
 3269 0142 BA69     		ldr	r2, [r7, #24]
 3270 0144 02FB03F3 		mul	r3, r2, r3
 3271 0148 1B14     		asrs	r3, r3, #16
 3272 014a BA6C     		ldr	r2, [r7, #72]
 3273 014c 1344     		add	r3, r3, r2
 3274 014e BB64     		str	r3, [r7, #72]
 3275              	.L216:
1099:..\src/interruptions.c ****                         
1100:..\src/interruptions.c ****             // Update previous position
1101:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3276              		.loc 1 1101 0
 3277 0150 564A     		ldr	r2, .L266+28
 3278 0152 BB68     		ldr	r3, [r7, #8]
 3279 0154 1360     		str	r3, [r2]
1102:..\src/interruptions.c **** 
1103:..\src/interruptions.c ****             // motor direction depends on i_ref
1104:..\src/interruptions.c ****             if (i_ref >= 0)
 3280              		.loc 1 1104 0
 3281 0156 BB6C     		ldr	r3, [r7, #72]
 3282 0158 002B     		cmp	r3, #0
 3283 015a 03DB     		blt	.L217
1105:..\src/interruptions.c ****                 motor_dir = TRUE;
 3284              		.loc 1 1105 0
 3285 015c 544B     		ldr	r3, .L266+32
 3286 015e 0122     		movs	r2, #1
 3287 0160 1A70     		strb	r2, [r3]
 3288 0162 02E0     		b	.L218
 3289              	.L217:
1106:..\src/interruptions.c ****             else
1107:..\src/interruptions.c ****                 motor_dir = FALSE;
 3290              		.loc 1 1107 0
 3291 0164 524B     		ldr	r3, .L266+32
 3292 0166 0022     		movs	r2, #0
 3293 0168 1A70     		strb	r2, [r3]
 3294              	.L218:
1108:..\src/interruptions.c **** 
1109:..\src/interruptions.c ****             // saturate max current
1110:..\src/interruptions.c ****             if (i_ref > SH_MOT->current_limit)
 3295              		.loc 1 1110 0
 3296 016a 3B6C     		ldr	r3, [r7, #64]
 3297 016c B3F95C30 		ldrsh	r3, [r3, #92]
 3298 0170 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 80


 3299 0172 BB6C     		ldr	r3, [r7, #72]
 3300 0174 9A42     		cmp	r2, r3
 3301 0176 04DA     		bge	.L219
1111:..\src/interruptions.c ****                 i_ref = SH_MOT->current_limit;
 3302              		.loc 1 1111 0
 3303 0178 3B6C     		ldr	r3, [r7, #64]
 3304 017a B3F95C30 		ldrsh	r3, [r3, #92]
 3305 017e BB64     		str	r3, [r7, #72]
 3306 0180 0BE0     		b	.L220
 3307              	.L219:
1112:..\src/interruptions.c ****             else {
1113:..\src/interruptions.c ****                 if (i_ref < -SH_MOT->current_limit)
 3308              		.loc 1 1113 0
 3309 0182 3B6C     		ldr	r3, [r7, #64]
 3310 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 3311 0188 5A42     		negs	r2, r3
 3312 018a BB6C     		ldr	r3, [r7, #72]
 3313 018c 9A42     		cmp	r2, r3
 3314 018e 04DD     		ble	.L220
1114:..\src/interruptions.c ****                     i_ref = -SH_MOT->current_limit;
 3315              		.loc 1 1114 0
 3316 0190 3B6C     		ldr	r3, [r7, #64]
 3317 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 3318 0196 5B42     		negs	r3, r3
 3319 0198 BB64     		str	r3, [r7, #72]
 3320              	.L220:
1115:..\src/interruptions.c ****         	}
1116:..\src/interruptions.c **** 
1117:..\src/interruptions.c ****             // current error and curr error sum
1118:..\src/interruptions.c ****             curr_error = i_ref - g_meas[SH_ENC_L].curr;
 3321              		.loc 1 1118 0
 3322 019a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3323 019e 3F4A     		ldr	r2, .L266+12
 3324 01a0 3421     		movs	r1, #52
 3325 01a2 01FB03F3 		mul	r3, r1, r3
 3326 01a6 1344     		add	r3, r3, r2
 3327 01a8 0C33     		adds	r3, r3, #12
 3328 01aa 1B68     		ldr	r3, [r3]
 3329 01ac BA6C     		ldr	r2, [r7, #72]
 3330 01ae D31A     		subs	r3, r2, r3
 3331 01b0 7B60     		str	r3, [r7, #4]
1119:..\src/interruptions.c ****             curr_error_sum += curr_error;
 3332              		.loc 1 1119 0
 3333 01b2 404B     		ldr	r3, .L266+36
 3334 01b4 1A68     		ldr	r2, [r3]
 3335 01b6 7B68     		ldr	r3, [r7, #4]
 3336 01b8 1344     		add	r3, r3, r2
 3337 01ba 3E4A     		ldr	r2, .L266+36
 3338 01bc 1360     		str	r3, [r2]
1120:..\src/interruptions.c ****             
1121:..\src/interruptions.c ****             if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3339              		.loc 1 1121 0
 3340 01be 3D4B     		ldr	r3, .L266+36
 3341 01c0 1B68     		ldr	r3, [r3]
 3342 01c2 3D4A     		ldr	r2, .L266+40
 3343 01c4 9342     		cmp	r3, r2
 3344 01c6 03DD     		ble	.L221
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 81


1122:..\src/interruptions.c ****                 curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3345              		.loc 1 1122 0
 3346 01c8 3A4B     		ldr	r3, .L266+36
 3347 01ca 3B4A     		ldr	r2, .L266+40
 3348 01cc 1A60     		str	r2, [r3]
 3349 01ce 07E0     		b	.L222
 3350              	.L221:
1123:..\src/interruptions.c ****             else {
1124:..\src/interruptions.c ****                 if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT)
 3351              		.loc 1 1124 0
 3352 01d0 384B     		ldr	r3, .L266+36
 3353 01d2 1B68     		ldr	r3, [r3]
 3354 01d4 394A     		ldr	r2, .L266+44
 3355 01d6 9342     		cmp	r3, r2
 3356 01d8 02DA     		bge	.L222
1125:..\src/interruptions.c ****                     curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3357              		.loc 1 1125 0
 3358 01da 364B     		ldr	r3, .L266+36
 3359 01dc 374A     		ldr	r2, .L266+44
 3360 01de 1A60     		str	r2, [r3]
 3361              	.L222:
1126:..\src/interruptions.c ****             }
1127:..\src/interruptions.c **** 
1128:..\src/interruptions.c ****             // ----- current PID control -----
1129:..\src/interruptions.c **** 
1130:..\src/interruptions.c ****             pwm_input = 0;
 3362              		.loc 1 1130 0
 3363 01e0 0023     		movs	r3, #0
 3364 01e2 FB64     		str	r3, [r7, #76]
1131:..\src/interruptions.c **** 
1132:..\src/interruptions.c ****             // Proportional
1133:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 3365              		.loc 1 1133 0
 3366 01e4 7B69     		ldr	r3, [r7, #20]
 3367 01e6 002B     		cmp	r3, #0
 3368 01e8 07D0     		beq	.L223
1134:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
 3369              		.loc 1 1134 0
 3370 01ea 7B69     		ldr	r3, [r7, #20]
 3371 01ec 7A68     		ldr	r2, [r7, #4]
 3372 01ee 02FB03F3 		mul	r3, r2, r3
 3373 01f2 1B14     		asrs	r3, r3, #16
 3374 01f4 FA6C     		ldr	r2, [r7, #76]
 3375 01f6 1344     		add	r3, r3, r2
 3376 01f8 FB64     		str	r3, [r7, #76]
 3377              	.L223:
1135:..\src/interruptions.c **** 
1136:..\src/interruptions.c ****             // Integral
1137:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 3378              		.loc 1 1137 0
 3379 01fa 3B69     		ldr	r3, [r7, #16]
 3380 01fc 002B     		cmp	r3, #0
 3381 01fe 08D0     		beq	.L224
1138:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum) >> 16;
 3382              		.loc 1 1138 0
 3383 0200 2C4B     		ldr	r3, .L266+36
 3384 0202 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 82


 3385 0204 3A69     		ldr	r2, [r7, #16]
 3386 0206 02FB03F3 		mul	r3, r2, r3
 3387 020a 1B14     		asrs	r3, r3, #16
 3388 020c FA6C     		ldr	r2, [r7, #76]
 3389 020e 1344     		add	r3, r3, r2
 3390 0210 FB64     		str	r3, [r7, #76]
 3391              	.L224:
1139:..\src/interruptions.c **** 
1140:..\src/interruptions.c ****             // Derivative
1141:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 3392              		.loc 1 1141 0
 3393 0212 FB68     		ldr	r3, [r7, #12]
 3394 0214 002B     		cmp	r3, #0
 3395 0216 0AD0     		beq	.L225
1142:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err)) >> 16;
 3396              		.loc 1 1142 0
 3397 0218 294B     		ldr	r3, .L266+48
 3398 021a 1B68     		ldr	r3, [r3]
 3399 021c 7A68     		ldr	r2, [r7, #4]
 3400 021e D31A     		subs	r3, r2, r3
 3401 0220 FA68     		ldr	r2, [r7, #12]
 3402 0222 02FB03F3 		mul	r3, r2, r3
 3403 0226 1B14     		asrs	r3, r3, #16
 3404 0228 FA6C     		ldr	r2, [r7, #76]
 3405 022a 1344     		add	r3, r3, r2
 3406 022c FB64     		str	r3, [r7, #76]
 3407              	.L225:
1143:..\src/interruptions.c **** 
1144:..\src/interruptions.c ****             // pwm_input saturation
1145:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3408              		.loc 1 1145 0
 3409 022e FB6C     		ldr	r3, [r7, #76]
 3410 0230 13F1640F 		cmn	r3, #100
 3411 0234 03DA     		bge	.L226
1146:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3412              		.loc 1 1146 0
 3413 0236 6FF06303 		mvn	r3, #99
 3414 023a FB64     		str	r3, [r7, #76]
 3415 023c 04E0     		b	.L227
 3416              	.L226:
1147:..\src/interruptions.c ****             else {
1148:..\src/interruptions.c ****                 if (pwm_input > PWM_MAX_VALUE_DC)
 3417              		.loc 1 1148 0
 3418 023e FB6C     		ldr	r3, [r7, #76]
 3419 0240 642B     		cmp	r3, #100
 3420 0242 01DD     		ble	.L227
1149:..\src/interruptions.c ****                     pwm_input = PWM_MAX_VALUE_DC;
 3421              		.loc 1 1149 0
 3422 0244 6423     		movs	r3, #100
 3423 0246 FB64     		str	r3, [r7, #76]
 3424              	.L227:
1150:..\src/interruptions.c ****             }
1151:..\src/interruptions.c **** 
1152:..\src/interruptions.c ****             // Update previous current
1153:..\src/interruptions.c ****             prev_curr_err = curr_error;
 3425              		.loc 1 1153 0
 3426 0248 1D4A     		ldr	r2, .L266+48
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 83


 3427 024a 7B68     		ldr	r3, [r7, #4]
 3428 024c 1360     		str	r3, [r2]
1154:..\src/interruptions.c **** 
1155:..\src/interruptions.c ****         break;
 3429              		.loc 1 1155 0
 3430 024e 1CE1     		b	.L206
 3431              	.L207:
1156:..\src/interruptions.c **** 
1157:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1158:..\src/interruptions.c ****         case CONTROL_ANGLE:
1159:..\src/interruptions.c ****             pos_error = g_ref[MOTOR_IDX].pos - g_meas[SH_ENC_L].pos[0];
 3432              		.loc 1 1159 0
 3433 0250 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3434 0254 0F4A     		ldr	r2, .L266+4
 3435 0256 1B01     		lsls	r3, r3, #4
 3436 0258 1344     		add	r3, r3, r2
 3437 025a 1A68     		ldr	r2, [r3]
 3438 025c 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3439 0260 0E49     		ldr	r1, .L266+12
 3440 0262 3420     		movs	r0, #52
 3441 0264 00FB03F3 		mul	r3, r0, r3
 3442 0268 0B44     		add	r3, r3, r1
 3443 026a 1B68     		ldr	r3, [r3]
 3444 026c D31A     		subs	r3, r2, r3
 3445 026e BB60     		str	r3, [r7, #8]
1160:..\src/interruptions.c **** 
1161:..\src/interruptions.c ****             pos_error_sum += pos_error;
 3446              		.loc 1 1161 0
 3447 0270 0B4B     		ldr	r3, .L266+16
 3448 0272 1A68     		ldr	r2, [r3]
 3449 0274 BB68     		ldr	r3, [r7, #8]
 3450 0276 1344     		add	r3, r3, r2
 3451 0278 094A     		ldr	r2, .L266+16
 3452 027a 1360     		str	r3, [r2]
1162:..\src/interruptions.c **** 
1163:..\src/interruptions.c ****             // anti-windup (for integral control)
1164:..\src/interruptions.c ****             if (pos_error_sum > ANTI_WINDUP)
 3453              		.loc 1 1164 0
 3454 027c 084B     		ldr	r3, .L266+16
 3455 027e 1B68     		ldr	r3, [r3]
 3456 0280 B3F57A7F 		cmp	r3, #1000
 3457 0284 1EDD     		ble	.L228
1165:..\src/interruptions.c ****                 pos_error_sum = ANTI_WINDUP;
 3458              		.loc 1 1165 0
 3459 0286 064B     		ldr	r3, .L266+16
 3460 0288 4FF47A72 		mov	r2, #1000
 3461 028c 1A60     		str	r2, [r3]
 3462 028e 21E0     		b	.L229
 3463              	.L267:
 3464              		.align	2
 3465              	.L266:
 3466 0290 00000000 		.word	c_mem
 3467 0294 00000000 		.word	g_ref
 3468 0298 00000000 		.word	g_refOld
 3469 029c 00000000 		.word	g_meas
 3470 02a0 90000000 		.word	pos_error_sum.10574
 3471 02a4 80F0FA02 		.word	50000000
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 84


 3472 02a8 800F05FD 		.word	-50000000
 3473 02ac 94000000 		.word	prev_pos_err.10576
 3474 02b0 98000000 		.word	motor_dir.10579
 3475 02b4 9C000000 		.word	curr_error_sum.10575
 3476 02b8 A0860100 		.word	100000
 3477 02bc 6079FEFF 		.word	-100000
 3478 02c0 A0000000 		.word	prev_curr_err.10577
 3479              	.L228:
1166:..\src/interruptions.c ****             else {
1167:..\src/interruptions.c **** 				if (pos_error_sum < -ANTI_WINDUP)
 3480              		.loc 1 1167 0
 3481 02c4 9D4B     		ldr	r3, .L268
 3482 02c6 1B68     		ldr	r3, [r3]
 3483 02c8 13F57A7F 		cmn	r3, #1000
 3484 02cc 02DA     		bge	.L229
1168:..\src/interruptions.c ****                 	pos_error_sum = -ANTI_WINDUP;
 3485              		.loc 1 1168 0
 3486 02ce 9B4B     		ldr	r3, .L268
 3487 02d0 9B4A     		ldr	r2, .L268+4
 3488 02d2 1A60     		str	r2, [r3]
 3489              	.L229:
1169:..\src/interruptions.c ****             }
1170:..\src/interruptions.c **** 
1171:..\src/interruptions.c ****             // Proportional
1172:..\src/interruptions.c ****             if (k_p != 0) 
 3490              		.loc 1 1172 0
 3491 02d4 BB6B     		ldr	r3, [r7, #56]
 3492 02d6 002B     		cmp	r3, #0
 3493 02d8 05D0     		beq	.L230
1173:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 3494              		.loc 1 1173 0
 3495 02da BB6B     		ldr	r3, [r7, #56]
 3496 02dc BA68     		ldr	r2, [r7, #8]
 3497 02de 02FB03F3 		mul	r3, r2, r3
 3498 02e2 1B14     		asrs	r3, r3, #16
 3499 02e4 FB64     		str	r3, [r7, #76]
 3500              	.L230:
1174:..\src/interruptions.c ****             
1175:..\src/interruptions.c **** 
1176:..\src/interruptions.c ****             // Integral
1177:..\src/interruptions.c ****             if (k_i != 0) 
 3501              		.loc 1 1177 0
 3502 02e6 7B6B     		ldr	r3, [r7, #52]
 3503 02e8 002B     		cmp	r3, #0
 3504 02ea 08D0     		beq	.L231
1178:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum) >> 16;
 3505              		.loc 1 1178 0
 3506 02ec 934B     		ldr	r3, .L268
 3507 02ee 1B68     		ldr	r3, [r3]
 3508 02f0 7A6B     		ldr	r2, [r7, #52]
 3509 02f2 02FB03F3 		mul	r3, r2, r3
 3510 02f6 1B14     		asrs	r3, r3, #16
 3511 02f8 FA6C     		ldr	r2, [r7, #76]
 3512 02fa 1344     		add	r3, r3, r2
 3513 02fc FB64     		str	r3, [r7, #76]
 3514              	.L231:
1179:..\src/interruptions.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 85


1180:..\src/interruptions.c **** 
1181:..\src/interruptions.c ****             // Derivative
1182:..\src/interruptions.c ****             if (k_d != 0) 
 3515              		.loc 1 1182 0
 3516 02fe 3B6B     		ldr	r3, [r7, #48]
 3517 0300 002B     		cmp	r3, #0
 3518 0302 0AD0     		beq	.L232
1183:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err)) >> 16;
 3519              		.loc 1 1183 0
 3520 0304 8F4B     		ldr	r3, .L268+8
 3521 0306 1B68     		ldr	r3, [r3]
 3522 0308 BA68     		ldr	r2, [r7, #8]
 3523 030a D31A     		subs	r3, r2, r3
 3524 030c 3A6B     		ldr	r2, [r7, #48]
 3525 030e 02FB03F3 		mul	r3, r2, r3
 3526 0312 1B14     		asrs	r3, r3, #16
 3527 0314 FA6C     		ldr	r2, [r7, #76]
 3528 0316 1344     		add	r3, r3, r2
 3529 0318 FB64     		str	r3, [r7, #76]
 3530              	.L232:
1184:..\src/interruptions.c ****             
1185:..\src/interruptions.c **** 
1186:..\src/interruptions.c ****             // Update measure
1187:..\src/interruptions.c ****             prev_pos_err = pos_error;
 3531              		.loc 1 1187 0
 3532 031a 8A4A     		ldr	r2, .L268+8
 3533 031c BB68     		ldr	r3, [r7, #8]
 3534 031e 1360     		str	r3, [r2]
1188:..\src/interruptions.c **** 
1189:..\src/interruptions.c ****             if (pwm_input > 0)
 3535              		.loc 1 1189 0
 3536 0320 FB6C     		ldr	r3, [r7, #76]
 3537 0322 002B     		cmp	r3, #0
 3538 0324 03DD     		ble	.L233
1190:..\src/interruptions.c ****                 motor_dir = TRUE;
 3539              		.loc 1 1190 0
 3540 0326 884B     		ldr	r3, .L268+12
 3541 0328 0122     		movs	r2, #1
 3542 032a 1A70     		strb	r2, [r3]
1191:..\src/interruptions.c ****             else
1192:..\src/interruptions.c ****                 motor_dir = FALSE;
1193:..\src/interruptions.c **** 
1194:..\src/interruptions.c ****         break;
 3543              		.loc 1 1194 0
 3544 032c ADE0     		b	.L206
 3545              	.L233:
1192:..\src/interruptions.c **** 
 3546              		.loc 1 1192 0
 3547 032e 864B     		ldr	r3, .L268+12
 3548 0330 0022     		movs	r2, #0
 3549 0332 1A70     		strb	r2, [r3]
 3550              		.loc 1 1194 0
 3551 0334 A9E0     		b	.L206
 3552              	.L210:
1195:..\src/interruptions.c **** 
1196:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1197:..\src/interruptions.c ****         case CONTROL_CURRENT:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 86


1198:..\src/interruptions.c ****             if(g_ref[MOTOR_IDX].onoff && tension_valid) {
 3553              		.loc 1 1198 0
 3554 0336 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3555 033a 844A     		ldr	r2, .L268+16
 3556 033c 1B01     		lsls	r3, r3, #4
 3557 033e 1344     		add	r3, r3, r2
 3558 0340 0C33     		adds	r3, r3, #12
 3559 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3560 0344 002B     		cmp	r3, #0
 3561 0346 00F09D80 		beq	.L264
 3562              		.loc 1 1198 0 is_stmt 0 discriminator 1
 3563 034a 814B     		ldr	r3, .L268+20
 3564 034c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3565 034e 002B     		cmp	r3, #0
 3566 0350 00F09880 		beq	.L264
1199:..\src/interruptions.c ****                 
1200:..\src/interruptions.c ****                 i_ref = g_ref[MOTOR_IDX].curr;
 3567              		.loc 1 1200 0 is_stmt 1
 3568 0354 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3569 0358 7C4A     		ldr	r2, .L268+16
 3570 035a 1B01     		lsls	r3, r3, #4
 3571 035c 1344     		add	r3, r3, r2
 3572 035e 0433     		adds	r3, r3, #4
 3573 0360 1B68     		ldr	r3, [r3]
 3574 0362 BB64     		str	r3, [r7, #72]
1201:..\src/interruptions.c **** 
1202:..\src/interruptions.c ****                 if (i_ref > SH_MOT->current_limit) 
 3575              		.loc 1 1202 0
 3576 0364 3B6C     		ldr	r3, [r7, #64]
 3577 0366 B3F95C30 		ldrsh	r3, [r3, #92]
 3578 036a 1A46     		mov	r2, r3
 3579 036c BB6C     		ldr	r3, [r7, #72]
 3580 036e 9A42     		cmp	r2, r3
 3581 0370 04DA     		bge	.L236
1203:..\src/interruptions.c ****                     i_ref = SH_MOT->current_limit;
 3582              		.loc 1 1203 0
 3583 0372 3B6C     		ldr	r3, [r7, #64]
 3584 0374 B3F95C30 		ldrsh	r3, [r3, #92]
 3585 0378 BB64     		str	r3, [r7, #72]
 3586 037a 0BE0     		b	.L237
 3587              	.L236:
1204:..\src/interruptions.c ****                 else {
1205:..\src/interruptions.c ****                     if (i_ref < -SH_MOT->current_limit)
 3588              		.loc 1 1205 0
 3589 037c 3B6C     		ldr	r3, [r7, #64]
 3590 037e B3F95C30 		ldrsh	r3, [r3, #92]
 3591 0382 5A42     		negs	r2, r3
 3592 0384 BB6C     		ldr	r3, [r7, #72]
 3593 0386 9A42     		cmp	r2, r3
 3594 0388 04DD     		ble	.L237
1206:..\src/interruptions.c ****                         i_ref = -SH_MOT->current_limit;
 3595              		.loc 1 1206 0
 3596 038a 3B6C     		ldr	r3, [r7, #64]
 3597 038c B3F95C30 		ldrsh	r3, [r3, #92]
 3598 0390 5B42     		negs	r3, r3
 3599 0392 BB64     		str	r3, [r7, #72]
 3600              	.L237:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 87


1207:..\src/interruptions.c ****                 }
1208:..\src/interruptions.c ****                 
1209:..\src/interruptions.c ****                 // current error
1210:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[SH_ENC_L].curr;            
 3601              		.loc 1 1210 0
 3602 0394 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3603 0398 6E4A     		ldr	r2, .L268+24
 3604 039a 3421     		movs	r1, #52
 3605 039c 01FB03F3 		mul	r3, r1, r3
 3606 03a0 1344     		add	r3, r3, r2
 3607 03a2 0C33     		adds	r3, r3, #12
 3608 03a4 1B68     		ldr	r3, [r3]
 3609 03a6 BA6C     		ldr	r2, [r7, #72]
 3610 03a8 D31A     		subs	r3, r2, r3
 3611 03aa 7B60     		str	r3, [r7, #4]
1211:..\src/interruptions.c ****                 curr_error_sum += curr_error;
 3612              		.loc 1 1211 0
 3613 03ac 6A4B     		ldr	r3, .L268+28
 3614 03ae 1A68     		ldr	r2, [r3]
 3615 03b0 7B68     		ldr	r3, [r7, #4]
 3616 03b2 1344     		add	r3, r3, r2
 3617 03b4 684A     		ldr	r2, .L268+28
 3618 03b6 1360     		str	r3, [r2]
1212:..\src/interruptions.c ****                 
1213:..\src/interruptions.c ****                 if (curr_error_sum > CURR_INTEGRAL_SAT_LIMIT)
 3619              		.loc 1 1213 0
 3620 03b8 674B     		ldr	r3, .L268+28
 3621 03ba 1B68     		ldr	r3, [r3]
 3622 03bc 674A     		ldr	r2, .L268+32
 3623 03be 9342     		cmp	r3, r2
 3624 03c0 03DD     		ble	.L238
1214:..\src/interruptions.c ****                     curr_error_sum = CURR_INTEGRAL_SAT_LIMIT;
 3625              		.loc 1 1214 0
 3626 03c2 654B     		ldr	r3, .L268+28
 3627 03c4 654A     		ldr	r2, .L268+32
 3628 03c6 1A60     		str	r2, [r3]
 3629 03c8 07E0     		b	.L239
 3630              	.L238:
1215:..\src/interruptions.c ****                 else {
1216:..\src/interruptions.c ****                     if (curr_error_sum < -CURR_INTEGRAL_SAT_LIMIT) 
 3631              		.loc 1 1216 0
 3632 03ca 634B     		ldr	r3, .L268+28
 3633 03cc 1B68     		ldr	r3, [r3]
 3634 03ce 644A     		ldr	r2, .L268+36
 3635 03d0 9342     		cmp	r3, r2
 3636 03d2 02DA     		bge	.L239
1217:..\src/interruptions.c ****                         curr_error_sum = -CURR_INTEGRAL_SAT_LIMIT;
 3637              		.loc 1 1217 0
 3638 03d4 604B     		ldr	r3, .L268+28
 3639 03d6 624A     		ldr	r2, .L268+36
 3640 03d8 1A60     		str	r2, [r3]
 3641              	.L239:
1218:..\src/interruptions.c ****                 }
1219:..\src/interruptions.c **** 
1220:..\src/interruptions.c ****                 pwm_input = 0;
 3642              		.loc 1 1220 0
 3643 03da 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 88


 3644 03dc FB64     		str	r3, [r7, #76]
1221:..\src/interruptions.c **** 
1222:..\src/interruptions.c ****                 // Proportional
1223:..\src/interruptions.c ****                 if (k_p_c != 0)
 3645              		.loc 1 1223 0
 3646 03de FB6A     		ldr	r3, [r7, #44]
 3647 03e0 002B     		cmp	r3, #0
 3648 03e2 07D0     		beq	.L240
1224:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 3649              		.loc 1 1224 0
 3650 03e4 FB6A     		ldr	r3, [r7, #44]
 3651 03e6 7A68     		ldr	r2, [r7, #4]
 3652 03e8 02FB03F3 		mul	r3, r2, r3
 3653 03ec 1B14     		asrs	r3, r3, #16
 3654 03ee FA6C     		ldr	r2, [r7, #76]
 3655 03f0 1344     		add	r3, r3, r2
 3656 03f2 FB64     		str	r3, [r7, #76]
 3657              	.L240:
1225:..\src/interruptions.c **** 
1226:..\src/interruptions.c ****                 // Integral
1227:..\src/interruptions.c ****                 if (k_i_c != 0)
 3658              		.loc 1 1227 0
 3659 03f4 BB6A     		ldr	r3, [r7, #40]
 3660 03f6 002B     		cmp	r3, #0
 3661 03f8 08D0     		beq	.L241
1228:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum) >> 16;
 3662              		.loc 1 1228 0
 3663 03fa 574B     		ldr	r3, .L268+28
 3664 03fc 1B68     		ldr	r3, [r3]
 3665 03fe BA6A     		ldr	r2, [r7, #40]
 3666 0400 02FB03F3 		mul	r3, r2, r3
 3667 0404 1B14     		asrs	r3, r3, #16
 3668 0406 FA6C     		ldr	r2, [r7, #76]
 3669 0408 1344     		add	r3, r3, r2
 3670 040a FB64     		str	r3, [r7, #76]
 3671              	.L241:
1229:..\src/interruptions.c **** 
1230:..\src/interruptions.c ****                 // Derivative
1231:..\src/interruptions.c ****                 if (k_d_c != 0)
 3672              		.loc 1 1231 0
 3673 040c 7B6A     		ldr	r3, [r7, #36]
 3674 040e 002B     		cmp	r3, #0
 3675 0410 0AD0     		beq	.L242
1232:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err)) >> 16;
 3676              		.loc 1 1232 0
 3677 0412 544B     		ldr	r3, .L268+40
 3678 0414 1B68     		ldr	r3, [r3]
 3679 0416 7A68     		ldr	r2, [r7, #4]
 3680 0418 D31A     		subs	r3, r2, r3
 3681 041a 7A6A     		ldr	r2, [r7, #36]
 3682 041c 02FB03F3 		mul	r3, r2, r3
 3683 0420 1B14     		asrs	r3, r3, #16
 3684 0422 FA6C     		ldr	r2, [r7, #76]
 3685 0424 1344     		add	r3, r3, r2
 3686 0426 FB64     		str	r3, [r7, #76]
 3687              	.L242:
1233:..\src/interruptions.c ****                 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 89


1234:..\src/interruptions.c ****                 prev_curr_err = curr_error;
 3688              		.loc 1 1234 0
 3689 0428 4E4A     		ldr	r2, .L268+40
 3690 042a 7B68     		ldr	r3, [r7, #4]
 3691 042c 1360     		str	r3, [r2]
1235:..\src/interruptions.c ****                 
1236:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 3692              		.loc 1 1236 0
 3693 042e FB6C     		ldr	r3, [r7, #76]
 3694 0430 002B     		cmp	r3, #0
 3695 0432 03DB     		blt	.L243
1237:..\src/interruptions.c ****                     motor_dir = TRUE;
 3696              		.loc 1 1237 0
 3697 0434 444B     		ldr	r3, .L268+12
 3698 0436 0122     		movs	r2, #1
 3699 0438 1A70     		strb	r2, [r3]
1238:..\src/interruptions.c ****                 else
1239:..\src/interruptions.c ****                     motor_dir = FALSE;
1240:..\src/interruptions.c ****             }
1241:..\src/interruptions.c ****         break;
 3700              		.loc 1 1241 0
 3701 043a 23E0     		b	.L264
 3702              	.L243:
1239:..\src/interruptions.c ****             }
 3703              		.loc 1 1239 0
 3704 043c 424B     		ldr	r3, .L268+12
 3705 043e 0022     		movs	r2, #0
 3706 0440 1A70     		strb	r2, [r3]
 3707              		.loc 1 1241 0
 3708 0442 1FE0     		b	.L264
 3709              	.L209:
1242:..\src/interruptions.c ****         
1243:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1244:..\src/interruptions.c ****         case CONTROL_PWM:
1245:..\src/interruptions.c **** 
1246:..\src/interruptions.c ****             pwm_input = g_ref[MOTOR_IDX].pwm;
 3710              		.loc 1 1246 0
 3711 0444 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3712 0448 404A     		ldr	r2, .L268+16
 3713 044a 1B01     		lsls	r3, r3, #4
 3714 044c 1344     		add	r3, r3, r2
 3715 044e 0833     		adds	r3, r3, #8
 3716 0450 1B68     		ldr	r3, [r3]
 3717 0452 FB64     		str	r3, [r7, #76]
1247:..\src/interruptions.c **** 
1248:..\src/interruptions.c ****             if (pwm_input > 0) 
 3718              		.loc 1 1248 0
 3719 0454 FB6C     		ldr	r3, [r7, #76]
 3720 0456 002B     		cmp	r3, #0
 3721 0458 03DD     		ble	.L244
1249:..\src/interruptions.c ****                 motor_dir = TRUE;
 3722              		.loc 1 1249 0
 3723 045a 3B4B     		ldr	r3, .L268+12
 3724 045c 0122     		movs	r2, #1
 3725 045e 1A70     		strb	r2, [r3]
 3726 0460 02E0     		b	.L245
 3727              	.L244:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 90


1250:..\src/interruptions.c ****             else 
1251:..\src/interruptions.c ****                 motor_dir = FALSE;
 3728              		.loc 1 1251 0
 3729 0462 394B     		ldr	r3, .L268+12
 3730 0464 0022     		movs	r2, #0
 3731 0466 1A70     		strb	r2, [r3]
 3732              	.L245:
1252:..\src/interruptions.c ****             
1253:..\src/interruptions.c **** 
1254:..\src/interruptions.c ****             // pwm_input saturation
1255:..\src/interruptions.c ****             if (pwm_input < -PWM_MAX_VALUE_DC) 
 3733              		.loc 1 1255 0
 3734 0468 FB6C     		ldr	r3, [r7, #76]
 3735 046a 13F1640F 		cmn	r3, #100
 3736 046e 03DA     		bge	.L246
1256:..\src/interruptions.c ****                 pwm_input = -PWM_MAX_VALUE_DC;
 3737              		.loc 1 1256 0
 3738 0470 6FF06303 		mvn	r3, #99
 3739 0474 FB64     		str	r3, [r7, #76]
1257:..\src/interruptions.c ****             else {
1258:..\src/interruptions.c **** 				if (pwm_input > PWM_MAX_VALUE_DC) 
1259:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
1260:..\src/interruptions.c ****         	}
1261:..\src/interruptions.c **** 
1262:..\src/interruptions.c ****         break;
 3740              		.loc 1 1262 0
 3741 0476 07E0     		b	.L265
 3742              	.L246:
1258:..\src/interruptions.c ****                 	pwm_input = PWM_MAX_VALUE_DC;
 3743              		.loc 1 1258 0
 3744 0478 FB6C     		ldr	r3, [r7, #76]
 3745 047a 642B     		cmp	r3, #100
 3746 047c 04DD     		ble	.L265
1259:..\src/interruptions.c ****         	}
 3747              		.loc 1 1259 0
 3748 047e 6423     		movs	r3, #100
 3749 0480 FB64     		str	r3, [r7, #76]
 3750              		.loc 1 1262 0
 3751 0482 01E0     		b	.L265
 3752              	.L264:
1241:..\src/interruptions.c ****         
 3753              		.loc 1 1241 0
 3754 0484 00BF     		nop
 3755 0486 00E0     		b	.L206
 3756              	.L265:
 3757              		.loc 1 1262 0
 3758 0488 00BF     		nop
 3759              	.L206:
1263:..\src/interruptions.c ****             
1264:..\src/interruptions.c ****     }
1265:..\src/interruptions.c **** 
1266:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1267:..\src/interruptions.c **** 
1268:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3760              		.loc 1 1268 0
 3761 048a FB6C     		ldr	r3, [r7, #76]
 3762 048c 642B     		cmp	r3, #100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 91


 3763 048e 01DD     		ble	.L248
1269:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3764              		.loc 1 1269 0
 3765 0490 6423     		movs	r3, #100
 3766 0492 FB64     		str	r3, [r7, #76]
 3767              	.L248:
1270:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3768              		.loc 1 1270 0
 3769 0494 FB6C     		ldr	r3, [r7, #76]
 3770 0496 13F1640F 		cmn	r3, #100
 3771 049a 02DA     		bge	.L249
1271:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3772              		.loc 1 1271 0
 3773 049c 6FF06303 		mvn	r3, #99
 3774 04a0 FB64     		str	r3, [r7, #76]
 3775              	.L249:
1272:..\src/interruptions.c **** 
1273:..\src/interruptions.c ****     if (SH_MOT->control_mode != CONTROL_PWM) 
 3776              		.loc 1 1273 0
 3777 04a2 3B6C     		ldr	r3, [r7, #64]
 3778 04a4 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3779 04a8 012B     		cmp	r3, #1
 3780 04aa 0DD0     		beq	.L250
1274:..\src/interruptions.c ****         pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[0]) >> 10;
 3781              		.loc 1 1274 0
 3782 04ac FB6C     		ldr	r3, [r7, #76]
 3783 04ae 9B02     		lsls	r3, r3, #10
 3784 04b0 2D4A     		ldr	r2, .L268+44
 3785 04b2 82FB0312 		smull	r1, r2, r2, r3
 3786 04b6 5211     		asrs	r2, r2, #5
 3787 04b8 DB17     		asrs	r3, r3, #31
 3788 04ba D31A     		subs	r3, r2, r3
 3789 04bc 2B4A     		ldr	r2, .L268+48
 3790 04be 1288     		ldrh	r2, [r2]
 3791 04c0 02FB03F3 		mul	r3, r2, r3
 3792 04c4 9B12     		asrs	r3, r3, #10
 3793 04c6 FB64     		str	r3, [r7, #76]
 3794              	.L250:
1275:..\src/interruptions.c ****  
1276:..\src/interruptions.c ****     //// RATE LIMITER ////
1277:..\src/interruptions.c ****     if((pwm_input-prev_pwm) > SH_MOT->pwm_rate_limiter){
 3795              		.loc 1 1277 0
 3796 04c8 294B     		ldr	r3, .L268+52
 3797 04ca 1B68     		ldr	r3, [r3]
 3798 04cc FA6C     		ldr	r2, [r7, #76]
 3799 04ce D31A     		subs	r3, r2, r3
 3800 04d0 3A6C     		ldr	r2, [r7, #64]
 3801 04d2 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3802 04d6 9342     		cmp	r3, r2
 3803 04d8 08DD     		ble	.L251
1278:..\src/interruptions.c ****         pwm_input =  prev_pwm + SH_MOT->pwm_rate_limiter;
 3804              		.loc 1 1278 0
 3805 04da 3B6C     		ldr	r3, [r7, #64]
 3806 04dc 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3807 04e0 1A46     		mov	r2, r3
 3808 04e2 234B     		ldr	r3, .L268+52
 3809 04e4 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 92


 3810 04e6 1344     		add	r3, r3, r2
 3811 04e8 FB64     		str	r3, [r7, #76]
 3812 04ea 10E0     		b	.L252
 3813              	.L251:
1279:..\src/interruptions.c ****     }
1280:..\src/interruptions.c ****     else {
1281:..\src/interruptions.c ****         if((pwm_input-prev_pwm) < -SH_MOT->pwm_rate_limiter)
 3814              		.loc 1 1281 0
 3815 04ec 204B     		ldr	r3, .L268+52
 3816 04ee 1B68     		ldr	r3, [r3]
 3817 04f0 FA6C     		ldr	r2, [r7, #76]
 3818 04f2 D21A     		subs	r2, r2, r3
 3819 04f4 3B6C     		ldr	r3, [r7, #64]
 3820 04f6 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 3821 04fa 5B42     		negs	r3, r3
 3822 04fc 9A42     		cmp	r2, r3
 3823 04fe 06DA     		bge	.L252
1282:..\src/interruptions.c ****             pwm_input =  prev_pwm - SH_MOT->pwm_rate_limiter;
 3824              		.loc 1 1282 0
 3825 0500 1B4B     		ldr	r3, .L268+52
 3826 0502 1B68     		ldr	r3, [r3]
 3827 0504 3A6C     		ldr	r2, [r7, #64]
 3828 0506 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 3829 050a 9B1A     		subs	r3, r3, r2
 3830 050c FB64     		str	r3, [r7, #76]
 3831              	.L252:
1283:..\src/interruptions.c ****     }
1284:..\src/interruptions.c ****     
1285:..\src/interruptions.c ****     if(pwm_input >  PWM_MAX_VALUE_DC) 
 3832              		.loc 1 1285 0
 3833 050e FB6C     		ldr	r3, [r7, #76]
 3834 0510 642B     		cmp	r3, #100
 3835 0512 01DD     		ble	.L253
1286:..\src/interruptions.c ****         pwm_input =  PWM_MAX_VALUE_DC;
 3836              		.loc 1 1286 0
 3837 0514 6423     		movs	r3, #100
 3838 0516 FB64     		str	r3, [r7, #76]
 3839              	.L253:
1287:..\src/interruptions.c ****     if(pwm_input < -PWM_MAX_VALUE_DC) 
 3840              		.loc 1 1287 0
 3841 0518 FB6C     		ldr	r3, [r7, #76]
 3842 051a 13F1640F 		cmn	r3, #100
 3843 051e 02DA     		bge	.L254
1288:..\src/interruptions.c ****         pwm_input = -PWM_MAX_VALUE_DC;
 3844              		.loc 1 1288 0
 3845 0520 6FF06303 		mvn	r3, #99
 3846 0524 FB64     		str	r3, [r7, #76]
 3847              	.L254:
1289:..\src/interruptions.c ****     
1290:..\src/interruptions.c ****     prev_pwm = pwm_input;
 3848              		.loc 1 1290 0
 3849 0526 124A     		ldr	r2, .L268+52
 3850 0528 FB6C     		ldr	r3, [r7, #76]
 3851 052a 1360     		str	r3, [r2]
1291:..\src/interruptions.c **** 	
1292:..\src/interruptions.c ****     pwm_sign[MOTOR_IDX] = SIGN(pwm_input);   
 3852              		.loc 1 1292 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 93


 3853 052c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3854 0530 FA6C     		ldr	r2, [r7, #76]
 3855 0532 002A     		cmp	r2, #0
 3856 0534 1EDB     		blt	.L255
 3857              		.loc 1 1292 0 is_stmt 0 discriminator 1
 3858 0536 0121     		movs	r1, #1
 3859 0538 1EE0     		b	.L256
 3860              	.L269:
 3861 053a 00BF     		.align	2
 3862              	.L268:
 3863 053c 90000000 		.word	pos_error_sum.10574
 3864 0540 18FCFFFF 		.word	-1000
 3865 0544 94000000 		.word	prev_pos_err.10576
 3866 0548 98000000 		.word	motor_dir.10579
 3867 054c 00000000 		.word	g_ref
 3868 0550 00000000 		.word	tension_valid
 3869 0554 00000000 		.word	g_meas
 3870 0558 9C000000 		.word	curr_error_sum.10575
 3871 055c A0860100 		.word	100000
 3872 0560 6079FEFF 		.word	-100000
 3873 0564 A0000000 		.word	prev_curr_err.10577
 3874 0568 1F85EB51 		.word	1374389535
 3875 056c 00000000 		.word	dev_pwm_limit
 3876 0570 A4000000 		.word	prev_pwm.10578
 3877              	.L255:
 3878              		.loc 1 1292 0 discriminator 2
 3879 0574 4FF0FF31 		mov	r1, #-1
 3880              	.L256:
 3881              		.loc 1 1292 0 discriminator 4
 3882 0578 5B4A     		ldr	r2, .L270
 3883 057a D154     		strb	r1, [r2, r3]
1293:..\src/interruptions.c ****     
1294:..\src/interruptions.c ****     if (SH_MOT->not_revers_motor_flag == TRUE) {
 3884              		.loc 1 1294 0 is_stmt 1 discriminator 4
 3885 057c 3B6C     		ldr	r3, [r7, #64]
 3886 057e 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 3887 0582 012B     		cmp	r3, #1
 3888 0584 40F09880 		bne	.L257
1295:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1296:..\src/interruptions.c ****     	if ( SH_MOT->control_mode != CONTROL_PWM && ((g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[
 3889              		.loc 1 1296 0
 3890 0588 3B6C     		ldr	r3, [r7, #64]
 3891 058a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 3892 058e 012B     		cmp	r3, #1
 3893 0590 00F08F80 		beq	.L258
 3894              		.loc 1 1296 0 is_stmt 0 discriminator 1
 3895 0594 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3896 0598 544A     		ldr	r2, .L270+4
 3897 059a 3421     		movs	r1, #52
 3898 059c 01FB03F3 		mul	r3, r1, r3
 3899 05a0 1344     		add	r3, r3, r2
 3900 05a2 1A68     		ldr	r2, [r3]
 3901 05a4 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3902 05a8 5149     		ldr	r1, .L270+8
 3903 05aa 3420     		movs	r0, #52
 3904 05ac 00FB03F3 		mul	r3, r0, r3
 3905 05b0 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 94


 3906 05b2 1B68     		ldr	r3, [r3]
 3907 05b4 D31A     		subs	r3, r2, r3
 3908 05b6 312B     		cmp	r3, #49
 3909 05b8 7BDC     		bgt	.L258
1297:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3910              		.loc 1 1297 0 is_stmt 1 discriminator 2
 3911 05ba 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3912 05be 4B4A     		ldr	r2, .L270+4
 3913 05c0 3421     		movs	r1, #52
 3914 05c2 01FB03F3 		mul	r3, r1, r3
 3915 05c6 1344     		add	r3, r3, r2
 3916 05c8 1A68     		ldr	r2, [r3]
 3917 05ca 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3918 05ce 4849     		ldr	r1, .L270+8
 3919 05d0 3420     		movs	r0, #52
 3920 05d2 00FB03F3 		mul	r3, r0, r3
 3921 05d6 0B44     		add	r3, r3, r1
 3922 05d8 1B68     		ldr	r3, [r3]
 3923 05da D31A     		subs	r3, r2, r3
1296:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3924              		.loc 1 1296 0 discriminator 2
 3925 05dc 13F1310F 		cmn	r3, #49
 3926 05e0 67DB     		blt	.L258
1298:..\src/interruptions.c ****             ((g_refOld[MOTOR_IDX].pos - g_ref[MOTOR_IDX].pos) < 100 && (g_refOld[MOTOR_IDX].pos - g
 3927              		.loc 1 1298 0
 3928 05e2 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3929 05e6 434A     		ldr	r2, .L270+12
 3930 05e8 1B01     		lsls	r3, r3, #4
 3931 05ea 1344     		add	r3, r3, r2
 3932 05ec 1A68     		ldr	r2, [r3]
 3933 05ee 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3934 05f2 4149     		ldr	r1, .L270+16
 3935 05f4 1B01     		lsls	r3, r3, #4
 3936 05f6 0B44     		add	r3, r3, r1
 3937 05f8 1B68     		ldr	r3, [r3]
 3938 05fa D31A     		subs	r3, r2, r3
1297:..\src/interruptions.c ****             (g_measOld[SH_ENC_L].pos[0]-g_meas[SH_ENC_L].pos[0]) > -50) && 
 3939              		.loc 1 1297 0
 3940 05fc 632B     		cmp	r3, #99
 3941 05fe 58DC     		bgt	.L258
 3942              		.loc 1 1298 0
 3943 0600 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3944 0604 3B4A     		ldr	r2, .L270+12
 3945 0606 1B01     		lsls	r3, r3, #4
 3946 0608 1344     		add	r3, r3, r2
 3947 060a 1A68     		ldr	r2, [r3]
 3948 060c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3949 0610 3949     		ldr	r1, .L270+16
 3950 0612 1B01     		lsls	r3, r3, #4
 3951 0614 0B44     		add	r3, r3, r1
 3952 0616 1B68     		ldr	r3, [r3]
 3953 0618 D31A     		subs	r3, r2, r3
 3954 061a 13F1630F 		cmn	r3, #99
 3955 061e 48DB     		blt	.L258
1299:..\src/interruptions.c ****             position_counter++;
 3956              		.loc 1 1299 0
 3957 0620 364B     		ldr	r3, .L270+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 95


 3958 0622 1B68     		ldr	r3, [r3]
 3959 0624 0133     		adds	r3, r3, #1
 3960 0626 354A     		ldr	r2, .L270+20
 3961 0628 1360     		str	r3, [r2]
1300:..\src/interruptions.c ****             
1301:..\src/interruptions.c ****             if (position_counter >= 250) { 
 3962              		.loc 1 1301 0
 3963 062a 344B     		ldr	r3, .L270+20
 3964 062c 1B68     		ldr	r3, [r3]
 3965 062e F92B     		cmp	r3, #249
 3966 0630 42D9     		bls	.L257
1302:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag[MOTOR_IDX] == 
 3967              		.loc 1 1302 0
 3968 0632 3B6C     		ldr	r3, [r7, #64]
 3969 0634 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 3970 0638 002B     		cmp	r3, #0
 3971 063a 13D1     		bne	.L260
 3972              		.loc 1 1302 0 is_stmt 0 discriminator 1
 3973 063c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3974 0640 2F4A     		ldr	r2, .L270+24
 3975 0642 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3976 0644 002B     		cmp	r3, #0
 3977 0646 0DD1     		bne	.L260
1303:..\src/interruptions.c ****                     g_refNew[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];       // Needed only when US
 3978              		.loc 1 1303 0 is_stmt 1
 3979 0648 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3980 064c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3981 0650 2749     		ldr	r1, .L270+8
 3982 0652 3420     		movs	r0, #52
 3983 0654 00FB02F2 		mul	r2, r0, r2
 3984 0658 0A44     		add	r2, r2, r1
 3985 065a 1268     		ldr	r2, [r2]
 3986 065c 2949     		ldr	r1, .L270+28
 3987 065e 1B01     		lsls	r3, r3, #4
 3988 0660 0B44     		add	r3, r3, r1
 3989 0662 1A60     		str	r2, [r3]
 3990              	.L260:
1304:..\src/interruptions.c ****                 }
1305:..\src/interruptions.c ****                 g_ref[MOTOR_IDX].pos = g_meas[SH_ENC_L].pos[0];
 3991              		.loc 1 1305 0
 3992 0664 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 3993 0668 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 3994 066c 2049     		ldr	r1, .L270+8
 3995 066e 3420     		movs	r0, #52
 3996 0670 00FB02F2 		mul	r2, r0, r2
 3997 0674 0A44     		add	r2, r2, r1
 3998 0676 1268     		ldr	r2, [r2]
 3999 0678 1F49     		ldr	r1, .L270+16
 4000 067a 1B01     		lsls	r3, r3, #4
 4001 067c 0B44     		add	r3, r3, r1
 4002 067e 1A60     		str	r2, [r3]
1306:..\src/interruptions.c ****                 
1307:..\src/interruptions.c ****                 if (position_counter == 250){
 4003              		.loc 1 1307 0
 4004 0680 1E4B     		ldr	r3, .L270+20
 4005 0682 1B68     		ldr	r3, [r3]
 4006 0684 FA2B     		cmp	r3, #250
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 96


 4007 0686 11D1     		bne	.L261
1308:..\src/interruptions.c ****                     // To do only once
1309:..\src/interruptions.c ****                     g_meas[SH_ENC_L].hold_curr = g_meas[SH_ENC_L].curr;
 4008              		.loc 1 1309 0
 4009 0688 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 4010 068c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 4011 0690 1749     		ldr	r1, .L270+8
 4012 0692 3420     		movs	r0, #52
 4013 0694 00FB02F2 		mul	r2, r0, r2
 4014 0698 0A44     		add	r2, r2, r1
 4015 069a 0C32     		adds	r2, r2, #12
 4016 069c 1268     		ldr	r2, [r2]
 4017 069e 1449     		ldr	r1, .L270+8
 4018 06a0 3420     		movs	r0, #52
 4019 06a2 00FB03F3 		mul	r3, r0, r3
 4020 06a6 0B44     		add	r3, r3, r1
 4021 06a8 1433     		adds	r3, r3, #20
 4022 06aa 1A60     		str	r2, [r3]
 4023              	.L261:
1310:..\src/interruptions.c ****                 }
1311:..\src/interruptions.c ****                 pwm_input = 0;            
 4024              		.loc 1 1311 0
 4025 06ac 0023     		movs	r3, #0
 4026 06ae FB64     		str	r3, [r7, #76]
1301:..\src/interruptions.c ****                 if (SH_MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag[MOTOR_IDX] == 
 4027              		.loc 1 1301 0
 4028 06b0 02E0     		b	.L257
 4029              	.L258:
1312:..\src/interruptions.c ****             }
1313:..\src/interruptions.c ****         }
1314:..\src/interruptions.c ****         else {
1315:..\src/interruptions.c ****             position_counter = 0;
 4030              		.loc 1 1315 0
 4031 06b2 124B     		ldr	r3, .L270+20
 4032 06b4 0022     		movs	r2, #0
 4033 06b6 1A60     		str	r2, [r3]
 4034              	.L257:
1316:..\src/interruptions.c ****         }
1317:..\src/interruptions.c ****     }
1318:..\src/interruptions.c ****     
1319:..\src/interruptions.c ****     if (motor_dir)
 4035              		.loc 1 1319 0
 4036 06b8 134B     		ldr	r3, .L270+32
 4037 06ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4038 06bc 002B     		cmp	r3, #0
 4039 06be 03D0     		beq	.L262
1320:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x01);
 4040              		.loc 1 1320 0
 4041 06c0 0120     		movs	r0, #1
 4042 06c2 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 4043 06c6 02E0     		b	.L263
 4044              	.L262:
1321:..\src/interruptions.c ****     else
1322:..\src/interruptions.c ****         MOTOR_DIR_1_Write(0x00);
 4045              		.loc 1 1322 0
 4046 06c8 0020     		movs	r0, #0
 4047 06ca FFF7FEFF 		bl	MOTOR_DIR_1_Write
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 97


 4048              	.L263:
1323:..\src/interruptions.c **** 
1324:..\src/interruptions.c ****     PWM_MOTORS_WriteCompare1(abs(pwm_input));
 4049              		.loc 1 1324 0
 4050 06ce FB6C     		ldr	r3, [r7, #76]
 4051 06d0 002B     		cmp	r3, #0
 4052 06d2 B8BF     		it	lt
 4053 06d4 5B42     		rsblt	r3, r3, #0
 4054 06d6 9BB2     		uxth	r3, r3
 4055 06d8 1846     		mov	r0, r3
 4056 06da FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1325:..\src/interruptions.c **** }
 4057              		.loc 1 1325 0
 4058 06de 00BF     		nop
 4059 06e0 5037     		adds	r7, r7, #80
 4060              		.cfi_def_cfa_offset 8
 4061 06e2 BD46     		mov	sp, r7
 4062              		.cfi_def_cfa_register 13
 4063              		@ sp needed
 4064 06e4 80BD     		pop	{r7, pc}
 4065              	.L271:
 4066 06e6 00BF     		.align	2
 4067              	.L270:
 4068 06e8 00000000 		.word	pwm_sign
 4069 06ec 00000000 		.word	g_measOld
 4070 06f0 00000000 		.word	g_meas
 4071 06f4 00000000 		.word	g_refOld
 4072 06f8 00000000 		.word	g_ref
 4073 06fc A8000000 		.word	position_counter.10580
 4074 0700 00000000 		.word	change_ext_ref_flag
 4075 0704 00000000 		.word	g_refNew
 4076 0708 98000000 		.word	motor_dir.10579
 4077              		.cfi_endproc
 4078              	.LFE71:
 4079              		.size	motor_control_SH, .-motor_control_SH
 4080              		.section	.text.motor_control_generic,"ax",%progbits
 4081              		.align	2
 4082              		.global	motor_control_generic
 4083              		.thumb
 4084              		.thumb_func
 4085              		.type	motor_control_generic, %function
 4086              	motor_control_generic:
 4087              	.LFB72:
1326:..\src/interruptions.c **** 
1327:..\src/interruptions.c **** //==============================================================================
1328:..\src/interruptions.c **** //                                                         MOTOR CONTROL GENERIC
1329:..\src/interruptions.c **** //==============================================================================
1330:..\src/interruptions.c **** void motor_control_generic(uint8 idx) {
 4088              		.loc 1 1330 0
 4089              		.cfi_startproc
 4090              		@ args = 0, pretend = 0, frame = 80
 4091              		@ frame_needed = 1, uses_anonymous_args = 0
 4092 0000 80B5     		push	{r7, lr}
 4093              		.cfi_def_cfa_offset 8
 4094              		.cfi_offset 7, -8
 4095              		.cfi_offset 14, -4
 4096 0002 94B0     		sub	sp, sp, #80
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 98


 4097              		.cfi_def_cfa_offset 88
 4098 0004 00AF     		add	r7, sp, #0
 4099              		.cfi_def_cfa_register 7
 4100 0006 0346     		mov	r3, r0
 4101 0008 FB71     		strb	r3, [r7, #7]
1331:..\src/interruptions.c ****     
1332:..\src/interruptions.c ****     int32 CYDATA pwm_input = 0;
 4102              		.loc 1 1332 0
 4103 000a 0023     		movs	r3, #0
 4104 000c FB64     		str	r3, [r7, #76]
1333:..\src/interruptions.c ****     int32 CYDATA pos_error;         // position error
1334:..\src/interruptions.c ****     int32 CYDATA curr_error;        // current error
1335:..\src/interruptions.c ****     int32 CYDATA i_ref;             // current reference
1336:..\src/interruptions.c **** 
1337:..\src/interruptions.c ****     struct st_motor* MOT = &c_mem.motor[idx]; // Motor struct
 4105              		.loc 1 1337 0
 4106 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4107 0010 7422     		movs	r2, #116
 4108 0012 02FB03F3 		mul	r3, r2, r3
 4109 0016 B033     		adds	r3, r3, #176
 4110 0018 9D4A     		ldr	r2, .L363
 4111 001a 1344     		add	r3, r3, r2
 4112 001c 7B64     		str	r3, [r7, #68]
1338:..\src/interruptions.c ****     uint8 ENC_L = MOT->encoder_line;          // Associated encoder line
 4113              		.loc 1 1338 0
 4114 001e 7B6C     		ldr	r3, [r7, #68]
 4115 0020 93F86030 		ldrb	r3, [r3, #96]
 4116 0024 87F84330 		strb	r3, [r7, #67]
1339:..\src/interruptions.c ****     
1340:..\src/interruptions.c ****     int32 CYDATA k_p = MOT->k_p;  
 4117              		.loc 1 1340 0
 4118 0028 7B6C     		ldr	r3, [r7, #68]
 4119 002a 1B68     		ldr	r3, [r3]
 4120 002c FB63     		str	r3, [r7, #60]
1341:..\src/interruptions.c ****     int32 CYDATA k_i = MOT->k_i; 
 4121              		.loc 1 1341 0
 4122 002e 7B6C     		ldr	r3, [r7, #68]
 4123 0030 5B68     		ldr	r3, [r3, #4]
 4124 0032 BB63     		str	r3, [r7, #56]
1342:..\src/interruptions.c ****     int32 CYDATA k_d = MOT->k_d; 
 4125              		.loc 1 1342 0
 4126 0034 7B6C     		ldr	r3, [r7, #68]
 4127 0036 9B68     		ldr	r3, [r3, #8]
 4128 0038 7B63     		str	r3, [r7, #52]
1343:..\src/interruptions.c **** 
1344:..\src/interruptions.c ****     int32 CYDATA k_p_c = MOT->k_p_c;  
 4129              		.loc 1 1344 0
 4130 003a 7B6C     		ldr	r3, [r7, #68]
 4131 003c DB68     		ldr	r3, [r3, #12]
 4132 003e 3B63     		str	r3, [r7, #48]
1345:..\src/interruptions.c ****     int32 CYDATA k_i_c = MOT->k_i_c; 
 4133              		.loc 1 1345 0
 4134 0040 7B6C     		ldr	r3, [r7, #68]
 4135 0042 1B69     		ldr	r3, [r3, #16]
 4136 0044 FB62     		str	r3, [r7, #44]
1346:..\src/interruptions.c ****     int32 CYDATA k_d_c = MOT->k_d_c;   
 4137              		.loc 1 1346 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 99


 4138 0046 7B6C     		ldr	r3, [r7, #68]
 4139 0048 5B69     		ldr	r3, [r3, #20]
 4140 004a BB62     		str	r3, [r7, #40]
1347:..\src/interruptions.c **** 
1348:..\src/interruptions.c ****     int32 CYDATA k_p_dl = MOT->k_p_dl;  
 4141              		.loc 1 1348 0
 4142 004c 7B6C     		ldr	r3, [r7, #68]
 4143 004e 9B69     		ldr	r3, [r3, #24]
 4144 0050 7B62     		str	r3, [r7, #36]
1349:..\src/interruptions.c ****     int32 CYDATA k_i_dl = MOT->k_i_dl; 
 4145              		.loc 1 1349 0
 4146 0052 7B6C     		ldr	r3, [r7, #68]
 4147 0054 DB69     		ldr	r3, [r3, #28]
 4148 0056 3B62     		str	r3, [r7, #32]
1350:..\src/interruptions.c ****     int32 CYDATA k_d_dl = MOT->k_d_dl;
 4149              		.loc 1 1350 0
 4150 0058 7B6C     		ldr	r3, [r7, #68]
 4151 005a 1B6A     		ldr	r3, [r3, #32]
 4152 005c FB61     		str	r3, [r7, #28]
1351:..\src/interruptions.c ****     
1352:..\src/interruptions.c ****     int32 CYDATA k_p_c_dl = MOT->k_p_c_dl;  
 4153              		.loc 1 1352 0
 4154 005e 7B6C     		ldr	r3, [r7, #68]
 4155 0060 5B6A     		ldr	r3, [r3, #36]
 4156 0062 BB61     		str	r3, [r7, #24]
1353:..\src/interruptions.c ****     int32 CYDATA k_i_c_dl = MOT->k_i_c_dl; 
 4157              		.loc 1 1353 0
 4158 0064 7B6C     		ldr	r3, [r7, #68]
 4159 0066 9B6A     		ldr	r3, [r3, #40]
 4160 0068 7B61     		str	r3, [r7, #20]
1354:..\src/interruptions.c ****     int32 CYDATA k_d_c_dl = MOT->k_d_c_dl;   
 4161              		.loc 1 1354 0
 4162 006a 7B6C     		ldr	r3, [r7, #68]
 4163 006c DB6A     		ldr	r3, [r3, #44]
 4164 006e 3B61     		str	r3, [r7, #16]
1355:..\src/interruptions.c **** 
1356:..\src/interruptions.c ****     // Static Variables
1357:..\src/interruptions.c **** 
1358:..\src/interruptions.c ****     static int32 pos_error_sum[NUM_OF_MOTORS];     // position error sum for integral
1359:..\src/interruptions.c ****     static int32 curr_error_sum[NUM_OF_MOTORS];    // current error sum for integral
1360:..\src/interruptions.c ****     
1361:..\src/interruptions.c ****     static int32 prev_pos_err[NUM_OF_MOTORS];      // previous position error for deriv. control
1362:..\src/interruptions.c ****     static int32 prev_curr_err[NUM_OF_MOTORS];     // previous current error for deriv. control
1363:..\src/interruptions.c ****     static int32 prev_pwm[NUM_OF_MOTORS];
1364:..\src/interruptions.c **** 
1365:..\src/interruptions.c ****     static CYBIT motor_dir[NUM_OF_MOTORS] = {FALSE, FALSE};
1366:..\src/interruptions.c ****     static uint32 position_counter[NUM_OF_MOTORS] = {0, 0};
1367:..\src/interruptions.c **** 
1368:..\src/interruptions.c ****     // ======================= UPDATE MOTOR REFERENCE ==========================            
1369:..\src/interruptions.c ****     compute_reference(idx, &g_ref[idx], &g_refOld[idx]);
 4165              		.loc 1 1369 0
 4166 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4167 0072 1B01     		lsls	r3, r3, #4
 4168 0074 874A     		ldr	r2, .L363+4
 4169 0076 9918     		adds	r1, r3, r2
 4170 0078 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4171 007a 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 100


 4172 007c 864A     		ldr	r2, .L363+8
 4173 007e 1A44     		add	r2, r2, r3
 4174 0080 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4175 0082 1846     		mov	r0, r3
 4176 0084 FFF7FEFF 		bl	compute_reference
1370:..\src/interruptions.c ****     
1371:..\src/interruptions.c ****    
1372:..\src/interruptions.c ****     switch(MOT->control_mode) {
 4177              		.loc 1 1372 0
 4178 0088 7B6C     		ldr	r3, [r7, #68]
 4179 008a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4180 008e 032B     		cmp	r3, #3
 4181 0090 00F28182 		bhi	.L273
 4182 0094 01A2     		adr	r2, .L275
 4183 0096 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4184 009a 00BF     		.p2align 2
 4185              	.L275:
 4186 009c ED020000 		.word	.L274+1
 4187 00a0 F7040000 		.word	.L276+1
 4188 00a4 C5030000 		.word	.L277+1
 4189 00a8 AD000000 		.word	.L278+1
 4190              		.p2align 1
 4191              	.L278:
1373:..\src/interruptions.c ****         // ======================= CURRENT AND POSITION CONTROL =======================
1374:..\src/interruptions.c ****         case CURR_AND_POS_CONTROL:
1375:..\src/interruptions.c ****             pos_error = g_ref[0].pos - g_meas[ENC_L].pos[0];
 4192              		.loc 1 1375 0
 4193 00ac 794B     		ldr	r3, .L363+4
 4194 00ae 1A68     		ldr	r2, [r3]
 4195 00b0 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4196 00b4 7949     		ldr	r1, .L363+12
 4197 00b6 3420     		movs	r0, #52
 4198 00b8 00FB03F3 		mul	r3, r0, r3
 4199 00bc 0B44     		add	r3, r3, r1
 4200 00be 1B68     		ldr	r3, [r3]
 4201 00c0 D31A     		subs	r3, r2, r3
 4202 00c2 FB60     		str	r3, [r7, #12]
1376:..\src/interruptions.c **** 
1377:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4203              		.loc 1 1377 0
 4204 00c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4205 00c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4206 00c8 7549     		ldr	r1, .L363+16
 4207 00ca 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4208 00ce FA68     		ldr	r2, [r7, #12]
 4209 00d0 0A44     		add	r2, r2, r1
 4210 00d2 7349     		ldr	r1, .L363+16
 4211 00d4 41F82320 		str	r2, [r1, r3, lsl #2]
1378:..\src/interruptions.c **** 
1379:..\src/interruptions.c ****             // error_sum saturation
1380:..\src/interruptions.c ****             if (pos_error_sum[idx] > POS_INTEGRAL_SAT_LIMIT)
 4212              		.loc 1 1380 0
 4213 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4214 00da 714A     		ldr	r2, .L363+16
 4215 00dc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4216 00e0 704A     		ldr	r2, .L363+20
 4217 00e2 9342     		cmp	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 101


 4218 00e4 05DD     		ble	.L279
1381:..\src/interruptions.c ****                 pos_error_sum[idx] = POS_INTEGRAL_SAT_LIMIT;
 4219              		.loc 1 1381 0
 4220 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4221 00e8 6D4A     		ldr	r2, .L363+16
 4222 00ea 6E49     		ldr	r1, .L363+20
 4223 00ec 42F82310 		str	r1, [r2, r3, lsl #2]
 4224 00f0 0BE0     		b	.L280
 4225              	.L279:
1382:..\src/interruptions.c ****             else {
1383:..\src/interruptions.c ****                 if (pos_error_sum[idx] < -POS_INTEGRAL_SAT_LIMIT) 
 4226              		.loc 1 1383 0
 4227 00f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4228 00f4 6A4A     		ldr	r2, .L363+16
 4229 00f6 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4230 00fa 6B4A     		ldr	r2, .L363+24
 4231 00fc 9342     		cmp	r3, r2
 4232 00fe 04DA     		bge	.L280
1384:..\src/interruptions.c ****                     pos_error_sum[idx] = -POS_INTEGRAL_SAT_LIMIT;
 4233              		.loc 1 1384 0
 4234 0100 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4235 0102 674A     		ldr	r2, .L363+16
 4236 0104 6849     		ldr	r1, .L363+24
 4237 0106 42F82310 		str	r1, [r2, r3, lsl #2]
 4238              	.L280:
1385:..\src/interruptions.c ****             }
1386:..\src/interruptions.c ****             
1387:..\src/interruptions.c ****             // ------ position PID control ------
1388:..\src/interruptions.c **** 
1389:..\src/interruptions.c ****             i_ref = 0;
 4239              		.loc 1 1389 0
 4240 010a 0023     		movs	r3, #0
 4241 010c BB64     		str	r3, [r7, #72]
1390:..\src/interruptions.c ****             
1391:..\src/interruptions.c ****             // Proportional
1392:..\src/interruptions.c ****             if (k_p_dl != 0)
 4242              		.loc 1 1392 0
 4243 010e 7B6A     		ldr	r3, [r7, #36]
 4244 0110 002B     		cmp	r3, #0
 4245 0112 07D0     		beq	.L281
1393:..\src/interruptions.c ****                 i_ref += (int32)(k_p_dl * pos_error) >> 16;
 4246              		.loc 1 1393 0
 4247 0114 7B6A     		ldr	r3, [r7, #36]
 4248 0116 FA68     		ldr	r2, [r7, #12]
 4249 0118 02FB03F3 		mul	r3, r2, r3
 4250 011c 1B14     		asrs	r3, r3, #16
 4251 011e BA6C     		ldr	r2, [r7, #72]
 4252 0120 1344     		add	r3, r3, r2
 4253 0122 BB64     		str	r3, [r7, #72]
 4254              	.L281:
1394:..\src/interruptions.c **** 
1395:..\src/interruptions.c ****             // Integral
1396:..\src/interruptions.c ****             if (k_i_dl != 0)
 4255              		.loc 1 1396 0
 4256 0124 3B6A     		ldr	r3, [r7, #32]
 4257 0126 002B     		cmp	r3, #0
 4258 0128 0AD0     		beq	.L282
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 102


1397:..\src/interruptions.c ****                 i_ref += (int32)(k_i_dl * pos_error_sum[idx]) >> 16;
 4259              		.loc 1 1397 0
 4260 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4261 012c 5C4A     		ldr	r2, .L363+16
 4262 012e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4263 0132 3A6A     		ldr	r2, [r7, #32]
 4264 0134 02FB03F3 		mul	r3, r2, r3
 4265 0138 1B14     		asrs	r3, r3, #16
 4266 013a BA6C     		ldr	r2, [r7, #72]
 4267 013c 1344     		add	r3, r3, r2
 4268 013e BB64     		str	r3, [r7, #72]
 4269              	.L282:
1398:..\src/interruptions.c **** 
1399:..\src/interruptions.c ****             // Derivative
1400:..\src/interruptions.c ****             if (k_d_dl != 0)
 4270              		.loc 1 1400 0
 4271 0140 FB69     		ldr	r3, [r7, #28]
 4272 0142 002B     		cmp	r3, #0
 4273 0144 0CD0     		beq	.L283
1401:..\src/interruptions.c ****                 i_ref += (int32)(k_d_dl * (pos_error - prev_pos_err[idx])) >> 16;
 4274              		.loc 1 1401 0
 4275 0146 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4276 0148 584A     		ldr	r2, .L363+28
 4277 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4278 014e FA68     		ldr	r2, [r7, #12]
 4279 0150 D31A     		subs	r3, r2, r3
 4280 0152 FA69     		ldr	r2, [r7, #28]
 4281 0154 02FB03F3 		mul	r3, r2, r3
 4282 0158 1B14     		asrs	r3, r3, #16
 4283 015a BA6C     		ldr	r2, [r7, #72]
 4284 015c 1344     		add	r3, r3, r2
 4285 015e BB64     		str	r3, [r7, #72]
 4286              	.L283:
1402:..\src/interruptions.c ****                         
1403:..\src/interruptions.c ****             // Update previous position
1404:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4287              		.loc 1 1404 0
 4288 0160 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4289 0162 5249     		ldr	r1, .L363+28
 4290 0164 FA68     		ldr	r2, [r7, #12]
 4291 0166 41F82320 		str	r2, [r1, r3, lsl #2]
1405:..\src/interruptions.c **** 
1406:..\src/interruptions.c ****             // motor direction depends on i_ref
1407:..\src/interruptions.c ****             if (i_ref >= 0)
 4292              		.loc 1 1407 0
 4293 016a BB6C     		ldr	r3, [r7, #72]
 4294 016c 002B     		cmp	r3, #0
 4295 016e 04DB     		blt	.L284
1408:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4296              		.loc 1 1408 0
 4297 0170 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4298 0172 4F4A     		ldr	r2, .L363+32
 4299 0174 0121     		movs	r1, #1
 4300 0176 D154     		strb	r1, [r2, r3]
 4301 0178 03E0     		b	.L285
 4302              	.L284:
1409:..\src/interruptions.c ****             else
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 103


1410:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4303              		.loc 1 1410 0
 4304 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4305 017c 4C4A     		ldr	r2, .L363+32
 4306 017e 0021     		movs	r1, #0
 4307 0180 D154     		strb	r1, [r2, r3]
 4308              	.L285:
1411:..\src/interruptions.c **** 
1412:..\src/interruptions.c ****             // saturate max current
1413:..\src/interruptions.c ****             if (i_ref > MOT->current_limit)
 4309              		.loc 1 1413 0
 4310 0182 7B6C     		ldr	r3, [r7, #68]
 4311 0184 B3F95C30 		ldrsh	r3, [r3, #92]
 4312 0188 1A46     		mov	r2, r3
 4313 018a BB6C     		ldr	r3, [r7, #72]
 4314 018c 9A42     		cmp	r2, r3
 4315 018e 04DA     		bge	.L286
1414:..\src/interruptions.c ****                 i_ref = MOT->current_limit;
 4316              		.loc 1 1414 0
 4317 0190 7B6C     		ldr	r3, [r7, #68]
 4318 0192 B3F95C30 		ldrsh	r3, [r3, #92]
 4319 0196 BB64     		str	r3, [r7, #72]
 4320 0198 0BE0     		b	.L287
 4321              	.L286:
1415:..\src/interruptions.c ****             else {
1416:..\src/interruptions.c ****                 if (i_ref < -MOT->current_limit)
 4322              		.loc 1 1416 0
 4323 019a 7B6C     		ldr	r3, [r7, #68]
 4324 019c B3F95C30 		ldrsh	r3, [r3, #92]
 4325 01a0 5A42     		negs	r2, r3
 4326 01a2 BB6C     		ldr	r3, [r7, #72]
 4327 01a4 9A42     		cmp	r2, r3
 4328 01a6 04DD     		ble	.L287
1417:..\src/interruptions.c ****                     i_ref = -MOT->current_limit;
 4329              		.loc 1 1417 0
 4330 01a8 7B6C     		ldr	r3, [r7, #68]
 4331 01aa B3F95C30 		ldrsh	r3, [r3, #92]
 4332 01ae 5B42     		negs	r3, r3
 4333 01b0 BB64     		str	r3, [r7, #72]
 4334              	.L287:
1418:..\src/interruptions.c ****         	}
1419:..\src/interruptions.c **** 
1420:..\src/interruptions.c ****             // current error and curr error sum
1421:..\src/interruptions.c ****             curr_error = i_ref - g_meas[ENC_L].curr;
 4335              		.loc 1 1421 0
 4336 01b2 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4337 01b6 394A     		ldr	r2, .L363+12
 4338 01b8 3421     		movs	r1, #52
 4339 01ba 01FB03F3 		mul	r3, r1, r3
 4340 01be 1344     		add	r3, r3, r2
 4341 01c0 0C33     		adds	r3, r3, #12
 4342 01c2 1B68     		ldr	r3, [r3]
 4343 01c4 BA6C     		ldr	r2, [r7, #72]
 4344 01c6 D31A     		subs	r3, r2, r3
 4345 01c8 BB60     		str	r3, [r7, #8]
1422:..\src/interruptions.c ****             curr_error_sum[idx] += curr_error;
 4346              		.loc 1 1422 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 104


 4347 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4348 01cc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4349 01ce 3949     		ldr	r1, .L363+36
 4350 01d0 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4351 01d4 BA68     		ldr	r2, [r7, #8]
 4352 01d6 0A44     		add	r2, r2, r1
 4353 01d8 3649     		ldr	r1, .L363+36
 4354 01da 41F82320 		str	r2, [r1, r3, lsl #2]
1423:..\src/interruptions.c ****             
1424:..\src/interruptions.c ****             if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4355              		.loc 1 1424 0
 4356 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4357 01e0 344A     		ldr	r2, .L363+36
 4358 01e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4359 01e6 344A     		ldr	r2, .L363+40
 4360 01e8 9342     		cmp	r3, r2
 4361 01ea 05DD     		ble	.L288
1425:..\src/interruptions.c ****                 curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4362              		.loc 1 1425 0
 4363 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4364 01ee 314A     		ldr	r2, .L363+36
 4365 01f0 3149     		ldr	r1, .L363+40
 4366 01f2 42F82310 		str	r1, [r2, r3, lsl #2]
 4367 01f6 0BE0     		b	.L289
 4368              	.L288:
1426:..\src/interruptions.c ****             else {
1427:..\src/interruptions.c ****                 if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT)
 4369              		.loc 1 1427 0
 4370 01f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4371 01fa 2E4A     		ldr	r2, .L363+36
 4372 01fc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4373 0200 2E4A     		ldr	r2, .L363+44
 4374 0202 9342     		cmp	r3, r2
 4375 0204 04DA     		bge	.L289
1428:..\src/interruptions.c ****                     curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4376              		.loc 1 1428 0
 4377 0206 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4378 0208 2A4A     		ldr	r2, .L363+36
 4379 020a 2C49     		ldr	r1, .L363+44
 4380 020c 42F82310 		str	r1, [r2, r3, lsl #2]
 4381              	.L289:
1429:..\src/interruptions.c ****             }
1430:..\src/interruptions.c **** 
1431:..\src/interruptions.c ****             // ----- current PID control -----
1432:..\src/interruptions.c **** 
1433:..\src/interruptions.c ****             pwm_input = 0;
 4382              		.loc 1 1433 0
 4383 0210 0023     		movs	r3, #0
 4384 0212 FB64     		str	r3, [r7, #76]
1434:..\src/interruptions.c **** 
1435:..\src/interruptions.c ****             // Proportional
1436:..\src/interruptions.c ****             if (k_p_c_dl != 0)
 4385              		.loc 1 1436 0
 4386 0214 BB69     		ldr	r3, [r7, #24]
 4387 0216 002B     		cmp	r3, #0
 4388 0218 07D0     		beq	.L290
1437:..\src/interruptions.c ****                 pwm_input += (int32)(k_p_c_dl * curr_error) >> 16;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 105


 4389              		.loc 1 1437 0
 4390 021a BB69     		ldr	r3, [r7, #24]
 4391 021c BA68     		ldr	r2, [r7, #8]
 4392 021e 02FB03F3 		mul	r3, r2, r3
 4393 0222 1B14     		asrs	r3, r3, #16
 4394 0224 FA6C     		ldr	r2, [r7, #76]
 4395 0226 1344     		add	r3, r3, r2
 4396 0228 FB64     		str	r3, [r7, #76]
 4397              	.L290:
1438:..\src/interruptions.c **** 
1439:..\src/interruptions.c ****             // Integral
1440:..\src/interruptions.c ****             if (k_i_c_dl != 0)
 4398              		.loc 1 1440 0
 4399 022a 7B69     		ldr	r3, [r7, #20]
 4400 022c 002B     		cmp	r3, #0
 4401 022e 0AD0     		beq	.L291
1441:..\src/interruptions.c ****                 pwm_input += (int32)(k_i_c_dl * curr_error_sum[idx]) >> 16;
 4402              		.loc 1 1441 0
 4403 0230 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4404 0232 204A     		ldr	r2, .L363+36
 4405 0234 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4406 0238 7A69     		ldr	r2, [r7, #20]
 4407 023a 02FB03F3 		mul	r3, r2, r3
 4408 023e 1B14     		asrs	r3, r3, #16
 4409 0240 FA6C     		ldr	r2, [r7, #76]
 4410 0242 1344     		add	r3, r3, r2
 4411 0244 FB64     		str	r3, [r7, #76]
 4412              	.L291:
1442:..\src/interruptions.c **** 
1443:..\src/interruptions.c ****             // Derivative
1444:..\src/interruptions.c ****             if (k_d_c_dl != 0)
 4413              		.loc 1 1444 0
 4414 0246 3B69     		ldr	r3, [r7, #16]
 4415 0248 002B     		cmp	r3, #0
 4416 024a 0CD0     		beq	.L292
1445:..\src/interruptions.c ****                 pwm_input += (int32)(k_d_c_dl * (curr_error - prev_curr_err[idx])) >> 16;
 4417              		.loc 1 1445 0
 4418 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4419 024e 1C4A     		ldr	r2, .L363+48
 4420 0250 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4421 0254 BA68     		ldr	r2, [r7, #8]
 4422 0256 D31A     		subs	r3, r2, r3
 4423 0258 3A69     		ldr	r2, [r7, #16]
 4424 025a 02FB03F3 		mul	r3, r2, r3
 4425 025e 1B14     		asrs	r3, r3, #16
 4426 0260 FA6C     		ldr	r2, [r7, #76]
 4427 0262 1344     		add	r3, r3, r2
 4428 0264 FB64     		str	r3, [r7, #76]
 4429              	.L292:
1446:..\src/interruptions.c ****              
1447:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1448:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4430              		.loc 1 1448 0
 4431 0266 7B6C     		ldr	r3, [r7, #68]
 4432 0268 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4433 026c 022B     		cmp	r3, #2
 4434 026e 2BD1     		bne	.L293
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 106


1449:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4435              		.loc 1 1449 0
 4436 0270 FB6C     		ldr	r3, [r7, #76]
 4437 0272 40F6A932 		movw	r2, #2985
 4438 0276 9342     		cmp	r3, r2
 4439 0278 02DD     		ble	.L294
1450:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4440              		.loc 1 1450 0
 4441 027a 40F6A933 		movw	r3, #2985
 4442 027e FB64     		str	r3, [r7, #76]
 4443              	.L294:
1451:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4444              		.loc 1 1451 0
 4445 0280 FB6C     		ldr	r3, [r7, #76]
 4446 0282 104A     		ldr	r2, .L363+52
 4447 0284 9342     		cmp	r3, r2
 4448 0286 2BDA     		bge	.L296
1452:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4449              		.loc 1 1452 0
 4450 0288 0E4B     		ldr	r3, .L363+52
 4451 028a FB64     		str	r3, [r7, #76]
 4452 028c 28E0     		b	.L296
 4453              	.L364:
 4454 028e 00BF     		.align	2
 4455              	.L363:
 4456 0290 00000000 		.word	c_mem
 4457 0294 00000000 		.word	g_ref
 4458 0298 00000000 		.word	g_refOld
 4459 029c 00000000 		.word	g_meas
 4460 02a0 AC000000 		.word	pos_error_sum.10607
 4461 02a4 80F0FA02 		.word	50000000
 4462 02a8 800F05FD 		.word	-50000000
 4463 02ac B4000000 		.word	prev_pos_err.10609
 4464 02b0 BC000000 		.word	motor_dir.10612
 4465 02b4 C0000000 		.word	curr_error_sum.10608
 4466 02b8 A0860100 		.word	100000
 4467 02bc 6079FEFF 		.word	-100000
 4468 02c0 C8000000 		.word	prev_curr_err.10610
 4469 02c4 57F4FFFF 		.word	-2985
 4470              	.L293:
1453:..\src/interruptions.c ****             }
1454:..\src/interruptions.c ****             else {
1455:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
 4471              		.loc 1 1455 0
 4472 02c8 FB6C     		ldr	r3, [r7, #76]
 4473 02ca 642B     		cmp	r3, #100
 4474 02cc 01DD     		ble	.L297
1456:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4475              		.loc 1 1456 0
 4476 02ce 6423     		movs	r3, #100
 4477 02d0 FB64     		str	r3, [r7, #76]
 4478              	.L297:
1457:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4479              		.loc 1 1457 0
 4480 02d2 FB6C     		ldr	r3, [r7, #76]
 4481 02d4 13F1640F 		cmn	r3, #100
 4482 02d8 02DA     		bge	.L296
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 107


1458:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4483              		.loc 1 1458 0
 4484 02da 6FF06303 		mvn	r3, #99
 4485 02de FB64     		str	r3, [r7, #76]
 4486              	.L296:
1459:..\src/interruptions.c ****             }
1460:..\src/interruptions.c **** 
1461:..\src/interruptions.c ****             // Update previous current
1462:..\src/interruptions.c ****             prev_curr_err[idx] = curr_error;
 4487              		.loc 1 1462 0
 4488 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4489 02e2 A049     		ldr	r1, .L365
 4490 02e4 BA68     		ldr	r2, [r7, #8]
 4491 02e6 41F82320 		str	r2, [r1, r3, lsl #2]
1463:..\src/interruptions.c **** 
1464:..\src/interruptions.c ****         break;
 4492              		.loc 1 1464 0
 4493 02ea 54E1     		b	.L273
 4494              	.L274:
1465:..\src/interruptions.c **** 
1466:..\src/interruptions.c ****         // ============================== POSITION CONTROL =====================
1467:..\src/interruptions.c ****         case CONTROL_ANGLE:
1468:..\src/interruptions.c ****             pos_error = g_ref[idx].pos - g_meas[ENC_L].pos[0];
 4495              		.loc 1 1468 0
 4496 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4497 02ee 9E4A     		ldr	r2, .L365+4
 4498 02f0 1B01     		lsls	r3, r3, #4
 4499 02f2 1344     		add	r3, r3, r2
 4500 02f4 1A68     		ldr	r2, [r3]
 4501 02f6 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4502 02fa 9C49     		ldr	r1, .L365+8
 4503 02fc 3420     		movs	r0, #52
 4504 02fe 00FB03F3 		mul	r3, r0, r3
 4505 0302 0B44     		add	r3, r3, r1
 4506 0304 1B68     		ldr	r3, [r3]
 4507 0306 D31A     		subs	r3, r2, r3
 4508 0308 FB60     		str	r3, [r7, #12]
1469:..\src/interruptions.c **** 
1470:..\src/interruptions.c ****             pos_error_sum[idx] += pos_error;
 4509              		.loc 1 1470 0
 4510 030a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4511 030c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4512 030e 9849     		ldr	r1, .L365+12
 4513 0310 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4514 0314 FA68     		ldr	r2, [r7, #12]
 4515 0316 0A44     		add	r2, r2, r1
 4516 0318 9549     		ldr	r1, .L365+12
 4517 031a 41F82320 		str	r2, [r1, r3, lsl #2]
1471:..\src/interruptions.c **** 
1472:..\src/interruptions.c ****             // anti-windup (for integral control)
1473:..\src/interruptions.c ****             if (pos_error_sum[idx] > ANTI_WINDUP)
 4518              		.loc 1 1473 0
 4519 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4520 0320 934A     		ldr	r2, .L365+12
 4521 0322 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4522 0326 B3F57A7F 		cmp	r3, #1000
 4523 032a 06DD     		ble	.L298
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 108


1474:..\src/interruptions.c ****                 pos_error_sum[idx] = ANTI_WINDUP;
 4524              		.loc 1 1474 0
 4525 032c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4526 032e 904A     		ldr	r2, .L365+12
 4527 0330 4FF47A71 		mov	r1, #1000
 4528 0334 42F82310 		str	r1, [r2, r3, lsl #2]
 4529 0338 0BE0     		b	.L299
 4530              	.L298:
1475:..\src/interruptions.c ****             else {
1476:..\src/interruptions.c **** 				if (pos_error_sum[idx] < -ANTI_WINDUP)
 4531              		.loc 1 1476 0
 4532 033a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4533 033c 8C4A     		ldr	r2, .L365+12
 4534 033e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4535 0342 13F57A7F 		cmn	r3, #1000
 4536 0346 04DA     		bge	.L299
1477:..\src/interruptions.c ****                 	pos_error_sum[idx] = -ANTI_WINDUP;
 4537              		.loc 1 1477 0
 4538 0348 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4539 034a 894A     		ldr	r2, .L365+12
 4540 034c 8949     		ldr	r1, .L365+16
 4541 034e 42F82310 		str	r1, [r2, r3, lsl #2]
 4542              	.L299:
1478:..\src/interruptions.c ****             }
1479:..\src/interruptions.c **** 
1480:..\src/interruptions.c ****             // Proportional
1481:..\src/interruptions.c ****             if (k_p != 0) 
 4543              		.loc 1 1481 0
 4544 0352 FB6B     		ldr	r3, [r7, #60]
 4545 0354 002B     		cmp	r3, #0
 4546 0356 05D0     		beq	.L300
1482:..\src/interruptions.c ****                 pwm_input = (int32)(k_p * pos_error) >> 16;
 4547              		.loc 1 1482 0
 4548 0358 FB6B     		ldr	r3, [r7, #60]
 4549 035a FA68     		ldr	r2, [r7, #12]
 4550 035c 02FB03F3 		mul	r3, r2, r3
 4551 0360 1B14     		asrs	r3, r3, #16
 4552 0362 FB64     		str	r3, [r7, #76]
 4553              	.L300:
1483:..\src/interruptions.c ****             
1484:..\src/interruptions.c **** 
1485:..\src/interruptions.c ****             // Integral
1486:..\src/interruptions.c ****             if (k_i != 0) 
 4554              		.loc 1 1486 0
 4555 0364 BB6B     		ldr	r3, [r7, #56]
 4556 0366 002B     		cmp	r3, #0
 4557 0368 0AD0     		beq	.L301
1487:..\src/interruptions.c ****                 pwm_input += (int32)(k_i * pos_error_sum[idx]) >> 16;
 4558              		.loc 1 1487 0
 4559 036a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4560 036c 804A     		ldr	r2, .L365+12
 4561 036e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4562 0372 BA6B     		ldr	r2, [r7, #56]
 4563 0374 02FB03F3 		mul	r3, r2, r3
 4564 0378 1B14     		asrs	r3, r3, #16
 4565 037a FA6C     		ldr	r2, [r7, #76]
 4566 037c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 109


 4567 037e FB64     		str	r3, [r7, #76]
 4568              	.L301:
1488:..\src/interruptions.c ****             
1489:..\src/interruptions.c **** 
1490:..\src/interruptions.c ****             // Derivative
1491:..\src/interruptions.c ****             if (k_d != 0) 
 4569              		.loc 1 1491 0
 4570 0380 7B6B     		ldr	r3, [r7, #52]
 4571 0382 002B     		cmp	r3, #0
 4572 0384 0CD0     		beq	.L302
1492:..\src/interruptions.c ****                 pwm_input += (int32)(k_d * (pos_error - prev_pos_err[idx])) >> 16;
 4573              		.loc 1 1492 0
 4574 0386 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4575 0388 7B4A     		ldr	r2, .L365+20
 4576 038a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4577 038e FA68     		ldr	r2, [r7, #12]
 4578 0390 D31A     		subs	r3, r2, r3
 4579 0392 7A6B     		ldr	r2, [r7, #52]
 4580 0394 02FB03F3 		mul	r3, r2, r3
 4581 0398 1B14     		asrs	r3, r3, #16
 4582 039a FA6C     		ldr	r2, [r7, #76]
 4583 039c 1344     		add	r3, r3, r2
 4584 039e FB64     		str	r3, [r7, #76]
 4585              	.L302:
1493:..\src/interruptions.c ****             
1494:..\src/interruptions.c **** 
1495:..\src/interruptions.c ****             // Update measure
1496:..\src/interruptions.c ****             prev_pos_err[idx] = pos_error;
 4586              		.loc 1 1496 0
 4587 03a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4588 03a2 7549     		ldr	r1, .L365+20
 4589 03a4 FA68     		ldr	r2, [r7, #12]
 4590 03a6 41F82320 		str	r2, [r1, r3, lsl #2]
1497:..\src/interruptions.c **** 
1498:..\src/interruptions.c ****             if (pwm_input > 0)
 4591              		.loc 1 1498 0
 4592 03aa FB6C     		ldr	r3, [r7, #76]
 4593 03ac 002B     		cmp	r3, #0
 4594 03ae 04DD     		ble	.L303
1499:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4595              		.loc 1 1499 0
 4596 03b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4597 03b2 724A     		ldr	r2, .L365+24
 4598 03b4 0121     		movs	r1, #1
 4599 03b6 D154     		strb	r1, [r2, r3]
1500:..\src/interruptions.c ****             else
1501:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
1502:..\src/interruptions.c **** 
1503:..\src/interruptions.c ****         break;
 4600              		.loc 1 1503 0
 4601 03b8 EDE0     		b	.L273
 4602              	.L303:
1501:..\src/interruptions.c **** 
 4603              		.loc 1 1501 0
 4604 03ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4605 03bc 6F4A     		ldr	r2, .L365+24
 4606 03be 0021     		movs	r1, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 110


 4607 03c0 D154     		strb	r1, [r2, r3]
 4608              		.loc 1 1503 0
 4609 03c2 E8E0     		b	.L273
 4610              	.L277:
1504:..\src/interruptions.c **** 
1505:..\src/interruptions.c ****         // ========================== CURRENT CONTROL ==========================
1506:..\src/interruptions.c ****         case CONTROL_CURRENT:
1507:..\src/interruptions.c ****             if(g_ref[idx].onoff && tension_valid) {
 4611              		.loc 1 1507 0
 4612 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4613 03c6 684A     		ldr	r2, .L365+4
 4614 03c8 1B01     		lsls	r3, r3, #4
 4615 03ca 1344     		add	r3, r3, r2
 4616 03cc 0C33     		adds	r3, r3, #12
 4617 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4618 03d0 002B     		cmp	r3, #0
 4619 03d2 00F0C480 		beq	.L360
 4620              		.loc 1 1507 0 is_stmt 0 discriminator 1
 4621 03d6 6A4B     		ldr	r3, .L365+28
 4622 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4623 03da 002B     		cmp	r3, #0
 4624 03dc 00F0BF80 		beq	.L360
1508:..\src/interruptions.c ****                 
1509:..\src/interruptions.c ****                 i_ref = g_ref[idx].curr;
 4625              		.loc 1 1509 0 is_stmt 1
 4626 03e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4627 03e2 614A     		ldr	r2, .L365+4
 4628 03e4 1B01     		lsls	r3, r3, #4
 4629 03e6 1344     		add	r3, r3, r2
 4630 03e8 0433     		adds	r3, r3, #4
 4631 03ea 1B68     		ldr	r3, [r3]
 4632 03ec BB64     		str	r3, [r7, #72]
1510:..\src/interruptions.c **** 
1511:..\src/interruptions.c ****                 if (i_ref > MOT->current_limit) 
 4633              		.loc 1 1511 0
 4634 03ee 7B6C     		ldr	r3, [r7, #68]
 4635 03f0 B3F95C30 		ldrsh	r3, [r3, #92]
 4636 03f4 1A46     		mov	r2, r3
 4637 03f6 BB6C     		ldr	r3, [r7, #72]
 4638 03f8 9A42     		cmp	r2, r3
 4639 03fa 04DA     		bge	.L306
1512:..\src/interruptions.c ****                     i_ref = MOT->current_limit;
 4640              		.loc 1 1512 0
 4641 03fc 7B6C     		ldr	r3, [r7, #68]
 4642 03fe B3F95C30 		ldrsh	r3, [r3, #92]
 4643 0402 BB64     		str	r3, [r7, #72]
 4644 0404 0BE0     		b	.L307
 4645              	.L306:
1513:..\src/interruptions.c ****                 else {
1514:..\src/interruptions.c ****                     if (i_ref < -MOT->current_limit)
 4646              		.loc 1 1514 0
 4647 0406 7B6C     		ldr	r3, [r7, #68]
 4648 0408 B3F95C30 		ldrsh	r3, [r3, #92]
 4649 040c 5A42     		negs	r2, r3
 4650 040e BB6C     		ldr	r3, [r7, #72]
 4651 0410 9A42     		cmp	r2, r3
 4652 0412 04DD     		ble	.L307
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 111


1515:..\src/interruptions.c ****                         i_ref = -MOT->current_limit;
 4653              		.loc 1 1515 0
 4654 0414 7B6C     		ldr	r3, [r7, #68]
 4655 0416 B3F95C30 		ldrsh	r3, [r3, #92]
 4656 041a 5B42     		negs	r3, r3
 4657 041c BB64     		str	r3, [r7, #72]
 4658              	.L307:
1516:..\src/interruptions.c ****                 }
1517:..\src/interruptions.c ****                 
1518:..\src/interruptions.c ****                 // current error
1519:..\src/interruptions.c ****                 curr_error = i_ref - g_meas[ENC_L].curr;            
 4659              		.loc 1 1519 0
 4660 041e 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 4661 0422 524A     		ldr	r2, .L365+8
 4662 0424 3421     		movs	r1, #52
 4663 0426 01FB03F3 		mul	r3, r1, r3
 4664 042a 1344     		add	r3, r3, r2
 4665 042c 0C33     		adds	r3, r3, #12
 4666 042e 1B68     		ldr	r3, [r3]
 4667 0430 BA6C     		ldr	r2, [r7, #72]
 4668 0432 D31A     		subs	r3, r2, r3
 4669 0434 BB60     		str	r3, [r7, #8]
1520:..\src/interruptions.c ****                 curr_error_sum[idx] += curr_error;
 4670              		.loc 1 1520 0
 4671 0436 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4672 0438 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4673 043a 5249     		ldr	r1, .L365+32
 4674 043c 51F82210 		ldr	r1, [r1, r2, lsl #2]
 4675 0440 BA68     		ldr	r2, [r7, #8]
 4676 0442 0A44     		add	r2, r2, r1
 4677 0444 4F49     		ldr	r1, .L365+32
 4678 0446 41F82320 		str	r2, [r1, r3, lsl #2]
1521:..\src/interruptions.c ****                 
1522:..\src/interruptions.c ****                 if (curr_error_sum[idx] > CURR_INTEGRAL_SAT_LIMIT)
 4679              		.loc 1 1522 0
 4680 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4681 044c 4D4A     		ldr	r2, .L365+32
 4682 044e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4683 0452 4D4A     		ldr	r2, .L365+36
 4684 0454 9342     		cmp	r3, r2
 4685 0456 05DD     		ble	.L308
1523:..\src/interruptions.c ****                     curr_error_sum[idx] = CURR_INTEGRAL_SAT_LIMIT;
 4686              		.loc 1 1523 0
 4687 0458 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4688 045a 4A4A     		ldr	r2, .L365+32
 4689 045c 4A49     		ldr	r1, .L365+36
 4690 045e 42F82310 		str	r1, [r2, r3, lsl #2]
 4691 0462 0BE0     		b	.L309
 4692              	.L308:
1524:..\src/interruptions.c ****                 else {
1525:..\src/interruptions.c ****                     if (curr_error_sum[idx] < -CURR_INTEGRAL_SAT_LIMIT) 
 4693              		.loc 1 1525 0
 4694 0464 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4695 0466 474A     		ldr	r2, .L365+32
 4696 0468 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4697 046c 474A     		ldr	r2, .L365+40
 4698 046e 9342     		cmp	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 112


 4699 0470 04DA     		bge	.L309
1526:..\src/interruptions.c ****                         curr_error_sum[idx] = -CURR_INTEGRAL_SAT_LIMIT;
 4700              		.loc 1 1526 0
 4701 0472 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4702 0474 434A     		ldr	r2, .L365+32
 4703 0476 4549     		ldr	r1, .L365+40
 4704 0478 42F82310 		str	r1, [r2, r3, lsl #2]
 4705              	.L309:
1527:..\src/interruptions.c ****                 }
1528:..\src/interruptions.c **** 
1529:..\src/interruptions.c ****                 pwm_input = 0;
 4706              		.loc 1 1529 0
 4707 047c 0023     		movs	r3, #0
 4708 047e FB64     		str	r3, [r7, #76]
1530:..\src/interruptions.c **** 
1531:..\src/interruptions.c ****                 // Proportional
1532:..\src/interruptions.c ****                 if (k_p_c != 0)
 4709              		.loc 1 1532 0
 4710 0480 3B6B     		ldr	r3, [r7, #48]
 4711 0482 002B     		cmp	r3, #0
 4712 0484 07D0     		beq	.L310
1533:..\src/interruptions.c ****                     pwm_input += (int32)(k_p_c * curr_error) >> 16;
 4713              		.loc 1 1533 0
 4714 0486 3B6B     		ldr	r3, [r7, #48]
 4715 0488 BA68     		ldr	r2, [r7, #8]
 4716 048a 02FB03F3 		mul	r3, r2, r3
 4717 048e 1B14     		asrs	r3, r3, #16
 4718 0490 FA6C     		ldr	r2, [r7, #76]
 4719 0492 1344     		add	r3, r3, r2
 4720 0494 FB64     		str	r3, [r7, #76]
 4721              	.L310:
1534:..\src/interruptions.c **** 
1535:..\src/interruptions.c ****                 // Integral
1536:..\src/interruptions.c ****                 if (k_i_c != 0)
 4722              		.loc 1 1536 0
 4723 0496 FB6A     		ldr	r3, [r7, #44]
 4724 0498 002B     		cmp	r3, #0
 4725 049a 0AD0     		beq	.L311
1537:..\src/interruptions.c ****                     pwm_input += (int32)(k_i_c * curr_error_sum[idx]) >> 16;
 4726              		.loc 1 1537 0
 4727 049c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4728 049e 394A     		ldr	r2, .L365+32
 4729 04a0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4730 04a4 FA6A     		ldr	r2, [r7, #44]
 4731 04a6 02FB03F3 		mul	r3, r2, r3
 4732 04aa 1B14     		asrs	r3, r3, #16
 4733 04ac FA6C     		ldr	r2, [r7, #76]
 4734 04ae 1344     		add	r3, r3, r2
 4735 04b0 FB64     		str	r3, [r7, #76]
 4736              	.L311:
1538:..\src/interruptions.c **** 
1539:..\src/interruptions.c ****                 // Derivative
1540:..\src/interruptions.c ****                 if (k_d_c != 0)
 4737              		.loc 1 1540 0
 4738 04b2 BB6A     		ldr	r3, [r7, #40]
 4739 04b4 002B     		cmp	r3, #0
 4740 04b6 0CD0     		beq	.L312
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 113


1541:..\src/interruptions.c ****                     pwm_input += (int32)(k_d_c * (curr_error - prev_curr_err[idx])) >> 16;
 4741              		.loc 1 1541 0
 4742 04b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4743 04ba 2A4A     		ldr	r2, .L365
 4744 04bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4745 04c0 BA68     		ldr	r2, [r7, #8]
 4746 04c2 D31A     		subs	r3, r2, r3
 4747 04c4 BA6A     		ldr	r2, [r7, #40]
 4748 04c6 02FB03F3 		mul	r3, r2, r3
 4749 04ca 1B14     		asrs	r3, r3, #16
 4750 04cc FA6C     		ldr	r2, [r7, #76]
 4751 04ce 1344     		add	r3, r3, r2
 4752 04d0 FB64     		str	r3, [r7, #76]
 4753              	.L312:
1542:..\src/interruptions.c ****                 
1543:..\src/interruptions.c ****                 prev_curr_err[idx] = curr_error;
 4754              		.loc 1 1543 0
 4755 04d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4756 04d4 2349     		ldr	r1, .L365
 4757 04d6 BA68     		ldr	r2, [r7, #8]
 4758 04d8 41F82320 		str	r2, [r1, r3, lsl #2]
1544:..\src/interruptions.c ****                 
1545:..\src/interruptions.c ****                 if (pwm_input >= 0) 
 4759              		.loc 1 1545 0
 4760 04dc FB6C     		ldr	r3, [r7, #76]
 4761 04de 002B     		cmp	r3, #0
 4762 04e0 04DB     		blt	.L313
1546:..\src/interruptions.c ****                     motor_dir[idx] = TRUE;
 4763              		.loc 1 1546 0
 4764 04e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4765 04e4 254A     		ldr	r2, .L365+24
 4766 04e6 0121     		movs	r1, #1
 4767 04e8 D154     		strb	r1, [r2, r3]
1547:..\src/interruptions.c ****                 else
1548:..\src/interruptions.c ****                     motor_dir[idx] = FALSE;
1549:..\src/interruptions.c ****             }
1550:..\src/interruptions.c ****         break;
 4768              		.loc 1 1550 0
 4769 04ea 38E0     		b	.L360
 4770              	.L313:
1548:..\src/interruptions.c ****             }
 4771              		.loc 1 1548 0
 4772 04ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4773 04ee 234A     		ldr	r2, .L365+24
 4774 04f0 0021     		movs	r1, #0
 4775 04f2 D154     		strb	r1, [r2, r3]
 4776              		.loc 1 1550 0
 4777 04f4 33E0     		b	.L360
 4778              	.L276:
1551:..\src/interruptions.c ****         
1552:..\src/interruptions.c ****         // ================= DIRECT PWM CONTROL ================================
1553:..\src/interruptions.c ****         case CONTROL_PWM:
1554:..\src/interruptions.c **** 
1555:..\src/interruptions.c ****             pwm_input = g_ref[idx].pwm;
 4779              		.loc 1 1555 0
 4780 04f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4781 04f8 1B4A     		ldr	r2, .L365+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 114


 4782 04fa 1B01     		lsls	r3, r3, #4
 4783 04fc 1344     		add	r3, r3, r2
 4784 04fe 0833     		adds	r3, r3, #8
 4785 0500 1B68     		ldr	r3, [r3]
 4786 0502 FB64     		str	r3, [r7, #76]
1556:..\src/interruptions.c **** 
1557:..\src/interruptions.c ****             if (pwm_input > 0) 
 4787              		.loc 1 1557 0
 4788 0504 FB6C     		ldr	r3, [r7, #76]
 4789 0506 002B     		cmp	r3, #0
 4790 0508 04DD     		ble	.L314
1558:..\src/interruptions.c ****                 motor_dir[idx] = TRUE;
 4791              		.loc 1 1558 0
 4792 050a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4793 050c 1B4A     		ldr	r2, .L365+24
 4794 050e 0121     		movs	r1, #1
 4795 0510 D154     		strb	r1, [r2, r3]
 4796 0512 03E0     		b	.L315
 4797              	.L314:
1559:..\src/interruptions.c ****             else 
1560:..\src/interruptions.c ****                 motor_dir[idx] = FALSE;
 4798              		.loc 1 1560 0
 4799 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4800 0516 194A     		ldr	r2, .L365+24
 4801 0518 0021     		movs	r1, #0
 4802 051a D154     		strb	r1, [r2, r3]
 4803              	.L315:
1561:..\src/interruptions.c ****             
1562:..\src/interruptions.c ****           
1563:..\src/interruptions.c ****             // Limit PWM in range (specific per motor driver)
1564:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4804              		.loc 1 1564 0
 4805 051c 7B6C     		ldr	r3, [r7, #68]
 4806 051e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4807 0522 022B     		cmp	r3, #2
 4808 0524 0ED1     		bne	.L316
1565:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_ESC) 
 4809              		.loc 1 1565 0
 4810 0526 FB6C     		ldr	r3, [r7, #76]
 4811 0528 40F6A932 		movw	r2, #2985
 4812 052c 9342     		cmp	r3, r2
 4813 052e 02DD     		ble	.L317
1566:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_ESC;
 4814              		.loc 1 1566 0
 4815 0530 40F6A933 		movw	r3, #2985
 4816 0534 FB64     		str	r3, [r7, #76]
 4817              	.L317:
1567:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4818              		.loc 1 1567 0
 4819 0536 FB6C     		ldr	r3, [r7, #76]
 4820 0538 154A     		ldr	r2, .L365+44
 4821 053a 9342     		cmp	r3, r2
 4822 053c 2ADA     		bge	.L361
1568:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_ESC;
 4823              		.loc 1 1568 0
 4824 053e 144B     		ldr	r3, .L365+44
 4825 0540 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 115


1569:..\src/interruptions.c ****             }
1570:..\src/interruptions.c ****             else {
1571:..\src/interruptions.c ****                 if(pwm_input > PWM_MAX_VALUE_DC) 
1572:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
1573:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
1574:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
1575:..\src/interruptions.c ****             }
1576:..\src/interruptions.c **** 
1577:..\src/interruptions.c ****         break;
 4826              		.loc 1 1577 0
 4827 0542 27E0     		b	.L361
 4828              	.L316:
1571:..\src/interruptions.c ****                     pwm_input =  PWM_MAX_VALUE_DC;
 4829              		.loc 1 1571 0
 4830 0544 FB6C     		ldr	r3, [r7, #76]
 4831 0546 642B     		cmp	r3, #100
 4832 0548 01DD     		ble	.L320
1572:..\src/interruptions.c ****                 if(pwm_input < -PWM_MAX_VALUE_DC) 
 4833              		.loc 1 1572 0
 4834 054a 6423     		movs	r3, #100
 4835 054c FB64     		str	r3, [r7, #76]
 4836              	.L320:
1573:..\src/interruptions.c ****                     pwm_input = -PWM_MAX_VALUE_DC;
 4837              		.loc 1 1573 0
 4838 054e FB6C     		ldr	r3, [r7, #76]
 4839 0550 13F1640F 		cmn	r3, #100
 4840 0554 1EDA     		bge	.L361
1574:..\src/interruptions.c ****             }
 4841              		.loc 1 1574 0
 4842 0556 6FF06303 		mvn	r3, #99
 4843 055a FB64     		str	r3, [r7, #76]
 4844              		.loc 1 1577 0
 4845 055c 1AE0     		b	.L361
 4846              	.L360:
1550:..\src/interruptions.c ****         
 4847              		.loc 1 1550 0
 4848 055e 00BF     		nop
 4849 0560 19E0     		b	.L273
 4850              	.L366:
 4851 0562 00BF     		.align	2
 4852              	.L365:
 4853 0564 C8000000 		.word	prev_curr_err.10610
 4854 0568 00000000 		.word	g_ref
 4855 056c 00000000 		.word	g_meas
 4856 0570 AC000000 		.word	pos_error_sum.10607
 4857 0574 18FCFFFF 		.word	-1000
 4858 0578 B4000000 		.word	prev_pos_err.10609
 4859 057c BC000000 		.word	motor_dir.10612
 4860 0580 00000000 		.word	tension_valid
 4861 0584 C0000000 		.word	curr_error_sum.10608
 4862 0588 A0860100 		.word	100000
 4863 058c 6079FEFF 		.word	-100000
 4864 0590 57F4FFFF 		.word	-2985
 4865              	.L361:
 4866              		.loc 1 1577 0
 4867 0594 00BF     		nop
 4868              	.L273:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 116


1578:..\src/interruptions.c ****             
1579:..\src/interruptions.c ****     }
1580:..\src/interruptions.c **** 
1581:..\src/interruptions.c ****     ////////////////////////////////////////////////////////////////////////////
1582:..\src/interruptions.c ****      ////////////////////////////////////////////////////////////////////////////
1583:..\src/interruptions.c **** 
1584:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1585:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4869              		.loc 1 1585 0
 4870 0596 7B6C     		ldr	r3, [r7, #68]
 4871 0598 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4872 059c 022B     		cmp	r3, #2
 4873 059e 23D1     		bne	.L321
1586:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4874              		.loc 1 1586 0
 4875 05a0 FB6C     		ldr	r3, [r7, #76]
 4876 05a2 40F6A932 		movw	r2, #2985
 4877 05a6 9342     		cmp	r3, r2
 4878 05a8 02DD     		ble	.L322
1587:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4879              		.loc 1 1587 0
 4880 05aa 40F6A933 		movw	r3, #2985
 4881 05ae FB64     		str	r3, [r7, #76]
 4882              	.L322:
1588:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 4883              		.loc 1 1588 0
 4884 05b0 FB6C     		ldr	r3, [r7, #76]
 4885 05b2 AF4A     		ldr	r2, .L367
 4886 05b4 9342     		cmp	r3, r2
 4887 05b6 01DA     		bge	.L323
1589:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 4888              		.loc 1 1589 0
 4889 05b8 AD4B     		ldr	r3, .L367
 4890 05ba FB64     		str	r3, [r7, #76]
 4891              	.L323:
1590:..\src/interruptions.c ****         
1591:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4892              		.loc 1 1591 0
 4893 05bc 7B6C     		ldr	r3, [r7, #68]
 4894 05be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4895 05c2 012B     		cmp	r3, #1
 4896 05c4 31D0     		beq	.L325
1592:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_ESC) * dev_pwm_limit[idx]) >> 10;
 4897              		.loc 1 1592 0
 4898 05c6 FB6C     		ldr	r3, [r7, #76]
 4899 05c8 9B02     		lsls	r3, r3, #10
 4900 05ca AA4A     		ldr	r2, .L367+4
 4901 05cc 82FB0312 		smull	r1, r2, r2, r3
 4902 05d0 9211     		asrs	r2, r2, #6
 4903 05d2 DB17     		asrs	r3, r3, #31
 4904 05d4 D31A     		subs	r3, r2, r3
 4905 05d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4906 05d8 A749     		ldr	r1, .L367+8
 4907 05da 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4908 05de 02FB03F3 		mul	r3, r2, r3
 4909 05e2 9B12     		asrs	r3, r3, #10
 4910 05e4 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 117


 4911 05e6 20E0     		b	.L325
 4912              	.L321:
1593:..\src/interruptions.c ****     }
1594:..\src/interruptions.c ****     else {
1595:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 4913              		.loc 1 1595 0
 4914 05e8 FB6C     		ldr	r3, [r7, #76]
 4915 05ea 642B     		cmp	r3, #100
 4916 05ec 01DD     		ble	.L326
1596:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 4917              		.loc 1 1596 0
 4918 05ee 6423     		movs	r3, #100
 4919 05f0 FB64     		str	r3, [r7, #76]
 4920              	.L326:
1597:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 4921              		.loc 1 1597 0
 4922 05f2 FB6C     		ldr	r3, [r7, #76]
 4923 05f4 13F1640F 		cmn	r3, #100
 4924 05f8 02DA     		bge	.L327
1598:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 4925              		.loc 1 1598 0
 4926 05fa 6FF06303 		mvn	r3, #99
 4927 05fe FB64     		str	r3, [r7, #76]
 4928              	.L327:
1599:..\src/interruptions.c ****         
1600:..\src/interruptions.c ****         if (MOT->control_mode != CONTROL_PWM) 
 4929              		.loc 1 1600 0
 4930 0600 7B6C     		ldr	r3, [r7, #68]
 4931 0602 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4932 0606 012B     		cmp	r3, #1
 4933 0608 0FD0     		beq	.L325
1601:..\src/interruptions.c ****             pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE_DC) * dev_pwm_limit[idx]) >> 10;
 4934              		.loc 1 1601 0
 4935 060a FB6C     		ldr	r3, [r7, #76]
 4936 060c 9B02     		lsls	r3, r3, #10
 4937 060e 9B4A     		ldr	r2, .L367+12
 4938 0610 82FB0312 		smull	r1, r2, r2, r3
 4939 0614 5211     		asrs	r2, r2, #5
 4940 0616 DB17     		asrs	r3, r3, #31
 4941 0618 D31A     		subs	r3, r2, r3
 4942 061a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 4943 061c 9649     		ldr	r1, .L367+8
 4944 061e 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 4945 0622 02FB03F3 		mul	r3, r2, r3
 4946 0626 9B12     		asrs	r3, r3, #10
 4947 0628 FB64     		str	r3, [r7, #76]
 4948              	.L325:
1602:..\src/interruptions.c ****     }
1603:..\src/interruptions.c **** 
1604:..\src/interruptions.c ****     //// RATE LIMITER ////
1605:..\src/interruptions.c ****     if((pwm_input-prev_pwm[idx]) > MOT->pwm_rate_limiter){
 4949              		.loc 1 1605 0
 4950 062a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4951 062c 944A     		ldr	r2, .L367+16
 4952 062e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4953 0632 FA6C     		ldr	r2, [r7, #76]
 4954 0634 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 118


 4955 0636 7A6C     		ldr	r2, [r7, #68]
 4956 0638 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4957 063c 9342     		cmp	r3, r2
 4958 063e 09DD     		ble	.L328
1606:..\src/interruptions.c ****         pwm_input =  prev_pwm[idx] + MOT->pwm_rate_limiter;
 4959              		.loc 1 1606 0
 4960 0640 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4961 0642 8F4A     		ldr	r2, .L367+16
 4962 0644 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4963 0648 7A6C     		ldr	r2, [r7, #68]
 4964 064a 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4965 064e 1344     		add	r3, r3, r2
 4966 0650 FB64     		str	r3, [r7, #76]
 4967 0652 14E0     		b	.L329
 4968              	.L328:
1607:..\src/interruptions.c ****     }
1608:..\src/interruptions.c ****     else {
1609:..\src/interruptions.c ****         if((pwm_input-prev_pwm[idx]) < -MOT->pwm_rate_limiter)
 4969              		.loc 1 1609 0
 4970 0654 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4971 0656 8A4A     		ldr	r2, .L367+16
 4972 0658 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4973 065c FA6C     		ldr	r2, [r7, #76]
 4974 065e D21A     		subs	r2, r2, r3
 4975 0660 7B6C     		ldr	r3, [r7, #68]
 4976 0662 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4977 0666 5B42     		negs	r3, r3
 4978 0668 9A42     		cmp	r2, r3
 4979 066a 08DA     		bge	.L329
1610:..\src/interruptions.c ****             pwm_input =  prev_pwm[idx] - MOT->pwm_rate_limiter;
 4980              		.loc 1 1610 0
 4981 066c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4982 066e 844A     		ldr	r2, .L367+16
 4983 0670 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4984 0674 7A6C     		ldr	r2, [r7, #68]
 4985 0676 92F86120 		ldrb	r2, [r2, #97]	@ zero_extendqisi2
 4986 067a 9B1A     		subs	r3, r3, r2
 4987 067c FB64     		str	r3, [r7, #76]
 4988              	.L329:
1611:..\src/interruptions.c ****     }
1612:..\src/interruptions.c ****    
1613:..\src/interruptions.c ****     // Limit PWM in range (specific per motor driver)
1614:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {
 4989              		.loc 1 1614 0
 4990 067e 7B6C     		ldr	r3, [r7, #68]
 4991 0680 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4992 0684 022B     		cmp	r3, #2
 4993 0686 0ED1     		bne	.L330
1615:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_ESC) 
 4994              		.loc 1 1615 0
 4995 0688 FB6C     		ldr	r3, [r7, #76]
 4996 068a 40F6A932 		movw	r2, #2985
 4997 068e 9342     		cmp	r3, r2
 4998 0690 02DD     		ble	.L331
1616:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_ESC;
 4999              		.loc 1 1616 0
 5000 0692 40F6A933 		movw	r3, #2985
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 119


 5001 0696 FB64     		str	r3, [r7, #76]
 5002              	.L331:
1617:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_ESC) 
 5003              		.loc 1 1617 0
 5004 0698 FB6C     		ldr	r3, [r7, #76]
 5005 069a 754A     		ldr	r2, .L367
 5006 069c 9342     		cmp	r3, r2
 5007 069e 0EDA     		bge	.L333
1618:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_ESC;
 5008              		.loc 1 1618 0
 5009 06a0 734B     		ldr	r3, .L367
 5010 06a2 FB64     		str	r3, [r7, #76]
 5011 06a4 0BE0     		b	.L333
 5012              	.L330:
1619:..\src/interruptions.c ****     }
1620:..\src/interruptions.c ****     else {
1621:..\src/interruptions.c ****         if(pwm_input > PWM_MAX_VALUE_DC) 
 5013              		.loc 1 1621 0
 5014 06a6 FB6C     		ldr	r3, [r7, #76]
 5015 06a8 642B     		cmp	r3, #100
 5016 06aa 01DD     		ble	.L334
1622:..\src/interruptions.c ****             pwm_input =  PWM_MAX_VALUE_DC;
 5017              		.loc 1 1622 0
 5018 06ac 6423     		movs	r3, #100
 5019 06ae FB64     		str	r3, [r7, #76]
 5020              	.L334:
1623:..\src/interruptions.c ****         if(pwm_input < -PWM_MAX_VALUE_DC) 
 5021              		.loc 1 1623 0
 5022 06b0 FB6C     		ldr	r3, [r7, #76]
 5023 06b2 13F1640F 		cmn	r3, #100
 5024 06b6 02DA     		bge	.L333
1624:..\src/interruptions.c ****             pwm_input = -PWM_MAX_VALUE_DC;
 5025              		.loc 1 1624 0
 5026 06b8 6FF06303 		mvn	r3, #99
 5027 06bc FB64     		str	r3, [r7, #76]
 5028              	.L333:
1625:..\src/interruptions.c ****     }
1626:..\src/interruptions.c **** 
1627:..\src/interruptions.c ****     prev_pwm[idx] = pwm_input;
 5029              		.loc 1 1627 0
 5030 06be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5031 06c0 6F49     		ldr	r1, .L367+16
 5032 06c2 FA6C     		ldr	r2, [r7, #76]
 5033 06c4 41F82320 		str	r2, [r1, r3, lsl #2]
1628:..\src/interruptions.c ****            
1629:..\src/interruptions.c ****     pwm_sign[idx] = SIGN(pwm_input);   
 5034              		.loc 1 1629 0
 5035 06c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5036 06ca FA6C     		ldr	r2, [r7, #76]
 5037 06cc 002A     		cmp	r2, #0
 5038 06ce 01DB     		blt	.L335
 5039              		.loc 1 1629 0 is_stmt 0 discriminator 1
 5040 06d0 0121     		movs	r1, #1
 5041 06d2 01E0     		b	.L336
 5042              	.L335:
 5043              		.loc 1 1629 0 discriminator 2
 5044 06d4 4FF0FF31 		mov	r1, #-1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 120


 5045              	.L336:
 5046              		.loc 1 1629 0 discriminator 4
 5047 06d8 6A4A     		ldr	r2, .L367+20
 5048 06da D154     		strb	r1, [r2, r3]
1630:..\src/interruptions.c ****     
1631:..\src/interruptions.c ****     if (MOT->not_revers_motor_flag == TRUE) {
 5049              		.loc 1 1631 0 is_stmt 1 discriminator 4
 5050 06dc 7B6C     		ldr	r3, [r7, #68]
 5051 06de 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 5052 06e2 012B     		cmp	r3, #1
 5053 06e4 40F09A80 		bne	.L337
1632:..\src/interruptions.c ****         // Block motor with pwm = 0 to exploit not reversible motor behaviour 
1633:..\src/interruptions.c ****     	if ( MOT->control_mode != CONTROL_PWM && ((g_measOld[ENC_L].pos[0]-g_meas[ENC_L].pos[0]) < 50 
 5054              		.loc 1 1633 0
 5055 06e8 7B6C     		ldr	r3, [r7, #68]
 5056 06ea 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 5057 06ee 012B     		cmp	r3, #1
 5058 06f0 00F08F80 		beq	.L338
 5059              		.loc 1 1633 0 is_stmt 0 discriminator 1
 5060 06f4 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5061 06f8 634A     		ldr	r2, .L367+24
 5062 06fa 3421     		movs	r1, #52
 5063 06fc 01FB03F3 		mul	r3, r1, r3
 5064 0700 1344     		add	r3, r3, r2
 5065 0702 1A68     		ldr	r2, [r3]
 5066 0704 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5067 0708 6049     		ldr	r1, .L367+28
 5068 070a 3420     		movs	r0, #52
 5069 070c 00FB03F3 		mul	r3, r0, r3
 5070 0710 0B44     		add	r3, r3, r1
 5071 0712 1B68     		ldr	r3, [r3]
 5072 0714 D31A     		subs	r3, r2, r3
 5073 0716 312B     		cmp	r3, #49
 5074 0718 7BDC     		bgt	.L338
1634:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[0]-g_meas[ENC_L].pos[0]) > -50) && 
 5075              		.loc 1 1634 0 is_stmt 1 discriminator 2
 5076 071a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5077 071e 5A4A     		ldr	r2, .L367+24
 5078 0720 3421     		movs	r1, #52
 5079 0722 01FB03F3 		mul	r3, r1, r3
 5080 0726 1344     		add	r3, r3, r2
 5081 0728 1A68     		ldr	r2, [r3]
 5082 072a 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5083 072e 5749     		ldr	r1, .L367+28
 5084 0730 3420     		movs	r0, #52
 5085 0732 00FB03F3 		mul	r3, r0, r3
 5086 0736 0B44     		add	r3, r3, r1
 5087 0738 1B68     		ldr	r3, [r3]
 5088 073a D31A     		subs	r3, r2, r3
1633:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[0]-g_meas[ENC_L].pos[0]) > -50) && 
 5089              		.loc 1 1633 0 discriminator 2
 5090 073c 13F1310F 		cmn	r3, #49
 5091 0740 67DB     		blt	.L338
1635:..\src/interruptions.c ****             ((g_refOld[idx].pos - g_ref[idx].pos) < 100 && (g_refOld[idx].pos - g_ref[idx].pos) > -
 5092              		.loc 1 1635 0
 5093 0742 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5094 0744 524A     		ldr	r2, .L367+32
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 121


 5095 0746 1B01     		lsls	r3, r3, #4
 5096 0748 1344     		add	r3, r3, r2
 5097 074a 1A68     		ldr	r2, [r3]
 5098 074c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5099 074e 5149     		ldr	r1, .L367+36
 5100 0750 1B01     		lsls	r3, r3, #4
 5101 0752 0B44     		add	r3, r3, r1
 5102 0754 1B68     		ldr	r3, [r3]
 5103 0756 D31A     		subs	r3, r2, r3
1634:..\src/interruptions.c ****             (g_measOld[ENC_L].pos[0]-g_meas[ENC_L].pos[0]) > -50) && 
 5104              		.loc 1 1634 0
 5105 0758 632B     		cmp	r3, #99
 5106 075a 5ADC     		bgt	.L338
 5107              		.loc 1 1635 0
 5108 075c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5109 075e 4C4A     		ldr	r2, .L367+32
 5110 0760 1B01     		lsls	r3, r3, #4
 5111 0762 1344     		add	r3, r3, r2
 5112 0764 1A68     		ldr	r2, [r3]
 5113 0766 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5114 0768 4A49     		ldr	r1, .L367+36
 5115 076a 1B01     		lsls	r3, r3, #4
 5116 076c 0B44     		add	r3, r3, r1
 5117 076e 1B68     		ldr	r3, [r3]
 5118 0770 D31A     		subs	r3, r2, r3
 5119 0772 13F1630F 		cmn	r3, #99
 5120 0776 4CDB     		blt	.L338
1636:..\src/interruptions.c ****             position_counter[idx]++;
 5121              		.loc 1 1636 0
 5122 0778 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5123 077a 474A     		ldr	r2, .L367+40
 5124 077c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 5125 0780 0132     		adds	r2, r2, #1
 5126 0782 4549     		ldr	r1, .L367+40
 5127 0784 41F82320 		str	r2, [r1, r3, lsl #2]
1637:..\src/interruptions.c ****             
1638:..\src/interruptions.c ****             if (position_counter[idx] >= 250) { 
 5128              		.loc 1 1638 0
 5129 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5130 078a 434A     		ldr	r2, .L367+40
 5131 078c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5132 0790 F92B     		cmp	r3, #249
 5133 0792 43D9     		bls	.L337
1639:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag[idx] == FALSE) {
 5134              		.loc 1 1639 0
 5135 0794 7B6C     		ldr	r3, [r7, #68]
 5136 0796 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 5137 079a 002B     		cmp	r3, #0
 5138 079c 11D1     		bne	.L340
 5139              		.loc 1 1639 0 is_stmt 0 discriminator 1
 5140 079e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5141 07a0 3E4A     		ldr	r2, .L367+44
 5142 07a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5143 07a4 002B     		cmp	r3, #0
 5144 07a6 0CD1     		bne	.L340
1640:..\src/interruptions.c ****                     g_refNew[idx].pos = g_meas[ENC_L].pos[0];       // Needed only when USB input m
 5145              		.loc 1 1640 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 122


 5146 07a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5147 07aa 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5148 07ae 3749     		ldr	r1, .L367+28
 5149 07b0 3420     		movs	r0, #52
 5150 07b2 00FB02F2 		mul	r2, r0, r2
 5151 07b6 0A44     		add	r2, r2, r1
 5152 07b8 1268     		ldr	r2, [r2]
 5153 07ba 3949     		ldr	r1, .L367+48
 5154 07bc 1B01     		lsls	r3, r3, #4
 5155 07be 0B44     		add	r3, r3, r1
 5156 07c0 1A60     		str	r2, [r3]
 5157              	.L340:
1641:..\src/interruptions.c ****                 }
1642:..\src/interruptions.c ****                 g_ref[idx].pos = g_meas[ENC_L].pos[0];
 5158              		.loc 1 1642 0
 5159 07c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5160 07c4 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5161 07c8 3049     		ldr	r1, .L367+28
 5162 07ca 3420     		movs	r0, #52
 5163 07cc 00FB02F2 		mul	r2, r0, r2
 5164 07d0 0A44     		add	r2, r2, r1
 5165 07d2 1268     		ldr	r2, [r2]
 5166 07d4 2F49     		ldr	r1, .L367+36
 5167 07d6 1B01     		lsls	r3, r3, #4
 5168 07d8 0B44     		add	r3, r3, r1
 5169 07da 1A60     		str	r2, [r3]
1643:..\src/interruptions.c ****                 
1644:..\src/interruptions.c ****                 if (position_counter[idx] == 250){
 5170              		.loc 1 1644 0
 5171 07dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5172 07de 2E4A     		ldr	r2, .L367+40
 5173 07e0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5174 07e4 FA2B     		cmp	r3, #250
 5175 07e6 11D1     		bne	.L341
1645:..\src/interruptions.c ****                     // To do only once
1646:..\src/interruptions.c ****                     g_meas[ENC_L].hold_curr = g_meas[ENC_L].curr;
 5176              		.loc 1 1646 0
 5177 07e8 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 5178 07ec 97F84320 		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 5179 07f0 2649     		ldr	r1, .L367+28
 5180 07f2 3420     		movs	r0, #52
 5181 07f4 00FB02F2 		mul	r2, r0, r2
 5182 07f8 0A44     		add	r2, r2, r1
 5183 07fa 0C32     		adds	r2, r2, #12
 5184 07fc 1268     		ldr	r2, [r2]
 5185 07fe 2349     		ldr	r1, .L367+28
 5186 0800 3420     		movs	r0, #52
 5187 0802 00FB03F3 		mul	r3, r0, r3
 5188 0806 0B44     		add	r3, r3, r1
 5189 0808 1433     		adds	r3, r3, #20
 5190 080a 1A60     		str	r2, [r3]
 5191              	.L341:
1647:..\src/interruptions.c ****                 }
1648:..\src/interruptions.c ****                 pwm_input = 0;            
 5192              		.loc 1 1648 0
 5193 080c 0023     		movs	r3, #0
 5194 080e FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 123


1638:..\src/interruptions.c ****                 if (MOT->input_mode == INPUT_MODE_EXTERNAL && change_ext_ref_flag[idx] == FALSE) {
 5195              		.loc 1 1638 0
 5196 0810 04E0     		b	.L337
 5197              	.L338:
1649:..\src/interruptions.c ****             }
1650:..\src/interruptions.c ****         }
1651:..\src/interruptions.c ****         else {
1652:..\src/interruptions.c ****             position_counter[idx] = 0;
 5198              		.loc 1 1652 0
 5199 0812 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5200 0814 204A     		ldr	r2, .L367+40
 5201 0816 0021     		movs	r1, #0
 5202 0818 42F82310 		str	r1, [r2, r3, lsl #2]
 5203              	.L337:
1653:..\src/interruptions.c ****         }
1654:..\src/interruptions.c ****     }
1655:..\src/interruptions.c ****     
1656:..\src/interruptions.c ****     
1657:..\src/interruptions.c ****     // Always limit PWM if using Brushless motors and ESC module
1658:..\src/interruptions.c ****     if (MOT->motor_driver_type == DRIVER_BRUSHLESS) {           
 5204              		.loc 1 1658 0
 5205 081c 7B6C     		ldr	r3, [r7, #68]
 5206 081e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5207 0822 022B     		cmp	r3, #2
 5208 0824 1ED1     		bne	.L342
1659:..\src/interruptions.c ****         // Allowed in range [-2700,-200] and [200,2700] where 200 -> 0 rpm, 2700 -> MAX no load spe
1660:..\src/interruptions.c ****         if (abs(pwm_input) > 2700){
 5209              		.loc 1 1660 0
 5210 0826 FB6C     		ldr	r3, [r7, #76]
 5211 0828 002B     		cmp	r3, #0
 5212 082a B8BF     		it	lt
 5213 082c 5B42     		rsblt	r3, r3, #0
 5214 082e 40F68C22 		movw	r2, #2700
 5215 0832 9342     		cmp	r3, r2
 5216 0834 07DD     		ble	.L343
1661:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 2700;
 5217              		.loc 1 1661 0
 5218 0836 FB6C     		ldr	r3, [r7, #76]
 5219 0838 002B     		cmp	r3, #0
 5220 083a 02DB     		blt	.L344
 5221              		.loc 1 1661 0 is_stmt 0 discriminator 1
 5222 083c 40F68C23 		movw	r3, #2700
 5223 0840 00E0     		b	.L345
 5224              	.L344:
 5225              		.loc 1 1661 0 discriminator 2
 5226 0842 184B     		ldr	r3, .L367+52
 5227              	.L345:
 5228              		.loc 1 1661 0 discriminator 4
 5229 0844 FB64     		str	r3, [r7, #76]
 5230              	.L343:
1662:..\src/interruptions.c ****         }
1663:..\src/interruptions.c ****         
1664:..\src/interruptions.c ****         if (abs(pwm_input) < 200){
 5231              		.loc 1 1664 0 is_stmt 1
 5232 0846 FB6C     		ldr	r3, [r7, #76]
 5233 0848 13F1C70F 		cmn	r3, #199
 5234 084c 0ADB     		blt	.L342
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 124


 5235              		.loc 1 1664 0 is_stmt 0 discriminator 1
 5236 084e FB6C     		ldr	r3, [r7, #76]
 5237 0850 C72B     		cmp	r3, #199
 5238 0852 07DC     		bgt	.L342
1665:..\src/interruptions.c ****             pwm_input = SIGN(pwm_input) * 200;
 5239              		.loc 1 1665 0 is_stmt 1
 5240 0854 FB6C     		ldr	r3, [r7, #76]
 5241 0856 002B     		cmp	r3, #0
 5242 0858 01DB     		blt	.L346
 5243              		.loc 1 1665 0 is_stmt 0 discriminator 1
 5244 085a C823     		movs	r3, #200
 5245 085c 01E0     		b	.L347
 5246              	.L346:
 5247              		.loc 1 1665 0 discriminator 2
 5248 085e 6FF0C703 		mvn	r3, #199
 5249              	.L347:
 5250              		.loc 1 1665 0 discriminator 4
 5251 0862 FB64     		str	r3, [r7, #76]
 5252              	.L342:
1666:..\src/interruptions.c ****         }
1667:..\src/interruptions.c ****        
1668:..\src/interruptions.c ****     }
1669:..\src/interruptions.c ****     
1670:..\src/interruptions.c ****     // Set motor direction and write pwm value
1671:..\src/interruptions.c ****     switch (idx) {
 5253              		.loc 1 1671 0 is_stmt 1
 5254 0864 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5255 0866 002B     		cmp	r3, #0
 5256 0868 1ED0     		beq	.L349
 5257 086a 012B     		cmp	r3, #1
 5258 086c 42D0     		beq	.L350
1672:..\src/interruptions.c ****         case 0:         // Motor 1
1673:..\src/interruptions.c ****             if (motor_dir[idx])
1674:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
1675:..\src/interruptions.c ****             else
1676:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x00);
1677:..\src/interruptions.c ****             
1678:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1679:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
1680:..\src/interruptions.c ****             }
1681:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1682:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(abs(pwm_input));    
1683:..\src/interruptions.c ****             }
1684:..\src/interruptions.c ****             
1685:..\src/interruptions.c ****             break;
1686:..\src/interruptions.c ****         case 1:         // Motor 2
1687:..\src/interruptions.c ****             
1688:..\src/interruptions.c ****             if (motor_dir[idx])
1689:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
1690:..\src/interruptions.c ****             else
1691:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x00);
1692:..\src/interruptions.c ****             
1693:..\src/interruptions.c ****             if (MOT->motor_driver_type == DRIVER_VNH5019) {
1694:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
1695:..\src/interruptions.c ****             }
1696:..\src/interruptions.c ****             else {  // DRIVER_MC33887 standard or DRIVER_BRUSHLESS
1697:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(abs(pwm_input));    
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 125


1698:..\src/interruptions.c ****             }
1699:..\src/interruptions.c ****             
1700:..\src/interruptions.c ****             break;
1701:..\src/interruptions.c ****         default:
1702:..\src/interruptions.c ****             break;
 5259              		.loc 1 1702 0
 5260 086e 67E0     		b	.L355
 5261              	.L368:
 5262              		.align	2
 5263              	.L367:
 5264 0870 57F4FFFF 		.word	-2985
 5265 0874 81207D05 		.word	92086401
 5266 0878 00000000 		.word	dev_pwm_limit
 5267 087c 1F85EB51 		.word	1374389535
 5268 0880 D0000000 		.word	prev_pwm.10611
 5269 0884 00000000 		.word	pwm_sign
 5270 0888 00000000 		.word	g_measOld
 5271 088c 00000000 		.word	g_meas
 5272 0890 00000000 		.word	g_refOld
 5273 0894 00000000 		.word	g_ref
 5274 0898 D8000000 		.word	position_counter.10613
 5275 089c 00000000 		.word	change_ext_ref_flag
 5276 08a0 00000000 		.word	g_refNew
 5277 08a4 74F5FFFF 		.word	-2700
 5278              	.L349:
1673:..\src/interruptions.c ****                 MOTOR_DIR_1_Write(0x01);
 5279              		.loc 1 1673 0
 5280 08a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5281 08aa 274A     		ldr	r2, .L369
 5282 08ac D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5283 08ae 002B     		cmp	r3, #0
 5284 08b0 03D0     		beq	.L351
1674:..\src/interruptions.c ****             else
 5285              		.loc 1 1674 0
 5286 08b2 0120     		movs	r0, #1
 5287 08b4 FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5288 08b8 02E0     		b	.L352
 5289              	.L351:
1676:..\src/interruptions.c ****             
 5290              		.loc 1 1676 0
 5291 08ba 0020     		movs	r0, #0
 5292 08bc FFF7FEFF 		bl	MOTOR_DIR_1_Write
 5293              	.L352:
1678:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare1(PWM_MAX_VALUE_DC - abs(pwm_input));
 5294              		.loc 1 1678 0
 5295 08c0 7B6C     		ldr	r3, [r7, #68]
 5296 08c2 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5297 08c6 012B     		cmp	r3, #1
 5298 08c8 0BD1     		bne	.L353
1679:..\src/interruptions.c ****             }
 5299              		.loc 1 1679 0
 5300 08ca FB6C     		ldr	r3, [r7, #76]
 5301 08cc 002B     		cmp	r3, #0
 5302 08ce B8BF     		it	lt
 5303 08d0 5B42     		rsblt	r3, r3, #0
 5304 08d2 9BB2     		uxth	r3, r3
 5305 08d4 C3F16403 		rsb	r3, r3, #100
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 126


 5306 08d8 9BB2     		uxth	r3, r3
 5307 08da 1846     		mov	r0, r3
 5308 08dc FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1685:..\src/interruptions.c ****         case 1:         // Motor 2
 5309              		.loc 1 1685 0
 5310 08e0 2EE0     		b	.L355
 5311              	.L353:
1682:..\src/interruptions.c ****             }
 5312              		.loc 1 1682 0
 5313 08e2 FB6C     		ldr	r3, [r7, #76]
 5314 08e4 002B     		cmp	r3, #0
 5315 08e6 B8BF     		it	lt
 5316 08e8 5B42     		rsblt	r3, r3, #0
 5317 08ea 9BB2     		uxth	r3, r3
 5318 08ec 1846     		mov	r0, r3
 5319 08ee FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
1685:..\src/interruptions.c ****         case 1:         // Motor 2
 5320              		.loc 1 1685 0
 5321 08f2 25E0     		b	.L355
 5322              	.L350:
1688:..\src/interruptions.c ****                 MOTOR_DIR_2_Write(0x01);
 5323              		.loc 1 1688 0
 5324 08f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5325 08f6 144A     		ldr	r2, .L369
 5326 08f8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5327 08fa 002B     		cmp	r3, #0
 5328 08fc 03D0     		beq	.L356
1689:..\src/interruptions.c ****             else
 5329              		.loc 1 1689 0
 5330 08fe 0120     		movs	r0, #1
 5331 0900 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5332 0904 02E0     		b	.L357
 5333              	.L356:
1691:..\src/interruptions.c ****             
 5334              		.loc 1 1691 0
 5335 0906 0020     		movs	r0, #0
 5336 0908 FFF7FEFF 		bl	MOTOR_DIR_2_Write
 5337              	.L357:
1693:..\src/interruptions.c ****                 PWM_MOTORS_WriteCompare2(PWM_MAX_VALUE_DC - abs(pwm_input));
 5338              		.loc 1 1693 0
 5339 090c 7B6C     		ldr	r3, [r7, #68]
 5340 090e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 5341 0912 012B     		cmp	r3, #1
 5342 0914 0BD1     		bne	.L358
1694:..\src/interruptions.c ****             }
 5343              		.loc 1 1694 0
 5344 0916 FB6C     		ldr	r3, [r7, #76]
 5345 0918 002B     		cmp	r3, #0
 5346 091a B8BF     		it	lt
 5347 091c 5B42     		rsblt	r3, r3, #0
 5348 091e 9BB2     		uxth	r3, r3
 5349 0920 C3F16403 		rsb	r3, r3, #100
 5350 0924 9BB2     		uxth	r3, r3
 5351 0926 1846     		mov	r0, r3
 5352 0928 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
1700:..\src/interruptions.c ****         default:
 5353              		.loc 1 1700 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 127


 5354 092c 07E0     		b	.L362
 5355              	.L358:
1697:..\src/interruptions.c ****             }
 5356              		.loc 1 1697 0
 5357 092e FB6C     		ldr	r3, [r7, #76]
 5358 0930 002B     		cmp	r3, #0
 5359 0932 B8BF     		it	lt
 5360 0934 5B42     		rsblt	r3, r3, #0
 5361 0936 9BB2     		uxth	r3, r3
 5362 0938 1846     		mov	r0, r3
 5363 093a FFF7FEFF 		bl	PWM_MOTORS_WriteCompare2
 5364              	.L362:
1700:..\src/interruptions.c ****         default:
 5365              		.loc 1 1700 0
 5366 093e 00BF     		nop
 5367              	.L355:
1703:..\src/interruptions.c ****     }
1704:..\src/interruptions.c ****     
1705:..\src/interruptions.c **** }
 5368              		.loc 1 1705 0
 5369 0940 00BF     		nop
 5370 0942 5037     		adds	r7, r7, #80
 5371              		.cfi_def_cfa_offset 8
 5372 0944 BD46     		mov	sp, r7
 5373              		.cfi_def_cfa_register 13
 5374              		@ sp needed
 5375 0946 80BD     		pop	{r7, pc}
 5376              	.L370:
 5377              		.align	2
 5378              	.L369:
 5379 0948 BC000000 		.word	motor_dir.10612
 5380              		.cfi_endproc
 5381              	.LFE72:
 5382              		.size	motor_control_generic, .-motor_control_generic
 5383              		.global	__aeabi_fcmpeq
 5384              		.global	__aeabi_fmul
 5385              		.global	__aeabi_f2iz
 5386              		.global	__aeabi_fcmplt
 5387              		.section	.text.encoder_reading_SPI,"ax",%progbits
 5388              		.align	2
 5389              		.global	encoder_reading_SPI
 5390              		.thumb
 5391              		.thumb_func
 5392              		.type	encoder_reading_SPI, %function
 5393              	encoder_reading_SPI:
 5394              	.LFB73:
1706:..\src/interruptions.c **** 
1707:..\src/interruptions.c **** //==============================================================================
1708:..\src/interruptions.c **** //                                                           ENCODER READING SPI
1709:..\src/interruptions.c **** //==============================================================================
1710:..\src/interruptions.c **** 
1711:..\src/interruptions.c **** void encoder_reading_SPI(uint8 n_line, uint8 assoc_motor) {
 5395              		.loc 1 1711 0
 5396              		.cfi_startproc
 5397              		@ args = 0, pretend = 0, frame = 48
 5398              		@ frame_needed = 1, uses_anonymous_args = 0
 5399 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 128


 5400              		.cfi_def_cfa_offset 20
 5401              		.cfi_offset 4, -20
 5402              		.cfi_offset 5, -16
 5403              		.cfi_offset 6, -12
 5404              		.cfi_offset 7, -8
 5405              		.cfi_offset 14, -4
 5406 0002 8FB0     		sub	sp, sp, #60
 5407              		.cfi_def_cfa_offset 80
 5408 0004 02AF     		add	r7, sp, #8
 5409              		.cfi_def_cfa 7, 72
 5410 0006 0346     		mov	r3, r0
 5411 0008 0A46     		mov	r2, r1
 5412 000a FB71     		strb	r3, [r7, #7]
 5413 000c 1346     		mov	r3, r2
 5414 000e BB71     		strb	r3, [r7, #6]
1712:..\src/interruptions.c **** 
1713:..\src/interruptions.c ****     uint8 CYDATA index = 0;
 5415              		.loc 1 1713 0
 5416 0010 0023     		movs	r3, #0
 5417 0012 87F82F30 		strb	r3, [r7, #47]
1714:..\src/interruptions.c ****     
1715:..\src/interruptions.c ****     // Encoder Variables  
1716:..\src/interruptions.c ****     uint8 jj;
1717:..\src/interruptions.c ****      
1718:..\src/interruptions.c ****     uint32 aux_encoder[NUM_OF_SENSORS];
1719:..\src/interruptions.c ****     int16 tmp_value_encoder;
1720:..\src/interruptions.c ****     int32 tmp_value_encoder_32;
1721:..\src/interruptions.c ****     int32 value_encoder;
1722:..\src/interruptions.c ****     int32 speed_encoder;
1723:..\src/interruptions.c ****     int32 value_diff;
1724:..\src/interruptions.c **** 	int8 init_rot = 0;
 5418              		.loc 1 1724 0
 5419 0016 0023     		movs	r3, #0
 5420 0018 87F82730 		strb	r3, [r7, #39]
1725:..\src/interruptions.c **** 
1726:..\src/interruptions.c ****     static int32 last_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1727:..\src/interruptions.c ****     static int32 comp_value_encoder[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1728:..\src/interruptions.c ****     static uint8 error[N_ENCODER_LINE_MAX][NUM_OF_SENSORS];
1729:..\src/interruptions.c ****     
1730:..\src/interruptions.c ****     static CYBIT only_first_time[N_ENCODER_LINE_MAX] = {TRUE, TRUE};
1731:..\src/interruptions.c ****     static CYBIT safe_startup_motor_activation[N_ENCODER_LINE_MAX] = {FALSE, FALSE};
1732:..\src/interruptions.c ****     static uint8 one_time_execute[N_ENCODER_LINE_MAX] = {0, 0};
1733:..\src/interruptions.c ****     static uint32 count_startup_motor[N_ENCODER_LINE_MAX] = {0, 0};
1734:..\src/interruptions.c **** 
1735:..\src/interruptions.c ****     static int32 v_value[N_ENCODER_LINE_MAX][N_ENCODERS];   //last value for velocity
1736:..\src/interruptions.c ****     static int32 vv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last value for velocity
1737:..\src/interruptions.c ****     static int32 vvv_value[N_ENCODER_LINE_MAX][N_ENCODERS];  //last last last value for velocity
1738:..\src/interruptions.c ****     
1739:..\src/interruptions.c ****     if (reset_last_value_flag[n_line]) {
 5421              		.loc 1 1739 0
 5422 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5423 001e 924A     		ldr	r2, .L408
 5424 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5425 0022 002B     		cmp	r3, #0
 5426 0024 19D0     		beq	.L372
1740:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5427              		.loc 1 1740 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 129


 5428 0026 0323     		movs	r3, #3
 5429 0028 87F82E30 		strb	r3, [r7, #46]
 5430 002c 0AE0     		b	.L373
 5431              	.L374:
1741:..\src/interruptions.c ****             last_value_encoder[n_line][jj] = 0;
 5432              		.loc 1 1741 0
 5433 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5434 0030 97F82E10 		ldrb	r1, [r7, #46]	@ zero_extendqisi2
 5435 0034 8D48     		ldr	r0, .L408+4
 5436 0036 1346     		mov	r3, r2
 5437 0038 5B00     		lsls	r3, r3, #1
 5438 003a 1344     		add	r3, r3, r2
 5439 003c 0B44     		add	r3, r3, r1
 5440 003e 0022     		movs	r2, #0
 5441 0040 40F82320 		str	r2, [r0, r3, lsl #2]
 5442              	.L373:
1740:..\src/interruptions.c ****         for (jj = N_ENCODERS; jj--;) 
 5443              		.loc 1 1740 0 discriminator 1
 5444 0044 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 5445 0048 5A1E     		subs	r2, r3, #1
 5446 004a 87F82E20 		strb	r2, [r7, #46]
 5447 004e 002B     		cmp	r3, #0
 5448 0050 EDD1     		bne	.L374
1742:..\src/interruptions.c ****         
1743:..\src/interruptions.c ****         reset_last_value_flag[n_line] = 0;
 5449              		.loc 1 1743 0
 5450 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5451 0054 844A     		ldr	r2, .L408
 5452 0056 0021     		movs	r1, #0
 5453 0058 D154     		strb	r1, [r2, r3]
 5454              	.L372:
1744:..\src/interruptions.c ****     }
1745:..\src/interruptions.c **** 
1746:..\src/interruptions.c ****     //======================================================     reading sensors
1747:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5455              		.loc 1 1747 0
 5456 005a 0023     		movs	r3, #0
 5457 005c 87F82F30 		strb	r3, [r7, #47]
 5458 0060 0DE0     		b	.L375
 5459              	.L376:
1748:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5460              		.loc 1 1748 0 discriminator 3
 5461 0062 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5462 0066 9B00     		lsls	r3, r3, #2
 5463 0068 07F13002 		add	r2, r7, #48
 5464 006c 1344     		add	r3, r3, r2
 5465 006e 0022     		movs	r2, #0
 5466 0070 43F8282C 		str	r2, [r3, #-40]
1747:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5467              		.loc 1 1747 0 discriminator 3
 5468 0074 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5469 0078 0133     		adds	r3, r3, #1
 5470 007a 87F82F30 		strb	r3, [r7, #47]
 5471              	.L375:
1747:..\src/interruptions.c ****         aux_encoder[index] = 0;
 5472              		.loc 1 1747 0 is_stmt 0 discriminator 1
 5473 007e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 130


 5474 0082 022B     		cmp	r3, #2
 5475 0084 EDD9     		bls	.L376
1749:..\src/interruptions.c ****     }   
1750:..\src/interruptions.c ****     
1751:..\src/interruptions.c ****     ReadEncoderLine(N_Encoder_Line_Connected[n_line] , n_line);         //CS0 for right hand
 5476              		.loc 1 1751 0 is_stmt 1
 5477 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5478 0088 794A     		ldr	r2, .L408+8
 5479 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5480 008c 1A46     		mov	r2, r3
 5481 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5482 0090 1946     		mov	r1, r3
 5483 0092 1046     		mov	r0, r2
 5484 0094 FFF7FEFF 		bl	ReadEncoderLine
 5485              	.LBB10:
1752:..\src/interruptions.c ****                                                                         //CS1 for left hand
1753:..\src/interruptions.c ****     for (int j = 0; j < N_ENCODERS; j++) {    
 5486              		.loc 1 1753 0
 5487 0098 0023     		movs	r3, #0
 5488 009a 3B62     		str	r3, [r7, #32]
 5489 009c 2EE0     		b	.L377
 5490              	.L379:
1754:..\src/interruptions.c ****         
1755:..\src/interruptions.c ****         // As default, index=0 reads SoftHand Pro encoder positioned on screw, while index=1 reads 
1756:..\src/interruptions.c ****         index = c_mem.enc[n_line].Enc_idx_use_for_control[j];       // take encoder idx used for mo
 5491              		.loc 1 1756 0
 5492 009e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5493 00a0 7449     		ldr	r1, .L408+12
 5494 00a2 1346     		mov	r3, r2
 5495 00a4 5B00     		lsls	r3, r3, #1
 5496 00a6 1344     		add	r3, r3, r2
 5497 00a8 1B01     		lsls	r3, r3, #4
 5498 00aa CA18     		adds	r2, r1, r3
 5499 00ac 3B6A     		ldr	r3, [r7, #32]
 5500 00ae 1344     		add	r3, r3, r2
 5501 00b0 03F2B913 		addw	r3, r3, #441
 5502 00b4 1B78     		ldrb	r3, [r3]
 5503 00b6 87F82F30 		strb	r3, [r7, #47]
1757:..\src/interruptions.c ****         
1758:..\src/interruptions.c ****         if (Encoder_Check[n_line][index] > 15){  // check on encoder data
 5504              		.loc 1 1758 0
 5505 00ba FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5506 00bc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5507 00c0 6D48     		ldr	r0, .L408+16
 5508 00c2 1346     		mov	r3, r2
 5509 00c4 9B00     		lsls	r3, r3, #2
 5510 00c6 1344     		add	r3, r3, r2
 5511 00c8 0344     		add	r3, r3, r0
 5512 00ca 0B44     		add	r3, r3, r1
 5513 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5514 00ce 0F2B     		cmp	r3, #15
 5515 00d0 11D9     		bls	.L378
1759:..\src/interruptions.c ****             aux_encoder[j] = (uint32)Encoder_Value[n_line][index];     // 00000000000000[20] XXXXXX
 5516              		.loc 1 1759 0
 5517 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5518 00d4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5519 00d8 6848     		ldr	r0, .L408+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 131


 5520 00da 1346     		mov	r3, r2
 5521 00dc 9B00     		lsls	r3, r3, #2
 5522 00de 1344     		add	r3, r3, r2
 5523 00e0 0B44     		add	r3, r3, r1
 5524 00e2 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 5525 00e6 1A46     		mov	r2, r3
 5526 00e8 3B6A     		ldr	r3, [r7, #32]
 5527 00ea 9B00     		lsls	r3, r3, #2
 5528 00ec 07F13001 		add	r1, r7, #48
 5529 00f0 0B44     		add	r3, r3, r1
 5530 00f2 43F8282C 		str	r2, [r3, #-40]
 5531              	.L378:
1753:..\src/interruptions.c ****         
 5532              		.loc 1 1753 0 discriminator 2
 5533 00f6 3B6A     		ldr	r3, [r7, #32]
 5534 00f8 0133     		adds	r3, r3, #1
 5535 00fa 3B62     		str	r3, [r7, #32]
 5536              	.L377:
1753:..\src/interruptions.c ****         
 5537              		.loc 1 1753 0 is_stmt 0 discriminator 1
 5538 00fc 3B6A     		ldr	r3, [r7, #32]
 5539 00fe 022B     		cmp	r3, #2
 5540 0100 CDDD     		ble	.L379
 5541              	.LBE10:
1760:..\src/interruptions.c ****         }
1761:..\src/interruptions.c ****     }
1762:..\src/interruptions.c ****     
1763:..\src/interruptions.c ****     // S = SIGN BIT
1764:..\src/interruptions.c ****     // X = ENCODER VALUE BIT
1765:..\src/interruptions.c ****     // 0 = 0 BIT
1766:..\src/interruptions.c ****     // C = CONTROL BIT
1767:..\src/interruptions.c ****     
1768:..\src/interruptions.c ****     for (index = 0; index < N_ENCODERS; index++) {
 5542              		.loc 1 1768 0 is_stmt 1
 5543 0102 0023     		movs	r3, #0
 5544 0104 87F82F30 		strb	r3, [r7, #47]
 5545 0108 34E3     		b	.L380
 5546              	.L401:
1769:..\src/interruptions.c ****         
1770:..\src/interruptions.c ****         data_encoder_raw[n_line][index] = aux_encoder[index];
 5547              		.loc 1 1770 0
 5548 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5549 010c 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5550 0110 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5551 0114 9B00     		lsls	r3, r3, #2
 5552 0116 07F13001 		add	r1, r7, #48
 5553 011a 0B44     		add	r3, r3, r1
 5554 011c 53F8281C 		ldr	r1, [r3, #-40]
 5555 0120 574C     		ldr	r4, .L408+24
 5556 0122 1346     		mov	r3, r2
 5557 0124 9B00     		lsls	r3, r3, #2
 5558 0126 1344     		add	r3, r3, r2
 5559 0128 0344     		add	r3, r3, r0
 5560 012a 44F82310 		str	r1, [r4, r3, lsl #2]
1771:..\src/interruptions.c ****         
1772:..\src/interruptions.c ****         tmp_value_encoder = (int16)(aux_encoder[index] - (uint16)g_mem.enc[n_line].m_off[index]);
 5561              		.loc 1 1772 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 132


 5562 012e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5563 0132 9B00     		lsls	r3, r3, #2
 5564 0134 07F13002 		add	r2, r7, #48
 5565 0138 1344     		add	r3, r3, r2
 5566 013a 53F8283C 		ldr	r3, [r3, #-40]
 5567 013e 99B2     		uxth	r1, r3
 5568 0140 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5569 0142 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5570 0146 4F4C     		ldr	r4, .L408+28
 5571 0148 1346     		mov	r3, r2
 5572 014a 5B00     		lsls	r3, r3, #1
 5573 014c 1344     		add	r3, r3, r2
 5574 014e 9B00     		lsls	r3, r3, #2
 5575 0150 0344     		add	r3, r3, r0
 5576 0152 6833     		adds	r3, r3, #104
 5577 0154 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5578 0158 9BB2     		uxth	r3, r3
 5579 015a CB1A     		subs	r3, r1, r3
 5580 015c 9BB2     		uxth	r3, r3
 5581 015e BB85     		strh	r3, [r7, #44]	@ movhi
1773:..\src/interruptions.c ****         if (tmp_value_encoder < 0){
 5582              		.loc 1 1773 0
 5583 0160 B7F92C30 		ldrsh	r3, [r7, #44]
 5584 0164 002B     		cmp	r3, #0
 5585 0166 04DA     		bge	.L381
1774:..\src/interruptions.c ****             tmp_value_encoder = tmp_value_encoder + 4096;   //SSSS[4] XXXXXXXXXXXX[12] worst case r
 5586              		.loc 1 1774 0
 5587 0168 BB8D     		ldrh	r3, [r7, #44]
 5588 016a 03F58053 		add	r3, r3, #4096
 5589 016e 9BB2     		uxth	r3, r3
 5590 0170 BB85     		strh	r3, [r7, #44]	@ movhi
 5591              	.L381:
1775:..\src/interruptions.c ****         }       // Range [0, 4096]
1776:..\src/interruptions.c **** 
1777:..\src/interruptions.c ****         if (tmp_value_encoder >= 2048) {
 5592              		.loc 1 1777 0
 5593 0172 B7F92C30 		ldrsh	r3, [r7, #44]
 5594 0176 B3F5006F 		cmp	r3, #2048
 5595 017a 04DB     		blt	.L382
1778:..\src/interruptions.c ****            tmp_value_encoder = tmp_value_encoder - 4096;    //SSSS[4] XXXXXXXXXXXX[12] range [-2048
 5596              		.loc 1 1778 0
 5597 017c BB8D     		ldrh	r3, [r7, #44]
 5598 017e A3F58053 		sub	r3, r3, #4096
 5599 0182 9BB2     		uxth	r3, r3
 5600 0184 BB85     		strh	r3, [r7, #44]	@ movhi
 5601              	.L382:
1779:..\src/interruptions.c ****         }       // Range [-2048, 2047]
1780:..\src/interruptions.c **** 
1781:..\src/interruptions.c ****         tmp_value_encoder_32 = (((int32)(tmp_value_encoder)) << 4);     //SSSSSSSSSSSSSSSS[16] XXXX
 5602              		.loc 1 1781 0
 5603 0186 B7F92C30 		ldrsh	r3, [r7, #44]
 5604 018a 1B01     		lsls	r3, r3, #4
 5605 018c FB61     		str	r3, [r7, #28]
1782:..\src/interruptions.c ****         comp_value_encoder[n_line][index] = tmp_value_encoder_32;
 5606              		.loc 1 1782 0
 5607 018e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5608 0190 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 133


 5609 0194 3C48     		ldr	r0, .L408+32
 5610 0196 1346     		mov	r3, r2
 5611 0198 5B00     		lsls	r3, r3, #1
 5612 019a 1344     		add	r3, r3, r2
 5613 019c 0B44     		add	r3, r3, r1
 5614 019e FA69     		ldr	r2, [r7, #28]
 5615 01a0 40F82320 		str	r2, [r0, r3, lsl #2]
1783:..\src/interruptions.c **** 
1784:..\src/interruptions.c ****         // Initialize last_value_encoder
1785:..\src/interruptions.c ****         if (only_first_time[n_line]) {
 5616              		.loc 1 1785 0
 5617 01a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5618 01a6 394A     		ldr	r2, .L408+36
 5619 01a8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 5620 01aa 002B     		cmp	r3, #0
 5621 01ac 12D0     		beq	.L383
1786:..\src/interruptions.c ****             last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5622              		.loc 1 1786 0
 5623 01ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5624 01b0 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5625 01b4 2D48     		ldr	r0, .L408+4
 5626 01b6 1346     		mov	r3, r2
 5627 01b8 5B00     		lsls	r3, r3, #1
 5628 01ba 1344     		add	r3, r3, r2
 5629 01bc 0B44     		add	r3, r3, r1
 5630 01be FA69     		ldr	r2, [r7, #28]
 5631 01c0 40F82320 		str	r2, [r0, r3, lsl #2]
1787:..\src/interruptions.c ****             if (index == 2)
 5632              		.loc 1 1787 0
 5633 01c4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5634 01c8 022B     		cmp	r3, #2
 5635 01ca 03D1     		bne	.L383
1788:..\src/interruptions.c ****                 only_first_time[n_line] = 0;
 5636              		.loc 1 1788 0
 5637 01cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5638 01ce 2F4A     		ldr	r2, .L408+36
 5639 01d0 0021     		movs	r1, #0
 5640 01d2 D154     		strb	r1, [r2, r3]
 5641              	.L383:
1789:..\src/interruptions.c ****         }
1790:..\src/interruptions.c **** 
1791:..\src/interruptions.c ****         // Take care of rotations
1792:..\src/interruptions.c ****         value_diff = tmp_value_encoder_32 - last_value_encoder[n_line][index];     // worst case SS
 5642              		.loc 1 1792 0
 5643 01d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5644 01d6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5645 01da 2448     		ldr	r0, .L408+4
 5646 01dc 1346     		mov	r3, r2
 5647 01de 5B00     		lsls	r3, r3, #1
 5648 01e0 1344     		add	r3, r3, r2
 5649 01e2 0B44     		add	r3, r3, r1
 5650 01e4 50F82330 		ldr	r3, [r0, r3, lsl #2]
 5651 01e8 FA69     		ldr	r2, [r7, #28]
 5652 01ea D31A     		subs	r3, r2, r3
 5653 01ec BB61     		str	r3, [r7, #24]
1793:..\src/interruptions.c **** 
1794:..\src/interruptions.c ****         // ====================== 1 TURN ======================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 134


1795:..\src/interruptions.c ****         // -32768                    0                    32767 -32768                   0         
1796:..\src/interruptions.c ****         // |-------------------------|-------------------------|-------------------------|---------
1797:..\src/interruptions.c ****         //              |                         |      |           |      |                      
1798:..\src/interruptions.c ****         //           -16384                     16383    |           |   -16384                    
1799:..\src/interruptions.c ****         //                                               |           |
1800:..\src/interruptions.c ****         //                                           24575           -24576
1801:..\src/interruptions.c ****         //                                               |___________|
1802:..\src/interruptions.c ****         //                                                   49152
1803:..\src/interruptions.c **** 
1804:..\src/interruptions.c ****         // if we are in the right interval, take care of rotation
1805:..\src/interruptions.c ****         // and update the variable only if the difference between
1806:..\src/interruptions.c ****         // one measure and another is less than 1/4 of turn
1807:..\src/interruptions.c **** 
1808:..\src/interruptions.c ****         // Considering we are sampling at 1kHz, this means that our shaft needs
1809:..\src/interruptions.c ****         // to go slower than 1/4 turn every ms -> 1 turn every 4ms
1810:..\src/interruptions.c ****         // equal to 250 turn/s -> 15000 RPM
1811:..\src/interruptions.c **** 
1812:..\src/interruptions.c ****         if (value_diff > 49152)
 5654              		.loc 1 1812 0
 5655 01ee BB69     		ldr	r3, [r7, #24]
 5656 01f0 B3F5404F 		cmp	r3, #49152
 5657 01f4 19DD     		ble	.L384
1813:..\src/interruptions.c ****             g_meas[n_line].rot[index]--;
 5658              		.loc 1 1813 0
 5659 01f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5660 01f8 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5661 01fc 2448     		ldr	r0, .L408+40
 5662 01fe 3421     		movs	r1, #52
 5663 0200 01FB02F1 		mul	r1, r1, r2
 5664 0204 0144     		add	r1, r1, r0
 5665 0206 1944     		add	r1, r1, r3
 5666 0208 1831     		adds	r1, r1, #24
 5667 020a 91F90010 		ldrsb	r1, [r1]
 5668 020e C9B2     		uxtb	r1, r1
 5669 0210 0139     		subs	r1, r1, #1
 5670 0212 C9B2     		uxtb	r1, r1
 5671 0214 4CB2     		sxtb	r4, r1
 5672 0216 1E49     		ldr	r1, .L408+40
 5673 0218 3420     		movs	r0, #52
 5674 021a 00FB02F2 		mul	r2, r0, r2
 5675 021e 0A44     		add	r2, r2, r1
 5676 0220 1344     		add	r3, r3, r2
 5677 0222 1833     		adds	r3, r3, #24
 5678 0224 2246     		mov	r2, r4
 5679 0226 1A70     		strb	r2, [r3]
 5680 0228 5CE0     		b	.L385
 5681              	.L384:
1814:..\src/interruptions.c ****         else{ 
1815:..\src/interruptions.c ****             if (value_diff < -49152)
 5682              		.loc 1 1815 0
 5683 022a BB69     		ldr	r3, [r7, #24]
 5684 022c 13F5404F 		cmn	r3, #49152
 5685 0230 30DA     		bge	.L386
1816:..\src/interruptions.c ****                 g_meas[n_line].rot[index]++;
 5686              		.loc 1 1816 0
 5687 0232 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5688 0234 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 135


 5689 0238 1548     		ldr	r0, .L408+40
 5690 023a 3421     		movs	r1, #52
 5691 023c 01FB02F1 		mul	r1, r1, r2
 5692 0240 0144     		add	r1, r1, r0
 5693 0242 1944     		add	r1, r1, r3
 5694 0244 1831     		adds	r1, r1, #24
 5695 0246 91F90010 		ldrsb	r1, [r1]
 5696 024a C9B2     		uxtb	r1, r1
 5697 024c 0131     		adds	r1, r1, #1
 5698 024e C9B2     		uxtb	r1, r1
 5699 0250 4CB2     		sxtb	r4, r1
 5700 0252 0F49     		ldr	r1, .L408+40
 5701 0254 3420     		movs	r0, #52
 5702 0256 00FB02F2 		mul	r2, r0, r2
 5703 025a 0A44     		add	r2, r2, r1
 5704 025c 1344     		add	r3, r3, r2
 5705 025e 1833     		adds	r3, r3, #24
 5706 0260 2246     		mov	r2, r4
 5707 0262 1A70     		strb	r2, [r3]
 5708 0264 3EE0     		b	.L385
 5709              	.L409:
 5710 0266 00BF     		.align	2
 5711              	.L408:
 5712 0268 00000000 		.word	reset_last_value_flag
 5713 026c E0000000 		.word	last_value_encoder.10636
 5714 0270 00000000 		.word	N_Encoder_Line_Connected
 5715 0274 00000000 		.word	c_mem
 5716 0278 00000000 		.word	Encoder_Check
 5717 027c 00000000 		.word	Encoder_Value
 5718 0280 00000000 		.word	data_encoder_raw
 5719 0284 00000000 		.word	g_mem
 5720 0288 F8000000 		.word	comp_value_encoder.10637
 5721 028c 04000000 		.word	only_first_time.10639
 5722 0290 00000000 		.word	g_meas
 5723              	.L386:
1817:..\src/interruptions.c ****             else{
1818:..\src/interruptions.c ****                 if (abs(value_diff) > 16384) { // if two measures are too far
 5724              		.loc 1 1818 0
 5725 0294 BB69     		ldr	r3, [r7, #24]
 5726 0296 002B     		cmp	r3, #0
 5727 0298 B8BF     		it	lt
 5728 029a 5B42     		rsblt	r3, r3, #0
 5729 029c B3F5804F 		cmp	r3, #16384
 5730 02a0 20DD     		ble	.L385
1819:..\src/interruptions.c ****                     error[n_line][index]++;
 5731              		.loc 1 1819 0
 5732 02a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5733 02a4 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5734 02a8 9B48     		ldr	r0, .L410
 5735 02aa 1346     		mov	r3, r2
 5736 02ac 5B00     		lsls	r3, r3, #1
 5737 02ae 1344     		add	r3, r3, r2
 5738 02b0 0344     		add	r3, r3, r0
 5739 02b2 0B44     		add	r3, r3, r1
 5740 02b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5741 02b6 0133     		adds	r3, r3, #1
 5742 02b8 DCB2     		uxtb	r4, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 136


 5743 02ba 9748     		ldr	r0, .L410
 5744 02bc 1346     		mov	r3, r2
 5745 02be 5B00     		lsls	r3, r3, #1
 5746 02c0 1344     		add	r3, r3, r2
 5747 02c2 0344     		add	r3, r3, r0
 5748 02c4 0B44     		add	r3, r3, r1
 5749 02c6 2246     		mov	r2, r4
 5750 02c8 1A70     		strb	r2, [r3]
1820:..\src/interruptions.c ****                                 
1821:..\src/interruptions.c ****                     if (error[n_line][index] < 10)
 5751              		.loc 1 1821 0
 5752 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5753 02cc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5754 02d0 9148     		ldr	r0, .L410
 5755 02d2 1346     		mov	r3, r2
 5756 02d4 5B00     		lsls	r3, r3, #1
 5757 02d6 1344     		add	r3, r3, r2
 5758 02d8 0344     		add	r3, r3, r0
 5759 02da 0B44     		add	r3, r3, r1
 5760 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5761 02de 092B     		cmp	r3, #9
 5762 02e0 40F28682 		bls	.L407
 5763              	.L385:
1822:..\src/interruptions.c ****                         // Discard
1823:..\src/interruptions.c ****                         return;
1824:..\src/interruptions.c ****                 }
1825:..\src/interruptions.c ****             }
1826:..\src/interruptions.c ****         }
1827:..\src/interruptions.c **** 
1828:..\src/interruptions.c ****         error[n_line][index] = 0;
 5764              		.loc 1 1828 0
 5765 02e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5766 02e6 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5767 02ea 8B48     		ldr	r0, .L410
 5768 02ec 1346     		mov	r3, r2
 5769 02ee 5B00     		lsls	r3, r3, #1
 5770 02f0 1344     		add	r3, r3, r2
 5771 02f2 0344     		add	r3, r3, r0
 5772 02f4 0B44     		add	r3, r3, r1
 5773 02f6 0022     		movs	r2, #0
 5774 02f8 1A70     		strb	r2, [r3]
1829:..\src/interruptions.c ****         
1830:..\src/interruptions.c ****         last_value_encoder[n_line][index] = tmp_value_encoder_32;
 5775              		.loc 1 1830 0
 5776 02fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5777 02fc 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5778 0300 8648     		ldr	r0, .L410+4
 5779 0302 1346     		mov	r3, r2
 5780 0304 5B00     		lsls	r3, r3, #1
 5781 0306 1344     		add	r3, r3, r2
 5782 0308 0B44     		add	r3, r3, r1
 5783 030a FA69     		ldr	r2, [r7, #28]
 5784 030c 40F82320 		str	r2, [r0, r3, lsl #2]
1831:..\src/interruptions.c **** 
1832:..\src/interruptions.c ****         value_encoder = (int32)tmp_value_encoder_32;   // SSSSSSSSSSSSSSSS[16] XXXXXXXXXXXX[12] 000
 5785              		.loc 1 1832 0
 5786 0310 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 137


 5787 0312 BB62     		str	r3, [r7, #40]
1833:..\src/interruptions.c **** 
1834:..\src/interruptions.c ****         value_encoder += ((int32)g_meas[n_line].rot[index] << 16);    
 5788              		.loc 1 1834 0
 5789 0314 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5790 0316 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5791 031a 8149     		ldr	r1, .L410+8
 5792 031c 3420     		movs	r0, #52
 5793 031e 00FB02F2 		mul	r2, r0, r2
 5794 0322 0A44     		add	r2, r2, r1
 5795 0324 1344     		add	r3, r3, r2
 5796 0326 1833     		adds	r3, r3, #24
 5797 0328 93F90030 		ldrsb	r3, [r3]
 5798 032c 1B04     		lsls	r3, r3, #16
 5799 032e BA6A     		ldr	r2, [r7, #40]
 5800 0330 1344     		add	r3, r3, r2
 5801 0332 BB62     		str	r3, [r7, #40]
1835:..\src/interruptions.c ****         
1836:..\src/interruptions.c ****         if (c_mem.enc[n_line].m_mult[index] != 1.0) {
 5802              		.loc 1 1836 0
 5803 0334 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5804 0336 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5805 033a 7A48     		ldr	r0, .L410+12
 5806 033c 1346     		mov	r3, r2
 5807 033e 5B00     		lsls	r3, r3, #1
 5808 0340 1344     		add	r3, r3, r2
 5809 0342 9B00     		lsls	r3, r3, #2
 5810 0344 0B44     		add	r3, r3, r1
 5811 0346 6A33     		adds	r3, r3, #106
 5812 0348 9B00     		lsls	r3, r3, #2
 5813 034a 0344     		add	r3, r3, r0
 5814 034c 5B68     		ldr	r3, [r3, #4]	@ float
 5815 034e 4FF07E51 		mov	r1, #1065353216
 5816 0352 1846     		mov	r0, r3
 5817 0354 FFF7FEFF 		bl	__aeabi_fcmpeq
 5818 0358 0346     		mov	r3, r0
 5819 035a 002B     		cmp	r3, #0
 5820 035c 1AD1     		bne	.L388
1837:..\src/interruptions.c ****             value_encoder *= c_mem.enc[n_line].m_mult[index];
 5821              		.loc 1 1837 0
 5822 035e B86A     		ldr	r0, [r7, #40]
 5823 0360 FFF7FEFF 		bl	__aeabi_i2f
 5824 0364 0446     		mov	r4, r0
 5825 0366 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5826 0368 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5827 036c 6D48     		ldr	r0, .L410+12
 5828 036e 1346     		mov	r3, r2
 5829 0370 5B00     		lsls	r3, r3, #1
 5830 0372 1344     		add	r3, r3, r2
 5831 0374 9B00     		lsls	r3, r3, #2
 5832 0376 0B44     		add	r3, r3, r1
 5833 0378 6A33     		adds	r3, r3, #106
 5834 037a 9B00     		lsls	r3, r3, #2
 5835 037c 0344     		add	r3, r3, r0
 5836 037e 5B68     		ldr	r3, [r3, #4]	@ float
 5837 0380 1946     		mov	r1, r3
 5838 0382 2046     		mov	r0, r4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 138


 5839 0384 FFF7FEFF 		bl	__aeabi_fmul
 5840 0388 0346     		mov	r3, r0
 5841 038a 1846     		mov	r0, r3
 5842 038c FFF7FEFF 		bl	__aeabi_f2iz
 5843 0390 0346     		mov	r3, r0
 5844 0392 BB62     		str	r3, [r7, #40]
 5845              	.L388:
1838:..\src/interruptions.c ****         }
1839:..\src/interruptions.c **** 
1840:..\src/interruptions.c ****         if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 5846              		.loc 1 1840 0
 5847 0394 634B     		ldr	r3, .L410+12
 5848 0396 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5849 039a 002B     		cmp	r3, #0
 5850 039c 0BD1     		bne	.L390
1841:..\src/interruptions.c ****             // Right / Left hand turn
1842:..\src/interruptions.c ****             if (index == 0) {
 5851              		.loc 1 1842 0
 5852 039e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5853 03a2 002B     		cmp	r3, #0
 5854 03a4 07D1     		bne	.L390
1843:..\src/interruptions.c ****                 if (c_mem.dev.right_left == RIGHT_HAND){
 5855              		.loc 1 1843 0
 5856 03a6 5F4B     		ldr	r3, .L410+12
 5857 03a8 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 5858 03ac 002B     		cmp	r3, #0
 5859 03ae 02D1     		bne	.L390
1844:..\src/interruptions.c ****                     value_encoder *= -1;        
 5860              		.loc 1 1844 0
 5861 03b0 BB6A     		ldr	r3, [r7, #40]
 5862 03b2 5B42     		negs	r3, r3
 5863 03b4 BB62     		str	r3, [r7, #40]
 5864              	.L390:
1845:..\src/interruptions.c ****                 }
1846:..\src/interruptions.c ****             }
1847:..\src/interruptions.c ****         } 
1848:..\src/interruptions.c ****         
1849:..\src/interruptions.c ****         g_meas[n_line].pos[index] = value_encoder;
 5865              		.loc 1 1849 0
 5866 03b6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5867 03b8 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5868 03bc 5848     		ldr	r0, .L410+8
 5869 03be 1346     		mov	r3, r2
 5870 03c0 5B00     		lsls	r3, r3, #1
 5871 03c2 1344     		add	r3, r3, r2
 5872 03c4 9B00     		lsls	r3, r3, #2
 5873 03c6 1344     		add	r3, r3, r2
 5874 03c8 0B44     		add	r3, r3, r1
 5875 03ca BA6A     		ldr	r2, [r7, #40]
 5876 03cc 40F82320 		str	r2, [r0, r3, lsl #2]
1850:..\src/interruptions.c ****     
1851:..\src/interruptions.c ****         speed_encoder = (int16)filter((11*value_encoder - 18* v_value[n_line][index] + 9 * vv_value
 5877              		.loc 1 1851 0
 5878 03d0 BA6A     		ldr	r2, [r7, #40]
 5879 03d2 1346     		mov	r3, r2
 5880 03d4 9B00     		lsls	r3, r3, #2
 5881 03d6 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 139


 5882 03d8 5B00     		lsls	r3, r3, #1
 5883 03da 9918     		adds	r1, r3, r2
 5884 03dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5885 03de 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5886 03e2 514C     		ldr	r4, .L410+16
 5887 03e4 1346     		mov	r3, r2
 5888 03e6 5B00     		lsls	r3, r3, #1
 5889 03e8 1344     		add	r3, r3, r2
 5890 03ea 0344     		add	r3, r3, r0
 5891 03ec 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5892 03f0 6FF01102 		mvn	r2, #17
 5893 03f4 02FB03F3 		mul	r3, r2, r3
 5894 03f8 1944     		add	r1, r1, r3
 5895 03fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5896 03fc 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5897 0400 4A4C     		ldr	r4, .L410+20
 5898 0402 1346     		mov	r3, r2
 5899 0404 5B00     		lsls	r3, r3, #1
 5900 0406 1344     		add	r3, r3, r2
 5901 0408 0344     		add	r3, r3, r0
 5902 040a 54F82320 		ldr	r2, [r4, r3, lsl #2]
 5903 040e 1346     		mov	r3, r2
 5904 0410 DB00     		lsls	r3, r3, #3
 5905 0412 1344     		add	r3, r3, r2
 5906 0414 1944     		add	r1, r1, r3
 5907 0416 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5908 0418 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5909 041c 444C     		ldr	r4, .L410+24
 5910 041e 1346     		mov	r3, r2
 5911 0420 5B00     		lsls	r3, r3, #1
 5912 0422 1344     		add	r3, r3, r2
 5913 0424 0344     		add	r3, r3, r0
 5914 0426 54F82330 		ldr	r3, [r4, r3, lsl #2]
 5915 042a 5B00     		lsls	r3, r3, #1
 5916 042c C81A     		subs	r0, r1, r3
 5917 042e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 5918 0432 DB00     		lsls	r3, r3, #3
 5919 0434 3F4A     		ldr	r2, .L410+28
 5920 0436 1344     		add	r3, r3, r2
 5921 0438 1946     		mov	r1, r3
 5922 043a FFF7FEFF 		bl	filter
 5923 043e 0346     		mov	r3, r0
 5924 0440 1BB2     		sxth	r3, r3
 5925 0442 7B61     		str	r3, [r7, #20]
1852:..\src/interruptions.c **** 
1853:..\src/interruptions.c ****         //Update current speed
1854:..\src/interruptions.c ****         speed_encoder = speed_encoder / (6*cycle_time);
 5926              		.loc 1 1854 0
 5927 0444 7869     		ldr	r0, [r7, #20]
 5928 0446 FFF7FEFF 		bl	__aeabi_i2f
 5929 044a 0446     		mov	r4, r0
 5930 044c 3A4B     		ldr	r3, .L410+32
 5931 044e 1B68     		ldr	r3, [r3]	@ float
 5932 0450 3A49     		ldr	r1, .L410+36
 5933 0452 1846     		mov	r0, r3
 5934 0454 FFF7FEFF 		bl	__aeabi_fmul
 5935 0458 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 140


 5936 045a 1946     		mov	r1, r3
 5937 045c 2046     		mov	r0, r4
 5938 045e FFF7FEFF 		bl	__aeabi_fdiv
 5939 0462 0346     		mov	r3, r0
 5940 0464 1846     		mov	r0, r3
 5941 0466 FFF7FEFF 		bl	__aeabi_f2iz
 5942 046a 0346     		mov	r3, r0
 5943 046c 7B61     		str	r3, [r7, #20]
1855:..\src/interruptions.c ****         g_meas[n_line].vel[index] = speed_encoder;
 5944              		.loc 1 1855 0
 5945 046e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5946 0470 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5947 0474 2A48     		ldr	r0, .L410+8
 5948 0476 1346     		mov	r3, r2
 5949 0478 5B00     		lsls	r3, r3, #1
 5950 047a 1344     		add	r3, r3, r2
 5951 047c 9B00     		lsls	r3, r3, #2
 5952 047e 1344     		add	r3, r3, r2
 5953 0480 0B44     		add	r3, r3, r1
 5954 0482 0633     		adds	r3, r3, #6
 5955 0484 9B00     		lsls	r3, r3, #2
 5956 0486 0344     		add	r3, r3, r0
 5957 0488 7A69     		ldr	r2, [r7, #20]
 5958 048a 5A60     		str	r2, [r3, #4]
1856:..\src/interruptions.c **** 
1857:..\src/interruptions.c ****         // update old velocity and acceleration values
1858:..\src/interruptions.c ****         vvv_value[n_line][index] = vv_value[n_line][index];
 5959              		.loc 1 1858 0
 5960 048c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5961 048e 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5962 0492 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5963 0494 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5964 0498 244D     		ldr	r5, .L410+20
 5965 049a 0B46     		mov	r3, r1
 5966 049c 5B00     		lsls	r3, r3, #1
 5967 049e 0B44     		add	r3, r3, r1
 5968 04a0 2344     		add	r3, r3, r4
 5969 04a2 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5970 04a6 224C     		ldr	r4, .L410+24
 5971 04a8 1346     		mov	r3, r2
 5972 04aa 5B00     		lsls	r3, r3, #1
 5973 04ac 1344     		add	r3, r3, r2
 5974 04ae 0344     		add	r3, r3, r0
 5975 04b0 44F82310 		str	r1, [r4, r3, lsl #2]
1859:..\src/interruptions.c ****         vv_value[n_line][index] = v_value[n_line][index];
 5976              		.loc 1 1859 0
 5977 04b4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5978 04b6 97F82F00 		ldrb	r0, [r7, #47]	@ zero_extendqisi2
 5979 04ba F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 5980 04bc 97F82F40 		ldrb	r4, [r7, #47]	@ zero_extendqisi2
 5981 04c0 194D     		ldr	r5, .L410+16
 5982 04c2 0B46     		mov	r3, r1
 5983 04c4 5B00     		lsls	r3, r3, #1
 5984 04c6 0B44     		add	r3, r3, r1
 5985 04c8 2344     		add	r3, r3, r4
 5986 04ca 55F82310 		ldr	r1, [r5, r3, lsl #2]
 5987 04ce 174C     		ldr	r4, .L410+20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 141


 5988 04d0 1346     		mov	r3, r2
 5989 04d2 5B00     		lsls	r3, r3, #1
 5990 04d4 1344     		add	r3, r3, r2
 5991 04d6 0344     		add	r3, r3, r0
 5992 04d8 44F82310 		str	r1, [r4, r3, lsl #2]
1860:..\src/interruptions.c ****         v_value[n_line][index] = value_encoder;
 5993              		.loc 1 1860 0
 5994 04dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5995 04de 97F82F10 		ldrb	r1, [r7, #47]	@ zero_extendqisi2
 5996 04e2 1148     		ldr	r0, .L410+16
 5997 04e4 1346     		mov	r3, r2
 5998 04e6 5B00     		lsls	r3, r3, #1
 5999 04e8 1344     		add	r3, r3, r2
 6000 04ea 0B44     		add	r3, r3, r1
 6001 04ec BA6A     		ldr	r2, [r7, #40]
 6002 04ee 40F82320 		str	r2, [r0, r3, lsl #2]
1861:..\src/interruptions.c **** 
1862:..\src/interruptions.c ****         // wait at least 5 * max_num_of_error (10) + 5 = 55 cycles to reconstruct the right turn
1863:..\src/interruptions.c ****         if (pos_reconstruct[n_line] == FALSE){
 6003              		.loc 1 1863 0
 6004 04f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6005 04f4 124A     		ldr	r2, .L410+40
 6006 04f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6007 04f8 002B     		cmp	r3, #0
 6008 04fa 40F03681 		bne	.L391
1864:..\src/interruptions.c ****             if (one_time_execute[n_line] < 54) 
 6009              		.loc 1 1864 0
 6010 04fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6011 0500 104A     		ldr	r2, .L410+44
 6012 0502 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6013 0504 352B     		cmp	r3, #53
 6014 0506 1FD8     		bhi	.L392
1865:..\src/interruptions.c ****                 one_time_execute[n_line]++;
 6015              		.loc 1 1865 0
 6016 0508 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6017 050a 0E4A     		ldr	r2, .L410+44
 6018 050c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 6019 050e 0132     		adds	r2, r2, #1
 6020 0510 D1B2     		uxtb	r1, r2
 6021 0512 0C4A     		ldr	r2, .L410+44
 6022 0514 D154     		strb	r1, [r2, r3]
 6023 0516 28E1     		b	.L391
 6024              	.L411:
 6025              		.align	2
 6026              	.L410:
 6027 0518 10010000 		.word	error.10638
 6028 051c E0000000 		.word	last_value_encoder.10636
 6029 0520 00000000 		.word	g_meas
 6030 0524 00000000 		.word	c_mem
 6031 0528 18010000 		.word	v_value.10643
 6032 052c 30010000 		.word	vv_value.10644
 6033 0530 48010000 		.word	vvv_value.10645
 6034 0534 00000000 		.word	filt_vel
 6035 0538 00000000 		.word	cycle_time
 6036 053c 0000C040 		.word	1086324736
 6037 0540 00000000 		.word	pos_reconstruct
 6038 0544 60010000 		.word	one_time_execute.10641
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 142


 6039              	.L392:
1866:..\src/interruptions.c ****             else {
1867:..\src/interruptions.c **** 
1868:..\src/interruptions.c ****                 //Double encoder translation
1869:..\src/interruptions.c ****                 if (c_mem.enc[n_line].double_encoder_on_off){
 6040              		.loc 1 1869 0
 6041 0548 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6042 054a AB49     		ldr	r1, .L412
 6043 054c 1346     		mov	r3, r2
 6044 054e 5B00     		lsls	r3, r3, #1
 6045 0550 1344     		add	r3, r3, r2
 6046 0552 1B01     		lsls	r3, r3, #4
 6047 0554 0B44     		add	r3, r3, r1
 6048 0556 03F5DC73 		add	r3, r3, #440
 6049 055a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6050 055c 002B     		cmp	r3, #0
 6051 055e 5ED0     		beq	.L393
1870:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6052              		.loc 1 1870 0
 6053 0560 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6054 0562 A649     		ldr	r1, .L412+4
 6055 0564 1346     		mov	r3, r2
 6056 0566 5B00     		lsls	r3, r3, #1
 6057 0568 1344     		add	r3, r3, r2
 6058 056a 9B00     		lsls	r3, r3, #2
 6059 056c 0B44     		add	r3, r3, r1
 6060 056e 1868     		ldr	r0, [r3]
 6061 0570 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6062 0572 A249     		ldr	r1, .L412+4
 6063 0574 1346     		mov	r3, r2
 6064 0576 5B00     		lsls	r3, r3, #1
 6065 0578 1344     		add	r3, r3, r2
 6066 057a 9B00     		lsls	r3, r3, #2
 6067 057c 0B44     		add	r3, r3, r1
 6068 057e 0433     		adds	r3, r3, #4
 6069 0580 1C68     		ldr	r4, [r3]
1871:..\src/interruptions.c ****                                 c_mem.enc[n_line].gears_params[0], c_mem.enc[n_line].gears_params[1
 6070              		.loc 1 1871 0
 6071 0582 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6072 0584 9C49     		ldr	r1, .L412
 6073 0586 1346     		mov	r3, r2
 6074 0588 5B00     		lsls	r3, r3, #1
 6075 058a 1344     		add	r3, r3, r2
 6076 058c 1B01     		lsls	r3, r3, #4
 6077 058e 0B44     		add	r3, r3, r1
 6078 0590 03F2BD13 		addw	r3, r3, #445
 6079 0594 93F90030 		ldrsb	r3, [r3]
1870:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6080              		.loc 1 1870 0
 6081 0598 1D46     		mov	r5, r3
 6082              		.loc 1 1871 0
 6083 059a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6084 059c 9649     		ldr	r1, .L412
 6085 059e 1346     		mov	r3, r2
 6086 05a0 5B00     		lsls	r3, r3, #1
 6087 05a2 1344     		add	r3, r3, r2
 6088 05a4 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 143


 6089 05a6 0B44     		add	r3, r3, r1
 6090 05a8 03F5DF73 		add	r3, r3, #446
 6091 05ac 93F90030 		ldrsb	r3, [r3]
1870:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6092              		.loc 1 1870 0
 6093 05b0 1E46     		mov	r6, r3
 6094              		.loc 1 1871 0
 6095 05b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6096 05b4 9049     		ldr	r1, .L412
 6097 05b6 1346     		mov	r3, r2
 6098 05b8 5B00     		lsls	r3, r3, #1
 6099 05ba 1344     		add	r3, r3, r2
 6100 05bc 1B01     		lsls	r3, r3, #4
 6101 05be 0B44     		add	r3, r3, r1
 6102 05c0 03F2BF13 		addw	r3, r3, #447
 6103 05c4 93F90030 		ldrsb	r3, [r3]
1870:..\src/interruptions.c ****                     init_rot = calc_turns_fcn(comp_value_encoder[n_line][0],comp_value_encoder[n_li
 6104              		.loc 1 1870 0
 6105 05c8 0093     		str	r3, [sp]
 6106 05ca 3346     		mov	r3, r6
 6107 05cc 2A46     		mov	r2, r5
 6108 05ce 2146     		mov	r1, r4
 6109 05d0 FFF7FEFF 		bl	calc_turns_fcn
 6110 05d4 0346     		mov	r3, r0
 6111 05d6 87F82730 		strb	r3, [r7, #39]
1872:..\src/interruptions.c **** 
1873:..\src/interruptions.c **** 
1874:..\src/interruptions.c ****                     if (c_mem.enc[n_line].m_mult[0] < 0)
 6112              		.loc 1 1874 0
 6113 05da FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6114 05dc 8649     		ldr	r1, .L412
 6115 05de 1346     		mov	r3, r2
 6116 05e0 5B00     		lsls	r3, r3, #1
 6117 05e2 1344     		add	r3, r3, r2
 6118 05e4 1B01     		lsls	r3, r3, #4
 6119 05e6 0B44     		add	r3, r3, r1
 6120 05e8 03F5D673 		add	r3, r3, #428
 6121 05ec 1B68     		ldr	r3, [r3]	@ float
 6122 05ee 4FF00001 		mov	r1, #0
 6123 05f2 1846     		mov	r0, r3
 6124 05f4 FFF7FEFF 		bl	__aeabi_fcmplt
 6125 05f8 0346     		mov	r3, r0
 6126 05fa 002B     		cmp	r3, #0
 6127 05fc 05D0     		beq	.L394
1875:..\src/interruptions.c ****                         init_rot = -init_rot;
 6128              		.loc 1 1875 0
 6129 05fe 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 6130 0602 5B42     		negs	r3, r3
 6131 0604 DBB2     		uxtb	r3, r3
 6132 0606 87F82730 		strb	r3, [r7, #39]
 6133              	.L394:
1876:..\src/interruptions.c ****                     
1877:..\src/interruptions.c ****                     g_meas[n_line].rot[0] = (int8)init_rot;
 6134              		.loc 1 1877 0
 6135 060a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6136 060c 7C4A     		ldr	r2, .L412+8
 6137 060e 3421     		movs	r1, #52
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 144


 6138 0610 01FB03F3 		mul	r3, r1, r3
 6139 0614 1344     		add	r3, r3, r2
 6140 0616 1833     		adds	r3, r3, #24
 6141 0618 97F82720 		ldrb	r2, [r7, #39]
 6142 061c 1A70     		strb	r2, [r3]
 6143              	.L393:
1878:..\src/interruptions.c ****                 }    
1879:..\src/interruptions.c **** 
1880:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0)
 6144              		.loc 1 1880 0
 6145 061e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6146 0620 7549     		ldr	r1, .L412
 6147 0622 1346     		mov	r3, r2
 6148 0624 5B00     		lsls	r3, r3, #1
 6149 0626 1344     		add	r3, r3, r2
 6150 0628 1B01     		lsls	r3, r3, #4
 6151 062a 0B44     		add	r3, r3, r1
 6152 062c 03F5D673 		add	r3, r3, #428
 6153 0630 1B68     		ldr	r3, [r3]	@ float
 6154 0632 4FF07E51 		mov	r1, #1065353216
 6155 0636 1846     		mov	r0, r3
 6156 0638 FFF7FEFF 		bl	__aeabi_fcmpeq
 6157 063c 0346     		mov	r3, r0
 6158 063e 002B     		cmp	r3, #0
 6159 0640 22D1     		bne	.L396
1881:..\src/interruptions.c ****                     g_meas[n_line].pos[0] /= c_mem.enc[n_line].m_mult[0];
 6160              		.loc 1 1881 0
 6161 0642 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 6162 0644 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6163 0646 6E4A     		ldr	r2, .L412+8
 6164 0648 3421     		movs	r1, #52
 6165 064a 01FB03F3 		mul	r3, r1, r3
 6166 064e 1344     		add	r3, r3, r2
 6167 0650 1B68     		ldr	r3, [r3]
 6168 0652 1846     		mov	r0, r3
 6169 0654 FFF7FEFF 		bl	__aeabi_i2f
 6170 0658 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6171 065a 6749     		ldr	r1, .L412
 6172 065c 1346     		mov	r3, r2
 6173 065e 5B00     		lsls	r3, r3, #1
 6174 0660 1344     		add	r3, r3, r2
 6175 0662 1B01     		lsls	r3, r3, #4
 6176 0664 0B44     		add	r3, r3, r1
 6177 0666 03F5D673 		add	r3, r3, #428
 6178 066a 1B68     		ldr	r3, [r3]	@ float
 6179 066c 1946     		mov	r1, r3
 6180 066e FFF7FEFF 		bl	__aeabi_fdiv
 6181 0672 0346     		mov	r3, r0
 6182 0674 1846     		mov	r0, r3
 6183 0676 FFF7FEFF 		bl	__aeabi_f2iz
 6184 067a 0146     		mov	r1, r0
 6185 067c 604A     		ldr	r2, .L412+8
 6186 067e 3423     		movs	r3, #52
 6187 0680 03FB04F3 		mul	r3, r3, r4
 6188 0684 1344     		add	r3, r3, r2
 6189 0686 1960     		str	r1, [r3]
 6190              	.L396:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 145


1882:..\src/interruptions.c ****                 
1883:..\src/interruptions.c ****                 value_encoder += ((int32)init_rot << 16); 
 6191              		.loc 1 1883 0
 6192 0688 97F92730 		ldrsb	r3, [r7, #39]
 6193 068c 1B04     		lsls	r3, r3, #16
 6194 068e BA6A     		ldr	r2, [r7, #40]
 6195 0690 1344     		add	r3, r3, r2
 6196 0692 BB62     		str	r3, [r7, #40]
1884:..\src/interruptions.c ****        
1885:..\src/interruptions.c ****                 if (c_mem.enc[n_line].m_mult[0] != 1.0) {
 6197              		.loc 1 1885 0
 6198 0694 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6199 0696 5849     		ldr	r1, .L412
 6200 0698 1346     		mov	r3, r2
 6201 069a 5B00     		lsls	r3, r3, #1
 6202 069c 1344     		add	r3, r3, r2
 6203 069e 1B01     		lsls	r3, r3, #4
 6204 06a0 0B44     		add	r3, r3, r1
 6205 06a2 03F5D673 		add	r3, r3, #428
 6206 06a6 1B68     		ldr	r3, [r3]	@ float
 6207 06a8 4FF07E51 		mov	r1, #1065353216
 6208 06ac 1846     		mov	r0, r3
 6209 06ae FFF7FEFF 		bl	__aeabi_fcmpeq
 6210 06b2 0346     		mov	r3, r0
 6211 06b4 002B     		cmp	r3, #0
 6212 06b6 15D1     		bne	.L398
1886:..\src/interruptions.c ****                     value_encoder *= c_mem.enc[n_line].m_mult[0];
 6213              		.loc 1 1886 0
 6214 06b8 B86A     		ldr	r0, [r7, #40]
 6215 06ba FFF7FEFF 		bl	__aeabi_i2f
 6216 06be FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6217 06c0 4D49     		ldr	r1, .L412
 6218 06c2 1346     		mov	r3, r2
 6219 06c4 5B00     		lsls	r3, r3, #1
 6220 06c6 1344     		add	r3, r3, r2
 6221 06c8 1B01     		lsls	r3, r3, #4
 6222 06ca 0B44     		add	r3, r3, r1
 6223 06cc 03F5D673 		add	r3, r3, #428
 6224 06d0 1B68     		ldr	r3, [r3]	@ float
 6225 06d2 1946     		mov	r1, r3
 6226 06d4 FFF7FEFF 		bl	__aeabi_fmul
 6227 06d8 0346     		mov	r3, r0
 6228 06da 1846     		mov	r0, r3
 6229 06dc FFF7FEFF 		bl	__aeabi_f2iz
 6230 06e0 0346     		mov	r3, r0
 6231 06e2 BB62     		str	r3, [r7, #40]
 6232              	.L398:
1887:..\src/interruptions.c ****                 }
1888:..\src/interruptions.c **** 
1889:..\src/interruptions.c ****                 if (c_mem.dev.dev_type == SOFTHAND_PRO) {
 6233              		.loc 1 1889 0
 6234 06e4 444B     		ldr	r3, .L412
 6235 06e6 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6236 06ea 002B     		cmp	r3, #0
 6237 06ec 07D1     		bne	.L400
1890:..\src/interruptions.c ****                     // Right / Left hand turn
1891:..\src/interruptions.c ****                     if (c_mem.dev.right_left == RIGHT_HAND){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 146


 6238              		.loc 1 1891 0
 6239 06ee 424B     		ldr	r3, .L412
 6240 06f0 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 6241 06f4 002B     		cmp	r3, #0
 6242 06f6 02D1     		bne	.L400
1892:..\src/interruptions.c ****                         value_encoder *= -1;        
 6243              		.loc 1 1892 0
 6244 06f8 BB6A     		ldr	r3, [r7, #40]
 6245 06fa 5B42     		negs	r3, r3
 6246 06fc BB62     		str	r3, [r7, #40]
 6247              	.L400:
1893:..\src/interruptions.c ****                     }
1894:..\src/interruptions.c ****                 }
1895:..\src/interruptions.c ****          
1896:..\src/interruptions.c ****                 g_meas[n_line].pos[0] = value_encoder;
 6248              		.loc 1 1896 0
 6249 06fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6250 0700 3F4A     		ldr	r2, .L412+8
 6251 0702 3421     		movs	r1, #52
 6252 0704 01FB03F3 		mul	r3, r1, r3
 6253 0708 1344     		add	r3, r3, r2
 6254 070a BA6A     		ldr	r2, [r7, #40]
 6255 070c 1A60     		str	r2, [r3]
1897:..\src/interruptions.c ****                 
1898:..\src/interruptions.c ****                 g_refNew[assoc_motor].pos = g_meas[n_line].pos[0];
 6256              		.loc 1 1898 0
 6257 070e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6258 0710 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6259 0712 3B49     		ldr	r1, .L412+8
 6260 0714 3420     		movs	r0, #52
 6261 0716 00FB02F2 		mul	r2, r0, r2
 6262 071a 0A44     		add	r2, r2, r1
 6263 071c 1268     		ldr	r2, [r2]
 6264 071e 3949     		ldr	r1, .L412+12
 6265 0720 1B01     		lsls	r3, r3, #4
 6266 0722 0B44     		add	r3, r3, r1
 6267 0724 1A60     		str	r2, [r3]
1899:..\src/interruptions.c **** 
1900:..\src/interruptions.c ****                 // If necessary activate motor
1901:..\src/interruptions.c ****     			safe_startup_motor_activation[n_line] = TRUE;
 6268              		.loc 1 1901 0
 6269 0726 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6270 0728 374A     		ldr	r2, .L412+16
 6271 072a 0121     		movs	r1, #1
 6272 072c D154     		strb	r1, [r2, r3]
1902:..\src/interruptions.c ****                 // Activate the motor associated to this encoder line
1903:..\src/interruptions.c ****                 g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6273              		.loc 1 1903 0
 6274 072e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6275 0730 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6276 0732 3149     		ldr	r1, .L412
 6277 0734 7420     		movs	r0, #116
 6278 0736 00FB02F2 		mul	r2, r0, r2
 6279 073a 0A44     		add	r2, r2, r1
 6280 073c E032     		adds	r2, r2, #224
 6281 073e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 6282 0740 304A     		ldr	r2, .L412+12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 147


 6283 0742 1B01     		lsls	r3, r3, #4
 6284 0744 1344     		add	r3, r3, r2
 6285 0746 0C33     		adds	r3, r3, #12
 6286 0748 0A46     		mov	r2, r1
 6287 074a 1A70     		strb	r2, [r3]
1904:..\src/interruptions.c ****                 enable_motor(assoc_motor, g_refNew[assoc_motor].onoff);                
 6288              		.loc 1 1904 0
 6289 074c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6290 074e 2D4A     		ldr	r2, .L412+12
 6291 0750 1B01     		lsls	r3, r3, #4
 6292 0752 1344     		add	r3, r3, r2
 6293 0754 0C33     		adds	r3, r3, #12
 6294 0756 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6295 0758 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6296 075a 1146     		mov	r1, r2
 6297 075c 1846     		mov	r0, r3
 6298 075e FFF7FEFF 		bl	enable_motor
1905:..\src/interruptions.c ****                 
1906:..\src/interruptions.c ****                 pos_reconstruct[n_line] = TRUE;
 6299              		.loc 1 1906 0
 6300 0762 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6301 0764 294A     		ldr	r2, .L412+20
 6302 0766 0121     		movs	r1, #1
 6303 0768 D154     		strb	r1, [r2, r3]
 6304              	.L391:
1768:..\src/interruptions.c ****         
 6305              		.loc 1 1768 0 discriminator 2
 6306 076a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6307 076e 0133     		adds	r3, r3, #1
 6308 0770 87F82F30 		strb	r3, [r7, #47]
 6309              	.L380:
1768:..\src/interruptions.c ****         
 6310              		.loc 1 1768 0 is_stmt 0 discriminator 1
 6311 0774 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 6312 0778 022B     		cmp	r3, #2
 6313 077a 7FF6C6AC 		bls	.L401
1907:..\src/interruptions.c ****             }
1908:..\src/interruptions.c ****         }
1909:..\src/interruptions.c ****     } 
1910:..\src/interruptions.c **** 
1911:..\src/interruptions.c **** 	
1912:..\src/interruptions.c **** 	// Wait for 35+SAFE_STARTUP_MOTOR_READINGS cycles before starting motors
1913:..\src/interruptions.c ****     if (safe_startup_motor_activation[n_line]){
 6314              		.loc 1 1913 0 is_stmt 1
 6315 077e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6316 0780 214A     		ldr	r2, .L412+16
 6317 0782 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 6318 0784 002B     		cmp	r3, #0
 6319 0786 34D0     		beq	.L371
1914:..\src/interruptions.c ****         count_startup_motor[n_line]++;
 6320              		.loc 1 1914 0
 6321 0788 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6322 078a 214A     		ldr	r2, .L412+24
 6323 078c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 6324 0790 0132     		adds	r2, r2, #1
 6325 0792 1F49     		ldr	r1, .L412+24
 6326 0794 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 148


1915:..\src/interruptions.c ****         if (count_startup_motor[n_line] >= (uint32)SAFE_STARTUP_MOTOR_READINGS) {                  
 6327              		.loc 1 1915 0
 6328 0798 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6329 079a 1D4A     		ldr	r2, .L412+24
 6330 079c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6331 07a0 B3F5FA5F 		cmp	r3, #8000
 6332 07a4 25D3     		bcc	.L371
1916:..\src/interruptions.c ****             g_refNew[assoc_motor].pos = 0;
 6333              		.loc 1 1916 0
 6334 07a6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6335 07a8 164A     		ldr	r2, .L412+12
 6336 07aa 1B01     		lsls	r3, r3, #4
 6337 07ac 1344     		add	r3, r3, r2
 6338 07ae 0022     		movs	r2, #0
 6339 07b0 1A60     		str	r2, [r3]
1917:..\src/interruptions.c ****             
1918:..\src/interruptions.c ****             // Activate the motor associated to this encoder line
1919:..\src/interruptions.c ****             g_refNew[assoc_motor].onoff = c_mem.motor[assoc_motor].activ;
 6340              		.loc 1 1919 0
 6341 07b2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6342 07b4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6343 07b6 1049     		ldr	r1, .L412
 6344 07b8 7420     		movs	r0, #116
 6345 07ba 00FB02F2 		mul	r2, r0, r2
 6346 07be 0A44     		add	r2, r2, r1
 6347 07c0 E032     		adds	r2, r2, #224
 6348 07c2 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 6349 07c4 0F4A     		ldr	r2, .L412+12
 6350 07c6 1B01     		lsls	r3, r3, #4
 6351 07c8 1344     		add	r3, r3, r2
 6352 07ca 0C33     		adds	r3, r3, #12
 6353 07cc 0A46     		mov	r2, r1
 6354 07ce 1A70     		strb	r2, [r3]
1920:..\src/interruptions.c ****             enable_motor(assoc_motor, g_refNew[assoc_motor].onoff); 
 6355              		.loc 1 1920 0
 6356 07d0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6357 07d2 0C4A     		ldr	r2, .L412+12
 6358 07d4 1B01     		lsls	r3, r3, #4
 6359 07d6 1344     		add	r3, r3, r2
 6360 07d8 0C33     		adds	r3, r3, #12
 6361 07da 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6362 07dc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6363 07de 1146     		mov	r1, r2
 6364 07e0 1846     		mov	r0, r3
 6365 07e2 FFF7FEFF 		bl	enable_motor
1921:..\src/interruptions.c ****                         
1922:..\src/interruptions.c ****             safe_startup_motor_activation[n_line] = FALSE;
 6366              		.loc 1 1922 0
 6367 07e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6368 07e8 074A     		ldr	r2, .L412+16
 6369 07ea 0021     		movs	r1, #0
 6370 07ec D154     		strb	r1, [r2, r3]
 6371 07ee 00E0     		b	.L371
 6372              	.L407:
1823:..\src/interruptions.c ****                 }
 6373              		.loc 1 1823 0
 6374 07f0 00BF     		nop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 149


 6375              	.L371:
1923:..\src/interruptions.c ****         }
1924:..\src/interruptions.c ****     }
1925:..\src/interruptions.c ****  
1926:..\src/interruptions.c **** }
 6376              		.loc 1 1926 0
 6377 07f2 3437     		adds	r7, r7, #52
 6378              		.cfi_def_cfa_offset 20
 6379 07f4 BD46     		mov	sp, r7
 6380              		.cfi_def_cfa_register 13
 6381              		@ sp needed
 6382 07f6 F0BD     		pop	{r4, r5, r6, r7, pc}
 6383              	.L413:
 6384              		.align	2
 6385              	.L412:
 6386 07f8 00000000 		.word	c_mem
 6387 07fc F8000000 		.word	comp_value_encoder.10637
 6388 0800 00000000 		.word	g_meas
 6389 0804 00000000 		.word	g_refNew
 6390 0808 64010000 		.word	safe_startup_motor_activation.10640
 6391 080c 00000000 		.word	pos_reconstruct
 6392 0810 68010000 		.word	count_startup_motor.10642
 6393              		.cfi_endproc
 6394              	.LFE73:
 6395              		.size	encoder_reading_SPI, .-encoder_reading_SPI
 6396              		.section	.text.analog_read_end,"ax",%progbits
 6397              		.align	2
 6398              		.global	analog_read_end
 6399              		.thumb
 6400              		.thumb_func
 6401              		.type	analog_read_end, %function
 6402              	analog_read_end:
 6403              	.LFB74:
1927:..\src/interruptions.c **** 
1928:..\src/interruptions.c **** //==============================================================================
1929:..\src/interruptions.c **** //                                                           ANALOG MEASUREMENTS
1930:..\src/interruptions.c **** //==============================================================================
1931:..\src/interruptions.c **** 
1932:..\src/interruptions.c **** void analog_read_end() {
 6404              		.loc 1 1932 0
 6405              		.cfi_startproc
 6406              		@ args = 0, pretend = 0, frame = 8
 6407              		@ frame_needed = 1, uses_anonymous_args = 0
 6408 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6409              		.cfi_def_cfa_offset 20
 6410              		.cfi_offset 4, -20
 6411              		.cfi_offset 5, -16
 6412              		.cfi_offset 6, -12
 6413              		.cfi_offset 7, -8
 6414              		.cfi_offset 14, -4
 6415 0002 83B0     		sub	sp, sp, #12
 6416              		.cfi_def_cfa_offset 32
 6417 0004 00AF     		add	r7, sp, #0
 6418              		.cfi_def_cfa_register 7
1933:..\src/interruptions.c **** 
1934:..\src/interruptions.c ****     /* =========================================================================
1935:..\src/interruptions.c ****     /   Ideal formulation to calculate tension and current
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 150


1936:..\src/interruptions.c ****     /
1937:..\src/interruptions.c ****     /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
1938:..\src/interruptions.c ****     /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
1939:..\src/interruptions.c ****     /
1940:..\src/interruptions.c ****     /   Definition:
1941:..\src/interruptions.c ****     /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
1942:..\src/interruptions.c ****     /   offset = 2000 -> hardware amplifier bias in mV
1943:..\src/interruptions.c ****     /   gain = 8.086 -> amplifier gain
1944:..\src/interruptions.c ****     /   resistor = 18 -> resistor of voltage divider in KOhm 
1945:..\src/interruptions.c ****     /
1946:..\src/interruptions.c ****     /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
1947:..\src/interruptions.c ****     /   and offset unit of measurement is counts, instead dev_tension and
1948:..\src/interruptions.c ****     /   g_meas.curr[] are converted in properly unit.
1949:..\src/interruptions.c ****     /  =========================================================================
1950:..\src/interruptions.c ****     */
1951:..\src/interruptions.c **** 
1952:..\src/interruptions.c ****     int32 CYDATA i_aux;
1953:..\src/interruptions.c **** 
1954:..\src/interruptions.c ****     static uint16 emg_counter_1 = 0;
1955:..\src/interruptions.c ****     static uint16 emg_counter_2 = 0;
1956:..\src/interruptions.c ****     static uint16 UD_counter = 0;
1957:..\src/interruptions.c ****     static uint16 LR_counter = 0;
1958:..\src/interruptions.c ****     static int32 UD_mean_value;
1959:..\src/interruptions.c ****     static int32 LR_mean_value;
1960:..\src/interruptions.c **** 	static uint8 first_tension_valid = TRUE;
1961:..\src/interruptions.c ****     static int32 detect_power_cycle_prev = -3;
1962:..\src/interruptions.c ****     static uint16 count = 0;
1963:..\src/interruptions.c ****     static uint32 v_count = 0;
1964:..\src/interruptions.c ****     static uint8 idx = 0;
1965:..\src/interruptions.c ****     
1966:..\src/interruptions.c ****     
1967:..\src/interruptions.c ****     // Wait for conversion end
1968:..\src/interruptions.c ****     
1969:..\src/interruptions.c ****     while(!ADC_STATUS_Read()){
 6419              		.loc 1 1969 0
 6420 0006 08E0     		b	.L415
 6421              	.L416:
1970:..\src/interruptions.c ****         
1971:..\src/interruptions.c ****         if (interrupt_flag){
 6422              		.loc 1 1971 0
 6423 0008 AA4B     		ldr	r3, .L572
 6424 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6425 000c 002B     		cmp	r3, #0
 6426 000e 04D0     		beq	.L415
1972:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6427              		.loc 1 1972 0
 6428 0010 A84B     		ldr	r3, .L572
 6429 0012 0022     		movs	r2, #0
 6430 0014 1A70     		strb	r2, [r3]
1973:..\src/interruptions.c ****             interrupt_manager();
 6431              		.loc 1 1973 0
 6432 0016 FFF7FEFF 		bl	interrupt_manager
 6433              	.L415:
1969:..\src/interruptions.c ****         
 6434              		.loc 1 1969 0
 6435 001a FFF7FEFF 		bl	ADC_STATUS_Read
 6436 001e 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 151


 6437 0020 002B     		cmp	r3, #0
 6438 0022 F1D0     		beq	.L416
1974:..\src/interruptions.c ****         }
1975:..\src/interruptions.c ****     }
1976:..\src/interruptions.c ****     
1977:..\src/interruptions.c **** #ifdef AIR_CHAMBERS_FB_FW
1978:..\src/interruptions.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
1979:..\src/interruptions.c ****         // Read pressure in any case
1980:..\src/interruptions.c ****         g_fb_meas.pressure  = (int32)(ADC_buf[0] -1540);    //0 - 4096  
1981:..\src/interruptions.c ****         g_fb_meas.pressure = (((float)g_fb_meas.pressure/4096.0)/0.004);       // datasheet transfe
1982:..\src/interruptions.c ****         if (g_fb_meas.pressure < 0) g_fb_meas.pressure = 0;
1983:..\src/interruptions.c ****     }
1984:..\src/interruptions.c **** #endif
1985:..\src/interruptions.c ****  
1986:..\src/interruptions.c ****     // Convert tension read
1987:..\src/interruptions.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
 6439              		.loc 1 1987 0
 6440 0024 A44B     		ldr	r3, .L572+4
 6441 0026 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 6442 002a 022B     		cmp	r3, #2
 6443 002c 04D1     		bne	.L417
1988:..\src/interruptions.c ****         dev_tension[0] = 5000;
 6444              		.loc 1 1988 0
 6445 002e A34B     		ldr	r3, .L572+8
 6446 0030 41F28832 		movw	r2, #5000
 6447 0034 1A60     		str	r2, [r3]
 6448 0036 0BE0     		b	.L418
 6449              	.L417:
1989:..\src/interruptions.c ****     }
1990:..\src/interruptions.c ****     else {
1991:..\src/interruptions.c ****         dev_tension[0] =  ((int32)(ADC_buf[0] - 1621) * 1990) >> 7;
 6450              		.loc 1 1991 0
 6451 0038 A14B     		ldr	r3, .L572+12
 6452 003a B3F90030 		ldrsh	r3, [r3]
 6453 003e A3F25563 		subw	r3, r3, #1621
 6454 0042 40F2C672 		movw	r2, #1990
 6455 0046 02FB03F3 		mul	r3, r2, r3
 6456 004a DB11     		asrs	r3, r3, #7
 6457 004c 9B4A     		ldr	r2, .L572+8
 6458 004e 1360     		str	r3, [r2]
 6459              	.L418:
1992:..\src/interruptions.c ****     }
1993:..\src/interruptions.c ****     
1994:..\src/interruptions.c ****     // Read also 2nd power tension (if necessary)
1995:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 4) {
 6460              		.loc 1 1995 0
 6461 0050 9C4B     		ldr	r3, .L572+16
 6462 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6463 0054 042B     		cmp	r3, #4
 6464 0056 0BD9     		bls	.L419
1996:..\src/interruptions.c ****         dev_tension[1] = ((int32)(ADC_buf[4] - 1621) * 1990) >> 7;
 6465              		.loc 1 1996 0
 6466 0058 994B     		ldr	r3, .L572+12
 6467 005a B3F90830 		ldrsh	r3, [r3, #8]
 6468 005e A3F25563 		subw	r3, r3, #1621
 6469 0062 40F2C672 		movw	r2, #1990
 6470 0066 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 152


 6471 006a DB11     		asrs	r3, r3, #7
 6472 006c 934A     		ldr	r2, .L572+8
 6473 006e 5360     		str	r3, [r2, #4]
 6474              	.L419:
1997:..\src/interruptions.c ****     }
1998:..\src/interruptions.c ****     
1999:..\src/interruptions.c ****     if (interrupt_flag){
 6475              		.loc 1 1999 0
 6476 0070 904B     		ldr	r3, .L572
 6477 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6478 0074 002B     		cmp	r3, #0
 6479 0076 04D0     		beq	.L420
2000:..\src/interruptions.c ****         interrupt_flag = FALSE;                                                                    
 6480              		.loc 1 2000 0
 6481 0078 8E4B     		ldr	r3, .L572
 6482 007a 0022     		movs	r2, #0
 6483 007c 1A70     		strb	r2, [r3]
2001:..\src/interruptions.c ****         interrupt_manager();
 6484              		.loc 1 2001 0
 6485 007e FFF7FEFF 		bl	interrupt_manager
 6486              	.L420:
2002:..\src/interruptions.c ****     }
2003:..\src/interruptions.c ****     
2004:..\src/interruptions.c ****     // Update cycle power value
2005:..\src/interruptions.c ****     detect_power_cycle = filter(dev_tension[0]/6000, &filt_detect_pc);
 6487              		.loc 1 2005 0
 6488 0082 8E4B     		ldr	r3, .L572+8
 6489 0084 1B68     		ldr	r3, [r3]
 6490 0086 904A     		ldr	r2, .L572+20
 6491 0088 82FB0312 		smull	r1, r2, r2, r3
 6492 008c D211     		asrs	r2, r2, #7
 6493 008e DB17     		asrs	r3, r3, #31
 6494 0090 D31A     		subs	r3, r2, r3
 6495 0092 8E49     		ldr	r1, .L572+24
 6496 0094 1846     		mov	r0, r3
 6497 0096 FFF7FEFF 		bl	filter
 6498 009a 0246     		mov	r2, r0
 6499 009c 8C4B     		ldr	r3, .L572+28
 6500 009e 1A60     		str	r2, [r3]
2006:..\src/interruptions.c ****     if (detect_power_cycle_prev < 0 && detect_power_cycle >= 0){    // Only positive difference is 
 6501              		.loc 1 2006 0
 6502 00a0 8C4B     		ldr	r3, .L572+32
 6503 00a2 1B68     		ldr	r3, [r3]
 6504 00a4 002B     		cmp	r3, #0
 6505 00a6 08DA     		bge	.L421
 6506              		.loc 1 2006 0 is_stmt 0 discriminator 1
 6507 00a8 894B     		ldr	r3, .L572+28
 6508 00aa 1B68     		ldr	r3, [r3]
 6509 00ac 002B     		cmp	r3, #0
 6510 00ae 04DB     		blt	.L421
2007:..\src/interruptions.c ****         g_mem.cnt.power_cycles++;       // New power cycle (update value)   
 6511              		.loc 1 2007 0 is_stmt 1
 6512 00b0 814B     		ldr	r3, .L572+4
 6513 00b2 1B6E     		ldr	r3, [r3, #96]
 6514 00b4 0133     		adds	r3, r3, #1
 6515 00b6 804A     		ldr	r2, .L572+4
 6516 00b8 1366     		str	r3, [r2, #96]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 153


 6517              	.L421:
2008:..\src/interruptions.c ****     }
2009:..\src/interruptions.c ****     detect_power_cycle_prev = detect_power_cycle;
 6518              		.loc 1 2009 0
 6519 00ba 854B     		ldr	r3, .L572+28
 6520 00bc 1B68     		ldr	r3, [r3]
 6521 00be 854A     		ldr	r2, .L572+32
 6522 00c0 1360     		str	r3, [r2]
2010:..\src/interruptions.c ****   
2011:..\src/interruptions.c ****     
2012:..\src/interruptions.c ****     // VOLTAGE READING
2013:..\src/interruptions.c ****     // Once firmware starts, first_tension_valid flag is set to TRUE while tension_valid status is 
2014:..\src/interruptions.c ****     // Step 1) Wait for battery voltage stabilization and filter convergence for 1000 cycles (v_cou
2015:..\src/interruptions.c ****     // Step 2) Wait for another 1000 cycles (count counter) to decide which is full charge power te
2016:..\src/interruptions.c ****     // Low voltage condition) Whenever dev_tension ADC value is under 7000 mV, tension_valid flag i
2017:..\src/interruptions.c ****     
2018:..\src/interruptions.c **** 	if (first_tension_valid && tension_valid) {     // Voltage reading (Step 2)
 6523              		.loc 1 2018 0
 6524 00c2 854B     		ldr	r3, .L572+36
 6525 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6526 00c6 002B     		cmp	r3, #0
 6527 00c8 4DD0     		beq	.L422
 6528              		.loc 1 2018 0 is_stmt 0 discriminator 1
 6529 00ca 844B     		ldr	r3, .L572+40
 6530 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6531 00ce 002B     		cmp	r3, #0
 6532 00d0 49D0     		beq	.L422
2019:..\src/interruptions.c ****         count = count + 1;
 6533              		.loc 1 2019 0 is_stmt 1
 6534 00d2 834B     		ldr	r3, .L572+44
 6535 00d4 1B88     		ldrh	r3, [r3]
 6536 00d6 0133     		adds	r3, r3, #1
 6537 00d8 9AB2     		uxth	r2, r3
 6538 00da 814B     		ldr	r3, .L572+44
 6539 00dc 1A80     		strh	r2, [r3]	@ movhi
2020:..\src/interruptions.c ****         
2021:..\src/interruptions.c ****         if (count == 1000){
 6540              		.loc 1 2021 0
 6541 00de 804B     		ldr	r3, .L572+44
 6542 00e0 1B88     		ldrh	r3, [r3]
 6543 00e2 B3F57A7F 		cmp	r3, #1000
 6544 00e6 3ED1     		bne	.L422
2022:..\src/interruptions.c ****             for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6545              		.loc 1 2022 0
 6546 00e8 7E4B     		ldr	r3, .L572+48
 6547 00ea 0022     		movs	r2, #0
 6548 00ec 1A70     		strb	r2, [r3]
 6549 00ee 33E0     		b	.L423
 6550              	.L427:
2023:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6551              		.loc 1 2023 0
 6552 00f0 7C4B     		ldr	r3, .L572+48
 6553 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6554 00f4 1A46     		mov	r2, r3
 6555 00f6 714B     		ldr	r3, .L572+8
 6556 00f8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6557 00fc 42F22732 		movw	r2, #8999
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 154


 6558 0100 9342     		cmp	r3, r2
 6559 0102 08DC     		bgt	.L424
2024:..\src/interruptions.c ****                     pow_tension[idx] = 8000;
 6560              		.loc 1 2024 0
 6561 0104 774B     		ldr	r3, .L572+48
 6562 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6563 0108 1946     		mov	r1, r3
 6564 010a 774B     		ldr	r3, .L572+52
 6565 010c 4FF4FA52 		mov	r2, #8000
 6566 0110 43F82120 		str	r2, [r3, r1, lsl #2]
 6567 0114 1AE0     		b	.L425
 6568              	.L424:
2025:..\src/interruptions.c ****                 }
2026:..\src/interruptions.c ****                 else {      // 12 V - 24 V cases
2027:..\src/interruptions.c ****                     if (dev_tension[idx] < 13000) {
 6569              		.loc 1 2027 0
 6570 0116 734B     		ldr	r3, .L572+48
 6571 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6572 011a 1A46     		mov	r2, r3
 6573 011c 674B     		ldr	r3, .L572+8
 6574 011e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 6575 0122 43F2C722 		movw	r2, #12999
 6576 0126 9342     		cmp	r3, r2
 6577 0128 08DC     		bgt	.L426
2028:..\src/interruptions.c ****                         pow_tension[idx] = 12000;
 6578              		.loc 1 2028 0
 6579 012a 6E4B     		ldr	r3, .L572+48
 6580 012c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6581 012e 1946     		mov	r1, r3
 6582 0130 6D4B     		ldr	r3, .L572+52
 6583 0132 42F6E062 		movw	r2, #12000
 6584 0136 43F82120 		str	r2, [r3, r1, lsl #2]
 6585 013a 07E0     		b	.L425
 6586              	.L426:
2029:..\src/interruptions.c ****                     }
2030:..\src/interruptions.c ****                     else
2031:..\src/interruptions.c ****                         pow_tension[idx] = 24000;
 6587              		.loc 1 2031 0
 6588 013c 694B     		ldr	r3, .L572+48
 6589 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6590 0140 1946     		mov	r1, r3
 6591 0142 694B     		ldr	r3, .L572+52
 6592 0144 45F6C052 		movw	r2, #24000
 6593 0148 43F82120 		str	r2, [r3, r1, lsl #2]
 6594              	.L425:
2022:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6595              		.loc 1 2022 0 discriminator 2
 6596 014c 654B     		ldr	r3, .L572+48
 6597 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6598 0150 0133     		adds	r3, r3, #1
 6599 0152 DAB2     		uxtb	r2, r3
 6600 0154 634B     		ldr	r3, .L572+48
 6601 0156 1A70     		strb	r2, [r3]
 6602              	.L423:
2022:..\src/interruptions.c ****                 if (dev_tension[idx] < 9000) {   // 8 V case
 6603              		.loc 1 2022 0 is_stmt 0 discriminator 1
 6604 0158 624B     		ldr	r3, .L572+48
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 155


 6605 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6606 015c 012B     		cmp	r3, #1
 6607 015e C7D9     		bls	.L427
2032:..\src/interruptions.c ****                 }
2033:..\src/interruptions.c ****             }
2034:..\src/interruptions.c ****             first_tension_valid = FALSE;
 6608              		.loc 1 2034 0 is_stmt 1
 6609 0160 5D4B     		ldr	r3, .L572+36
 6610 0162 0022     		movs	r2, #0
 6611 0164 1A70     		strb	r2, [r3]
 6612              	.L422:
2035:..\src/interruptions.c ****         }
2036:..\src/interruptions.c ****     }
2037:..\src/interruptions.c **** 
2038:..\src/interruptions.c ****     // Until there is no valid input tension repeat this measurement
2039:..\src/interruptions.c **** 
2040:..\src/interruptions.c ****     if (dev_tension[0] < 6500 && (NUM_OF_ANALOG_INPUTS<=4 || dev_tension[1] < 6500)) {       // Vol
 6613              		.loc 1 2040 0
 6614 0166 554B     		ldr	r3, .L572+8
 6615 0168 1B68     		ldr	r3, [r3]
 6616 016a 41F66312 		movw	r2, #6499
 6617 016e 9342     		cmp	r3, r2
 6618 0170 00F3EF80 		bgt	.L428
 6619              		.loc 1 2040 0 is_stmt 0 discriminator 1
 6620 0174 534B     		ldr	r3, .L572+16
 6621 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6622 0178 042B     		cmp	r3, #4
 6623 017a 06D9     		bls	.L429
 6624              		.loc 1 2040 0 discriminator 2
 6625 017c 4F4B     		ldr	r3, .L572+8
 6626 017e 5B68     		ldr	r3, [r3, #4]
 6627 0180 41F66312 		movw	r2, #6499
 6628 0184 9342     		cmp	r3, r2
 6629 0186 00F3E480 		bgt	.L428
 6630              	.L429:
2041:..\src/interruptions.c ****         // PSoC is powered through uUSB
2042:..\src/interruptions.c ****         
2043:..\src/interruptions.c ****         tension_valid = FALSE;
 6631              		.loc 1 2043 0 is_stmt 1
 6632 018a 544B     		ldr	r3, .L572+40
 6633 018c 0022     		movs	r2, #0
 6634 018e 1A70     		strb	r2, [r3]
2044:..\src/interruptions.c ****             
2045:..\src/interruptions.c ****         if (interrupt_flag){
 6635              		.loc 1 2045 0
 6636 0190 484B     		ldr	r3, .L572
 6637 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6638 0194 002B     		cmp	r3, #0
 6639 0196 04D0     		beq	.L430
2046:..\src/interruptions.c ****             interrupt_flag = FALSE;
 6640              		.loc 1 2046 0
 6641 0198 464B     		ldr	r3, .L572
 6642 019a 0022     		movs	r2, #0
 6643 019c 1A70     		strb	r2, [r3]
2047:..\src/interruptions.c ****             interrupt_manager();
 6644              		.loc 1 2047 0
 6645 019e FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 156


 6646              	.L430:
2048:..\src/interruptions.c ****         }
2049:..\src/interruptions.c ****         
2050:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6647              		.loc 1 2050 0
 6648 01a2 504B     		ldr	r3, .L572+48
 6649 01a4 0022     		movs	r2, #0
 6650 01a6 1A70     		strb	r2, [r3]
 6651 01a8 7BE0     		b	.L431
 6652              	.L434:
2051:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6653              		.loc 1 2051 0
 6654 01aa 504B     		ldr	r3, .L572+56
 6655 01ac 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 6656 01b0 002B     		cmp	r3, #0
 6657 01b2 54D0     		beq	.L432
2052:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6658              		.loc 1 2052 0
 6659 01b4 4B4B     		ldr	r3, .L572+48
 6660 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6661 01b8 1946     		mov	r1, r3
 6662 01ba 4C4A     		ldr	r2, .L572+56
 6663 01bc 7423     		movs	r3, #116
 6664 01be 03FB01F3 		mul	r3, r3, r1
 6665 01c2 1344     		add	r3, r3, r2
 6666 01c4 03F58773 		add	r3, r3, #270
 6667 01c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6668 01ca 022B     		cmp	r3, #2
 6669 01cc 33D0     		beq	.L433
2053:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6670              		.loc 1 2053 0 discriminator 1
 6671 01ce 454B     		ldr	r3, .L572+48
 6672 01d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6673 01d2 1946     		mov	r1, r3
 6674 01d4 454A     		ldr	r2, .L572+56
 6675 01d6 7423     		movs	r3, #116
 6676 01d8 03FB01F3 		mul	r3, r3, r1
 6677 01dc 1344     		add	r3, r3, r2
 6678 01de 03F58773 		add	r3, r3, #270
 6679 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2052:..\src/interruptions.c ****                 if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 6680              		.loc 1 2052 0 discriminator 1
 6681 01e4 032B     		cmp	r3, #3
 6682 01e6 26D0     		beq	.L433
2054:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6683              		.loc 1 2054 0
 6684 01e8 3E4B     		ldr	r3, .L572+48
 6685 01ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6686 01ec 1946     		mov	r1, r3
 6687 01ee 3F4A     		ldr	r2, .L572+56
 6688 01f0 7423     		movs	r3, #116
 6689 01f2 03FB01F3 		mul	r3, r3, r1
 6690 01f6 1344     		add	r3, r3, r2
 6691 01f8 03F58773 		add	r3, r3, #270
 6692 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2053:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 6693              		.loc 1 2053 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 157


 6694 01fe 042B     		cmp	r3, #4
 6695 0200 19D0     		beq	.L433
2055:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6696              		.loc 1 2055 0
 6697 0202 384B     		ldr	r3, .L572+48
 6698 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6699 0206 1946     		mov	r1, r3
 6700 0208 384A     		ldr	r2, .L572+56
 6701 020a 7423     		movs	r3, #116
 6702 020c 03FB01F3 		mul	r3, r3, r1
 6703 0210 1344     		add	r3, r3, r2
 6704 0212 03F58773 		add	r3, r3, #270
 6705 0216 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2054:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 6706              		.loc 1 2054 0
 6707 0218 052B     		cmp	r3, #5
 6708 021a 0CD0     		beq	.L433
2056:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 6709              		.loc 1 2056 0
 6710 021c 314B     		ldr	r3, .L572+48
 6711 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6712 0220 1946     		mov	r1, r3
 6713 0222 324A     		ldr	r2, .L572+56
 6714 0224 7423     		movs	r3, #116
 6715 0226 03FB01F3 		mul	r3, r3, r1
 6716 022a 1344     		add	r3, r3, r2
 6717 022c 03F58773 		add	r3, r3, #270
 6718 0230 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2055:..\src/interruptions.c ****                     (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 6719              		.loc 1 2055 0
 6720 0232 072B     		cmp	r3, #7
 6721 0234 13D1     		bne	.L432
 6722              	.L433:
2057:..\src/interruptions.c ****                     g_ref[idx].onoff = 0x00;
 6723              		.loc 1 2057 0
 6724 0236 2B4B     		ldr	r3, .L572+48
 6725 0238 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6726 023a 2D4A     		ldr	r2, .L572+60
 6727 023c 1B01     		lsls	r3, r3, #4
 6728 023e 1344     		add	r3, r3, r2
 6729 0240 0C33     		adds	r3, r3, #12
 6730 0242 0022     		movs	r2, #0
 6731 0244 1A70     		strb	r2, [r3]
2058:..\src/interruptions.c ****                     enable_motor(idx, g_ref[idx].onoff); 
 6732              		.loc 1 2058 0
 6733 0246 274B     		ldr	r3, .L572+48
 6734 0248 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6735 024a 264B     		ldr	r3, .L572+48
 6736 024c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6737 024e 284A     		ldr	r2, .L572+60
 6738 0250 1B01     		lsls	r3, r3, #4
 6739 0252 1344     		add	r3, r3, r2
 6740 0254 0C33     		adds	r3, r3, #12
 6741 0256 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6742 0258 1946     		mov	r1, r3
 6743 025a FFF7FEFF 		bl	enable_motor
 6744              	.L432:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 158


2059:..\src/interruptions.c ****                     
2060:..\src/interruptions.c ****                 }
2061:..\src/interruptions.c ****             }
2062:..\src/interruptions.c **** 
2063:..\src/interruptions.c ****             // Assign dev_tension and reset current
2064:..\src/interruptions.c ****             dev_tension[idx] = 5000;
 6745              		.loc 1 2064 0 discriminator 2
 6746 025e 214B     		ldr	r3, .L572+48
 6747 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6748 0262 1946     		mov	r1, r3
 6749 0264 154B     		ldr	r3, .L572+8
 6750 0266 41F28832 		movw	r2, #5000
 6751 026a 43F82120 		str	r2, [r3, r1, lsl #2]
2065:..\src/interruptions.c ****             g_meas[g_mem.motor[idx].encoder_line].curr = 0;
 6752              		.loc 1 2065 0 discriminator 2
 6753 026e 1D4B     		ldr	r3, .L572+48
 6754 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6755 0272 1946     		mov	r1, r3
 6756 0274 104A     		ldr	r2, .L572+4
 6757 0276 7423     		movs	r3, #116
 6758 0278 03FB01F3 		mul	r3, r3, r1
 6759 027c 1344     		add	r3, r3, r2
 6760 027e 03F58873 		add	r3, r3, #272
 6761 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6762 0284 1946     		mov	r1, r3
 6763 0286 1B4A     		ldr	r2, .L572+64
 6764 0288 3423     		movs	r3, #52
 6765 028a 03FB01F3 		mul	r3, r3, r1
 6766 028e 1344     		add	r3, r3, r2
 6767 0290 0C33     		adds	r3, r3, #12
 6768 0292 0022     		movs	r2, #0
 6769 0294 1A60     		str	r2, [r3]
2050:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6770              		.loc 1 2050 0 discriminator 2
 6771 0296 134B     		ldr	r3, .L572+48
 6772 0298 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6773 029a 0133     		adds	r3, r3, #1
 6774 029c DAB2     		uxtb	r2, r3
 6775 029e 114B     		ldr	r3, .L572+48
 6776 02a0 1A70     		strb	r2, [r3]
 6777              	.L431:
2050:..\src/interruptions.c ****             if (c_mem.emg.emg_calibration_flag) {
 6778              		.loc 1 2050 0 is_stmt 0 discriminator 1
 6779 02a2 104B     		ldr	r3, .L572+48
 6780 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6781 02a6 012B     		cmp	r3, #1
 6782 02a8 7FF67FAF 		bls	.L434
2066:..\src/interruptions.c ****         }
2067:..\src/interruptions.c ****         
2068:..\src/interruptions.c ****         // Reset emg
2069:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_INPUT_EMGS; idx++){
 6783              		.loc 1 2069 0 is_stmt 1
 6784 02ac 0D4B     		ldr	r3, .L572+48
 6785 02ae 0022     		movs	r2, #0
 6786 02b0 1A70     		strb	r2, [r3]
 6787 02b2 2EE0     		b	.L435
 6788              	.L573:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 159


 6789              		.align	2
 6790              	.L572:
 6791 02b4 00000000 		.word	interrupt_flag
 6792 02b8 00000000 		.word	g_mem
 6793 02bc 00000000 		.word	dev_tension
 6794 02c0 00000000 		.word	ADC_buf
 6795 02c4 00000000 		.word	NUM_OF_ANALOG_INPUTS
 6796 02c8 F1197605 		.word	91625969
 6797 02cc 00000000 		.word	filt_detect_pc
 6798 02d0 00000000 		.word	detect_power_cycle
 6799 02d4 08000000 		.word	detect_power_cycle_prev.10669
 6800 02d8 0C000000 		.word	first_tension_valid.10668
 6801 02dc 00000000 		.word	tension_valid
 6802 02e0 70010000 		.word	count.10670
 6803 02e4 72010000 		.word	idx.10672
 6804 02e8 00000000 		.word	pow_tension
 6805 02ec 00000000 		.word	c_mem
 6806 02f0 00000000 		.word	g_ref
 6807 02f4 00000000 		.word	g_meas
 6808              	.L436:
2070:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6809              		.loc 1 2070 0 discriminator 3
 6810 02f8 6C4B     		ldr	r3, .L574
 6811 02fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6812 02fc 1946     		mov	r1, r3
 6813 02fe 6C4B     		ldr	r3, .L574+4
 6814 0300 0022     		movs	r2, #0
 6815 0302 43F82120 		str	r2, [r3, r1, lsl #2]
2069:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6816              		.loc 1 2069 0 discriminator 3
 6817 0306 694B     		ldr	r3, .L574
 6818 0308 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6819 030a 0133     		adds	r3, r3, #1
 6820 030c DAB2     		uxtb	r2, r3
 6821 030e 674B     		ldr	r3, .L574
 6822 0310 1A70     		strb	r2, [r3]
 6823              	.L435:
2069:..\src/interruptions.c ****             g_adc_meas.emg[idx] = 0;
 6824              		.loc 1 2069 0 is_stmt 0 discriminator 1
 6825 0312 664B     		ldr	r3, .L574
 6826 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6827 0316 012B     		cmp	r3, #1
 6828 0318 EED9     		bls	.L436
2071:..\src/interruptions.c ****         }
2072:..\src/interruptions.c ****         for (idx = 0; c_mem.exp.read_ADC_sensors_port_flag && idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 6829              		.loc 1 2072 0 is_stmt 1
 6830 031a 644B     		ldr	r3, .L574
 6831 031c 0022     		movs	r2, #0
 6832 031e 1A70     		strb	r2, [r3]
 6833 0320 0CE0     		b	.L437
 6834              	.L439:
2073:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6835              		.loc 1 2073 0 discriminator 4
 6836 0322 624B     		ldr	r3, .L574
 6837 0324 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6838 0326 624A     		ldr	r2, .L574+4
 6839 0328 0233     		adds	r3, r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 160


 6840 032a 0021     		movs	r1, #0
 6841 032c 42F82310 		str	r1, [r2, r3, lsl #2]
2072:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6842              		.loc 1 2072 0 discriminator 4
 6843 0330 5E4B     		ldr	r3, .L574
 6844 0332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6845 0334 0133     		adds	r3, r3, #1
 6846 0336 DAB2     		uxtb	r2, r3
 6847 0338 5C4B     		ldr	r3, .L574
 6848 033a 1A70     		strb	r2, [r3]
 6849              	.L437:
2072:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6850              		.loc 1 2072 0 is_stmt 0 discriminator 1
 6851 033c 5D4B     		ldr	r3, .L574+8
 6852 033e 93F82F32 		ldrb	r3, [r3, #559]	@ zero_extendqisi2
 6853 0342 002B     		cmp	r3, #0
 6854 0344 00F03382 		beq	.L554
2072:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = 0;
 6855              		.loc 1 2072 0 discriminator 3
 6856 0348 584B     		ldr	r3, .L574
 6857 034a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6858 034c 052B     		cmp	r3, #5
 6859 034e E8D9     		bls	.L439
2040:..\src/interruptions.c ****         // PSoC is powered through uUSB
 6860              		.loc 1 2040 0 is_stmt 1
 6861 0350 2DE2     		b	.L554
 6862              	.L428:
2074:..\src/interruptions.c ****         }
2075:..\src/interruptions.c ****         
2076:..\src/interruptions.c ****     }
2077:..\src/interruptions.c ****     else {
2078:..\src/interruptions.c ****         // PSoC is powered through battery or power source
2079:..\src/interruptions.c ****         // (at least > 6.88 V (86% of 8 V) that is minimum charge of smallest battery (2 cells @ 20
2080:..\src/interruptions.c ****         
2081:..\src/interruptions.c ****         // Read ADC sampled value of power source tension and motor current
2082:..\src/interruptions.c ****         
2083:..\src/interruptions.c ****         if (v_count == 1000 && !tension_valid){     // Voltage reading (Step 1)
 6863              		.loc 1 2083 0
 6864 0352 594B     		ldr	r3, .L574+12
 6865 0354 1B68     		ldr	r3, [r3]
 6866 0356 B3F57A7F 		cmp	r3, #1000
 6867 035a 0DD1     		bne	.L441
 6868              		.loc 1 2083 0 is_stmt 0 discriminator 1
 6869 035c 574B     		ldr	r3, .L574+16
 6870 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6871 0360 002B     		cmp	r3, #0
 6872 0362 09D1     		bne	.L441
2084:..\src/interruptions.c ****             // After 1000 v_count cycles, dev_tension_f is stable
2085:..\src/interruptions.c ****             tension_valid = TRUE;   
 6873              		.loc 1 2085 0 is_stmt 1
 6874 0364 554B     		ldr	r3, .L574+16
 6875 0366 0122     		movs	r2, #1
 6876 0368 1A70     		strb	r2, [r3]
2086:..\src/interruptions.c ****             count = 0;
 6877              		.loc 1 2086 0
 6878 036a 554B     		ldr	r3, .L574+20
 6879 036c 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 161


 6880 036e 1A80     		strh	r2, [r3]	@ movhi
2087:..\src/interruptions.c ****             v_count = 0;            
 6881              		.loc 1 2087 0
 6882 0370 514B     		ldr	r3, .L574+12
 6883 0372 0022     		movs	r2, #0
 6884 0374 1A60     		str	r2, [r3]
 6885 0376 2CE0     		b	.L442
 6886              	.L441:
2088:..\src/interruptions.c ****         }
2089:..\src/interruptions.c ****         else {  
2090:..\src/interruptions.c ****             // wait for battery voltage stabilization
2091:..\src/interruptions.c ****             if (v_count < 1000) {
 6887              		.loc 1 2091 0
 6888 0378 4F4B     		ldr	r3, .L574+12
 6889 037a 1B68     		ldr	r3, [r3]
 6890 037c B3F57A7F 		cmp	r3, #1000
 6891 0380 04D2     		bcs	.L443
2092:..\src/interruptions.c ****                 v_count = v_count + 1;
 6892              		.loc 1 2092 0
 6893 0382 4D4B     		ldr	r3, .L574+12
 6894 0384 1B68     		ldr	r3, [r3]
 6895 0386 0133     		adds	r3, r3, #1
 6896 0388 4B4A     		ldr	r2, .L574+12
 6897 038a 1360     		str	r3, [r2]
 6898              	.L443:
2093:..\src/interruptions.c ****             }
2094:..\src/interruptions.c ****             for(idx = 0; idx < NUM_OF_MOTORS; idx++) {
 6899              		.loc 1 2094 0
 6900 038c 474B     		ldr	r3, .L574
 6901 038e 0022     		movs	r2, #0
 6902 0390 1A70     		strb	r2, [r3]
 6903 0392 1AE0     		b	.L444
 6904              	.L445:
2095:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6905              		.loc 1 2095 0 discriminator 3
 6906 0394 454B     		ldr	r3, .L574
 6907 0396 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6908 0398 1C46     		mov	r4, r3
 6909 039a 444B     		ldr	r3, .L574
 6910 039c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6911 039e 1A46     		mov	r2, r3
 6912 03a0 484B     		ldr	r3, .L574+24
 6913 03a2 53F82200 		ldr	r0, [r3, r2, lsl #2]
 6914 03a6 414B     		ldr	r3, .L574
 6915 03a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6916 03aa DB00     		lsls	r3, r3, #3
 6917 03ac 464A     		ldr	r2, .L574+28
 6918 03ae 1344     		add	r3, r3, r2
 6919 03b0 1946     		mov	r1, r3
 6920 03b2 FFF7FEFF 		bl	filter
 6921 03b6 0246     		mov	r2, r0
 6922 03b8 444B     		ldr	r3, .L574+32
 6923 03ba 43F82420 		str	r2, [r3, r4, lsl #2]
2094:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6924              		.loc 1 2094 0 discriminator 3
 6925 03be 3B4B     		ldr	r3, .L574
 6926 03c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 162


 6927 03c2 0133     		adds	r3, r3, #1
 6928 03c4 DAB2     		uxtb	r2, r3
 6929 03c6 394B     		ldr	r3, .L574
 6930 03c8 1A70     		strb	r2, [r3]
 6931              	.L444:
2094:..\src/interruptions.c ****                 dev_tension_f[idx] = filter(dev_tension[idx], &filt_v[idx]);
 6932              		.loc 1 2094 0 is_stmt 0 discriminator 1
 6933 03ca 384B     		ldr	r3, .L574
 6934 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6935 03ce 012B     		cmp	r3, #1
 6936 03d0 E0D9     		bls	.L445
 6937              	.L442:
2096:..\src/interruptions.c ****             }
2097:..\src/interruptions.c ****         }
2098:..\src/interruptions.c **** 
2099:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_MOTORS; idx++){
 6938              		.loc 1 2099 0 is_stmt 1
 6939 03d2 364B     		ldr	r3, .L574
 6940 03d4 0022     		movs	r2, #0
 6941 03d6 1A70     		strb	r2, [r3]
 6942 03d8 16E0     		b	.L446
 6943              	.L448:
2100:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6944              		.loc 1 2100 0
 6945 03da 344B     		ldr	r3, .L574
 6946 03dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6947 03de 1946     		mov	r1, r3
 6948 03e0 3B4A     		ldr	r2, .L574+36
 6949 03e2 7423     		movs	r3, #116
 6950 03e4 03FB01F3 		mul	r3, r3, r1
 6951 03e8 1344     		add	r3, r3, r2
 6952 03ea E133     		adds	r3, r3, #225
 6953 03ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6954 03ee 002B     		cmp	r3, #0
 6955 03f0 04D0     		beq	.L447
2101:..\src/interruptions.c ****                 pwm_limit_search(idx);                 //only for 12V motor
 6956              		.loc 1 2101 0
 6957 03f2 2E4B     		ldr	r3, .L574
 6958 03f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6959 03f6 1846     		mov	r0, r3
 6960 03f8 FFF7FEFF 		bl	pwm_limit_search
 6961              	.L447:
2099:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6962              		.loc 1 2099 0 discriminator 2
 6963 03fc 2B4B     		ldr	r3, .L574
 6964 03fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6965 0400 0133     		adds	r3, r3, #1
 6966 0402 DAB2     		uxtb	r2, r3
 6967 0404 294B     		ldr	r3, .L574
 6968 0406 1A70     		strb	r2, [r3]
 6969              	.L446:
2099:..\src/interruptions.c ****             if(g_mem.motor[idx].activate_pwm_rescaling)        //pwm rescaling is activated
 6970              		.loc 1 2099 0 is_stmt 0 discriminator 1
 6971 0408 284B     		ldr	r3, .L574
 6972 040a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6973 040c 012B     		cmp	r3, #1
 6974 040e E4D9     		bls	.L448
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 163


2102:..\src/interruptions.c ****         }
2103:..\src/interruptions.c ****         
2104:..\src/interruptions.c ****         // Filter and Set currents
2105:..\src/interruptions.c ****         if (g_mem.motor[0].motor_driver_type == DRIVER_MC33887) {
 6975              		.loc 1 2105 0 is_stmt 1
 6976 0410 2F4B     		ldr	r3, .L574+36
 6977 0412 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 6978 0416 002B     		cmp	r3, #0
 6979 0418 21D1     		bne	.L449
2106:..\src/interruptions.c ****             g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 1648) 
 6980              		.loc 1 2106 0
 6981 041a 2D4B     		ldr	r3, .L574+36
 6982 041c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 6983 0420 1C46     		mov	r4, r3
 6984 0422 2C4B     		ldr	r3, .L574+40
 6985 0424 B3F90230 		ldrsh	r3, [r3, #2]
 6986 0428 A3F5CE63 		sub	r3, r3, #1648
 6987 042c 45F66A02 		movw	r2, #22634
 6988 0430 02FB03F3 		mul	r3, r2, r3
 6989 0434 5B13     		asrs	r3, r3, #13
 6990 0436 1BB2     		sxth	r3, r3
 6991 0438 1A46     		mov	r2, r3
 6992 043a 274B     		ldr	r3, .L574+44
 6993 043c 93F90030 		ldrsb	r3, [r3]
 6994 0440 03FB02F3 		mul	r3, r3, r2
 6995 0444 2549     		ldr	r1, .L574+48
 6996 0446 1846     		mov	r0, r3
 6997 0448 FFF7FEFF 		bl	filter
 6998 044c 0146     		mov	r1, r0
 6999 044e 244A     		ldr	r2, .L574+52
 7000 0450 3423     		movs	r3, #52
 7001 0452 03FB04F3 		mul	r3, r3, r4
 7002 0456 1344     		add	r3, r3, r2
 7003 0458 0C33     		adds	r3, r3, #12
 7004 045a 1960     		str	r1, [r3]
 7005 045c 5EE0     		b	.L450
 7006              	.L449:
2107:..\src/interruptions.c ****         } 
2108:..\src/interruptions.c ****         else {
2109:..\src/interruptions.c ****             if (g_mem.motor[0].motor_driver_type == DRIVER_BRUSHLESS) {
 7007              		.loc 1 2109 0
 7008 045e 1C4B     		ldr	r3, .L574+36
 7009 0460 93F8E230 		ldrb	r3, [r3, #226]	@ zero_extendqisi2
 7010 0464 022B     		cmp	r3, #2
 7011 0466 3DD1     		bne	.L451
2110:..\src/interruptions.c ****                 // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5A cu
2111:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = filter((int16) (((int32)(ADC_buf[1] - 16
 7012              		.loc 1 2111 0
 7013 0468 194B     		ldr	r3, .L574+36
 7014 046a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7015 046e 1C46     		mov	r4, r3
 7016 0470 184B     		ldr	r3, .L574+40
 7017 0472 B3F90230 		ldrsh	r3, [r3, #2]
 7018 0476 A3F28F63 		subw	r3, r3, #1679
 7019 047a 45F65072 		movw	r2, #24400
 7020 047e 02FB03F3 		mul	r3, r2, r3
 7021 0482 5B13     		asrs	r3, r3, #13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 164


 7022 0484 1BB2     		sxth	r3, r3
 7023 0486 1A46     		mov	r2, r3
 7024 0488 134B     		ldr	r3, .L574+44
 7025 048a 93F90030 		ldrsb	r3, [r3]
 7026 048e 03FB02F3 		mul	r3, r3, r2
 7027 0492 1249     		ldr	r1, .L574+48
 7028 0494 1846     		mov	r0, r3
 7029 0496 FFF7FEFF 		bl	filter
 7030 049a 0146     		mov	r1, r0
 7031 049c 104A     		ldr	r2, .L574+52
 7032 049e 3423     		movs	r3, #52
 7033 04a0 03FB04F3 		mul	r3, r3, r4
 7034 04a4 1344     		add	r3, r3, r2
 7035 04a6 0C33     		adds	r3, r3, #12
 7036 04a8 1960     		str	r1, [r3]
 7037 04aa 37E0     		b	.L450
 7038              	.L575:
 7039              		.align	2
 7040              	.L574:
 7041 04ac 72010000 		.word	idx.10672
 7042 04b0 00000000 		.word	g_adc_meas
 7043 04b4 00000000 		.word	c_mem
 7044 04b8 74010000 		.word	v_count.10671
 7045 04bc 00000000 		.word	tension_valid
 7046 04c0 70010000 		.word	count.10670
 7047 04c4 00000000 		.word	dev_tension
 7048 04c8 00000000 		.word	filt_v
 7049 04cc 00000000 		.word	dev_tension_f
 7050 04d0 00000000 		.word	g_mem
 7051 04d4 00000000 		.word	ADC_buf
 7052 04d8 00000000 		.word	pwm_sign
 7053 04dc 00000000 		.word	filt_i
 7054 04e0 00000000 		.word	g_meas
 7055              	.L451:
2112:..\src/interruptions.c ****             } else { // [GS]
2113:..\src/interruptions.c ****                 g_meas[g_mem.motor[0].encoder_line].curr = ((int16) ((int32)((ADC_buf[1] - 1635) * 
 7056              		.loc 1 2113 0
 7057 04e4 C04B     		ldr	r3, .L576
 7058 04e6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7059 04ea 1846     		mov	r0, r3
 7060 04ec BF4B     		ldr	r3, .L576+4
 7061 04ee B3F90230 		ldrsh	r3, [r3, #2]
 7062 04f2 A3F26362 		subw	r2, r3, #1635
 7063 04f6 1346     		mov	r3, r2
 7064 04f8 1B01     		lsls	r3, r3, #4
 7065 04fa 9B1A     		subs	r3, r3, r2
 7066 04fc 5B01     		lsls	r3, r3, #5
 7067 04fe 1B11     		asrs	r3, r3, #4
 7068 0500 1BB2     		sxth	r3, r3
 7069 0502 1A46     		mov	r2, r3
 7070 0504 BA4B     		ldr	r3, .L576+8
 7071 0506 93F90030 		ldrsb	r3, [r3]
 7072 050a 03FB02F2 		mul	r2, r3, r2
 7073 050e B949     		ldr	r1, .L576+12
 7074 0510 3423     		movs	r3, #52
 7075 0512 03FB00F3 		mul	r3, r3, r0
 7076 0516 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 165


 7077 0518 0C33     		adds	r3, r3, #12
 7078 051a 1A60     		str	r2, [r3]
 7079              	.L450:
2114:..\src/interruptions.c ****             }
2115:..\src/interruptions.c ****         }
2116:..\src/interruptions.c ****         
2117:..\src/interruptions.c **** 
2118:..\src/interruptions.c ****         // Calculate current estimation and put it in the second part of the current measurement ar
2119:..\src/interruptions.c **** 		g_meas[g_mem.motor[0].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.motor[0].en
 7080              		.loc 1 2119 0
 7081 051c B24B     		ldr	r3, .L576
 7082 051e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7083 0522 1D46     		mov	r5, r3
 7084 0524 B04B     		ldr	r3, .L576
 7085 0526 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7086 052a 1946     		mov	r1, r3
 7087 052c B14A     		ldr	r2, .L576+12
 7088 052e 3423     		movs	r3, #52
 7089 0530 03FB01F3 		mul	r3, r3, r1
 7090 0534 1344     		add	r3, r3, r2
 7091 0536 0C33     		adds	r3, r3, #12
 7092 0538 1C68     		ldr	r4, [r3]
 7093 053a AB4B     		ldr	r3, .L576
 7094 053c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7095 0540 1946     		mov	r1, r3
 7096 0542 AC4A     		ldr	r2, .L576+12
 7097 0544 3423     		movs	r3, #52
 7098 0546 03FB01F3 		mul	r3, r3, r1
 7099 054a 1344     		add	r3, r3, r2
 7100 054c 1A68     		ldr	r2, [r3]
 7101 054e A64B     		ldr	r3, .L576
 7102 0550 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7103 0554 1846     		mov	r0, r3
 7104 0556 A449     		ldr	r1, .L576
 7105 0558 0346     		mov	r3, r0
 7106 055a 5B00     		lsls	r3, r3, #1
 7107 055c 0344     		add	r3, r3, r0
 7108 055e 1B01     		lsls	r3, r3, #4
 7109 0560 0B44     		add	r3, r3, r1
 7110 0562 03F29D13 		addw	r3, r3, #413
 7111 0566 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7112 0568 42FA03F6 		asr	r6, r2, r3
 7113 056c 9E4B     		ldr	r3, .L576
 7114 056e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7115 0572 1946     		mov	r1, r3
 7116 0574 9F4A     		ldr	r2, .L576+12
 7117 0576 3423     		movs	r3, #52
 7118 0578 03FB01F3 		mul	r3, r3, r1
 7119 057c 1344     		add	r3, r3, r2
 7120 057e 1C33     		adds	r3, r3, #28
 7121 0580 1A68     		ldr	r2, [r3]
 7122 0582 994B     		ldr	r3, .L576
 7123 0584 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7124 0588 1846     		mov	r0, r3
 7125 058a 9749     		ldr	r1, .L576
 7126 058c 0346     		mov	r3, r0
 7127 058e 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 166


 7128 0590 0344     		add	r3, r3, r0
 7129 0592 1B01     		lsls	r3, r3, #4
 7130 0594 0B44     		add	r3, r3, r1
 7131 0596 03F29D13 		addw	r3, r3, #413
 7132 059a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7133 059c 42FA03FE 		asr	lr, r2, r3
 7134 05a0 954B     		ldr	r3, .L576+16
 7135 05a2 1A68     		ldr	r2, [r3]
 7136 05a4 904B     		ldr	r3, .L576
 7137 05a6 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 7138 05aa 1846     		mov	r0, r3
 7139 05ac 8E49     		ldr	r1, .L576
 7140 05ae 0346     		mov	r3, r0
 7141 05b0 5B00     		lsls	r3, r3, #1
 7142 05b2 0344     		add	r3, r3, r0
 7143 05b4 1B01     		lsls	r3, r3, #4
 7144 05b6 0B44     		add	r3, r3, r1
 7145 05b8 03F29D13 		addw	r3, r3, #413
 7146 05bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7147 05be 42FA03F3 		asr	r3, r2, r3
 7148 05c2 7246     		mov	r2, lr
 7149 05c4 3146     		mov	r1, r6
 7150 05c6 0020     		movs	r0, #0
 7151 05c8 FFF7FEFF 		bl	curr_estim
 7152 05cc 0346     		mov	r3, r0
 7153 05ce E31A     		subs	r3, r4, r3
 7154 05d0 8A49     		ldr	r1, .L576+20
 7155 05d2 1846     		mov	r0, r3
 7156 05d4 FFF7FEFF 		bl	filter
 7157 05d8 0346     		mov	r3, r0
 7158 05da 1BB2     		sxth	r3, r3
 7159 05dc 1946     		mov	r1, r3
 7160 05de 854A     		ldr	r2, .L576+12
 7161 05e0 3423     		movs	r3, #52
 7162 05e2 03FB05F3 		mul	r3, r3, r5
 7163 05e6 1344     		add	r3, r3, r2
 7164 05e8 1033     		adds	r3, r3, #16
 7165 05ea 1960     		str	r1, [r3]
2120:..\src/interruptions.c ****         
2121:..\src/interruptions.c ****         // Read also 2nd power current (if necessary)
2122:..\src/interruptions.c ****         if (NUM_OF_ANALOG_INPUTS > 4) {
 7166              		.loc 1 2122 0
 7167 05ec 844B     		ldr	r3, .L576+24
 7168 05ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7169 05f0 042B     		cmp	r3, #4
 7170 05f2 40F2D280 		bls	.L452
2123:..\src/interruptions.c ****             // Filter and Set currents
2124:..\src/interruptions.c ****             if (g_mem.motor[1].motor_driver_type == DRIVER_MC33887) {
 7171              		.loc 1 2124 0
 7172 05f6 7C4B     		ldr	r3, .L576
 7173 05f8 93F85631 		ldrb	r3, [r3, #342]	@ zero_extendqisi2
 7174 05fc 002B     		cmp	r3, #0
 7175 05fe 21D1     		bne	.L453
2125:..\src/interruptions.c ****                 g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] - 16
 7176              		.loc 1 2125 0
 7177 0600 794B     		ldr	r3, .L576
 7178 0602 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 167


 7179 0606 1C46     		mov	r4, r3
 7180 0608 784B     		ldr	r3, .L576+4
 7181 060a B3F90A30 		ldrsh	r3, [r3, #10]
 7182 060e A3F5CE63 		sub	r3, r3, #1648
 7183 0612 45F66A02 		movw	r2, #22634
 7184 0616 02FB03F3 		mul	r3, r2, r3
 7185 061a 5B13     		asrs	r3, r3, #13
 7186 061c 1BB2     		sxth	r3, r3
 7187 061e 1A46     		mov	r2, r3
 7188 0620 734B     		ldr	r3, .L576+8
 7189 0622 93F90130 		ldrsb	r3, [r3, #1]
 7190 0626 03FB02F3 		mul	r3, r3, r2
 7191 062a 7649     		ldr	r1, .L576+28
 7192 062c 1846     		mov	r0, r3
 7193 062e FFF7FEFF 		bl	filter
 7194 0632 0146     		mov	r1, r0
 7195 0634 6F4A     		ldr	r2, .L576+12
 7196 0636 3423     		movs	r3, #52
 7197 0638 03FB04F3 		mul	r3, r3, r4
 7198 063c 1344     		add	r3, r3, r2
 7199 063e 0C33     		adds	r3, r3, #12
 7200 0640 1960     		str	r1, [r3]
 7201 0642 42E0     		b	.L454
 7202              	.L453:
2126:..\src/interruptions.c ****             } 
2127:..\src/interruptions.c ****             else {
2128:..\src/interruptions.c ****                 if (g_mem.motor[1].motor_driver_type == DRIVER_BRUSHLESS) {
 7203              		.loc 1 2128 0
 7204 0644 684B     		ldr	r3, .L576
 7205 0646 93F85631 		ldrb	r3, [r3, #342]	@ zero_extendqisi2
 7206 064a 022B     		cmp	r3, #2
 7207 064c 21D1     		bne	.L455
2129:..\src/interruptions.c ****                     // Direct measure in range [2V, 4V] referenced to 4.88V meas supply and up to 5
2130:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = filter((int16) (((int32)(ADC_buf[5] 
 7208              		.loc 1 2130 0
 7209 064e 664B     		ldr	r3, .L576
 7210 0650 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7211 0654 1C46     		mov	r4, r3
 7212 0656 654B     		ldr	r3, .L576+4
 7213 0658 B3F90A30 		ldrsh	r3, [r3, #10]
 7214 065c A3F28F63 		subw	r3, r3, #1679
 7215 0660 45F65072 		movw	r2, #24400
 7216 0664 02FB03F3 		mul	r3, r2, r3
 7217 0668 5B13     		asrs	r3, r3, #13
 7218 066a 1BB2     		sxth	r3, r3
 7219 066c 1A46     		mov	r2, r3
 7220 066e 604B     		ldr	r3, .L576+8
 7221 0670 93F90130 		ldrsb	r3, [r3, #1]
 7222 0674 03FB02F3 		mul	r3, r3, r2
 7223 0678 6249     		ldr	r1, .L576+28
 7224 067a 1846     		mov	r0, r3
 7225 067c FFF7FEFF 		bl	filter
 7226 0680 0146     		mov	r1, r0
 7227 0682 5C4A     		ldr	r2, .L576+12
 7228 0684 3423     		movs	r3, #52
 7229 0686 03FB04F3 		mul	r3, r3, r4
 7230 068a 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 168


 7231 068c 0C33     		adds	r3, r3, #12
 7232 068e 1960     		str	r1, [r3]
 7233 0690 1BE0     		b	.L454
 7234              	.L455:
2131:..\src/interruptions.c ****                 } else { // [GS]
2132:..\src/interruptions.c ****                     g_meas[g_mem.motor[1].encoder_line].curr = ((int16) ((int32)((ADC_buf[5] - 1635
 7235              		.loc 1 2132 0
 7236 0692 554B     		ldr	r3, .L576
 7237 0694 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7238 0698 1846     		mov	r0, r3
 7239 069a 544B     		ldr	r3, .L576+4
 7240 069c B3F90A30 		ldrsh	r3, [r3, #10]
 7241 06a0 A3F26362 		subw	r2, r3, #1635
 7242 06a4 1346     		mov	r3, r2
 7243 06a6 1B01     		lsls	r3, r3, #4
 7244 06a8 9B1A     		subs	r3, r3, r2
 7245 06aa 5B01     		lsls	r3, r3, #5
 7246 06ac 1B11     		asrs	r3, r3, #4
 7247 06ae 1BB2     		sxth	r3, r3
 7248 06b0 1A46     		mov	r2, r3
 7249 06b2 4F4B     		ldr	r3, .L576+8
 7250 06b4 93F90130 		ldrsb	r3, [r3, #1]
 7251 06b8 03FB02F2 		mul	r2, r3, r2
 7252 06bc 4D49     		ldr	r1, .L576+12
 7253 06be 3423     		movs	r3, #52
 7254 06c0 03FB00F3 		mul	r3, r3, r0
 7255 06c4 0B44     		add	r3, r3, r1
 7256 06c6 0C33     		adds	r3, r3, #12
 7257 06c8 1A60     		str	r2, [r3]
 7258              	.L454:
2133:..\src/interruptions.c ****                 }
2134:..\src/interruptions.c ****             }
2135:..\src/interruptions.c ****             
2136:..\src/interruptions.c ****             g_meas[g_mem.motor[1].encoder_line].estim_curr = (int16) filter(((int32) g_meas[g_mem.m
 7259              		.loc 1 2136 0
 7260 06ca 474B     		ldr	r3, .L576
 7261 06cc 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7262 06d0 1D46     		mov	r5, r3
 7263 06d2 454B     		ldr	r3, .L576
 7264 06d4 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7265 06d8 1946     		mov	r1, r3
 7266 06da 464A     		ldr	r2, .L576+12
 7267 06dc 3423     		movs	r3, #52
 7268 06de 03FB01F3 		mul	r3, r3, r1
 7269 06e2 1344     		add	r3, r3, r2
 7270 06e4 0C33     		adds	r3, r3, #12
 7271 06e6 1C68     		ldr	r4, [r3]
 7272 06e8 3F4B     		ldr	r3, .L576
 7273 06ea 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7274 06ee 1946     		mov	r1, r3
 7275 06f0 404A     		ldr	r2, .L576+12
 7276 06f2 3423     		movs	r3, #52
 7277 06f4 03FB01F3 		mul	r3, r3, r1
 7278 06f8 1344     		add	r3, r3, r2
 7279 06fa 1A68     		ldr	r2, [r3]
 7280 06fc 3A4B     		ldr	r3, .L576
 7281 06fe 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 169


 7282 0702 1846     		mov	r0, r3
 7283 0704 3849     		ldr	r1, .L576
 7284 0706 0346     		mov	r3, r0
 7285 0708 5B00     		lsls	r3, r3, #1
 7286 070a 0344     		add	r3, r3, r0
 7287 070c 1B01     		lsls	r3, r3, #4
 7288 070e 0B44     		add	r3, r3, r1
 7289 0710 03F29D13 		addw	r3, r3, #413
 7290 0714 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7291 0716 42FA03F6 		asr	r6, r2, r3
 7292 071a 334B     		ldr	r3, .L576
 7293 071c 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7294 0720 1946     		mov	r1, r3
 7295 0722 344A     		ldr	r2, .L576+12
 7296 0724 3423     		movs	r3, #52
 7297 0726 03FB01F3 		mul	r3, r3, r1
 7298 072a 1344     		add	r3, r3, r2
 7299 072c 1C33     		adds	r3, r3, #28
 7300 072e 1A68     		ldr	r2, [r3]
 7301 0730 2D4B     		ldr	r3, .L576
 7302 0732 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7303 0736 1846     		mov	r0, r3
 7304 0738 2B49     		ldr	r1, .L576
 7305 073a 0346     		mov	r3, r0
 7306 073c 5B00     		lsls	r3, r3, #1
 7307 073e 0344     		add	r3, r3, r0
 7308 0740 1B01     		lsls	r3, r3, #4
 7309 0742 0B44     		add	r3, r3, r1
 7310 0744 03F29D13 		addw	r3, r3, #413
 7311 0748 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7312 074a 42FA03FE 		asr	lr, r2, r3
 7313 074e 2A4B     		ldr	r3, .L576+16
 7314 0750 1A69     		ldr	r2, [r3, #16]
 7315 0752 254B     		ldr	r3, .L576
 7316 0754 93F88431 		ldrb	r3, [r3, #388]	@ zero_extendqisi2
 7317 0758 1846     		mov	r0, r3
 7318 075a 2349     		ldr	r1, .L576
 7319 075c 0346     		mov	r3, r0
 7320 075e 5B00     		lsls	r3, r3, #1
 7321 0760 0344     		add	r3, r3, r0
 7322 0762 1B01     		lsls	r3, r3, #4
 7323 0764 0B44     		add	r3, r3, r1
 7324 0766 03F29D13 		addw	r3, r3, #413
 7325 076a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7326 076c 42FA03F3 		asr	r3, r2, r3
 7327 0770 7246     		mov	r2, lr
 7328 0772 3146     		mov	r1, r6
 7329 0774 0120     		movs	r0, #1
 7330 0776 FFF7FEFF 		bl	curr_estim
 7331 077a 0346     		mov	r3, r0
 7332 077c E31A     		subs	r3, r4, r3
 7333 077e 2249     		ldr	r1, .L576+32
 7334 0780 1846     		mov	r0, r3
 7335 0782 FFF7FEFF 		bl	filter
 7336 0786 0346     		mov	r3, r0
 7337 0788 1BB2     		sxth	r3, r3
 7338 078a 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 170


 7339 078c 194A     		ldr	r2, .L576+12
 7340 078e 3423     		movs	r3, #52
 7341 0790 03FB05F3 		mul	r3, r3, r5
 7342 0794 1344     		add	r3, r3, r2
 7343 0796 1033     		adds	r3, r3, #16
 7344 0798 1960     		str	r1, [r3]
 7345              	.L452:
2137:..\src/interruptions.c ****         }
2138:..\src/interruptions.c ****     
2139:..\src/interruptions.c ****         // Check Interrupt 
2140:..\src/interruptions.c ****     
2141:..\src/interruptions.c ****         if (interrupt_flag){
 7346              		.loc 1 2141 0
 7347 079a 1C4B     		ldr	r3, .L576+36
 7348 079c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7349 079e 002B     		cmp	r3, #0
 7350 07a0 06D0     		beq	.L440
2142:..\src/interruptions.c ****             interrupt_flag = FALSE;
 7351              		.loc 1 2142 0
 7352 07a2 1A4B     		ldr	r3, .L576+36
 7353 07a4 0022     		movs	r2, #0
 7354 07a6 1A70     		strb	r2, [r3]
2143:..\src/interruptions.c ****             interrupt_manager();
 7355              		.loc 1 2143 0
 7356 07a8 FFF7FEFF 		bl	interrupt_manager
 7357 07ac 00E0     		b	.L440
 7358              	.L554:
2040:..\src/interruptions.c ****         // PSoC is powered through uUSB
 7359              		.loc 1 2040 0
 7360 07ae 00BF     		nop
 7361              	.L440:
2144:..\src/interruptions.c ****         }
2145:..\src/interruptions.c **** 
2146:..\src/interruptions.c ****     }
2147:..\src/interruptions.c ****     
2148:..\src/interruptions.c ****     // Read EMG (always even if the board is not powered)
2149:..\src/interruptions.c ****         
2150:..\src/interruptions.c ****     // if calibration is not needed go to "normal execution"
2151:..\src/interruptions.c ****     if (!c_mem.emg.emg_calibration_flag){
 7362              		.loc 1 2151 0
 7363 07b0 174B     		ldr	r3, .L576+40
 7364 07b2 93F80632 		ldrb	r3, [r3, #518]	@ zero_extendqisi2
 7365 07b6 002B     		cmp	r3, #0
 7366 07b8 05D1     		bne	.L456
2152:..\src/interruptions.c ****         emg_1_status = NORMAL; // normal execution
 7367              		.loc 1 2152 0
 7368 07ba 164B     		ldr	r3, .L576+44
 7369 07bc 0022     		movs	r2, #0
 7370 07be 1A70     		strb	r2, [r3]
2153:..\src/interruptions.c ****         emg_2_status = NORMAL; // normal execution
 7371              		.loc 1 2153 0
 7372 07c0 154B     		ldr	r3, .L576+48
 7373 07c2 0022     		movs	r2, #0
 7374 07c4 1A70     		strb	r2, [r3]
 7375              	.L456:
2154:..\src/interruptions.c ****     }
2155:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 171


2156:..\src/interruptions.c ****     // EMG 1 calibration state machine
2157:..\src/interruptions.c ****    
2158:..\src/interruptions.c ****     // Calibration state machine
2159:..\src/interruptions.c ****     switch(emg_1_status) {
 7376              		.loc 1 2159 0
 7377 07c6 134B     		ldr	r3, .L576+44
 7378 07c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7379 07ca 032B     		cmp	r3, #3
 7380 07cc 00F2FC80 		bhi	.L555
 7381 07d0 01A2     		adr	r2, .L459
 7382 07d2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7383 07d6 00BF     		.p2align 2
 7384              	.L459:
 7385 07d8 1D080000 		.word	.L458+1
 7386 07dc CD080000 		.word	.L460+1
 7387 07e0 E3080000 		.word	.L461+1
 7388 07e4 1F090000 		.word	.L462+1
 7389              		.p2align 1
 7390              	.L577:
 7391              		.align	2
 7392              	.L576:
 7393 07e8 00000000 		.word	g_mem
 7394 07ec 00000000 		.word	ADC_buf
 7395 07f0 00000000 		.word	pwm_sign
 7396 07f4 00000000 		.word	g_meas
 7397 07f8 00000000 		.word	g_ref
 7398 07fc 00000000 		.word	filt_curr_diff
 7399 0800 00000000 		.word	NUM_OF_ANALOG_INPUTS
 7400 0804 08000000 		.word	filt_i+8
 7401 0808 08000000 		.word	filt_curr_diff+8
 7402 080c 00000000 		.word	interrupt_flag
 7403 0810 00000000 		.word	c_mem
 7404 0814 00000000 		.word	emg_1_status
 7405 0818 00000000 		.word	emg_2_status
 7406              	.L458:
2160:..\src/interruptions.c ****         case NORMAL: // normal execution
2161:..\src/interruptions.c ****             
2162:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7407              		.loc 1 2162 0
 7408 081c AE4B     		ldr	r3, .L578
 7409 081e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7410 0822 022B     		cmp	r3, #2
 7411 0824 13D0     		beq	.L463
 7412              		.loc 1 2162 0 is_stmt 0 discriminator 1
 7413 0826 AC4B     		ldr	r3, .L578
 7414 0828 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7415 082c 032B     		cmp	r3, #3
 7416 082e 0ED0     		beq	.L463
2163:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[2 + c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7417              		.loc 1 2163 0 is_stmt 1
 7418 0830 AA4B     		ldr	r3, .L578+4
 7419 0832 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7420 0836 0233     		adds	r3, r3, #2
 7421 0838 A94A     		ldr	r2, .L578+8
 7422 083a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7423 083e A3F26763 		subw	r3, r3, #1639
 7424 0842 5722     		movs	r2, #87
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 172


 7425 0844 02FB03F3 		mul	r3, r2, r3
 7426 0848 5B11     		asrs	r3, r3, #5
 7427 084a 7B60     		str	r3, [r7, #4]
 7428 084c 07E0     		b	.L464
 7429              	.L463:
2164:..\src/interruptions.c ****             }
2165:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2166:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2 + c_mem.emg.switch_emg]);
 7430              		.loc 1 2166 0
 7431 084e A34B     		ldr	r3, .L578+4
 7432 0850 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7433 0854 0233     		adds	r3, r3, #2
 7434 0856 A24A     		ldr	r2, .L578+8
 7435 0858 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7436 085c 7B60     		str	r3, [r7, #4]
 7437              	.L464:
2167:..\src/interruptions.c ****             }
2168:..\src/interruptions.c ****             
2169:..\src/interruptions.c ****             if (i_aux < 0) 
 7438              		.loc 1 2169 0
 7439 085e 7B68     		ldr	r3, [r7, #4]
 7440 0860 002B     		cmp	r3, #0
 7441 0862 01DA     		bge	.L465
2170:..\src/interruptions.c ****                 i_aux = 0;
 7442              		.loc 1 2170 0
 7443 0864 0023     		movs	r3, #0
 7444 0866 7B60     		str	r3, [r7, #4]
 7445              	.L465:
2171:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[0]);
 7446              		.loc 1 2171 0
 7447 0868 9E49     		ldr	r1, .L578+12
 7448 086a 7868     		ldr	r0, [r7, #4]
 7449 086c FFF7FEFF 		bl	filter
 7450 0870 7860     		str	r0, [r7, #4]
2172:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[0];
 7451              		.loc 1 2172 0
 7452 0872 7B68     		ldr	r3, [r7, #4]
 7453 0874 9B02     		lsls	r3, r3, #10
 7454 0876 1A46     		mov	r2, r3
 7455 0878 974B     		ldr	r3, .L578
 7456 087a D3F8FC31 		ldr	r3, [r3, #508]
 7457 087e B2FBF3F3 		udiv	r3, r2, r3
 7458 0882 7B60     		str	r3, [r7, #4]
2173:..\src/interruptions.c **** 
2174:..\src/interruptions.c ****             if (interrupt_flag){
 7459              		.loc 1 2174 0
 7460 0884 984B     		ldr	r3, .L578+16
 7461 0886 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7462 0888 002B     		cmp	r3, #0
 7463 088a 04D0     		beq	.L466
2175:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7464              		.loc 1 2175 0
 7465 088c 964B     		ldr	r3, .L578+16
 7466 088e 0022     		movs	r2, #0
 7467 0890 1A70     		strb	r2, [r3]
2176:..\src/interruptions.c ****                 interrupt_manager();
 7468              		.loc 1 2176 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 173


 7469 0892 FFF7FEFF 		bl	interrupt_manager
 7470              	.L466:
2177:..\src/interruptions.c ****             }
2178:..\src/interruptions.c ****             //Saturation
2179:..\src/interruptions.c ****             if (i_aux < 0)
 7471              		.loc 1 2179 0
 7472 0896 7B68     		ldr	r3, [r7, #4]
 7473 0898 002B     		cmp	r3, #0
 7474 089a 02DA     		bge	.L467
2180:..\src/interruptions.c ****                 i_aux = 0;
 7475              		.loc 1 2180 0
 7476 089c 0023     		movs	r3, #0
 7477 089e 7B60     		str	r3, [r7, #4]
 7478 08a0 06E0     		b	.L468
 7479              	.L467:
2181:..\src/interruptions.c ****             else 
2182:..\src/interruptions.c ****                 if (i_aux > 1024) 
 7480              		.loc 1 2182 0
 7481 08a2 7B68     		ldr	r3, [r7, #4]
 7482 08a4 B3F5806F 		cmp	r3, #1024
 7483 08a8 02DD     		ble	.L468
2183:..\src/interruptions.c ****                     i_aux = 1024;
 7484              		.loc 1 2183 0
 7485 08aa 4FF48063 		mov	r3, #1024
 7486 08ae 7B60     		str	r3, [r7, #4]
 7487              	.L468:
2184:..\src/interruptions.c ****             
2185:..\src/interruptions.c ****             g_adc_meas.emg[0] = i_aux;
 7488              		.loc 1 2185 0
 7489 08b0 8E4A     		ldr	r2, .L578+20
 7490 08b2 7B68     		ldr	r3, [r7, #4]
 7491 08b4 1360     		str	r3, [r2]
2186:..\src/interruptions.c **** 
2187:..\src/interruptions.c ****             if (interrupt_flag){
 7492              		.loc 1 2187 0
 7493 08b6 8C4B     		ldr	r3, .L578+16
 7494 08b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7495 08ba 002B     		cmp	r3, #0
 7496 08bc 00F08680 		beq	.L556
2188:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7497              		.loc 1 2188 0
 7498 08c0 894B     		ldr	r3, .L578+16
 7499 08c2 0022     		movs	r2, #0
 7500 08c4 1A70     		strb	r2, [r3]
2189:..\src/interruptions.c ****                 interrupt_manager();
 7501              		.loc 1 2189 0
 7502 08c6 FFF7FEFF 		bl	interrupt_manager
2190:..\src/interruptions.c ****             }
2191:..\src/interruptions.c ****             
2192:..\src/interruptions.c ****             break;
 7503              		.loc 1 2192 0
 7504 08ca 7FE0     		b	.L556
 7505              	.L460:
2193:..\src/interruptions.c **** 
2194:..\src/interruptions.c ****         case RESET: // reset variables
2195:..\src/interruptions.c ****             emg_counter_1 = 0;
 7506              		.loc 1 2195 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 174


 7507 08cc 884B     		ldr	r3, .L578+24
 7508 08ce 0022     		movs	r2, #0
 7509 08d0 1A80     		strh	r2, [r3]	@ movhi
2196:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] = 0;
 7510              		.loc 1 2196 0
 7511 08d2 814B     		ldr	r3, .L578
 7512 08d4 0022     		movs	r2, #0
 7513 08d6 C3F8FC21 		str	r2, [r3, #508]
2197:..\src/interruptions.c ****             emg_1_status = DISCARD; // goto next status  
 7514              		.loc 1 2197 0
 7515 08da 864B     		ldr	r3, .L578+28
 7516 08dc 0222     		movs	r2, #2
 7517 08de 1A70     		strb	r2, [r3]
2198:..\src/interruptions.c ****             break;
 7518              		.loc 1 2198 0
 7519 08e0 79E0     		b	.L470
 7520              	.L461:
2199:..\src/interruptions.c **** 
2200:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2201:..\src/interruptions.c ****             emg_counter_1++;
 7521              		.loc 1 2201 0
 7522 08e2 834B     		ldr	r3, .L578+24
 7523 08e4 1B88     		ldrh	r3, [r3]
 7524 08e6 0133     		adds	r3, r3, #1
 7525 08e8 9AB2     		uxth	r2, r3
 7526 08ea 814B     		ldr	r3, .L578+24
 7527 08ec 1A80     		strh	r2, [r3]	@ movhi
2202:..\src/interruptions.c ****             if (emg_counter_1 == EMG_SAMPLE_TO_DISCARD) {
 7528              		.loc 1 2202 0
 7529 08ee 804B     		ldr	r3, .L578+24
 7530 08f0 1B88     		ldrh	r3, [r3]
 7531 08f2 B3F5FA7F 		cmp	r3, #500
 7532 08f6 6BD1     		bne	.L557
2203:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7533              		.loc 1 2203 0
 7534 08f8 7D4B     		ldr	r3, .L578+24
 7535 08fa 0022     		movs	r2, #0
 7536 08fc 1A80     		strh	r2, [r3]	@ movhi
2204:..\src/interruptions.c ****                 LED_control(1);
 7537              		.loc 1 2204 0
 7538 08fe 0120     		movs	r0, #1
 7539 0900 FFF7FEFF 		bl	LED_control
2205:..\src/interruptions.c **** 				
2206:..\src/interruptions.c ****                 if (interrupt_flag){
 7540              		.loc 1 2206 0
 7541 0904 784B     		ldr	r3, .L578+16
 7542 0906 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7543 0908 002B     		cmp	r3, #0
 7544 090a 04D0     		beq	.L472
2207:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7545              		.loc 1 2207 0
 7546 090c 764B     		ldr	r3, .L578+16
 7547 090e 0022     		movs	r2, #0
 7548 0910 1A70     		strb	r2, [r3]
2208:..\src/interruptions.c ****                     interrupt_manager();
 7549              		.loc 1 2208 0
 7550 0912 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 175


 7551              	.L472:
2209:..\src/interruptions.c ****                 }
2210:..\src/interruptions.c ****                 
2211:..\src/interruptions.c ****                 emg_1_status = SUM_AND_MEAN;    // sum and mean status
 7552              		.loc 1 2211 0
 7553 0916 774B     		ldr	r3, .L578+28
 7554 0918 0322     		movs	r2, #3
 7555 091a 1A70     		strb	r2, [r3]
2212:..\src/interruptions.c ****             }
2213:..\src/interruptions.c ****             break;
 7556              		.loc 1 2213 0
 7557 091c 58E0     		b	.L557
 7558              	.L462:
2214:..\src/interruptions.c **** 
2215:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2216:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2217:..\src/interruptions.c ****             emg_counter_1++;
 7559              		.loc 1 2217 0
 7560 091e 744B     		ldr	r3, .L578+24
 7561 0920 1B88     		ldrh	r3, [r3]
 7562 0922 0133     		adds	r3, r3, #1
 7563 0924 9AB2     		uxth	r2, r3
 7564 0926 724B     		ldr	r3, .L578+24
 7565 0928 1A80     		strh	r2, [r3]	@ movhi
2218:..\src/interruptions.c ****             if (ADC_buf[2 + c_mem.emg.switch_emg] < 0) 
 7566              		.loc 1 2218 0
 7567 092a 6C4B     		ldr	r3, .L578+4
 7568 092c 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7569 0930 0233     		adds	r3, r3, #2
 7570 0932 6B4A     		ldr	r2, .L578+8
 7571 0934 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7572 0938 002B     		cmp	r3, #0
 7573 093a 07DA     		bge	.L473
2219:..\src/interruptions.c ****                 ADC_buf[2 + c_mem.emg.switch_emg] = 0;
 7574              		.loc 1 2219 0
 7575 093c 674B     		ldr	r3, .L578+4
 7576 093e 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7577 0942 0233     		adds	r3, r3, #2
 7578 0944 664A     		ldr	r2, .L578+8
 7579 0946 0021     		movs	r1, #0
 7580 0948 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7581              	.L473:
2220:..\src/interruptions.c ****             g_mem.emg.emg_max_value[0] += filter((int32)ADC_buf[2 + c_mem.emg.switch_emg], &filt_em
 7582              		.loc 1 2220 0
 7583 094c 634B     		ldr	r3, .L578+4
 7584 094e 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7585 0952 0233     		adds	r3, r3, #2
 7586 0954 624A     		ldr	r2, .L578+8
 7587 0956 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7588 095a 6249     		ldr	r1, .L578+12
 7589 095c 1846     		mov	r0, r3
 7590 095e FFF7FEFF 		bl	filter
 7591 0962 0246     		mov	r2, r0
 7592 0964 5C4B     		ldr	r3, .L578
 7593 0966 D3F8FC31 		ldr	r3, [r3, #508]
 7594 096a 1344     		add	r3, r3, r2
 7595 096c 5A4A     		ldr	r2, .L578
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 176


 7596 096e C2F8FC31 		str	r3, [r2, #508]
2221:..\src/interruptions.c ****             
2222:..\src/interruptions.c ****             if (interrupt_flag){
 7597              		.loc 1 2222 0
 7598 0972 5D4B     		ldr	r3, .L578+16
 7599 0974 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7600 0976 002B     		cmp	r3, #0
 7601 0978 04D0     		beq	.L474
2223:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7602              		.loc 1 2223 0
 7603 097a 5B4B     		ldr	r3, .L578+16
 7604 097c 0022     		movs	r2, #0
 7605 097e 1A70     		strb	r2, [r3]
2224:..\src/interruptions.c ****                 interrupt_manager();
 7606              		.loc 1 2224 0
 7607 0980 FFF7FEFF 		bl	interrupt_manager
 7608              	.L474:
2225:..\src/interruptions.c ****             }
2226:..\src/interruptions.c ****             
2227:..\src/interruptions.c ****             if (emg_counter_1 == SAMPLES_FOR_EMG_MEAN) {
 7609              		.loc 1 2227 0
 7610 0984 5A4B     		ldr	r3, .L578+24
 7611 0986 1B88     		ldrh	r3, [r3]
 7612 0988 B3F57A7F 		cmp	r3, #1000
 7613 098c 22D1     		bne	.L558
2228:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[0] = g_mem.emg.emg_max_value[0] / SAMPLES_FOR_EMG_MEAN; // 
 7614              		.loc 1 2228 0
 7615 098e 524B     		ldr	r3, .L578
 7616 0990 D3F8FC31 		ldr	r3, [r3, #508]
 7617 0994 584A     		ldr	r2, .L578+32
 7618 0996 A2FB0323 		umull	r2, r3, r2, r3
 7619 099a 9B09     		lsrs	r3, r3, #6
 7620 099c 4E4A     		ldr	r2, .L578
 7621 099e C2F8FC31 		str	r3, [r2, #508]
2229:..\src/interruptions.c **** 
2230:..\src/interruptions.c ****                 if (interrupt_flag){
 7622              		.loc 1 2230 0
 7623 09a2 514B     		ldr	r3, .L578+16
 7624 09a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7625 09a6 002B     		cmp	r3, #0
 7626 09a8 04D0     		beq	.L476
2231:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7627              		.loc 1 2231 0
 7628 09aa 4F4B     		ldr	r3, .L578+16
 7629 09ac 0022     		movs	r2, #0
 7630 09ae 1A70     		strb	r2, [r3]
2232:..\src/interruptions.c ****                     interrupt_manager();
 7631              		.loc 1 2232 0
 7632 09b0 FFF7FEFF 		bl	interrupt_manager
 7633              	.L476:
2233:..\src/interruptions.c ****                 }                    
2234:..\src/interruptions.c ****                 
2235:..\src/interruptions.c ****                 LED_control(0);
 7634              		.loc 1 2235 0
 7635 09b4 0020     		movs	r0, #0
 7636 09b6 FFF7FEFF 		bl	LED_control
2236:..\src/interruptions.c **** 				
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 177


2237:..\src/interruptions.c ****                 emg_counter_1 = 0;          // reset counter
 7637              		.loc 1 2237 0
 7638 09ba 4D4B     		ldr	r3, .L578+24
 7639 09bc 0022     		movs	r2, #0
 7640 09be 1A80     		strh	r2, [r3]	@ movhi
2238:..\src/interruptions.c **** 
2239:..\src/interruptions.c ****                 emg_1_status = NORMAL;      // goto normal execution
 7641              		.loc 1 2239 0
 7642 09c0 4C4B     		ldr	r3, .L578+28
 7643 09c2 0022     		movs	r2, #0
 7644 09c4 1A70     		strb	r2, [r3]
2240:..\src/interruptions.c ****             }
2241:..\src/interruptions.c ****             break;
 7645              		.loc 1 2241 0
 7646 09c6 05E0     		b	.L558
 7647              	.L555:
2242:..\src/interruptions.c **** 
2243:..\src/interruptions.c ****         default:
2244:..\src/interruptions.c ****             break;
 7648              		.loc 1 2244 0
 7649 09c8 00BF     		nop
 7650 09ca 04E0     		b	.L470
 7651              	.L556:
2192:..\src/interruptions.c **** 
 7652              		.loc 1 2192 0
 7653 09cc 00BF     		nop
 7654 09ce 02E0     		b	.L470
 7655              	.L557:
2213:..\src/interruptions.c **** 
 7656              		.loc 1 2213 0
 7657 09d0 00BF     		nop
 7658 09d2 00E0     		b	.L470
 7659              	.L558:
2241:..\src/interruptions.c **** 
 7660              		.loc 1 2241 0
 7661 09d4 00BF     		nop
 7662              	.L470:
2245:..\src/interruptions.c ****     }
2246:..\src/interruptions.c **** 
2247:..\src/interruptions.c ****     if (interrupt_flag){
 7663              		.loc 1 2247 0
 7664 09d6 444B     		ldr	r3, .L578+16
 7665 09d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7666 09da 002B     		cmp	r3, #0
 7667 09dc 04D0     		beq	.L477
2248:..\src/interruptions.c ****         interrupt_flag = FALSE;
 7668              		.loc 1 2248 0
 7669 09de 424B     		ldr	r3, .L578+16
 7670 09e0 0022     		movs	r2, #0
 7671 09e2 1A70     		strb	r2, [r3]
2249:..\src/interruptions.c ****         interrupt_manager();
 7672              		.loc 1 2249 0
 7673 09e4 FFF7FEFF 		bl	interrupt_manager
 7674              	.L477:
2250:..\src/interruptions.c ****     }
2251:..\src/interruptions.c ****     // EMG 2 calibration state machine
2252:..\src/interruptions.c ****     switch(emg_2_status) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 178


 7675              		.loc 1 2252 0
 7676 09e8 444B     		ldr	r3, .L578+36
 7677 09ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7678 09ec 052B     		cmp	r3, #5
 7679 09ee 00F2C081 		bhi	.L559
 7680 09f2 01A2     		adr	r2, .L480
 7681 09f4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7682              		.p2align 2
 7683              	.L480:
 7684 09f8 110A0000 		.word	.L479+1
 7685 09fc B10A0000 		.word	.L481+1
 7686 0a00 090B0000 		.word	.L482+1
 7687 0a04 470B0000 		.word	.L483+1
 7688 0a08 F90B0000 		.word	.L484+1
 7689 0a0c 0B0C0000 		.word	.L485+1
 7690              		.p2align 1
 7691              	.L479:
2253:..\src/interruptions.c ****         case NORMAL: // normal execution
2254:..\src/interruptions.c ****         
2255:..\src/interruptions.c ****             if (g_mem.dev.dev_type != AIR_CHAMBERS_FB && g_mem.dev.dev_type != OTBK_ACT_WRIST_MS){
 7692              		.loc 1 2255 0
 7693 0a10 314B     		ldr	r3, .L578
 7694 0a12 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7695 0a16 022B     		cmp	r3, #2
 7696 0a18 14D0     		beq	.L486
 7697              		.loc 1 2255 0 is_stmt 0 discriminator 1
 7698 0a1a 2F4B     		ldr	r3, .L578
 7699 0a1c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 7700 0a20 032B     		cmp	r3, #3
 7701 0a22 0FD0     		beq	.L486
2256:..\src/interruptions.c ****                 i_aux = ((int32)(ADC_buf[3 - c_mem.emg.switch_emg] - 1639) * 87) >> 5;  //map range
 7702              		.loc 1 2256 0 is_stmt 1
 7703 0a24 2D4B     		ldr	r3, .L578+4
 7704 0a26 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7705 0a2a C3F10303 		rsb	r3, r3, #3
 7706 0a2e 2C4A     		ldr	r2, .L578+8
 7707 0a30 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7708 0a34 A3F26763 		subw	r3, r3, #1639
 7709 0a38 5722     		movs	r2, #87
 7710 0a3a 02FB03F3 		mul	r3, r2, r3
 7711 0a3e 5B11     		asrs	r3, r3, #5
 7712 0a40 7B60     		str	r3, [r7, #4]
 7713 0a42 08E0     		b	.L487
 7714              	.L486:
2257:..\src/interruptions.c ****             }
2258:..\src/interruptions.c ****             else {  // Use additional ADC channels, so the signal does not pass through AVAGO isola
2259:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3 - c_mem.emg.switch_emg]);
 7715              		.loc 1 2259 0
 7716 0a44 254B     		ldr	r3, .L578+4
 7717 0a46 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7718 0a4a C3F10303 		rsb	r3, r3, #3
 7719 0a4e 244A     		ldr	r2, .L578+8
 7720 0a50 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7721 0a54 7B60     		str	r3, [r7, #4]
 7722              	.L487:
2260:..\src/interruptions.c ****             }
2261:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 179


2262:..\src/interruptions.c ****             if (i_aux < 0)
 7723              		.loc 1 2262 0
 7724 0a56 7B68     		ldr	r3, [r7, #4]
 7725 0a58 002B     		cmp	r3, #0
 7726 0a5a 01DA     		bge	.L488
2263:..\src/interruptions.c ****                 i_aux = 0;
 7727              		.loc 1 2263 0
 7728 0a5c 0023     		movs	r3, #0
 7729 0a5e 7B60     		str	r3, [r7, #4]
 7730              	.L488:
2264:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[1]);
 7731              		.loc 1 2264 0
 7732 0a60 2749     		ldr	r1, .L578+40
 7733 0a62 7868     		ldr	r0, [r7, #4]
 7734 0a64 FFF7FEFF 		bl	filter
 7735 0a68 7860     		str	r0, [r7, #4]
2265:..\src/interruptions.c ****             i_aux = (i_aux << 10) / g_mem.emg.emg_max_value[1];
 7736              		.loc 1 2265 0
 7737 0a6a 7B68     		ldr	r3, [r7, #4]
 7738 0a6c 9B02     		lsls	r3, r3, #10
 7739 0a6e 1A46     		mov	r2, r3
 7740 0a70 194B     		ldr	r3, .L578
 7741 0a72 D3F80032 		ldr	r3, [r3, #512]
 7742 0a76 B2FBF3F3 		udiv	r3, r2, r3
 7743 0a7a 7B60     		str	r3, [r7, #4]
2266:..\src/interruptions.c **** 
2267:..\src/interruptions.c ****             if (interrupt_flag){
 7744              		.loc 1 2267 0
 7745 0a7c 1A4B     		ldr	r3, .L578+16
 7746 0a7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7747 0a80 002B     		cmp	r3, #0
 7748 0a82 04D0     		beq	.L489
2268:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7749              		.loc 1 2268 0
 7750 0a84 184B     		ldr	r3, .L578+16
 7751 0a86 0022     		movs	r2, #0
 7752 0a88 1A70     		strb	r2, [r3]
2269:..\src/interruptions.c ****                 interrupt_manager();
 7753              		.loc 1 2269 0
 7754 0a8a FFF7FEFF 		bl	interrupt_manager
 7755              	.L489:
2270:..\src/interruptions.c ****             }
2271:..\src/interruptions.c ****             
2272:..\src/interruptions.c ****             if (i_aux < 0) 
 7756              		.loc 1 2272 0
 7757 0a8e 7B68     		ldr	r3, [r7, #4]
 7758 0a90 002B     		cmp	r3, #0
 7759 0a92 02DA     		bge	.L490
2273:..\src/interruptions.c ****                 i_aux = 0;
 7760              		.loc 1 2273 0
 7761 0a94 0023     		movs	r3, #0
 7762 0a96 7B60     		str	r3, [r7, #4]
 7763 0a98 06E0     		b	.L491
 7764              	.L490:
2274:..\src/interruptions.c ****             else 
2275:..\src/interruptions.c ****                 if (i_aux > 1024)
 7765              		.loc 1 2275 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 180


 7766 0a9a 7B68     		ldr	r3, [r7, #4]
 7767 0a9c B3F5806F 		cmp	r3, #1024
 7768 0aa0 02DD     		ble	.L491
2276:..\src/interruptions.c ****                     i_aux = 1024;
 7769              		.loc 1 2276 0
 7770 0aa2 4FF48063 		mov	r3, #1024
 7771 0aa6 7B60     		str	r3, [r7, #4]
 7772              	.L491:
2277:..\src/interruptions.c ****             
2278:..\src/interruptions.c ****             g_adc_meas.emg[1] = i_aux;
 7773              		.loc 1 2278 0
 7774 0aa8 104A     		ldr	r2, .L578+20
 7775 0aaa 7B68     		ldr	r3, [r7, #4]
 7776 0aac 5360     		str	r3, [r2, #4]
2279:..\src/interruptions.c **** 
2280:..\src/interruptions.c ****             break;
 7777              		.loc 1 2280 0
 7778 0aae 69E1     		b	.L492
 7779              	.L481:
2281:..\src/interruptions.c **** 
2282:..\src/interruptions.c ****         case RESET: // reset variables
2283:..\src/interruptions.c ****             emg_counter_2 = 0;
 7780              		.loc 1 2283 0
 7781 0ab0 144B     		ldr	r3, .L578+44
 7782 0ab2 0022     		movs	r2, #0
 7783 0ab4 1A80     		strh	r2, [r3]	@ movhi
2284:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] = 0;
 7784              		.loc 1 2284 0
 7785 0ab6 084B     		ldr	r3, .L578
 7786 0ab8 0022     		movs	r2, #0
 7787 0aba C3F80022 		str	r2, [r3, #512]
2285:..\src/interruptions.c **** 
2286:..\src/interruptions.c ****             if (interrupt_flag){
 7788              		.loc 1 2286 0
 7789 0abe 0A4B     		ldr	r3, .L578+16
 7790 0ac0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7791 0ac2 002B     		cmp	r3, #0
 7792 0ac4 04D0     		beq	.L493
2287:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7793              		.loc 1 2287 0
 7794 0ac6 084B     		ldr	r3, .L578+16
 7795 0ac8 0022     		movs	r2, #0
 7796 0aca 1A70     		strb	r2, [r3]
2288:..\src/interruptions.c ****                 interrupt_manager();
 7797              		.loc 1 2288 0
 7798 0acc FFF7FEFF 		bl	interrupt_manager
 7799              	.L493:
2289:..\src/interruptions.c ****             }
2290:..\src/interruptions.c ****             
2291:..\src/interruptions.c ****             emg_2_status = WAIT; // wait for EMG 1 calibration
 7800              		.loc 1 2291 0
 7801 0ad0 0A4B     		ldr	r3, .L578+36
 7802 0ad2 0422     		movs	r2, #4
 7803 0ad4 1A70     		strb	r2, [r3]
2292:..\src/interruptions.c ****             break;
 7804              		.loc 1 2292 0
 7805 0ad6 55E1     		b	.L492
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 181


 7806              	.L579:
 7807              		.align	2
 7808              	.L578:
 7809 0ad8 00000000 		.word	g_mem
 7810 0adc 00000000 		.word	c_mem
 7811 0ae0 00000000 		.word	ADC_buf
 7812 0ae4 00000000 		.word	filt_emg
 7813 0ae8 00000000 		.word	interrupt_flag
 7814 0aec 00000000 		.word	g_adc_meas
 7815 0af0 78010000 		.word	emg_counter_1.10662
 7816 0af4 00000000 		.word	emg_1_status
 7817 0af8 D34D6210 		.word	274877907
 7818 0afc 00000000 		.word	emg_2_status
 7819 0b00 08000000 		.word	filt_emg+8
 7820 0b04 7A010000 		.word	emg_counter_2.10663
 7821              	.L482:
2293:..\src/interruptions.c **** 
2294:..\src/interruptions.c ****         case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2295:..\src/interruptions.c ****             emg_counter_2++;
 7822              		.loc 1 2295 0
 7823 0b08 B24B     		ldr	r3, .L580
 7824 0b0a 1B88     		ldrh	r3, [r3]
 7825 0b0c 0133     		adds	r3, r3, #1
 7826 0b0e 9AB2     		uxth	r2, r3
 7827 0b10 B04B     		ldr	r3, .L580
 7828 0b12 1A80     		strh	r2, [r3]	@ movhi
2296:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7829              		.loc 1 2296 0
 7830 0b14 AF4B     		ldr	r3, .L580
 7831 0b16 1B88     		ldrh	r3, [r3]
 7832 0b18 B3F5FA7F 		cmp	r3, #500
 7833 0b1c 40F02B81 		bne	.L560
2297:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7834              		.loc 1 2297 0
 7835 0b20 AC4B     		ldr	r3, .L580
 7836 0b22 0022     		movs	r2, #0
 7837 0b24 1A80     		strh	r2, [r3]	@ movhi
2298:..\src/interruptions.c ****                 LED_control(1);
 7838              		.loc 1 2298 0
 7839 0b26 0120     		movs	r0, #1
 7840 0b28 FFF7FEFF 		bl	LED_control
2299:..\src/interruptions.c **** 
2300:..\src/interruptions.c ****                 if (interrupt_flag){
 7841              		.loc 1 2300 0
 7842 0b2c AA4B     		ldr	r3, .L580+4
 7843 0b2e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7844 0b30 002B     		cmp	r3, #0
 7845 0b32 04D0     		beq	.L495
2301:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7846              		.loc 1 2301 0
 7847 0b34 A84B     		ldr	r3, .L580+4
 7848 0b36 0022     		movs	r2, #0
 7849 0b38 1A70     		strb	r2, [r3]
2302:..\src/interruptions.c ****                     interrupt_manager();
 7850              		.loc 1 2302 0
 7851 0b3a FFF7FEFF 		bl	interrupt_manager
 7852              	.L495:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 182


2303:..\src/interruptions.c ****                 }
2304:..\src/interruptions.c ****                 
2305:..\src/interruptions.c ****                 emg_2_status = SUM_AND_MEAN;           // sum and mean status
 7853              		.loc 1 2305 0
 7854 0b3e A74B     		ldr	r3, .L580+8
 7855 0b40 0322     		movs	r2, #3
 7856 0b42 1A70     		strb	r2, [r3]
2306:..\src/interruptions.c ****             }
2307:..\src/interruptions.c ****             break;
 7857              		.loc 1 2307 0
 7858 0b44 17E1     		b	.L560
 7859              	.L483:
2308:..\src/interruptions.c **** 
2309:..\src/interruptions.c ****         case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2310:..\src/interruptions.c ****             // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2311:..\src/interruptions.c ****             emg_counter_2++;
 7860              		.loc 1 2311 0
 7861 0b46 A34B     		ldr	r3, .L580
 7862 0b48 1B88     		ldrh	r3, [r3]
 7863 0b4a 0133     		adds	r3, r3, #1
 7864 0b4c 9AB2     		uxth	r2, r3
 7865 0b4e A14B     		ldr	r3, .L580
 7866 0b50 1A80     		strh	r2, [r3]	@ movhi
2312:..\src/interruptions.c ****             if (ADC_buf[3 - c_mem.emg.switch_emg] < 0)
 7867              		.loc 1 2312 0
 7868 0b52 A34B     		ldr	r3, .L580+12
 7869 0b54 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7870 0b58 C3F10303 		rsb	r3, r3, #3
 7871 0b5c A14A     		ldr	r2, .L580+16
 7872 0b5e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7873 0b62 002B     		cmp	r3, #0
 7874 0b64 08DA     		bge	.L496
2313:..\src/interruptions.c ****                 ADC_buf[3 - c_mem.emg.switch_emg] = 0;
 7875              		.loc 1 2313 0
 7876 0b66 9E4B     		ldr	r3, .L580+12
 7877 0b68 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7878 0b6c C3F10303 		rsb	r3, r3, #3
 7879 0b70 9C4A     		ldr	r2, .L580+16
 7880 0b72 0021     		movs	r1, #0
 7881 0b74 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 7882              	.L496:
2314:..\src/interruptions.c ****             g_mem.emg.emg_max_value[1] += filter((int32)ADC_buf[3 - c_mem.emg.switch_emg], &filt_em
 7883              		.loc 1 2314 0
 7884 0b78 994B     		ldr	r3, .L580+12
 7885 0b7a 93F80732 		ldrb	r3, [r3, #519]	@ zero_extendqisi2
 7886 0b7e C3F10303 		rsb	r3, r3, #3
 7887 0b82 984A     		ldr	r2, .L580+16
 7888 0b84 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 7889 0b88 9749     		ldr	r1, .L580+20
 7890 0b8a 1846     		mov	r0, r3
 7891 0b8c FFF7FEFF 		bl	filter
 7892 0b90 0246     		mov	r2, r0
 7893 0b92 964B     		ldr	r3, .L580+24
 7894 0b94 D3F80032 		ldr	r3, [r3, #512]
 7895 0b98 1344     		add	r3, r3, r2
 7896 0b9a 944A     		ldr	r2, .L580+24
 7897 0b9c C2F80032 		str	r3, [r2, #512]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 183


2315:..\src/interruptions.c **** 
2316:..\src/interruptions.c ****             if (interrupt_flag){
 7898              		.loc 1 2316 0
 7899 0ba0 8D4B     		ldr	r3, .L580+4
 7900 0ba2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7901 0ba4 002B     		cmp	r3, #0
 7902 0ba6 04D0     		beq	.L497
2317:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 7903              		.loc 1 2317 0
 7904 0ba8 8B4B     		ldr	r3, .L580+4
 7905 0baa 0022     		movs	r2, #0
 7906 0bac 1A70     		strb	r2, [r3]
2318:..\src/interruptions.c ****                 interrupt_manager();
 7907              		.loc 1 2318 0
 7908 0bae FFF7FEFF 		bl	interrupt_manager
 7909              	.L497:
2319:..\src/interruptions.c ****             }
2320:..\src/interruptions.c ****             
2321:..\src/interruptions.c ****             if (emg_counter_2 == SAMPLES_FOR_EMG_MEAN) {
 7910              		.loc 1 2321 0
 7911 0bb2 884B     		ldr	r3, .L580
 7912 0bb4 1B88     		ldrh	r3, [r3]
 7913 0bb6 B3F57A7F 		cmp	r3, #1000
 7914 0bba 40F0DE80 		bne	.L561
2322:..\src/interruptions.c ****                 g_mem.emg.emg_max_value[1] = g_mem.emg.emg_max_value[1] / SAMPLES_FOR_EMG_MEAN; // 
 7915              		.loc 1 2322 0
 7916 0bbe 8B4B     		ldr	r3, .L580+24
 7917 0bc0 D3F80032 		ldr	r3, [r3, #512]
 7918 0bc4 8A4A     		ldr	r2, .L580+28
 7919 0bc6 A2FB0323 		umull	r2, r3, r2, r3
 7920 0bca 9B09     		lsrs	r3, r3, #6
 7921 0bcc 874A     		ldr	r2, .L580+24
 7922 0bce C2F80032 		str	r3, [r2, #512]
2323:..\src/interruptions.c ****                 LED_control(0);
 7923              		.loc 1 2323 0
 7924 0bd2 0020     		movs	r0, #0
 7925 0bd4 FFF7FEFF 		bl	LED_control
2324:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7926              		.loc 1 2324 0
 7927 0bd8 7E4B     		ldr	r3, .L580
 7928 0bda 0022     		movs	r2, #0
 7929 0bdc 1A80     		strh	r2, [r3]	@ movhi
2325:..\src/interruptions.c ****             
2326:..\src/interruptions.c ****                 if (interrupt_flag){
 7930              		.loc 1 2326 0
 7931 0bde 7E4B     		ldr	r3, .L580+4
 7932 0be0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7933 0be2 002B     		cmp	r3, #0
 7934 0be4 04D0     		beq	.L499
2327:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7935              		.loc 1 2327 0
 7936 0be6 7C4B     		ldr	r3, .L580+4
 7937 0be8 0022     		movs	r2, #0
 7938 0bea 1A70     		strb	r2, [r3]
2328:..\src/interruptions.c ****                     interrupt_manager();
 7939              		.loc 1 2328 0
 7940 0bec FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 184


 7941              	.L499:
2329:..\src/interruptions.c ****                 }
2330:..\src/interruptions.c ****                 
2331:..\src/interruptions.c ****                 emg_2_status = WAIT_EoC;    // goto end of calibration wait
 7942              		.loc 1 2331 0
 7943 0bf0 7A4B     		ldr	r3, .L580+8
 7944 0bf2 0522     		movs	r2, #5
 7945 0bf4 1A70     		strb	r2, [r3]
2332:..\src/interruptions.c ****             }
2333:..\src/interruptions.c ****             break;
 7946              		.loc 1 2333 0
 7947 0bf6 C0E0     		b	.L561
 7948              	.L484:
2334:..\src/interruptions.c **** 
2335:..\src/interruptions.c ****         case WAIT: // wait for EMG calibration to be done
2336:..\src/interruptions.c ****             if (emg_1_status == NORMAL)
 7949              		.loc 1 2336 0
 7950 0bf8 7E4B     		ldr	r3, .L580+32
 7951 0bfa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7952 0bfc 002B     		cmp	r3, #0
 7953 0bfe 40F0BE80 		bne	.L562
2337:..\src/interruptions.c ****                 emg_2_status = DISCARD;           // goto discard sample
 7954              		.loc 1 2337 0
 7955 0c02 764B     		ldr	r3, .L580+8
 7956 0c04 0222     		movs	r2, #2
 7957 0c06 1A70     		strb	r2, [r3]
2338:..\src/interruptions.c ****             break;
 7958              		.loc 1 2338 0
 7959 0c08 B9E0     		b	.L562
 7960              	.L485:
2339:..\src/interruptions.c **** 
2340:..\src/interruptions.c ****         case WAIT_EoC:  // wait for end of calibration procedure (only for LED visibility reasons)
2341:..\src/interruptions.c ****             emg_counter_2++;
 7961              		.loc 1 2341 0
 7962 0c0a 724B     		ldr	r3, .L580
 7963 0c0c 1B88     		ldrh	r3, [r3]
 7964 0c0e 0133     		adds	r3, r3, #1
 7965 0c10 9AB2     		uxth	r2, r3
 7966 0c12 704B     		ldr	r3, .L580
 7967 0c14 1A80     		strh	r2, [r3]	@ movhi
2342:..\src/interruptions.c ****             if (emg_counter_2 == EMG_SAMPLE_TO_DISCARD) {
 7968              		.loc 1 2342 0
 7969 0c16 6F4B     		ldr	r3, .L580
 7970 0c18 1B88     		ldrh	r3, [r3]
 7971 0c1a B3F5FA7F 		cmp	r3, #500
 7972 0c1e 40F0B080 		bne	.L563
2343:..\src/interruptions.c ****                 emg_counter_2 = 0;          // reset counter
 7973              		.loc 1 2343 0
 7974 0c22 6C4B     		ldr	r3, .L580
 7975 0c24 0022     		movs	r2, #0
 7976 0c26 1A80     		strh	r2, [r3]	@ movhi
2344:..\src/interruptions.c ****                 
2345:..\src/interruptions.c ****                 if (interrupt_flag){
 7977              		.loc 1 2345 0
 7978 0c28 6B4B     		ldr	r3, .L580+4
 7979 0c2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7980 0c2c 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 185


 7981 0c2e 04D0     		beq	.L502
2346:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 7982              		.loc 1 2346 0
 7983 0c30 694B     		ldr	r3, .L580+4
 7984 0c32 0022     		movs	r2, #0
 7985 0c34 1A70     		strb	r2, [r3]
2347:..\src/interruptions.c ****                     interrupt_manager();
 7986              		.loc 1 2347 0
 7987 0c36 FFF7FEFF 		bl	interrupt_manager
 7988              	.L502:
2348:..\src/interruptions.c ****                 }
2349:..\src/interruptions.c ****                 
2350:..\src/interruptions.c ****                 for (idx = 0; idx < NUM_OF_MOTORS; idx++) {
 7989              		.loc 1 2350 0
 7990 0c3a 6F4B     		ldr	r3, .L580+36
 7991 0c3c 0022     		movs	r2, #0
 7992 0c3e 1A70     		strb	r2, [r3]
 7993 0c40 8BE0     		b	.L503
 7994              	.L507:
2351:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 7995              		.loc 1 2351 0
 7996 0c42 6D4B     		ldr	r3, .L580+36
 7997 0c44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7998 0c46 1946     		mov	r1, r3
 7999 0c48 654A     		ldr	r2, .L580+12
 8000 0c4a 7423     		movs	r3, #116
 8001 0c4c 03FB01F3 		mul	r3, r3, r1
 8002 0c50 1344     		add	r3, r3, r2
 8003 0c52 03F58773 		add	r3, r3, #270
 8004 0c56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8005 0c58 022B     		cmp	r3, #2
 8006 0c5a 33D0     		beq	.L504
2352:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 8007              		.loc 1 2352 0 discriminator 1
 8008 0c5c 664B     		ldr	r3, .L580+36
 8009 0c5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8010 0c60 1946     		mov	r1, r3
 8011 0c62 5F4A     		ldr	r2, .L580+12
 8012 0c64 7423     		movs	r3, #116
 8013 0c66 03FB01F3 		mul	r3, r3, r1
 8014 0c6a 1344     		add	r3, r3, r2
 8015 0c6c 03F58773 		add	r3, r3, #270
 8016 0c70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2351:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8017              		.loc 1 2351 0 discriminator 1
 8018 0c72 032B     		cmp	r3, #3
 8019 0c74 26D0     		beq	.L504
2353:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8020              		.loc 1 2353 0
 8021 0c76 604B     		ldr	r3, .L580+36
 8022 0c78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8023 0c7a 1946     		mov	r1, r3
 8024 0c7c 584A     		ldr	r2, .L580+12
 8025 0c7e 7423     		movs	r3, #116
 8026 0c80 03FB01F3 		mul	r3, r3, r1
 8027 0c84 1344     		add	r3, r3, r2
 8028 0c86 03F58773 		add	r3, r3, #270
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 186


 8029 0c8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2352:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 8030              		.loc 1 2352 0
 8031 0c8c 042B     		cmp	r3, #4
 8032 0c8e 19D0     		beq	.L504
2354:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8033              		.loc 1 2354 0
 8034 0c90 594B     		ldr	r3, .L580+36
 8035 0c92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8036 0c94 1946     		mov	r1, r3
 8037 0c96 524A     		ldr	r2, .L580+12
 8038 0c98 7423     		movs	r3, #116
 8039 0c9a 03FB01F3 		mul	r3, r3, r1
 8040 0c9e 1344     		add	r3, r3, r2
 8041 0ca0 03F58773 		add	r3, r3, #270
 8042 0ca4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2353:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS) ||
 8043              		.loc 1 2353 0
 8044 0ca6 052B     		cmp	r3, #5
 8045 0ca8 0CD0     		beq	.L504
2355:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 8046              		.loc 1 2355 0
 8047 0caa 534B     		ldr	r3, .L580+36
 8048 0cac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8049 0cae 1946     		mov	r1, r3
 8050 0cb0 4B4A     		ldr	r2, .L580+12
 8051 0cb2 7423     		movs	r3, #116
 8052 0cb4 03FB01F3 		mul	r3, r3, r1
 8053 0cb8 1344     		add	r3, r3, r2
 8054 0cba 03F58773 		add	r3, r3, #270
 8055 0cbe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
2354:..\src/interruptions.c ****                         (c_mem.motor[idx].input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 8056              		.loc 1 2354 0
 8057 0cc0 072B     		cmp	r3, #7
 8058 0cc2 44D1     		bne	.L505
 8059              	.L504:
2356:..\src/interruptions.c ****                         if (c_mem.motor[idx].control_mode == CONTROL_ANGLE) {
 8060              		.loc 1 2356 0
 8061 0cc4 4C4B     		ldr	r3, .L580+36
 8062 0cc6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8063 0cc8 1946     		mov	r1, r3
 8064 0cca 454A     		ldr	r2, .L580+12
 8065 0ccc 7423     		movs	r3, #116
 8066 0cce 03FB01F3 		mul	r3, r3, r1
 8067 0cd2 1344     		add	r3, r3, r2
 8068 0cd4 03F20F13 		addw	r3, r3, #271
 8069 0cd8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8070 0cda 002B     		cmp	r3, #0
 8071 0cdc 18D1     		bne	.L506
2357:..\src/interruptions.c ****                             g_ref[idx].pos = g_meas[g_mem.motor[idx].encoder_line].pos[0];
 8072              		.loc 1 2357 0
 8073 0cde 464B     		ldr	r3, .L580+36
 8074 0ce0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8075 0ce2 1846     		mov	r0, r3
 8076 0ce4 444B     		ldr	r3, .L580+36
 8077 0ce6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8078 0ce8 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 187


 8079 0cea 404A     		ldr	r2, .L580+24
 8080 0cec 7423     		movs	r3, #116
 8081 0cee 03FB01F3 		mul	r3, r3, r1
 8082 0cf2 1344     		add	r3, r3, r2
 8083 0cf4 03F58873 		add	r3, r3, #272
 8084 0cf8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8085 0cfa 1946     		mov	r1, r3
 8086 0cfc 3F4A     		ldr	r2, .L580+40
 8087 0cfe 3423     		movs	r3, #52
 8088 0d00 03FB01F3 		mul	r3, r3, r1
 8089 0d04 1344     		add	r3, r3, r2
 8090 0d06 1A68     		ldr	r2, [r3]
 8091 0d08 3D49     		ldr	r1, .L580+44
 8092 0d0a 0301     		lsls	r3, r0, #4
 8093 0d0c 0B44     		add	r3, r3, r1
 8094 0d0e 1A60     		str	r2, [r3]
 8095              	.L506:
2358:..\src/interruptions.c ****                         }
2359:..\src/interruptions.c ****                         g_ref[idx].onoff = c_mem.motor[idx].activ;
 8096              		.loc 1 2359 0
 8097 0d10 394B     		ldr	r3, .L580+36
 8098 0d12 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8099 0d14 1846     		mov	r0, r3
 8100 0d16 384B     		ldr	r3, .L580+36
 8101 0d18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8102 0d1a 1946     		mov	r1, r3
 8103 0d1c 304A     		ldr	r2, .L580+12
 8104 0d1e 7423     		movs	r3, #116
 8105 0d20 03FB01F3 		mul	r3, r3, r1
 8106 0d24 1344     		add	r3, r3, r2
 8107 0d26 E033     		adds	r3, r3, #224
 8108 0d28 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 8109 0d2a 354A     		ldr	r2, .L580+44
 8110 0d2c 0301     		lsls	r3, r0, #4
 8111 0d2e 1344     		add	r3, r3, r2
 8112 0d30 0C33     		adds	r3, r3, #12
 8113 0d32 0A46     		mov	r2, r1
 8114 0d34 1A70     		strb	r2, [r3]
2360:..\src/interruptions.c ****                         enable_motor(idx, g_ref[idx].onoff); 
 8115              		.loc 1 2360 0
 8116 0d36 304B     		ldr	r3, .L580+36
 8117 0d38 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 8118 0d3a 2F4B     		ldr	r3, .L580+36
 8119 0d3c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8120 0d3e 304A     		ldr	r2, .L580+44
 8121 0d40 1B01     		lsls	r3, r3, #4
 8122 0d42 1344     		add	r3, r3, r2
 8123 0d44 0C33     		adds	r3, r3, #12
 8124 0d46 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8125 0d48 1946     		mov	r1, r3
 8126 0d4a FFF7FEFF 		bl	enable_motor
 8127              	.L505:
2350:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8128              		.loc 1 2350 0 discriminator 2
 8129 0d4e 2A4B     		ldr	r3, .L580+36
 8130 0d50 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8131 0d52 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 188


 8132 0d54 DAB2     		uxtb	r2, r3
 8133 0d56 284B     		ldr	r3, .L580+36
 8134 0d58 1A70     		strb	r2, [r3]
 8135              	.L503:
2350:..\src/interruptions.c ****                     if ((c_mem.motor[idx].input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 8136              		.loc 1 2350 0 is_stmt 0 discriminator 1
 8137 0d5a 274B     		ldr	r3, .L580+36
 8138 0d5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8139 0d5e 012B     		cmp	r3, #1
 8140 0d60 7FF66FAF 		bls	.L507
2361:..\src/interruptions.c ****                     }
2362:..\src/interruptions.c ****                 }
2363:..\src/interruptions.c ****                     
2364:..\src/interruptions.c ****                 memStore(0);        // Store emg_max_value
 8141              		.loc 1 2364 0 is_stmt 1
 8142 0d64 0020     		movs	r0, #0
 8143 0d66 FFF7FEFF 		bl	memStore
2365:..\src/interruptions.c ****                     
2366:..\src/interruptions.c ****                 emg_2_status = NORMAL;           // goto normal execution
 8144              		.loc 1 2366 0
 8145 0d6a 1C4B     		ldr	r3, .L580+8
 8146 0d6c 0022     		movs	r2, #0
 8147 0d6e 1A70     		strb	r2, [r3]
2367:..\src/interruptions.c ****             }
2368:..\src/interruptions.c ****             break;
 8148              		.loc 1 2368 0
 8149 0d70 07E0     		b	.L563
 8150              	.L559:
2369:..\src/interruptions.c ****         default:
2370:..\src/interruptions.c ****             break;
 8151              		.loc 1 2370 0
 8152 0d72 00BF     		nop
 8153 0d74 06E0     		b	.L492
 8154              	.L560:
2307:..\src/interruptions.c **** 
 8155              		.loc 1 2307 0
 8156 0d76 00BF     		nop
 8157 0d78 04E0     		b	.L492
 8158              	.L561:
2333:..\src/interruptions.c **** 
 8159              		.loc 1 2333 0
 8160 0d7a 00BF     		nop
 8161 0d7c 02E0     		b	.L492
 8162              	.L562:
2338:..\src/interruptions.c **** 
 8163              		.loc 1 2338 0
 8164 0d7e 00BF     		nop
 8165 0d80 00E0     		b	.L492
 8166              	.L563:
2368:..\src/interruptions.c ****         default:
 8167              		.loc 1 2368 0
 8168 0d82 00BF     		nop
 8169              	.L492:
2371:..\src/interruptions.c ****     }
2372:..\src/interruptions.c ****         
2373:..\src/interruptions.c ****     if (interrupt_flag){
 8170              		.loc 1 2373 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 189


 8171 0d84 144B     		ldr	r3, .L580+4
 8172 0d86 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8173 0d88 002B     		cmp	r3, #0
 8174 0d8a 04D0     		beq	.L508
2374:..\src/interruptions.c ****         interrupt_flag = FALSE;
 8175              		.loc 1 2374 0
 8176 0d8c 124B     		ldr	r3, .L580+4
 8177 0d8e 0022     		movs	r2, #0
 8178 0d90 1A70     		strb	r2, [r3]
2375:..\src/interruptions.c ****         interrupt_manager();
 8179              		.loc 1 2375 0
 8180 0d92 FFF7FEFF 		bl	interrupt_manager
 8181              	.L508:
2376:..\src/interruptions.c ****     }
2377:..\src/interruptions.c ****     
2378:..\src/interruptions.c ****     if (c_mem.motor[0].input_mode == INPUT_MODE_JOYSTICK || c_mem.motor[1].input_mode == INPUT_MODE
 8182              		.loc 1 2378 0
 8183 0d96 124B     		ldr	r3, .L580+12
 8184 0d98 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 8185 0d9c 062B     		cmp	r3, #6
 8186 0d9e 05D0     		beq	.L509
 8187              		.loc 1 2378 0 is_stmt 0 discriminator 1
 8188 0da0 0F4B     		ldr	r3, .L580+12
 8189 0da2 93F88231 		ldrb	r3, [r3, #386]	@ zero_extendqisi2
 8190 0da6 062B     		cmp	r3, #6
 8191 0da8 40F0DF81 		bne	.L510
 8192              	.L509:
2379:..\src/interruptions.c ****         // Read joystick
2380:..\src/interruptions.c ****         
2381:..\src/interruptions.c ****         switch (joy_UD_status) {
 8193              		.loc 1 2381 0 is_stmt 1
 8194 0dac 154B     		ldr	r3, .L580+48
 8195 0dae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8196 0db0 052B     		cmp	r3, #5
 8197 0db2 00F2E480 		bhi	.L511
 8198 0db6 01A2     		adr	r2, .L513
 8199 0db8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8200              		.p2align 2
 8201              	.L513:
 8202 0dbc 090E0000 		.word	.L512+1
 8203 0dc0 A50E0000 		.word	.L514+1
 8204 0dc4 B90E0000 		.word	.L515+1
 8205 0dc8 ED0E0000 		.word	.L516+1
 8206 0dcc 590F0000 		.word	.L517+1
 8207 0dd0 590F0000 		.word	.L517+1
 8208              		.p2align 1
 8209              	.L581:
 8210              		.align	2
 8211              	.L580:
 8212 0dd4 7A010000 		.word	emg_counter_2.10663
 8213 0dd8 00000000 		.word	interrupt_flag
 8214 0ddc 00000000 		.word	emg_2_status
 8215 0de0 00000000 		.word	c_mem
 8216 0de4 00000000 		.word	ADC_buf
 8217 0de8 08000000 		.word	filt_emg+8
 8218 0dec 00000000 		.word	g_mem
 8219 0df0 D34D6210 		.word	274877907
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 190


 8220 0df4 00000000 		.word	emg_1_status
 8221 0df8 72010000 		.word	idx.10672
 8222 0dfc 00000000 		.word	g_meas
 8223 0e00 00000000 		.word	g_ref
 8224 0e04 00000000 		.word	joy_UD_status
 8225              	.L512:
2382:..\src/interruptions.c ****             case NORMAL:
2383:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[2]);
 8226              		.loc 1 2383 0
 8227 0e08 A44B     		ldr	r3, .L582
 8228 0e0a B3F90430 		ldrsh	r3, [r3, #4]
 8229 0e0e 7B60     		str	r3, [r7, #4]
2384:..\src/interruptions.c ****                 // Remap the analog reading from -1024 to 1024.  
2385:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - UD_mean_value) / UD_mean_value) * c_mem.JOY_spec
 8230              		.loc 1 2385 0
 8231 0e10 A34B     		ldr	r3, .L582+4
 8232 0e12 1B68     		ldr	r3, [r3]
 8233 0e14 7A68     		ldr	r2, [r7, #4]
 8234 0e16 D31A     		subs	r3, r2, r3
 8235 0e18 1846     		mov	r0, r3
 8236 0e1a FFF7FEFF 		bl	__aeabi_i2f
 8237 0e1e 0446     		mov	r4, r0
 8238 0e20 9F4B     		ldr	r3, .L582+4
 8239 0e22 1B68     		ldr	r3, [r3]
 8240 0e24 1846     		mov	r0, r3
 8241 0e26 FFF7FEFF 		bl	__aeabi_i2f
 8242 0e2a 0346     		mov	r3, r0
 8243 0e2c 1946     		mov	r1, r3
 8244 0e2e 2046     		mov	r0, r4
 8245 0e30 FFF7FEFF 		bl	__aeabi_fdiv
 8246 0e34 0346     		mov	r3, r0
 8247 0e36 1C46     		mov	r4, r3
 8248 0e38 9A4B     		ldr	r3, .L582+8
 8249 0e3a B3F8BE32 		ldrh	r3, [r3, #702]
 8250 0e3e 1846     		mov	r0, r3
 8251 0e40 FFF7FEFF 		bl	__aeabi_i2f
 8252 0e44 0346     		mov	r3, r0
 8253 0e46 1946     		mov	r1, r3
 8254 0e48 2046     		mov	r0, r4
 8255 0e4a FFF7FEFF 		bl	__aeabi_fmul
 8256 0e4e 0346     		mov	r3, r0
 8257 0e50 1846     		mov	r0, r3
 8258 0e52 FFF7FEFF 		bl	__aeabi_f2iz
 8259 0e56 0346     		mov	r3, r0
 8260 0e58 7B60     		str	r3, [r7, #4]
2386:..\src/interruptions.c ****                 
2387:..\src/interruptions.c ****                 if (interrupt_flag){
 8261              		.loc 1 2387 0
 8262 0e5a 934B     		ldr	r3, .L582+12
 8263 0e5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8264 0e5e 002B     		cmp	r3, #0
 8265 0e60 04D0     		beq	.L518
2388:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8266              		.loc 1 2388 0
 8267 0e62 914B     		ldr	r3, .L582+12
 8268 0e64 0022     		movs	r2, #0
 8269 0e66 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 191


2389:..\src/interruptions.c ****                     interrupt_manager();
 8270              		.loc 1 2389 0
 8271 0e68 FFF7FEFF 		bl	interrupt_manager
 8272              	.L518:
2390:..\src/interruptions.c ****                 }
2391:..\src/interruptions.c **** 
2392:..\src/interruptions.c ****                 //Saturation
2393:..\src/interruptions.c ****                 if (i_aux < -1024) 
 8273              		.loc 1 2393 0
 8274 0e6c 7B68     		ldr	r3, [r7, #4]
 8275 0e6e 13F5806F 		cmn	r3, #1024
 8276 0e72 01DA     		bge	.L519
2394:..\src/interruptions.c ****                     i_aux = -1024;
 8277              		.loc 1 2394 0
 8278 0e74 8D4B     		ldr	r3, .L582+16
 8279 0e76 7B60     		str	r3, [r7, #4]
 8280              	.L519:
2395:..\src/interruptions.c ****                 if (i_aux > 1024)
 8281              		.loc 1 2395 0
 8282 0e78 7B68     		ldr	r3, [r7, #4]
 8283 0e7a B3F5806F 		cmp	r3, #1024
 8284 0e7e 02DD     		ble	.L520
2396:..\src/interruptions.c ****                     i_aux = 1024;
 8285              		.loc 1 2396 0
 8286 0e80 4FF48063 		mov	r3, #1024
 8287 0e84 7B60     		str	r3, [r7, #4]
 8288              	.L520:
2397:..\src/interruptions.c **** 
2398:..\src/interruptions.c ****                 g_adc_meas.joystick[1] = (int16) i_aux;
 8289              		.loc 1 2398 0
 8290 0e86 7B68     		ldr	r3, [r7, #4]
 8291 0e88 1BB2     		sxth	r3, r3
 8292 0e8a 1A46     		mov	r2, r3
 8293 0e8c 884B     		ldr	r3, .L582+20
 8294 0e8e 5A62     		str	r2, [r3, #36]
2399:..\src/interruptions.c **** 
2400:..\src/interruptions.c ****                 if (interrupt_flag){
 8295              		.loc 1 2400 0
 8296 0e90 854B     		ldr	r3, .L582+12
 8297 0e92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8298 0e94 002B     		cmp	r3, #0
 8299 0e96 6BD0     		beq	.L564
2401:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8300              		.loc 1 2401 0
 8301 0e98 834B     		ldr	r3, .L582+12
 8302 0e9a 0022     		movs	r2, #0
 8303 0e9c 1A70     		strb	r2, [r3]
2402:..\src/interruptions.c ****                     interrupt_manager();
 8304              		.loc 1 2402 0
 8305 0e9e FFF7FEFF 		bl	interrupt_manager
2403:..\src/interruptions.c ****                 }
2404:..\src/interruptions.c **** 
2405:..\src/interruptions.c ****             break;
 8306              		.loc 1 2405 0
 8307 0ea2 65E0     		b	.L564
 8308              	.L514:
2406:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 192


2407:..\src/interruptions.c ****             case RESET: // reset variables
2408:..\src/interruptions.c ****                 UD_counter = 0;
 8309              		.loc 1 2408 0
 8310 0ea4 834B     		ldr	r3, .L582+24
 8311 0ea6 0022     		movs	r2, #0
 8312 0ea8 1A80     		strh	r2, [r3]	@ movhi
2409:..\src/interruptions.c ****                 UD_mean_value = 0;
 8313              		.loc 1 2409 0
 8314 0eaa 7D4B     		ldr	r3, .L582+4
 8315 0eac 0022     		movs	r2, #0
 8316 0eae 1A60     		str	r2, [r3]
2410:..\src/interruptions.c ****                 joy_UD_status = WAIT; // go to waiting status
 8317              		.loc 1 2410 0
 8318 0eb0 814B     		ldr	r3, .L582+28
 8319 0eb2 0422     		movs	r2, #4
 8320 0eb4 1A70     		strb	r2, [r3]
2411:..\src/interruptions.c **** 
2412:..\src/interruptions.c ****             break;
 8321              		.loc 1 2412 0
 8322 0eb6 62E0     		b	.L511
 8323              	.L515:
2413:..\src/interruptions.c **** 
2414:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples
2415:..\src/interruptions.c ****                 UD_counter++;
 8324              		.loc 1 2415 0
 8325 0eb8 7E4B     		ldr	r3, .L582+24
 8326 0eba 1B88     		ldrh	r3, [r3]
 8327 0ebc 0133     		adds	r3, r3, #1
 8328 0ebe 9AB2     		uxth	r2, r3
 8329 0ec0 7C4B     		ldr	r3, .L582+24
 8330 0ec2 1A80     		strh	r2, [r3]	@ movhi
2416:..\src/interruptions.c ****                 if (UD_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8331              		.loc 1 2416 0
 8332 0ec4 7B4B     		ldr	r3, .L582+24
 8333 0ec6 1B88     		ldrh	r3, [r3]
 8334 0ec8 642B     		cmp	r3, #100
 8335 0eca 53D1     		bne	.L565
2417:..\src/interruptions.c ****                     UD_counter = 0;                     // reset counter
 8336              		.loc 1 2417 0
 8337 0ecc 794B     		ldr	r3, .L582+24
 8338 0ece 0022     		movs	r2, #0
 8339 0ed0 1A80     		strh	r2, [r3]	@ movhi
2418:..\src/interruptions.c **** 
2419:..\src/interruptions.c ****                     if (interrupt_flag){
 8340              		.loc 1 2419 0
 8341 0ed2 754B     		ldr	r3, .L582+12
 8342 0ed4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8343 0ed6 002B     		cmp	r3, #0
 8344 0ed8 04D0     		beq	.L523
2420:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8345              		.loc 1 2420 0
 8346 0eda 734B     		ldr	r3, .L582+12
 8347 0edc 0022     		movs	r2, #0
 8348 0ede 1A70     		strb	r2, [r3]
2421:..\src/interruptions.c ****                         interrupt_manager();
 8349              		.loc 1 2421 0
 8350 0ee0 FFF7FEFF 		bl	interrupt_manager
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 193


 8351              	.L523:
2422:..\src/interruptions.c ****                     }
2423:..\src/interruptions.c **** 
2424:..\src/interruptions.c ****                     joy_UD_status = SUM_AND_MEAN;           // sum and mean status
 8352              		.loc 1 2424 0
 8353 0ee4 744B     		ldr	r3, .L582+28
 8354 0ee6 0322     		movs	r2, #3
 8355 0ee8 1A70     		strb	r2, [r3]
2425:..\src/interruptions.c ****                 }
2426:..\src/interruptions.c **** 
2427:..\src/interruptions.c ****             break;
 8356              		.loc 1 2427 0
 8357 0eea 43E0     		b	.L565
 8358              	.L516:
2428:..\src/interruptions.c **** 
2429:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2430:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2431:..\src/interruptions.c ****                 UD_counter++;
 8359              		.loc 1 2431 0
 8360 0eec 714B     		ldr	r3, .L582+24
 8361 0eee 1B88     		ldrh	r3, [r3]
 8362 0ef0 0133     		adds	r3, r3, #1
 8363 0ef2 9AB2     		uxth	r2, r3
 8364 0ef4 6F4B     		ldr	r3, .L582+24
 8365 0ef6 1A80     		strh	r2, [r3]	@ movhi
2432:..\src/interruptions.c ****                 UD_mean_value += (int32)(ADC_buf[2]);        // No filter
 8366              		.loc 1 2432 0
 8367 0ef8 684B     		ldr	r3, .L582
 8368 0efa B3F90430 		ldrsh	r3, [r3, #4]
 8369 0efe 1A46     		mov	r2, r3
 8370 0f00 674B     		ldr	r3, .L582+4
 8371 0f02 1B68     		ldr	r3, [r3]
 8372 0f04 1344     		add	r3, r3, r2
 8373 0f06 664A     		ldr	r2, .L582+4
 8374 0f08 1360     		str	r3, [r2]
2433:..\src/interruptions.c **** 
2434:..\src/interruptions.c ****                 if (interrupt_flag){
 8375              		.loc 1 2434 0
 8376 0f0a 674B     		ldr	r3, .L582+12
 8377 0f0c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8378 0f0e 002B     		cmp	r3, #0
 8379 0f10 04D0     		beq	.L524
2435:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8380              		.loc 1 2435 0
 8381 0f12 654B     		ldr	r3, .L582+12
 8382 0f14 0022     		movs	r2, #0
 8383 0f16 1A70     		strb	r2, [r3]
2436:..\src/interruptions.c ****                     interrupt_manager();
 8384              		.loc 1 2436 0
 8385 0f18 FFF7FEFF 		bl	interrupt_manager
 8386              	.L524:
2437:..\src/interruptions.c ****                 }
2438:..\src/interruptions.c **** 
2439:..\src/interruptions.c ****                 if (UD_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8387              		.loc 1 2439 0
 8388 0f1c 654B     		ldr	r3, .L582+24
 8389 0f1e 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 194


 8390 0f20 C82B     		cmp	r3, #200
 8391 0f22 29D1     		bne	.L566
2440:..\src/interruptions.c ****                     UD_mean_value = UD_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8392              		.loc 1 2440 0
 8393 0f24 5E4B     		ldr	r3, .L582+4
 8394 0f26 1B68     		ldr	r3, [r3]
 8395 0f28 644A     		ldr	r2, .L582+32
 8396 0f2a 82FB0312 		smull	r1, r2, r2, r3
 8397 0f2e 9211     		asrs	r2, r2, #6
 8398 0f30 DB17     		asrs	r3, r3, #31
 8399 0f32 D31A     		subs	r3, r2, r3
 8400 0f34 5A4A     		ldr	r2, .L582+4
 8401 0f36 1360     		str	r3, [r2]
2441:..\src/interruptions.c **** 
2442:..\src/interruptions.c ****                     if (interrupt_flag){
 8402              		.loc 1 2442 0
 8403 0f38 5B4B     		ldr	r3, .L582+12
 8404 0f3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8405 0f3c 002B     		cmp	r3, #0
 8406 0f3e 04D0     		beq	.L526
2443:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8407              		.loc 1 2443 0
 8408 0f40 594B     		ldr	r3, .L582+12
 8409 0f42 0022     		movs	r2, #0
 8410 0f44 1A70     		strb	r2, [r3]
2444:..\src/interruptions.c ****                         interrupt_manager();
 8411              		.loc 1 2444 0
 8412 0f46 FFF7FEFF 		bl	interrupt_manager
 8413              	.L526:
2445:..\src/interruptions.c ****                     }
2446:..\src/interruptions.c **** 
2447:..\src/interruptions.c ****                     UD_counter = 0;          // reset counter
 8414              		.loc 1 2447 0
 8415 0f4a 5A4B     		ldr	r3, .L582+24
 8416 0f4c 0022     		movs	r2, #0
 8417 0f4e 1A80     		strh	r2, [r3]	@ movhi
2448:..\src/interruptions.c ****                     joy_UD_status = NORMAL;           // goto normal execution
 8418              		.loc 1 2448 0
 8419 0f50 594B     		ldr	r3, .L582+28
 8420 0f52 0022     		movs	r2, #0
 8421 0f54 1A70     		strb	r2, [r3]
2449:..\src/interruptions.c ****                 }
2450:..\src/interruptions.c ****             break;
 8422              		.loc 1 2450 0
 8423 0f56 0FE0     		b	.L566
 8424              	.L517:
2451:..\src/interruptions.c **** 
2452:..\src/interruptions.c ****             case WAIT: case WAIT_EoC: // wait for both EMG calibrations to be done
2453:..\src/interruptions.c ****                 if (emg_1_status == NORMAL && emg_2_status == NORMAL)
 8425              		.loc 1 2453 0
 8426 0f58 594B     		ldr	r3, .L582+36
 8427 0f5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8428 0f5c 002B     		cmp	r3, #0
 8429 0f5e 0DD1     		bne	.L567
 8430              		.loc 1 2453 0 is_stmt 0 discriminator 1
 8431 0f60 584B     		ldr	r3, .L582+40
 8432 0f62 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 195


 8433 0f64 002B     		cmp	r3, #0
 8434 0f66 09D1     		bne	.L567
2454:..\src/interruptions.c ****                     joy_UD_status = DISCARD;           // goto discard sample
 8435              		.loc 1 2454 0 is_stmt 1
 8436 0f68 534B     		ldr	r3, .L582+28
 8437 0f6a 0222     		movs	r2, #2
 8438 0f6c 1A70     		strb	r2, [r3]
2455:..\src/interruptions.c ****             break;
 8439              		.loc 1 2455 0
 8440 0f6e 05E0     		b	.L567
 8441              	.L564:
2405:..\src/interruptions.c **** 
 8442              		.loc 1 2405 0
 8443 0f70 00BF     		nop
 8444 0f72 04E0     		b	.L511
 8445              	.L565:
2427:..\src/interruptions.c **** 
 8446              		.loc 1 2427 0
 8447 0f74 00BF     		nop
 8448 0f76 02E0     		b	.L511
 8449              	.L566:
2450:..\src/interruptions.c **** 
 8450              		.loc 1 2450 0
 8451 0f78 00BF     		nop
 8452 0f7a 00E0     		b	.L511
 8453              	.L567:
 8454              		.loc 1 2455 0
 8455 0f7c 00BF     		nop
 8456              	.L511:
2456:..\src/interruptions.c ****         }
2457:..\src/interruptions.c **** 
2458:..\src/interruptions.c ****         if (interrupt_flag){
 8457              		.loc 1 2458 0
 8458 0f7e 4A4B     		ldr	r3, .L582+12
 8459 0f80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8460 0f82 002B     		cmp	r3, #0
 8461 0f84 04D0     		beq	.L528
2459:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8462              		.loc 1 2459 0
 8463 0f86 484B     		ldr	r3, .L582+12
 8464 0f88 0022     		movs	r2, #0
 8465 0f8a 1A70     		strb	r2, [r3]
2460:..\src/interruptions.c ****             interrupt_manager();
 8466              		.loc 1 2460 0
 8467 0f8c FFF7FEFF 		bl	interrupt_manager
 8468              	.L528:
2461:..\src/interruptions.c ****         }
2462:..\src/interruptions.c ****             
2463:..\src/interruptions.c ****         switch (joy_LR_status) {
 8469              		.loc 1 2463 0
 8470 0f90 4D4B     		ldr	r3, .L582+44
 8471 0f92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8472 0f94 052B     		cmp	r3, #5
 8473 0f96 00F2DF80 		bhi	.L529
 8474 0f9a 01A2     		adr	r2, .L531
 8475 0f9c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8476              		.p2align 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 196


 8477              	.L531:
 8478 0fa0 B90F0000 		.word	.L530+1
 8479 0fa4 55100000 		.word	.L532+1
 8480 0fa8 69100000 		.word	.L533+1
 8481 0fac D5100000 		.word	.L534+1
 8482 0fb0 2F110000 		.word	.L535+1
 8483 0fb4 2F110000 		.word	.L535+1
 8484              		.p2align 1
 8485              	.L530:
2464:..\src/interruptions.c ****             case NORMAL:
2465:..\src/interruptions.c ****                 i_aux = (int32)(ADC_buf[3]);
 8486              		.loc 1 2465 0
 8487 0fb8 384B     		ldr	r3, .L582
 8488 0fba B3F90630 		ldrsh	r3, [r3, #6]
 8489 0fbe 7B60     		str	r3, [r7, #4]
2466:..\src/interruptions.c **** 
2467:..\src/interruptions.c ****                 i_aux = (int32) (((float) (i_aux - LR_mean_value) / LR_mean_value) * c_mem.JOY_spec
 8490              		.loc 1 2467 0
 8491 0fc0 424B     		ldr	r3, .L582+48
 8492 0fc2 1B68     		ldr	r3, [r3]
 8493 0fc4 7A68     		ldr	r2, [r7, #4]
 8494 0fc6 D31A     		subs	r3, r2, r3
 8495 0fc8 1846     		mov	r0, r3
 8496 0fca FFF7FEFF 		bl	__aeabi_i2f
 8497 0fce 0446     		mov	r4, r0
 8498 0fd0 3E4B     		ldr	r3, .L582+48
 8499 0fd2 1B68     		ldr	r3, [r3]
 8500 0fd4 1846     		mov	r0, r3
 8501 0fd6 FFF7FEFF 		bl	__aeabi_i2f
 8502 0fda 0346     		mov	r3, r0
 8503 0fdc 1946     		mov	r1, r3
 8504 0fde 2046     		mov	r0, r4
 8505 0fe0 FFF7FEFF 		bl	__aeabi_fdiv
 8506 0fe4 0346     		mov	r3, r0
 8507 0fe6 1C46     		mov	r4, r3
 8508 0fe8 2E4B     		ldr	r3, .L582+8
 8509 0fea B3F8BC32 		ldrh	r3, [r3, #700]
 8510 0fee 1846     		mov	r0, r3
 8511 0ff0 FFF7FEFF 		bl	__aeabi_i2f
 8512 0ff4 0346     		mov	r3, r0
 8513 0ff6 1946     		mov	r1, r3
 8514 0ff8 2046     		mov	r0, r4
 8515 0ffa FFF7FEFF 		bl	__aeabi_fmul
 8516 0ffe 0346     		mov	r3, r0
 8517 1000 1846     		mov	r0, r3
 8518 1002 FFF7FEFF 		bl	__aeabi_f2iz
 8519 1006 0346     		mov	r3, r0
 8520 1008 7B60     		str	r3, [r7, #4]
2468:..\src/interruptions.c ****                 
2469:..\src/interruptions.c ****                 if (interrupt_flag){
 8521              		.loc 1 2469 0
 8522 100a 274B     		ldr	r3, .L582+12
 8523 100c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8524 100e 002B     		cmp	r3, #0
 8525 1010 04D0     		beq	.L536
2470:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8526              		.loc 1 2470 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 197


 8527 1012 254B     		ldr	r3, .L582+12
 8528 1014 0022     		movs	r2, #0
 8529 1016 1A70     		strb	r2, [r3]
2471:..\src/interruptions.c ****                     interrupt_manager();
 8530              		.loc 1 2471 0
 8531 1018 FFF7FEFF 		bl	interrupt_manager
 8532              	.L536:
2472:..\src/interruptions.c ****                 }
2473:..\src/interruptions.c **** 
2474:..\src/interruptions.c ****                 //Saturation
2475:..\src/interruptions.c ****                 if (i_aux < -1024)
 8533              		.loc 1 2475 0
 8534 101c 7B68     		ldr	r3, [r7, #4]
 8535 101e 13F5806F 		cmn	r3, #1024
 8536 1022 01DA     		bge	.L537
2476:..\src/interruptions.c ****                     i_aux = -1024;
 8537              		.loc 1 2476 0
 8538 1024 214B     		ldr	r3, .L582+16
 8539 1026 7B60     		str	r3, [r7, #4]
 8540              	.L537:
2477:..\src/interruptions.c ****                 if (i_aux > 1024)
 8541              		.loc 1 2477 0
 8542 1028 7B68     		ldr	r3, [r7, #4]
 8543 102a B3F5806F 		cmp	r3, #1024
 8544 102e 02DD     		ble	.L538
2478:..\src/interruptions.c ****                     i_aux = 1024;
 8545              		.loc 1 2478 0
 8546 1030 4FF48063 		mov	r3, #1024
 8547 1034 7B60     		str	r3, [r7, #4]
 8548              	.L538:
2479:..\src/interruptions.c **** 
2480:..\src/interruptions.c ****                 if (interrupt_flag){
 8549              		.loc 1 2480 0
 8550 1036 1C4B     		ldr	r3, .L582+12
 8551 1038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8552 103a 002B     		cmp	r3, #0
 8553 103c 04D0     		beq	.L539
2481:..\src/interruptions.c ****                     interrupt_flag = FALSE;
 8554              		.loc 1 2481 0
 8555 103e 1A4B     		ldr	r3, .L582+12
 8556 1040 0022     		movs	r2, #0
 8557 1042 1A70     		strb	r2, [r3]
2482:..\src/interruptions.c ****                     interrupt_manager();
 8558              		.loc 1 2482 0
 8559 1044 FFF7FEFF 		bl	interrupt_manager
 8560              	.L539:
2483:..\src/interruptions.c ****                 }
2484:..\src/interruptions.c **** 
2485:..\src/interruptions.c ****                 g_adc_meas.joystick[0] = (int16) i_aux;
 8561              		.loc 1 2485 0
 8562 1048 7B68     		ldr	r3, [r7, #4]
 8563 104a 1BB2     		sxth	r3, r3
 8564 104c 1A46     		mov	r2, r3
 8565 104e 184B     		ldr	r3, .L582+20
 8566 1050 1A62     		str	r2, [r3, #32]
2486:..\src/interruptions.c **** 
2487:..\src/interruptions.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 198


 8567              		.loc 1 2487 0
 8568 1052 81E0     		b	.L529
 8569              	.L532:
2488:..\src/interruptions.c **** 
2489:..\src/interruptions.c ****             case RESET: // reset variables
2490:..\src/interruptions.c ****                 LR_counter = 0;
 8570              		.loc 1 2490 0
 8571 1054 1E4B     		ldr	r3, .L582+52
 8572 1056 0022     		movs	r2, #0
 8573 1058 1A80     		strh	r2, [r3]	@ movhi
2491:..\src/interruptions.c ****                 LR_mean_value = 0;
 8574              		.loc 1 2491 0
 8575 105a 1C4B     		ldr	r3, .L582+48
 8576 105c 0022     		movs	r2, #0
 8577 105e 1A60     		str	r2, [r3]
2492:..\src/interruptions.c ****                 joy_LR_status = WAIT; // goes waiting for all conversions to be done
 8578              		.loc 1 2492 0
 8579 1060 194B     		ldr	r3, .L582+44
 8580 1062 0422     		movs	r2, #4
 8581 1064 1A70     		strb	r2, [r3]
2493:..\src/interruptions.c ****             break;
 8582              		.loc 1 2493 0
 8583 1066 77E0     		b	.L529
 8584              	.L533:
2494:..\src/interruptions.c **** 
2495:..\src/interruptions.c ****             case DISCARD: // discard first EMG_SAMPLE_TO_DISCARD samples8
2496:..\src/interruptions.c ****                 LR_counter++;
 8585              		.loc 1 2496 0
 8586 1068 194B     		ldr	r3, .L582+52
 8587 106a 1B88     		ldrh	r3, [r3]
 8588 106c 0133     		adds	r3, r3, #1
 8589 106e 9AB2     		uxth	r2, r3
 8590 1070 174B     		ldr	r3, .L582+52
 8591 1072 1A80     		strh	r2, [r3]	@ movhi
2497:..\src/interruptions.c ****                 if (LR_counter == JOYSTICK_SAMPLE_TO_DISCARD) {
 8592              		.loc 1 2497 0
 8593 1074 164B     		ldr	r3, .L582+52
 8594 1076 1B88     		ldrh	r3, [r3]
 8595 1078 642B     		cmp	r3, #100
 8596 107a 68D1     		bne	.L568
2498:..\src/interruptions.c ****                     LR_counter = 0;                     // reset counter
 8597              		.loc 1 2498 0
 8598 107c 144B     		ldr	r3, .L582+52
 8599 107e 0022     		movs	r2, #0
 8600 1080 1A80     		strh	r2, [r3]	@ movhi
2499:..\src/interruptions.c **** 
2500:..\src/interruptions.c ****                     if (interrupt_flag){
 8601              		.loc 1 2500 0
 8602 1082 094B     		ldr	r3, .L582+12
 8603 1084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8604 1086 002B     		cmp	r3, #0
 8605 1088 04D0     		beq	.L541
2501:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8606              		.loc 1 2501 0
 8607 108a 074B     		ldr	r3, .L582+12
 8608 108c 0022     		movs	r2, #0
 8609 108e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 199


2502:..\src/interruptions.c ****                         interrupt_manager();
 8610              		.loc 1 2502 0
 8611 1090 FFF7FEFF 		bl	interrupt_manager
 8612              	.L541:
2503:..\src/interruptions.c ****                     }
2504:..\src/interruptions.c **** 
2505:..\src/interruptions.c ****                     joy_LR_status = SUM_AND_MEAN;           // sum and mean status
 8613              		.loc 1 2505 0
 8614 1094 0C4B     		ldr	r3, .L582+44
 8615 1096 0322     		movs	r2, #3
 8616 1098 1A70     		strb	r2, [r3]
2506:..\src/interruptions.c ****                 }
2507:..\src/interruptions.c ****             break;
 8617              		.loc 1 2507 0
 8618 109a 58E0     		b	.L568
 8619              	.L583:
 8620              		.align	2
 8621              	.L582:
 8622 109c 00000000 		.word	ADC_buf
 8623 10a0 7C010000 		.word	UD_mean_value.10666
 8624 10a4 00000000 		.word	c_mem
 8625 10a8 00000000 		.word	interrupt_flag
 8626 10ac 00FCFFFF 		.word	-1024
 8627 10b0 00000000 		.word	g_adc_meas
 8628 10b4 80010000 		.word	UD_counter.10664
 8629 10b8 00000000 		.word	joy_UD_status
 8630 10bc 1F85EB51 		.word	1374389535
 8631 10c0 00000000 		.word	emg_1_status
 8632 10c4 00000000 		.word	emg_2_status
 8633 10c8 00000000 		.word	joy_LR_status
 8634 10cc 84010000 		.word	LR_mean_value.10667
 8635 10d0 88010000 		.word	LR_counter.10665
 8636              	.L534:
2508:..\src/interruptions.c **** 
2509:..\src/interruptions.c ****             case SUM_AND_MEAN: // sum first SAMPLES_FOR_EMG_MEAN samples
2510:..\src/interruptions.c ****                 // NOTE max(value)*SAMPLES_FOR_EMG_MEAN must fit in 32bit
2511:..\src/interruptions.c ****                 LR_counter++;
 8637              		.loc 1 2511 0
 8638 10d4 524B     		ldr	r3, .L584
 8639 10d6 1B88     		ldrh	r3, [r3]
 8640 10d8 0133     		adds	r3, r3, #1
 8641 10da 9AB2     		uxth	r2, r3
 8642 10dc 504B     		ldr	r3, .L584
 8643 10de 1A80     		strh	r2, [r3]	@ movhi
2512:..\src/interruptions.c ****                 LR_mean_value += (int32)(ADC_buf[3]);
 8644              		.loc 1 2512 0
 8645 10e0 504B     		ldr	r3, .L584+4
 8646 10e2 B3F90630 		ldrsh	r3, [r3, #6]
 8647 10e6 1A46     		mov	r2, r3
 8648 10e8 4F4B     		ldr	r3, .L584+8
 8649 10ea 1B68     		ldr	r3, [r3]
 8650 10ec 1344     		add	r3, r3, r2
 8651 10ee 4E4A     		ldr	r2, .L584+8
 8652 10f0 1360     		str	r3, [r2]
2513:..\src/interruptions.c ****                 if (LR_counter == SAMPLES_FOR_JOYSTICK_MEAN) {
 8653              		.loc 1 2513 0
 8654 10f2 4B4B     		ldr	r3, .L584
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 200


 8655 10f4 1B88     		ldrh	r3, [r3]
 8656 10f6 C82B     		cmp	r3, #200
 8657 10f8 2BD1     		bne	.L569
2514:..\src/interruptions.c ****                     LR_mean_value = LR_mean_value / SAMPLES_FOR_JOYSTICK_MEAN; // calc mean
 8658              		.loc 1 2514 0
 8659 10fa 4B4B     		ldr	r3, .L584+8
 8660 10fc 1B68     		ldr	r3, [r3]
 8661 10fe 4B4A     		ldr	r2, .L584+12
 8662 1100 82FB0312 		smull	r1, r2, r2, r3
 8663 1104 9211     		asrs	r2, r2, #6
 8664 1106 DB17     		asrs	r3, r3, #31
 8665 1108 D31A     		subs	r3, r2, r3
 8666 110a 474A     		ldr	r2, .L584+8
 8667 110c 1360     		str	r3, [r2]
2515:..\src/interruptions.c ****                     
2516:..\src/interruptions.c ****                     if (interrupt_flag){
 8668              		.loc 1 2516 0
 8669 110e 484B     		ldr	r3, .L584+16
 8670 1110 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8671 1112 002B     		cmp	r3, #0
 8672 1114 04D0     		beq	.L543
2517:..\src/interruptions.c ****                         interrupt_flag = FALSE;
 8673              		.loc 1 2517 0
 8674 1116 464B     		ldr	r3, .L584+16
 8675 1118 0022     		movs	r2, #0
 8676 111a 1A70     		strb	r2, [r3]
2518:..\src/interruptions.c ****                         interrupt_manager();
 8677              		.loc 1 2518 0
 8678 111c FFF7FEFF 		bl	interrupt_manager
 8679              	.L543:
2519:..\src/interruptions.c ****                     }
2520:..\src/interruptions.c **** 
2521:..\src/interruptions.c ****                     LR_counter = 0;               // reset counter
 8680              		.loc 1 2521 0
 8681 1120 3F4B     		ldr	r3, .L584
 8682 1122 0022     		movs	r2, #0
 8683 1124 1A80     		strh	r2, [r3]	@ movhi
2522:..\src/interruptions.c ****                     joy_LR_status = NORMAL;           // goto normal execution
 8684              		.loc 1 2522 0
 8685 1126 434B     		ldr	r3, .L584+20
 8686 1128 0022     		movs	r2, #0
 8687 112a 1A70     		strb	r2, [r3]
2523:..\src/interruptions.c ****                 }
2524:..\src/interruptions.c ****             break;
 8688              		.loc 1 2524 0
 8689 112c 11E0     		b	.L569
 8690              	.L535:
2525:..\src/interruptions.c **** 
2526:..\src/interruptions.c ****             case WAIT: case WAIT_EoC:
2527:..\src/interruptions.c ****                 if(emg_1_status == NORMAL && emg_2_status == NORMAL && joy_UD_status == NORMAL)
 8691              		.loc 1 2527 0
 8692 112e 424B     		ldr	r3, .L584+24
 8693 1130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8694 1132 002B     		cmp	r3, #0
 8695 1134 0FD1     		bne	.L570
 8696              		.loc 1 2527 0 is_stmt 0 discriminator 1
 8697 1136 414B     		ldr	r3, .L584+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 201


 8698 1138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8699 113a 002B     		cmp	r3, #0
 8700 113c 0BD1     		bne	.L570
 8701              		.loc 1 2527 0 discriminator 2
 8702 113e 404B     		ldr	r3, .L584+32
 8703 1140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8704 1142 002B     		cmp	r3, #0
 8705 1144 07D1     		bne	.L570
2528:..\src/interruptions.c ****                     joy_LR_status = DISCARD;
 8706              		.loc 1 2528 0 is_stmt 1
 8707 1146 3B4B     		ldr	r3, .L584+20
 8708 1148 0222     		movs	r2, #2
 8709 114a 1A70     		strb	r2, [r3]
2529:..\src/interruptions.c ****             break;
 8710              		.loc 1 2529 0
 8711 114c 03E0     		b	.L570
 8712              	.L568:
2507:..\src/interruptions.c **** 
 8713              		.loc 1 2507 0
 8714 114e 00BF     		nop
 8715 1150 02E0     		b	.L529
 8716              	.L569:
2524:..\src/interruptions.c **** 
 8717              		.loc 1 2524 0
 8718 1152 00BF     		nop
 8719 1154 00E0     		b	.L529
 8720              	.L570:
 8721              		.loc 1 2529 0
 8722 1156 00BF     		nop
 8723              	.L529:
2530:..\src/interruptions.c ****         }
2531:..\src/interruptions.c ****        
2532:..\src/interruptions.c ****         if (interrupt_flag){
 8724              		.loc 1 2532 0
 8725 1158 354B     		ldr	r3, .L584+16
 8726 115a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8727 115c 002B     		cmp	r3, #0
 8728 115e 04D0     		beq	.L510
2533:..\src/interruptions.c ****             interrupt_flag = FALSE;
 8729              		.loc 1 2533 0
 8730 1160 334B     		ldr	r3, .L584+16
 8731 1162 0022     		movs	r2, #0
 8732 1164 1A70     		strb	r2, [r3]
2534:..\src/interruptions.c ****             interrupt_manager();
 8733              		.loc 1 2534 0
 8734 1166 FFF7FEFF 		bl	interrupt_manager
 8735              	.L510:
2535:..\src/interruptions.c ****         }
2536:..\src/interruptions.c ****     }
2537:..\src/interruptions.c ****     
2538:..\src/interruptions.c ****     // Read also EMG additional sensors port
2539:..\src/interruptions.c ****     if (NUM_OF_ANALOG_INPUTS > 6) {
 8736              		.loc 1 2539 0
 8737 116a 364B     		ldr	r3, .L584+36
 8738 116c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8739 116e 062B     		cmp	r3, #6
 8740 1170 52D9     		bls	.L571
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 202


2540:..\src/interruptions.c ****         
2541:..\src/interruptions.c ****         for (idx = 0; idx < NUM_OF_ADDITIONAL_EMGS; idx++){
 8741              		.loc 1 2541 0
 8742 1172 354B     		ldr	r3, .L584+40
 8743 1174 0022     		movs	r2, #0
 8744 1176 1A70     		strb	r2, [r3]
 8745 1178 4AE0     		b	.L546
 8746              	.L553:
2542:..\src/interruptions.c ****             
2543:..\src/interruptions.c ****             i_aux = (int32)(ADC_buf[6 + idx]);
 8747              		.loc 1 2543 0
 8748 117a 334B     		ldr	r3, .L584+40
 8749 117c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8750 117e 0633     		adds	r3, r3, #6
 8751 1180 284A     		ldr	r2, .L584+4
 8752 1182 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 8753 1186 7B60     		str	r3, [r7, #4]
2544:..\src/interruptions.c ****             if (i_aux < 0) 
 8754              		.loc 1 2544 0
 8755 1188 7B68     		ldr	r3, [r7, #4]
 8756 118a 002B     		cmp	r3, #0
 8757 118c 01DA     		bge	.L547
2545:..\src/interruptions.c ****                 i_aux = 0;
 8758              		.loc 1 2545 0
 8759 118e 0023     		movs	r3, #0
 8760 1190 7B60     		str	r3, [r7, #4]
 8761              	.L547:
2546:..\src/interruptions.c ****             i_aux = filter(i_aux, &filt_emg[2+idx]);
 8762              		.loc 1 2546 0
 8763 1192 2D4B     		ldr	r3, .L584+40
 8764 1194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8765 1196 0233     		adds	r3, r3, #2
 8766 1198 DB00     		lsls	r3, r3, #3
 8767 119a 2C4A     		ldr	r2, .L584+44
 8768 119c 1344     		add	r3, r3, r2
 8769 119e 1946     		mov	r1, r3
 8770 11a0 7868     		ldr	r0, [r7, #4]
 8771 11a2 FFF7FEFF 		bl	filter
 8772 11a6 7860     		str	r0, [r7, #4]
2547:..\src/interruptions.c ****             i_aux = (i_aux << 10) / 1024;
 8773              		.loc 1 2547 0
 8774 11a8 7B68     		ldr	r3, [r7, #4]
 8775 11aa 9B02     		lsls	r3, r3, #10
 8776 11ac 002B     		cmp	r3, #0
 8777 11ae 01DA     		bge	.L548
 8778 11b0 03F2FF33 		addw	r3, r3, #1023
 8779              	.L548:
 8780 11b4 9B12     		asrs	r3, r3, #10
 8781 11b6 7B60     		str	r3, [r7, #4]
2548:..\src/interruptions.c **** 
2549:..\src/interruptions.c ****             if (interrupt_flag){
 8782              		.loc 1 2549 0
 8783 11b8 1D4B     		ldr	r3, .L584+16
 8784 11ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8785 11bc 002B     		cmp	r3, #0
 8786 11be 04D0     		beq	.L549
2550:..\src/interruptions.c ****                 interrupt_flag = FALSE;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 203


 8787              		.loc 1 2550 0
 8788 11c0 1B4B     		ldr	r3, .L584+16
 8789 11c2 0022     		movs	r2, #0
 8790 11c4 1A70     		strb	r2, [r3]
2551:..\src/interruptions.c ****                 interrupt_manager();
 8791              		.loc 1 2551 0
 8792 11c6 FFF7FEFF 		bl	interrupt_manager
 8793              	.L549:
2552:..\src/interruptions.c ****             }
2553:..\src/interruptions.c ****             //Saturation
2554:..\src/interruptions.c ****             if (i_aux < 0)
 8794              		.loc 1 2554 0
 8795 11ca 7B68     		ldr	r3, [r7, #4]
 8796 11cc 002B     		cmp	r3, #0
 8797 11ce 02DA     		bge	.L550
2555:..\src/interruptions.c ****                 i_aux = 0;
 8798              		.loc 1 2555 0
 8799 11d0 0023     		movs	r3, #0
 8800 11d2 7B60     		str	r3, [r7, #4]
 8801 11d4 06E0     		b	.L551
 8802              	.L550:
2556:..\src/interruptions.c ****             else 
2557:..\src/interruptions.c ****                 if (i_aux > 1024) 
 8803              		.loc 1 2557 0
 8804 11d6 7B68     		ldr	r3, [r7, #4]
 8805 11d8 B3F5806F 		cmp	r3, #1024
 8806 11dc 02DD     		ble	.L551
2558:..\src/interruptions.c ****                     i_aux = 1024;
 8807              		.loc 1 2558 0
 8808 11de 4FF48063 		mov	r3, #1024
 8809 11e2 7B60     		str	r3, [r7, #4]
 8810              	.L551:
2559:..\src/interruptions.c ****             
2560:..\src/interruptions.c ****             g_adc_meas.add_emg[idx] = i_aux;
 8811              		.loc 1 2560 0
 8812 11e4 184B     		ldr	r3, .L584+40
 8813 11e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8814 11e8 1949     		ldr	r1, .L584+48
 8815 11ea 0233     		adds	r3, r3, #2
 8816 11ec 7A68     		ldr	r2, [r7, #4]
 8817 11ee 41F82320 		str	r2, [r1, r3, lsl #2]
2561:..\src/interruptions.c **** 
2562:..\src/interruptions.c ****             if (interrupt_flag){
 8818              		.loc 1 2562 0
 8819 11f2 0F4B     		ldr	r3, .L584+16
 8820 11f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8821 11f6 002B     		cmp	r3, #0
 8822 11f8 04D0     		beq	.L552
2563:..\src/interruptions.c ****                 interrupt_flag = FALSE;
 8823              		.loc 1 2563 0
 8824 11fa 0D4B     		ldr	r3, .L584+16
 8825 11fc 0022     		movs	r2, #0
 8826 11fe 1A70     		strb	r2, [r3]
2564:..\src/interruptions.c ****                 interrupt_manager();
 8827              		.loc 1 2564 0
 8828 1200 FFF7FEFF 		bl	interrupt_manager
 8829              	.L552:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 204


2541:..\src/interruptions.c ****             
 8830              		.loc 1 2541 0 discriminator 2
 8831 1204 104B     		ldr	r3, .L584+40
 8832 1206 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8833 1208 0133     		adds	r3, r3, #1
 8834 120a DAB2     		uxtb	r2, r3
 8835 120c 0E4B     		ldr	r3, .L584+40
 8836 120e 1A70     		strb	r2, [r3]
 8837              	.L546:
2541:..\src/interruptions.c ****             
 8838              		.loc 1 2541 0 is_stmt 0 discriminator 1
 8839 1210 0D4B     		ldr	r3, .L584+40
 8840 1212 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8841 1214 052B     		cmp	r3, #5
 8842 1216 B0D9     		bls	.L553
 8843              	.L571:
2565:..\src/interruptions.c ****             }
2566:..\src/interruptions.c ****         }
2567:..\src/interruptions.c ****     }
2568:..\src/interruptions.c ****     
2569:..\src/interruptions.c **** }
 8844              		.loc 1 2569 0 is_stmt 1
 8845 1218 00BF     		nop
 8846 121a 0C37     		adds	r7, r7, #12
 8847              		.cfi_def_cfa_offset 20
 8848 121c BD46     		mov	sp, r7
 8849              		.cfi_def_cfa_register 13
 8850              		@ sp needed
 8851 121e F0BD     		pop	{r4, r5, r6, r7, pc}
 8852              	.L585:
 8853              		.align	2
 8854              	.L584:
 8855 1220 88010000 		.word	LR_counter.10665
 8856 1224 00000000 		.word	ADC_buf
 8857 1228 84010000 		.word	LR_mean_value.10667
 8858 122c 1F85EB51 		.word	1374389535
 8859 1230 00000000 		.word	interrupt_flag
 8860 1234 00000000 		.word	joy_LR_status
 8861 1238 00000000 		.word	emg_1_status
 8862 123c 00000000 		.word	emg_2_status
 8863 1240 00000000 		.word	joy_UD_status
 8864 1244 00000000 		.word	NUM_OF_ANALOG_INPUTS
 8865 1248 72010000 		.word	idx.10672
 8866 124c 00000000 		.word	filt_emg
 8867 1250 00000000 		.word	g_adc_meas
 8868              		.cfi_endproc
 8869              	.LFE74:
 8870              		.size	analog_read_end, .-analog_read_end
 8871              		.section	.text.overcurrent_control,"ax",%progbits
 8872              		.align	2
 8873              		.global	overcurrent_control
 8874              		.thumb
 8875              		.thumb_func
 8876              		.type	overcurrent_control, %function
 8877              	overcurrent_control:
 8878              	.LFB75:
2570:..\src/interruptions.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 205


2571:..\src/interruptions.c **** //==============================================================================
2572:..\src/interruptions.c **** //                                                           OVERCURRENT CONTROL
2573:..\src/interruptions.c **** //==============================================================================
2574:..\src/interruptions.c **** 
2575:..\src/interruptions.c **** void overcurrent_control() {
 8879              		.loc 1 2575 0
 8880              		.cfi_startproc
 8881              		@ args = 0, pretend = 0, frame = 8
 8882              		@ frame_needed = 1, uses_anonymous_args = 0
 8883              		@ link register save eliminated.
 8884 0000 80B4     		push	{r7}
 8885              		.cfi_def_cfa_offset 4
 8886              		.cfi_offset 7, -4
 8887 0002 83B0     		sub	sp, sp, #12
 8888              		.cfi_def_cfa_offset 16
 8889 0004 00AF     		add	r7, sp, #0
 8890              		.cfi_def_cfa_register 7
 8891              	.LBB11:
2576:..\src/interruptions.c ****     
2577:..\src/interruptions.c ****     for (uint8 i = 0; i <NUM_OF_MOTORS; i++) {
 8892              		.loc 1 2577 0
 8893 0006 0023     		movs	r3, #0
 8894 0008 FB71     		strb	r3, [r7, #7]
 8895 000a 68E0     		b	.L587
 8896              	.L592:
2578:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8897              		.loc 1 2578 0
 8898 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8899 000e 384A     		ldr	r2, .L594
 8900 0010 7421     		movs	r1, #116
 8901 0012 01FB03F3 		mul	r3, r1, r3
 8902 0016 1344     		add	r3, r3, r2
 8903 0018 03F58673 		add	r3, r3, #268
 8904 001c B3F90030 		ldrsh	r3, [r3]
 8905 0020 002B     		cmp	r3, #0
 8906 0022 59D0     		beq	.L588
 8907              	.LBB12:
2579:..\src/interruptions.c ****             int32 curr = g_meas[g_mem.motor[i].encoder_line].curr;
 8908              		.loc 1 2579 0
 8909 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8910 0026 334A     		ldr	r2, .L594+4
 8911 0028 7421     		movs	r1, #116
 8912 002a 01FB03F3 		mul	r3, r1, r3
 8913 002e 1344     		add	r3, r3, r2
 8914 0030 03F58873 		add	r3, r3, #272
 8915 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8916 0036 1946     		mov	r1, r3
 8917 0038 2F4A     		ldr	r2, .L594+8
 8918 003a 3423     		movs	r3, #52
 8919 003c 03FB01F3 		mul	r3, r3, r1
 8920 0040 1344     		add	r3, r3, r2
 8921 0042 0C33     		adds	r3, r3, #12
 8922 0044 1B68     		ldr	r3, [r3]
 8923 0046 3B60     		str	r3, [r7]
2580:..\src/interruptions.c ****             // check if the current is over the limit
2581:..\src/interruptions.c ****           //  if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
2582:..\src/interruptions.c ****                 if (curr < 0){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 206


 8924              		.loc 1 2582 0
 8925 0048 3B68     		ldr	r3, [r7]
 8926 004a 002B     		cmp	r3, #0
 8927 004c 02DA     		bge	.L589
2583:..\src/interruptions.c ****                     curr = -curr;       // Invert sign to have a positive current reading in this f
 8928              		.loc 1 2583 0
 8929 004e 3B68     		ldr	r3, [r7]
 8930 0050 5B42     		negs	r3, r3
 8931 0052 3B60     		str	r3, [r7]
 8932              	.L589:
2584:..\src/interruptions.c ****                 }
2585:..\src/interruptions.c ****          //   }
2586:..\src/interruptions.c ****             if (curr > c_mem.motor[i].current_limit) {
 8933              		.loc 1 2586 0
 8934 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8935 0056 264A     		ldr	r2, .L594
 8936 0058 7421     		movs	r1, #116
 8937 005a 01FB03F3 		mul	r3, r1, r3
 8938 005e 1344     		add	r3, r3, r2
 8939 0060 03F58673 		add	r3, r3, #268
 8940 0064 B3F90030 		ldrsh	r3, [r3]
 8941 0068 1A46     		mov	r2, r3
 8942 006a 3B68     		ldr	r3, [r7]
 8943 006c 9A42     		cmp	r2, r3
 8944 006e 09DA     		bge	.L590
2587:..\src/interruptions.c ****                 //decrease pwm_limit
2588:..\src/interruptions.c ****                 dev_pwm_limit[i]--;
 8945              		.loc 1 2588 0
 8946 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8947 0072 224A     		ldr	r2, .L594+12
 8948 0074 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8949 0078 013A     		subs	r2, r2, #1
 8950 007a 91B2     		uxth	r1, r2
 8951 007c 1F4A     		ldr	r2, .L594+12
 8952 007e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8953 0082 17E0     		b	.L593
 8954              	.L590:
2589:..\src/interruptions.c ****             // check if the current is in the safe zone
2590:..\src/interruptions.c ****             } else if (curr < (c_mem.motor[i].current_limit - CURRENT_HYSTERESIS)) {
 8955              		.loc 1 2590 0
 8956 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8957 0086 1A4A     		ldr	r2, .L594
 8958 0088 7421     		movs	r1, #116
 8959 008a 01FB03F3 		mul	r3, r1, r3
 8960 008e 1344     		add	r3, r3, r2
 8961 0090 03F58673 		add	r3, r3, #268
 8962 0094 B3F90030 		ldrsh	r3, [r3]
 8963 0098 A3F10A02 		sub	r2, r3, #10
 8964 009c 3B68     		ldr	r3, [r7]
 8965 009e 9A42     		cmp	r2, r3
 8966 00a0 08DD     		ble	.L593
2591:..\src/interruptions.c ****                 //increase pwm_limit
2592:..\src/interruptions.c ****                 dev_pwm_limit[i]++;
 8967              		.loc 1 2592 0
 8968 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8969 00a4 154A     		ldr	r2, .L594+12
 8970 00a6 32F81320 		ldrh	r2, [r2, r3, lsl #1]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 207


 8971 00aa 0132     		adds	r2, r2, #1
 8972 00ac 91B2     		uxth	r1, r2
 8973 00ae 134A     		ldr	r2, .L594+12
 8974 00b0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8975              	.L593:
2593:..\src/interruptions.c ****             }
2594:..\src/interruptions.c **** 
2595:..\src/interruptions.c ****             // Bound pwm_limit
2596:..\src/interruptions.c ****             if (dev_pwm_limit[i] < 0) 
2597:..\src/interruptions.c ****                 dev_pwm_limit[i] = 0;
2598:..\src/interruptions.c ****             else 
2599:..\src/interruptions.c ****                 if (dev_pwm_limit[i] > dev_pwm_sat[i]) 
 8976              		.loc 1 2599 0
 8977 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8978 00b6 114A     		ldr	r2, .L594+12
 8979 00b8 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 8980 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8981 00be 1049     		ldr	r1, .L594+16
 8982 00c0 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 8983 00c4 9A42     		cmp	r2, r3
 8984 00c6 07D9     		bls	.L588
2600:..\src/interruptions.c ****                     dev_pwm_limit[i] = dev_pwm_sat[i];
 8985              		.loc 1 2600 0
 8986 00c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8987 00ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 8988 00cc 0C49     		ldr	r1, .L594+16
 8989 00ce 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 8990 00d2 0A4A     		ldr	r2, .L594+12
 8991 00d4 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 8992              	.L588:
 8993              	.LBE12:
2577:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8994              		.loc 1 2577 0 discriminator 2
 8995 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8996 00da 0133     		adds	r3, r3, #1
 8997 00dc FB71     		strb	r3, [r7, #7]
 8998              	.L587:
2577:..\src/interruptions.c ****         if (c_mem.motor[i].current_limit != 0) {
 8999              		.loc 1 2577 0 is_stmt 0 discriminator 1
 9000 00de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9001 00e0 012B     		cmp	r3, #1
 9002 00e2 93D9     		bls	.L592
 9003              	.LBE11:
2601:..\src/interruptions.c ****         }
2602:..\src/interruptions.c ****     }
2603:..\src/interruptions.c **** }
 9004              		.loc 1 2603 0 is_stmt 1
 9005 00e4 00BF     		nop
 9006 00e6 0C37     		adds	r7, r7, #12
 9007              		.cfi_def_cfa_offset 4
 9008 00e8 BD46     		mov	sp, r7
 9009              		.cfi_def_cfa_register 13
 9010              		@ sp needed
 9011 00ea 80BC     		pop	{r7}
 9012              		.cfi_restore 7
 9013              		.cfi_def_cfa_offset 0
 9014 00ec 7047     		bx	lr
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 208


 9015              	.L595:
 9016 00ee 00BF     		.align	2
 9017              	.L594:
 9018 00f0 00000000 		.word	c_mem
 9019 00f4 00000000 		.word	g_mem
 9020 00f8 00000000 		.word	g_meas
 9021 00fc 00000000 		.word	dev_pwm_limit
 9022 0100 00000000 		.word	dev_pwm_sat
 9023              		.cfi_endproc
 9024              	.LFE75:
 9025              		.size	overcurrent_control, .-overcurrent_control
 9026              		.global	__aeabi_ui2f
 9027              		.global	__aeabi_f2uiz
 9028              		.section	.text.pwm_limit_search,"ax",%progbits
 9029              		.align	2
 9030              		.global	pwm_limit_search
 9031              		.thumb
 9032              		.thumb_func
 9033              		.type	pwm_limit_search, %function
 9034              	pwm_limit_search:
 9035              	.LFB76:
2604:..\src/interruptions.c **** 
2605:..\src/interruptions.c **** //==============================================================================
2606:..\src/interruptions.c **** //                                                              PWM_LIMIT_SEARCH
2607:..\src/interruptions.c **** //==============================================================================
2608:..\src/interruptions.c **** 
2609:..\src/interruptions.c **** void pwm_limit_search(uint8 mot_idx) {
 9036              		.loc 1 2609 0
 9037              		.cfi_startproc
 9038              		@ args = 0, pretend = 0, frame = 16
 9039              		@ frame_needed = 1, uses_anonymous_args = 0
 9040 0000 B0B5     		push	{r4, r5, r7, lr}
 9041              		.cfi_def_cfa_offset 16
 9042              		.cfi_offset 4, -16
 9043              		.cfi_offset 5, -12
 9044              		.cfi_offset 7, -8
 9045              		.cfi_offset 14, -4
 9046 0002 84B0     		sub	sp, sp, #16
 9047              		.cfi_def_cfa_offset 32
 9048 0004 00AF     		add	r7, sp, #0
 9049              		.cfi_def_cfa_register 7
 9050 0006 0346     		mov	r3, r0
 9051 0008 FB71     		strb	r3, [r7, #7]
2610:..\src/interruptions.c **** 
2611:..\src/interruptions.c ****     uint16 CYDATA max_tension = 26500;
 9052              		.loc 1 2611 0
 9053 000a 46F28473 		movw	r3, #26500
 9054 000e FB81     		strh	r3, [r7, #14]	@ movhi
2612:..\src/interruptions.c ****     uint16 CYDATA min_tension = 7000;
 9055              		.loc 1 2612 0
 9056 0010 41F65833 		movw	r3, #7000
 9057 0014 BB81     		strh	r3, [r7, #12]	@ movhi
2613:..\src/interruptions.c ****     
2614:..\src/interruptions.c ****     if (dev_tension[mot_idx] > max_tension) {
 9058              		.loc 1 2614 0
 9059 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9060 0018 2A4A     		ldr	r2, .L603
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 209


 9061 001a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9062 001e FB89     		ldrh	r3, [r7, #14]
 9063 0020 9A42     		cmp	r2, r3
 9064 0022 05DD     		ble	.L597
2615:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = 0;
 9065              		.loc 1 2615 0
 9066 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9067 0026 284A     		ldr	r2, .L603+4
 9068 0028 0021     		movs	r1, #0
 9069 002a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2616:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
2617:..\src/interruptions.c ****         if (c_mem.motor[mot_idx].motor_driver_type == DRIVER_BRUSHLESS){
2618:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
2619:..\src/interruptions.c ****         } else {
2620:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_DC;
2621:..\src/interruptions.c ****         }
2622:..\src/interruptions.c ****     } else {
2623:..\src/interruptions.c ****         
2624:..\src/interruptions.c ****         // Output PWM range adapted to the new maximum voltage required by the load 
2625:..\src/interruptions.c ****         // (set with the parameter "Motor N Voltage in mV:")
2626:..\src/interruptions.c ****         dev_pwm_sat[mot_idx] = (uint16)((((float)g_mem.motor[mot_idx].motor_voltage)/dev_tension[mo
2627:..\src/interruptions.c **** 
2628:..\src/interruptions.c ****     }
2629:..\src/interruptions.c **** }
 9070              		.loc 1 2629 0
 9071 002e 45E0     		b	.L602
 9072              	.L597:
2616:..\src/interruptions.c ****     } else if (dev_tension[mot_idx] < min_tension) {
 9073              		.loc 1 2616 0
 9074 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9075 0032 244A     		ldr	r2, .L603
 9076 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9077 0038 BB89     		ldrh	r3, [r7, #12]
 9078 003a 9A42     		cmp	r2, r3
 9079 003c 16DA     		bge	.L599
2617:..\src/interruptions.c ****             dev_pwm_sat[mot_idx] = PWM_MAX_VALUE_ESC;
 9080              		.loc 1 2617 0
 9081 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9082 0040 224A     		ldr	r2, .L603+8
 9083 0042 7421     		movs	r1, #116
 9084 0044 01FB03F3 		mul	r3, r1, r3
 9085 0048 1344     		add	r3, r3, r2
 9086 004a E233     		adds	r3, r3, #226
 9087 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9088 004e 022B     		cmp	r3, #2
 9089 0050 06D1     		bne	.L600
2618:..\src/interruptions.c ****         } else {
 9090              		.loc 1 2618 0
 9091 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9092 0054 1C4A     		ldr	r2, .L603+4
 9093 0056 40F6A931 		movw	r1, #2985
 9094 005a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9095              		.loc 1 2629 0
 9096 005e 2DE0     		b	.L602
 9097              	.L600:
2620:..\src/interruptions.c ****         }
 9098              		.loc 1 2620 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 210


 9099 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9100 0062 194A     		ldr	r2, .L603+4
 9101 0064 6421     		movs	r1, #100
 9102 0066 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 9103              		.loc 1 2629 0
 9104 006a 27E0     		b	.L602
 9105              	.L599:
2626:..\src/interruptions.c **** 
 9106              		.loc 1 2626 0
 9107 006c FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 9108 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9109 0070 174A     		ldr	r2, .L603+12
 9110 0072 7421     		movs	r1, #116
 9111 0074 01FB03F3 		mul	r3, r1, r3
 9112 0078 1344     		add	r3, r3, r2
 9113 007a 03F58A73 		add	r3, r3, #276
 9114 007e 1B88     		ldrh	r3, [r3]
 9115 0080 1846     		mov	r0, r3
 9116 0082 FFF7FEFF 		bl	__aeabi_ui2f
 9117 0086 0546     		mov	r5, r0
 9118 0088 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9119 008a 0E4A     		ldr	r2, .L603
 9120 008c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9121 0090 1846     		mov	r0, r3
 9122 0092 FFF7FEFF 		bl	__aeabi_i2f
 9123 0096 0346     		mov	r3, r0
 9124 0098 1946     		mov	r1, r3
 9125 009a 2846     		mov	r0, r5
 9126 009c FFF7FEFF 		bl	__aeabi_fdiv
 9127 00a0 0346     		mov	r3, r0
 9128 00a2 0C49     		ldr	r1, .L603+16
 9129 00a4 1846     		mov	r0, r3
 9130 00a6 FFF7FEFF 		bl	__aeabi_fmul
 9131 00aa 0346     		mov	r3, r0
 9132 00ac 1846     		mov	r0, r3
 9133 00ae FFF7FEFF 		bl	__aeabi_f2uiz
 9134 00b2 0346     		mov	r3, r0
 9135 00b4 9AB2     		uxth	r2, r3
 9136 00b6 044B     		ldr	r3, .L603+4
 9137 00b8 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 9138              	.L602:
 9139              		.loc 1 2629 0
 9140 00bc 00BF     		nop
 9141 00be 1037     		adds	r7, r7, #16
 9142              		.cfi_def_cfa_offset 16
 9143 00c0 BD46     		mov	sp, r7
 9144              		.cfi_def_cfa_register 13
 9145              		@ sp needed
 9146 00c2 B0BD     		pop	{r4, r5, r7, pc}
 9147              	.L604:
 9148              		.align	2
 9149              	.L603:
 9150 00c4 00000000 		.word	dev_tension
 9151 00c8 00000000 		.word	dev_pwm_sat
 9152 00cc 00000000 		.word	c_mem
 9153 00d0 00000000 		.word	g_mem
 9154 00d4 0000C842 		.word	1120403456
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 211


 9155              		.cfi_endproc
 9156              	.LFE76:
 9157              		.size	pwm_limit_search, .-pwm_limit_search
 9158              		.global	__aeabi_f2d
 9159              		.global	__aeabi_ddiv
 9160              		.global	__aeabi_dcmpgt
 9161              		.section	.text.cycles_counter_update,"ax",%progbits
 9162              		.align	2
 9163              		.global	cycles_counter_update
 9164              		.thumb
 9165              		.thumb_func
 9166              		.type	cycles_counter_update, %function
 9167              	cycles_counter_update:
 9168              	.LFB77:
2630:..\src/interruptions.c **** 
2631:..\src/interruptions.c **** //==============================================================================
2632:..\src/interruptions.c **** //                                                         CYCLES COUNTER UPDATE
2633:..\src/interruptions.c **** //==============================================================================
2634:..\src/interruptions.c **** 
2635:..\src/interruptions.c **** void cycles_counter_update() {
 9169              		.loc 1 2635 0
 9170              		.cfi_startproc
 9171              		@ args = 0, pretend = 0, frame = 24
 9172              		@ frame_needed = 1, uses_anonymous_args = 0
 9173 0000 90B5     		push	{r4, r7, lr}
 9174              		.cfi_def_cfa_offset 12
 9175              		.cfi_offset 4, -12
 9176              		.cfi_offset 7, -8
 9177              		.cfi_offset 14, -4
 9178 0002 87B0     		sub	sp, sp, #28
 9179              		.cfi_def_cfa_offset 40
 9180 0004 00AF     		add	r7, sp, #0
 9181              		.cfi_def_cfa_register 7
2636:..\src/interruptions.c **** 	static uint8 pos_cycle_status = STATE_INACTIVE;
2637:..\src/interruptions.c ****     static uint8 emg_cycle_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2638:..\src/interruptions.c ****     static uint8 motion_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2639:..\src/interruptions.c ****     static uint8 emg_excess_status[2] = {STATE_INACTIVE, STATE_INACTIVE};
2640:..\src/interruptions.c ****     static uint8 rest_cycle_status = STATE_INACTIVE;
2641:..\src/interruptions.c ****     static int32 bin_threshold = 250;
2642:..\src/interruptions.c ****     static int32 exc_act_thr = 980; //0.95*1024
2643:..\src/interruptions.c ****     static int32 thr_pos = 0;
2644:..\src/interruptions.c ****     static int32 max_pos = 0;
2645:..\src/interruptions.c ****     uint8 i, bin_st, bin_max, bin_1, bin_2;
2646:..\src/interruptions.c ****     int32 curr_pos = 0, curr_off = 0, curr_ref = 0;
 9182              		.loc 1 2646 0
 9183 0006 0023     		movs	r3, #0
 9184 0008 FB60     		str	r3, [r7, #12]
 9185 000a 0023     		movs	r3, #0
 9186 000c BB60     		str	r3, [r7, #8]
 9187 000e 0023     		movs	r3, #0
 9188 0010 3B61     		str	r3, [r7, #16]
2647:..\src/interruptions.c ****     int32 step;
2648:..\src/interruptions.c ****     static uint32 timer_value_s, timer_value_e;
2649:..\src/interruptions.c ****     static uint32 timer_exc_s[2], timer_exc_e[2];
2650:..\src/interruptions.c ****     static int32 start_emg_pos[2] = {0,0};
2651:..\src/interruptions.c **** 
2652:..\src/interruptions.c ****     curr_pos = (int32)(g_meas[g_mem.motor[0].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[0].encod
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 212


 9189              		.loc 1 2652 0
 9190 0012 A64B     		ldr	r3, .L683
 9191 0014 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9192 0018 1946     		mov	r1, r3
 9193 001a A54A     		ldr	r2, .L683+4
 9194 001c 3423     		movs	r3, #52
 9195 001e 03FB01F3 		mul	r3, r3, r1
 9196 0022 1344     		add	r3, r3, r2
 9197 0024 1A68     		ldr	r2, [r3]
 9198 0026 A14B     		ldr	r3, .L683
 9199 0028 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9200 002c 1846     		mov	r0, r3
 9201 002e 9F49     		ldr	r1, .L683
 9202 0030 0346     		mov	r3, r0
 9203 0032 5B00     		lsls	r3, r3, #1
 9204 0034 0344     		add	r3, r3, r0
 9205 0036 1B01     		lsls	r3, r3, #4
 9206 0038 0B44     		add	r3, r3, r1
 9207 003a 03F29D13 		addw	r3, r3, #413
 9208 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9209 0040 42FA03F3 		asr	r3, r2, r3
 9210 0044 FB60     		str	r3, [r7, #12]
2653:..\src/interruptions.c ****         
2654:..\src/interruptions.c ****     // State machine - Evaluate position counter update
2655:..\src/interruptions.c ****     switch (pos_cycle_status){
 9211              		.loc 1 2655 0
 9212 0046 9B4B     		ldr	r3, .L683+8
 9213 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9214 004a 012B     		cmp	r3, #1
 9215 004c 3DD0     		beq	.L607
 9216 004e 022B     		cmp	r3, #2
 9217 0050 74D0     		beq	.L608
 9218 0052 002B     		cmp	r3, #0
 9219 0054 40F02781 		bne	.L606
2656:..\src/interruptions.c ****         case STATE_INACTIVE:
2657:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == 1) |
 9220              		.loc 1 2657 0
 9221 0058 944B     		ldr	r3, .L683
 9222 005a 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9223 005e 072B     		cmp	r3, #7
 9224 0060 04D0     		beq	.L610
 9225              		.loc 1 2657 0 is_stmt 0 discriminator 1
 9226 0062 954B     		ldr	r3, .L683+12
 9227 0064 93F90030 		ldrsb	r3, [r3]
 9228 0068 012B     		cmp	r3, #1
 9229 006a 0CD0     		beq	.L611
 9230              	.L610:
 9231              		.loc 1 2657 0 discriminator 3
 9232 006c 8F4B     		ldr	r3, .L683
 9233 006e 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9234 0072 072B     		cmp	r3, #7
 9235 0074 40F01481 		bne	.L673
 9236              		.loc 1 2657 0 discriminator 4
 9237 0078 8F4B     		ldr	r3, .L683+12
 9238 007a 93F90030 		ldrsb	r3, [r3]
 9239 007e B3F1FF3F 		cmp	r3, #-1
 9240 0082 40F00D81 		bne	.L673
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 213


 9241              	.L611:
2658:..\src/interruptions.c ****                 thr_pos = curr_pos; 
 9242              		.loc 1 2658 0 is_stmt 1
 9243 0086 8D4A     		ldr	r2, .L683+16
 9244 0088 FB68     		ldr	r3, [r7, #12]
 9245 008a 1360     		str	r3, [r2]
2659:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9246              		.loc 1 2659 0
 9247 008c 8C4B     		ldr	r3, .L683+20
 9248 008e 1A68     		ldr	r2, [r3]
 9249 0090 8A4B     		ldr	r3, .L683+16
 9250 0092 1B68     		ldr	r3, [r3]
 9251 0094 9A42     		cmp	r2, r3
 9252 0096 05DD     		ble	.L613
 9253              		.loc 1 2659 0 is_stmt 0 discriminator 1
 9254 0098 894B     		ldr	r3, .L683+20
 9255 009a 1A68     		ldr	r2, [r3]
 9256 009c 874B     		ldr	r3, .L683+16
 9257 009e 1B68     		ldr	r3, [r3]
 9258 00a0 D31A     		subs	r3, r2, r3
 9259 00a2 04E0     		b	.L614
 9260              	.L613:
 9261              		.loc 1 2659 0 discriminator 2
 9262 00a4 854B     		ldr	r3, .L683+16
 9263 00a6 1A68     		ldr	r2, [r3]
 9264 00a8 854B     		ldr	r3, .L683+20
 9265 00aa 1B68     		ldr	r3, [r3]
 9266 00ac D31A     		subs	r3, r2, r3
 9267              	.L614:
 9268              		.loc 1 2659 0 discriminator 4
 9269 00ae BB60     		str	r3, [r7, #8]
2660:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9270              		.loc 1 2660 0 is_stmt 1 discriminator 4
 9271 00b0 BB68     		ldr	r3, [r7, #8]
 9272 00b2 142B     		cmp	r3, #20
 9273 00b4 05DD     		ble	.L615
2661:..\src/interruptions.c ****                     g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum opening track
 9274              		.loc 1 2661 0
 9275 00b6 7D4B     		ldr	r3, .L683
 9276 00b8 5A6D     		ldr	r2, [r3, #84]
 9277 00ba BB68     		ldr	r3, [r7, #8]
 9278 00bc 1344     		add	r3, r3, r2
 9279 00be 7B4A     		ldr	r2, .L683
 9280 00c0 5365     		str	r3, [r2, #84]
 9281              	.L615:
2662:..\src/interruptions.c ****                 }
2663:..\src/interruptions.c ****                 pos_cycle_status = STATE_ACTIVE;
 9282              		.loc 1 2663 0
 9283 00c2 7C4B     		ldr	r3, .L683+8
 9284 00c4 0122     		movs	r2, #1
 9285 00c6 1A70     		strb	r2, [r3]
2664:..\src/interruptions.c ****             }
2665:..\src/interruptions.c ****             break;
 9286              		.loc 1 2665 0
 9287 00c8 EAE0     		b	.L673
 9288              	.L607:
2666:..\src/interruptions.c ****         case STATE_ACTIVE:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 214


2667:..\src/interruptions.c ****             if ((g_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC && pwm_sign[0] == -1) 
 9289              		.loc 1 2667 0
 9290 00ca 784B     		ldr	r3, .L683
 9291 00cc 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9292 00d0 072B     		cmp	r3, #7
 9293 00d2 05D0     		beq	.L616
 9294              		.loc 1 2667 0 is_stmt 0 discriminator 1
 9295 00d4 784B     		ldr	r3, .L683+12
 9296 00d6 93F90030 		ldrsb	r3, [r3]
 9297 00da B3F1FF3F 		cmp	r3, #-1
 9298 00de 0BD0     		beq	.L617
 9299              	.L616:
 9300              		.loc 1 2667 0 discriminator 3
 9301 00e0 724B     		ldr	r3, .L683
 9302 00e2 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 9303 00e6 072B     		cmp	r3, #7
 9304 00e8 40F0DC80 		bne	.L674
 9305              		.loc 1 2667 0 discriminator 4
 9306 00ec 724B     		ldr	r3, .L683+12
 9307 00ee 93F90030 		ldrsb	r3, [r3]
 9308 00f2 012B     		cmp	r3, #1
 9309 00f4 40F0D680 		bne	.L674
 9310              	.L617:
2668:..\src/interruptions.c ****                 max_pos = curr_pos;
 9311              		.loc 1 2668 0 is_stmt 1
 9312 00f8 714A     		ldr	r2, .L683+20
 9313 00fa FB68     		ldr	r3, [r7, #12]
 9314 00fc 1360     		str	r3, [r2]
2669:..\src/interruptions.c ****                 curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9315              		.loc 1 2669 0
 9316 00fe 704B     		ldr	r3, .L683+20
 9317 0100 1A68     		ldr	r2, [r3]
 9318 0102 6E4B     		ldr	r3, .L683+16
 9319 0104 1B68     		ldr	r3, [r3]
 9320 0106 9A42     		cmp	r2, r3
 9321 0108 05DD     		ble	.L619
 9322              		.loc 1 2669 0 is_stmt 0 discriminator 1
 9323 010a 6D4B     		ldr	r3, .L683+20
 9324 010c 1A68     		ldr	r2, [r3]
 9325 010e 6B4B     		ldr	r3, .L683+16
 9326 0110 1B68     		ldr	r3, [r3]
 9327 0112 D31A     		subs	r3, r2, r3
 9328 0114 04E0     		b	.L620
 9329              	.L619:
 9330              		.loc 1 2669 0 discriminator 2
 9331 0116 694B     		ldr	r3, .L683+16
 9332 0118 1A68     		ldr	r2, [r3]
 9333 011a 694B     		ldr	r3, .L683+20
 9334 011c 1B68     		ldr	r3, [r3]
 9335 011e D31A     		subs	r3, r2, r3
 9336              	.L620:
 9337              		.loc 1 2669 0 discriminator 4
 9338 0120 BB60     		str	r3, [r7, #8]
2670:..\src/interruptions.c ****                 if (curr_off > 20){    // it has to be a sensible movement to update counter (to av
 9339              		.loc 1 2670 0 is_stmt 1 discriminator 4
 9340 0122 BB68     		ldr	r3, [r7, #8]
 9341 0124 142B     		cmp	r3, #20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 215


 9342 0126 05DD     		ble	.L621
2671:..\src/interruptions.c ****                    g_mem.cnt.wire_disp = g_mem.cnt.wire_disp + curr_off;     //sum closure track
 9343              		.loc 1 2671 0
 9344 0128 604B     		ldr	r3, .L683
 9345 012a 5A6D     		ldr	r2, [r3, #84]
 9346 012c BB68     		ldr	r3, [r7, #8]
 9347 012e 1344     		add	r3, r3, r2
 9348 0130 5E4A     		ldr	r2, .L683
 9349 0132 5365     		str	r3, [r2, #84]
 9350              	.L621:
2672:..\src/interruptions.c ****                 }
2673:..\src/interruptions.c ****                 pos_cycle_status = COUNTER_INC;
 9351              		.loc 1 2673 0
 9352 0134 5F4B     		ldr	r3, .L683+8
 9353 0136 0222     		movs	r2, #2
 9354 0138 1A70     		strb	r2, [r3]
2674:..\src/interruptions.c ****             }
2675:..\src/interruptions.c ****             break;
 9355              		.loc 1 2675 0
 9356 013a B3E0     		b	.L674
 9357              	.L608:
2676:..\src/interruptions.c ****         case COUNTER_INC:
2677:..\src/interruptions.c **** 
2678:..\src/interruptions.c ****             curr_off = (max_pos>thr_pos)?(max_pos-thr_pos):(thr_pos-max_pos);
 9358              		.loc 1 2678 0
 9359 013c 604B     		ldr	r3, .L683+20
 9360 013e 1A68     		ldr	r2, [r3]
 9361 0140 5E4B     		ldr	r3, .L683+16
 9362 0142 1B68     		ldr	r3, [r3]
 9363 0144 9A42     		cmp	r2, r3
 9364 0146 05DD     		ble	.L622
 9365              		.loc 1 2678 0 is_stmt 0 discriminator 1
 9366 0148 5D4B     		ldr	r3, .L683+20
 9367 014a 1A68     		ldr	r2, [r3]
 9368 014c 5B4B     		ldr	r3, .L683+16
 9369 014e 1B68     		ldr	r3, [r3]
 9370 0150 D31A     		subs	r3, r2, r3
 9371 0152 04E0     		b	.L623
 9372              	.L622:
 9373              		.loc 1 2678 0 discriminator 2
 9374 0154 594B     		ldr	r3, .L683+16
 9375 0156 1A68     		ldr	r2, [r3]
 9376 0158 594B     		ldr	r3, .L683+20
 9377 015a 1B68     		ldr	r3, [r3]
 9378 015c D31A     		subs	r3, r2, r3
 9379              	.L623:
 9380              		.loc 1 2678 0 discriminator 4
 9381 015e BB60     		str	r3, [r7, #8]
2679:..\src/interruptions.c ****             if (curr_off > bin_threshold){
 9382              		.loc 1 2679 0 is_stmt 1 discriminator 4
 9383 0160 584B     		ldr	r3, .L683+24
 9384 0162 1B68     		ldr	r3, [r3]
 9385 0164 BA68     		ldr	r2, [r7, #8]
 9386 0166 9A42     		cmp	r2, r3
 9387 0168 40F39680 		ble	.L624
2680:..\src/interruptions.c ****                 //update position histogram
2681:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].pos_lim_sup >> g_mem.enc[g_mem.motor[0].encoder_line
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 216


 9388              		.loc 1 2681 0
 9389 016c 4F4B     		ldr	r3, .L683
 9390 016e D3F8E820 		ldr	r2, [r3, #232]
 9391 0172 4E4B     		ldr	r3, .L683
 9392 0174 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9393 0178 1846     		mov	r0, r3
 9394 017a 4C49     		ldr	r1, .L683
 9395 017c 0346     		mov	r3, r0
 9396 017e 5B00     		lsls	r3, r3, #1
 9397 0180 0344     		add	r3, r3, r0
 9398 0182 1B01     		lsls	r3, r3, #4
 9399 0184 0B44     		add	r3, r3, r1
 9400 0186 03F29D13 		addw	r3, r3, #413
 9401 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9402 018c 42FA03F3 		asr	r3, r2, r3
 9403 0190 4D4A     		ldr	r2, .L683+28
 9404 0192 82FB0312 		smull	r1, r2, r2, r3
 9405 0196 9210     		asrs	r2, r2, #2
 9406 0198 DB17     		asrs	r3, r3, #31
 9407 019a D31A     		subs	r3, r2, r3
 9408 019c 7B60     		str	r3, [r7, #4]
2682:..\src/interruptions.c ****                 bin_st  = (uint8)(thr_pos/step);
 9409              		.loc 1 2682 0
 9410 019e 474B     		ldr	r3, .L683+16
 9411 01a0 1A68     		ldr	r2, [r3]
 9412 01a2 7B68     		ldr	r3, [r7, #4]
 9413 01a4 92FBF3F3 		sdiv	r3, r2, r3
 9414 01a8 FB70     		strb	r3, [r7, #3]
2683:..\src/interruptions.c ****                 bin_max = (uint8)(max_pos/step);
 9415              		.loc 1 2683 0
 9416 01aa 454B     		ldr	r3, .L683+20
 9417 01ac 1A68     		ldr	r2, [r3]
 9418 01ae 7B68     		ldr	r3, [r7, #4]
 9419 01b0 92FBF3F3 		sdiv	r3, r2, r3
 9420 01b4 BB70     		strb	r3, [r7, #2]
2684:..\src/interruptions.c ****                 
2685:..\src/interruptions.c ****                 // Bin computation valid for both NO and NC working
2686:..\src/interruptions.c ****                 bin_1 = (bin_st<bin_max)?bin_st:bin_max;
 9421              		.loc 1 2686 0
 9422 01b6 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 9423 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 9424 01ba 9342     		cmp	r3, r2
 9425 01bc 28BF     		it	cs
 9426 01be 1346     		movcs	r3, r2
 9427 01c0 7B70     		strb	r3, [r7, #1]
2687:..\src/interruptions.c ****                 bin_2 = (bin_st<bin_max)?bin_max:bin_st;    
 9428              		.loc 1 2687 0
 9429 01c2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 9430 01c4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 9431 01c6 9342     		cmp	r3, r2
 9432 01c8 38BF     		it	cc
 9433 01ca 1346     		movcc	r3, r2
 9434 01cc 3B70     		strb	r3, [r7]
2688:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9435              		.loc 1 2688 0
 9436 01ce 7B78     		ldrb	r3, [r7, #1]
 9437 01d0 FB75     		strb	r3, [r7, #23]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 217


 9438 01d2 0DE0     		b	.L625
 9439              	.L627:
2689:..\src/interruptions.c ****                     //position_hist counts how many times the SoftHand stays in bin while moving
2690:..\src/interruptions.c ****                     g_mem.cnt.position_hist[i] = g_mem.cnt.position_hist[i] + 1;
 9440              		.loc 1 2690 0 discriminator 4
 9441 01d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9442 01d6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9443 01d8 3449     		ldr	r1, .L683
 9444 01da 0632     		adds	r2, r2, #6
 9445 01dc 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9446 01e0 0132     		adds	r2, r2, #1
 9447 01e2 3249     		ldr	r1, .L683
 9448 01e4 0633     		adds	r3, r3, #6
 9449 01e6 41F82320 		str	r2, [r1, r3, lsl #2]
2688:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9450              		.loc 1 2688 0 discriminator 4
 9451 01ea FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9452 01ec 0133     		adds	r3, r3, #1
 9453 01ee FB75     		strb	r3, [r7, #23]
 9454              	.L625:
2688:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9455              		.loc 1 2688 0 is_stmt 0 discriminator 1
 9456 01f0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9457 01f2 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 9458 01f4 9A42     		cmp	r2, r3
 9459 01f6 02D8     		bhi	.L626
2688:..\src/interruptions.c ****                 for (i=bin_1; i<= bin_2 && i <10; i++){
 9460              		.loc 1 2688 0 discriminator 3
 9461 01f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9462 01fa 092B     		cmp	r3, #9
 9463 01fc EAD9     		bls	.L627
 9464              	.L626:
2691:..\src/interruptions.c ****                 }
2692:..\src/interruptions.c ****                 
2693:..\src/interruptions.c ****                 //update current histogram (only positive current measures)
2694:..\src/interruptions.c ****                 step = ((int32)(g_mem.motor[0].current_limit) / 4);
 9465              		.loc 1 2694 0 is_stmt 1
 9466 01fe 2B4B     		ldr	r3, .L683
 9467 0200 B3F90C31 		ldrsh	r3, [r3, #268]
 9468 0204 002B     		cmp	r3, #0
 9469 0206 00DA     		bge	.L628
 9470 0208 0333     		adds	r3, r3, #3
 9471              	.L628:
 9472 020a 9B10     		asrs	r3, r3, #2
 9473 020c 1BB2     		sxth	r3, r3
 9474 020e 7B60     		str	r3, [r7, #4]
2695:..\src/interruptions.c ****                 if (g_mem.motor[0].not_revers_motor_flag == TRUE)
 9475              		.loc 1 2695 0
 9476 0210 264B     		ldr	r3, .L683
 9477 0212 93F81231 		ldrb	r3, [r3, #274]	@ zero_extendqisi2
 9478 0216 012B     		cmp	r3, #1
 9479 0218 0CD1     		bne	.L629
2696:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].hold_curr; 
 9480              		.loc 1 2696 0
 9481 021a 244B     		ldr	r3, .L683
 9482 021c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9483 0220 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 218


 9484 0222 234A     		ldr	r2, .L683+4
 9485 0224 3423     		movs	r3, #52
 9486 0226 03FB01F3 		mul	r3, r3, r1
 9487 022a 1344     		add	r3, r3, r2
 9488 022c 1433     		adds	r3, r3, #20
 9489 022e 1B68     		ldr	r3, [r3]
 9490 0230 3B61     		str	r3, [r7, #16]
 9491 0232 0BE0     		b	.L630
 9492              	.L629:
2697:..\src/interruptions.c ****                 else
2698:..\src/interruptions.c ****                     curr_ref = g_meas[g_mem.motor[0].encoder_line].curr;
 9493              		.loc 1 2698 0
 9494 0234 1D4B     		ldr	r3, .L683
 9495 0236 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 9496 023a 1946     		mov	r1, r3
 9497 023c 1C4A     		ldr	r2, .L683+4
 9498 023e 3423     		movs	r3, #52
 9499 0240 03FB01F3 		mul	r3, r3, r1
 9500 0244 1344     		add	r3, r3, r2
 9501 0246 0C33     		adds	r3, r3, #12
 9502 0248 1B68     		ldr	r3, [r3]
 9503 024a 3B61     		str	r3, [r7, #16]
 9504              	.L630:
2699:..\src/interruptions.c **** 
2700:..\src/interruptions.c ****                 if (curr_ref < 0){
 9505              		.loc 1 2700 0
 9506 024c 3B69     		ldr	r3, [r7, #16]
 9507 024e 002B     		cmp	r3, #0
 9508 0250 02DA     		bge	.L631
2701:..\src/interruptions.c ****                     curr_ref = -curr_ref;       // Invert sign to have a positive current reading i
 9509              		.loc 1 2701 0
 9510 0252 3B69     		ldr	r3, [r7, #16]
 9511 0254 5B42     		negs	r3, r3
 9512 0256 3B61     		str	r3, [r7, #16]
 9513              	.L631:
2702:..\src/interruptions.c ****                 }
2703:..\src/interruptions.c ****                 
2704:..\src/interruptions.c ****                 if (curr_ref > g_mem.motor[0].current_limit)
 9514              		.loc 1 2704 0
 9515 0258 144B     		ldr	r3, .L683
 9516 025a B3F90C31 		ldrsh	r3, [r3, #268]
 9517 025e 1A46     		mov	r2, r3
 9518 0260 3B69     		ldr	r3, [r7, #16]
 9519 0262 9A42     		cmp	r2, r3
 9520 0264 05DA     		bge	.L632
2705:..\src/interruptions.c ****                     g_mem.cnt.current_hist[3] = g_mem.cnt.current_hist[3] + 1; 
 9521              		.loc 1 2705 0
 9522 0266 114B     		ldr	r3, .L683
 9523 0268 DB6C     		ldr	r3, [r3, #76]
 9524 026a 0133     		adds	r3, r3, #1
 9525 026c 0F4A     		ldr	r2, .L683
 9526 026e D364     		str	r3, [r2, #76]
 9527 0270 12E0     		b	.L624
 9528              	.L632:
2706:..\src/interruptions.c ****                 else
2707:..\src/interruptions.c ****                     g_mem.cnt.current_hist[(uint8)(curr_ref/step)] = g_mem.cnt.current_hist[(uint8)
 9529              		.loc 1 2707 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 219


 9530 0272 3A69     		ldr	r2, [r7, #16]
 9531 0274 7B68     		ldr	r3, [r7, #4]
 9532 0276 92FBF3F3 		sdiv	r3, r2, r3
 9533 027a DBB2     		uxtb	r3, r3
 9534 027c 3969     		ldr	r1, [r7, #16]
 9535 027e 7A68     		ldr	r2, [r7, #4]
 9536 0280 91FBF2F2 		sdiv	r2, r1, r2
 9537 0284 D2B2     		uxtb	r2, r2
 9538 0286 0949     		ldr	r1, .L683
 9539 0288 1032     		adds	r2, r2, #16
 9540 028a 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9541 028e 0132     		adds	r2, r2, #1
 9542 0290 0649     		ldr	r1, .L683
 9543 0292 1033     		adds	r3, r3, #16
 9544 0294 41F82320 		str	r2, [r1, r3, lsl #2]
 9545              	.L624:
2708:..\src/interruptions.c ****             }
2709:..\src/interruptions.c ****             pos_cycle_status = STATE_INACTIVE;
 9546              		.loc 1 2709 0
 9547 0298 064B     		ldr	r3, .L683+8
 9548 029a 0022     		movs	r2, #0
 9549 029c 1A70     		strb	r2, [r3]
2710:..\src/interruptions.c ****             break;
 9550              		.loc 1 2710 0
 9551 029e 02E0     		b	.L606
 9552              	.L673:
2665:..\src/interruptions.c ****         case STATE_ACTIVE:
 9553              		.loc 1 2665 0
 9554 02a0 00BF     		nop
 9555 02a2 00E0     		b	.L606
 9556              	.L674:
2675:..\src/interruptions.c ****         case COUNTER_INC:
 9557              		.loc 1 2675 0
 9558 02a4 00BF     		nop
 9559              	.L606:
2711:..\src/interruptions.c ****     }
2712:..\src/interruptions.c ****     
2713:..\src/interruptions.c ****     // State machine - Evaluate EMG activation counter update
2714:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9560              		.loc 1 2714 0
 9561 02a6 0023     		movs	r3, #0
 9562 02a8 FB75     		strb	r3, [r7, #23]
 9563 02aa 4FE0     		b	.L633
 9564              	.L684:
 9565              		.align	2
 9566              	.L683:
 9567 02ac 00000000 		.word	g_mem
 9568 02b0 00000000 		.word	g_meas
 9569 02b4 8A010000 		.word	pos_cycle_status.10742
 9570 02b8 00000000 		.word	pwm_sign
 9571 02bc 8C010000 		.word	thr_pos.10749
 9572 02c0 90010000 		.word	max_pos.10750
 9573 02c4 10000000 		.word	bin_threshold.10747
 9574 02c8 67666666 		.word	1717986919
 9575              	.L641:
2715:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9576              		.loc 1 2715 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 220


 9577 02cc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9578 02ce 9C4A     		ldr	r2, .L685
 9579 02d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9580 02d2 012B     		cmp	r3, #1
 9581 02d4 13D0     		beq	.L635
 9582 02d6 022B     		cmp	r3, #2
 9583 02d8 22D0     		beq	.L636
 9584 02da 002B     		cmp	r3, #0
 9585 02dc 33D1     		bne	.L634
2716:..\src/interruptions.c ****             case STATE_INACTIVE:
2717:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9586              		.loc 1 2717 0
 9587 02de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9588 02e0 984A     		ldr	r2, .L685+4
 9589 02e2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9590 02e6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9591 02e8 9749     		ldr	r1, .L685+8
 9592 02ea FC32     		adds	r2, r2, #252
 9593 02ec 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9594 02f0 9342     		cmp	r3, r2
 9595 02f2 25DD     		ble	.L675
2718:..\src/interruptions.c ****                     emg_cycle_status[i] = STATE_ACTIVE;
 9596              		.loc 1 2718 0
 9597 02f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9598 02f6 924A     		ldr	r2, .L685
 9599 02f8 0121     		movs	r1, #1
 9600 02fa D154     		strb	r1, [r2, r3]
2719:..\src/interruptions.c ****                 }
2720:..\src/interruptions.c ****                 break;
 9601              		.loc 1 2720 0
 9602 02fc 20E0     		b	.L675
 9603              	.L635:
2721:..\src/interruptions.c ****             case STATE_ACTIVE:
2722:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9604              		.loc 1 2722 0
 9605 02fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9606 0300 904A     		ldr	r2, .L685+4
 9607 0302 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9608 0306 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9609 0308 8F49     		ldr	r1, .L685+8
 9610 030a FC33     		adds	r3, r3, #252
 9611 030c 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 9612 0310 0A3B     		subs	r3, r3, #10
 9613 0312 9A42     		cmp	r2, r3
 9614 0314 16DA     		bge	.L676
2723:..\src/interruptions.c ****                     emg_cycle_status[i] = COUNTER_INC;
 9615              		.loc 1 2723 0
 9616 0316 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9617 0318 894A     		ldr	r2, .L685
 9618 031a 0221     		movs	r1, #2
 9619 031c D154     		strb	r1, [r2, r3]
2724:..\src/interruptions.c ****                 }
2725:..\src/interruptions.c ****                 break;
 9620              		.loc 1 2725 0
 9621 031e 11E0     		b	.L676
 9622              	.L636:
2726:..\src/interruptions.c ****             case COUNTER_INC:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 221


2727:..\src/interruptions.c ****                 g_mem.cnt.emg_act_counter[i] = g_mem.cnt.emg_act_counter[i] + 1;
 9623              		.loc 1 2727 0
 9624 0320 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9625 0322 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9626 0324 8849     		ldr	r1, .L685+8
 9627 0326 0432     		adds	r2, r2, #4
 9628 0328 51F82220 		ldr	r2, [r1, r2, lsl #2]
 9629 032c 0132     		adds	r2, r2, #1
 9630 032e 8649     		ldr	r1, .L685+8
 9631 0330 0433     		adds	r3, r3, #4
 9632 0332 41F82320 		str	r2, [r1, r3, lsl #2]
2728:..\src/interruptions.c ****                 emg_cycle_status[i] = STATE_INACTIVE;
 9633              		.loc 1 2728 0
 9634 0336 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9635 0338 814A     		ldr	r2, .L685
 9636 033a 0021     		movs	r1, #0
 9637 033c D154     		strb	r1, [r2, r3]
2729:..\src/interruptions.c ****                 break;
 9638              		.loc 1 2729 0
 9639 033e 02E0     		b	.L634
 9640              	.L675:
2720:..\src/interruptions.c ****             case STATE_ACTIVE:
 9641              		.loc 1 2720 0
 9642 0340 00BF     		nop
 9643 0342 00E0     		b	.L634
 9644              	.L676:
2725:..\src/interruptions.c ****             case COUNTER_INC:
 9645              		.loc 1 2725 0
 9646 0344 00BF     		nop
 9647              	.L634:
2714:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9648              		.loc 1 2714 0 discriminator 2
 9649 0346 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9650 0348 0133     		adds	r3, r3, #1
 9651 034a FB75     		strb	r3, [r7, #23]
 9652              	.L633:
2714:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9653              		.loc 1 2714 0 is_stmt 0 discriminator 1
 9654 034c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9655 034e 012B     		cmp	r3, #1
 9656 0350 07D8     		bhi	.L640
2714:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9657              		.loc 1 2714 0 discriminator 3
 9658 0352 7E4B     		ldr	r3, .L685+12
 9659 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9660 0356 002B     		cmp	r3, #0
 9661 0358 03D1     		bne	.L640
2714:..\src/interruptions.c ****         switch (emg_cycle_status[i]){
 9662              		.loc 1 2714 0 discriminator 4
 9663 035a 7D4B     		ldr	r3, .L685+16
 9664 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9665 035e 002B     		cmp	r3, #0
 9666 0360 B4D0     		beq	.L641
 9667              	.L640:
2730:..\src/interruptions.c ****         }
2731:..\src/interruptions.c ****     }
2732:..\src/interruptions.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 222


2733:..\src/interruptions.c ****     // State machine - Evaluate Motion counter update
2734:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9668              		.loc 1 2734 0 is_stmt 1
 9669 0362 0023     		movs	r3, #0
 9670 0364 FB75     		strb	r3, [r7, #23]
 9671 0366 57E0     		b	.L642
 9672              	.L651:
2735:..\src/interruptions.c ****         switch (motion_status[i]){
 9673              		.loc 1 2735 0
 9674 0368 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9675 036a 7A4A     		ldr	r2, .L685+20
 9676 036c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9677 036e 012B     		cmp	r3, #1
 9678 0370 18D0     		beq	.L644
 9679 0372 022B     		cmp	r3, #2
 9680 0374 37D0     		beq	.L645
 9681 0376 002B     		cmp	r3, #0
 9682 0378 4BD1     		bne	.L643
2736:..\src/interruptions.c ****             case STATE_INACTIVE:
2737:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > g_mem.emg.emg_threshold[i]){
 9683              		.loc 1 2737 0
 9684 037a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9685 037c 714A     		ldr	r2, .L685+4
 9686 037e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 9687 0382 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9688 0384 7049     		ldr	r1, .L685+8
 9689 0386 FC32     		adds	r2, r2, #252
 9690 0388 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 9691 038c 9342     		cmp	r3, r2
 9692 038e 3DDD     		ble	.L677
2738:..\src/interruptions.c ****                     start_emg_pos[i] = curr_pos;
 9693              		.loc 1 2738 0
 9694 0390 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9695 0392 7149     		ldr	r1, .L685+24
 9696 0394 FA68     		ldr	r2, [r7, #12]
 9697 0396 41F82320 		str	r2, [r1, r3, lsl #2]
2739:..\src/interruptions.c ****                     motion_status[i] = STATE_ACTIVE;
 9698              		.loc 1 2739 0
 9699 039a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9700 039c 6D4A     		ldr	r2, .L685+20
 9701 039e 0121     		movs	r1, #1
 9702 03a0 D154     		strb	r1, [r2, r3]
2740:..\src/interruptions.c ****                 }
2741:..\src/interruptions.c ****                 break;
 9703              		.loc 1 2741 0
 9704 03a2 33E0     		b	.L677
 9705              	.L644:
2742:..\src/interruptions.c ****             case STATE_ACTIVE:
2743:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < g_mem.emg.emg_threshold[i]-10){                    
 9706              		.loc 1 2743 0
 9707 03a4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9708 03a6 674A     		ldr	r2, .L685+4
 9709 03a8 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9710 03ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9711 03ae 6649     		ldr	r1, .L685+8
 9712 03b0 FC33     		adds	r3, r3, #252
 9713 03b2 31F81330 		ldrh	r3, [r1, r3, lsl #1]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 223


 9714 03b6 0A3B     		subs	r3, r3, #10
 9715 03b8 9A42     		cmp	r2, r3
 9716 03ba 29DA     		bge	.L678
2744:..\src/interruptions.c ****                     if (abs(start_emg_pos[i] - curr_pos) > 200){     // it has to be a sensible mov
 9717              		.loc 1 2744 0
 9718 03bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9719 03be 664A     		ldr	r2, .L685+24
 9720 03c0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9721 03c4 FB68     		ldr	r3, [r7, #12]
 9722 03c6 D31A     		subs	r3, r2, r3
 9723 03c8 002B     		cmp	r3, #0
 9724 03ca B8BF     		it	lt
 9725 03cc 5B42     		rsblt	r3, r3, #0
 9726 03ce C82B     		cmp	r3, #200
 9727 03d0 04DD     		ble	.L649
2745:..\src/interruptions.c ****                         motion_status[i] = COUNTER_INC;
 9728              		.loc 1 2745 0
 9729 03d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9730 03d4 5F4A     		ldr	r2, .L685+20
 9731 03d6 0221     		movs	r1, #2
 9732 03d8 D154     		strb	r1, [r2, r3]
2746:..\src/interruptions.c ****                     }
2747:..\src/interruptions.c ****                     else {
2748:..\src/interruptions.c ****                         motion_status[i] = STATE_INACTIVE;
2749:..\src/interruptions.c ****                     }
2750:..\src/interruptions.c ****                 }
2751:..\src/interruptions.c ****                 break;
 9733              		.loc 1 2751 0
 9734 03da 19E0     		b	.L678
 9735              	.L649:
2748:..\src/interruptions.c ****                     }
 9736              		.loc 1 2748 0
 9737 03dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9738 03de 5D4A     		ldr	r2, .L685+20
 9739 03e0 0021     		movs	r1, #0
 9740 03e2 D154     		strb	r1, [r2, r3]
 9741              		.loc 1 2751 0
 9742 03e4 14E0     		b	.L678
 9743              	.L645:
2752:..\src/interruptions.c ****             case COUNTER_INC:
2753:..\src/interruptions.c ****                 g_mem.cnt.motion_counter[i] = g_mem.cnt.motion_counter[i] + 1;
 9744              		.loc 1 2753 0
 9745 03e6 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9746 03e8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9747 03ea 574A     		ldr	r2, .L685+8
 9748 03ec 1A33     		adds	r3, r3, #26
 9749 03ee 9B00     		lsls	r3, r3, #2
 9750 03f0 1344     		add	r3, r3, r2
 9751 03f2 5B68     		ldr	r3, [r3, #4]
 9752 03f4 5A1C     		adds	r2, r3, #1
 9753 03f6 5448     		ldr	r0, .L685+8
 9754 03f8 01F11A03 		add	r3, r1, #26
 9755 03fc 9B00     		lsls	r3, r3, #2
 9756 03fe 0344     		add	r3, r3, r0
 9757 0400 5A60     		str	r2, [r3, #4]
2754:..\src/interruptions.c ****                 motion_status[i] = STATE_INACTIVE;
 9758              		.loc 1 2754 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 224


 9759 0402 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9760 0404 534A     		ldr	r2, .L685+20
 9761 0406 0021     		movs	r1, #0
 9762 0408 D154     		strb	r1, [r2, r3]
2755:..\src/interruptions.c ****                 break;
 9763              		.loc 1 2755 0
 9764 040a 02E0     		b	.L643
 9765              	.L677:
2741:..\src/interruptions.c ****             case STATE_ACTIVE:
 9766              		.loc 1 2741 0
 9767 040c 00BF     		nop
 9768 040e 00E0     		b	.L643
 9769              	.L678:
2751:..\src/interruptions.c ****             case COUNTER_INC:
 9770              		.loc 1 2751 0
 9771 0410 00BF     		nop
 9772              	.L643:
2734:..\src/interruptions.c ****         switch (motion_status[i]){
 9773              		.loc 1 2734 0 discriminator 2
 9774 0412 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9775 0414 0133     		adds	r3, r3, #1
 9776 0416 FB75     		strb	r3, [r7, #23]
 9777              	.L642:
2734:..\src/interruptions.c ****         switch (motion_status[i]){
 9778              		.loc 1 2734 0 is_stmt 0 discriminator 1
 9779 0418 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9780 041a 012B     		cmp	r3, #1
 9781 041c 07D8     		bhi	.L650
2734:..\src/interruptions.c ****         switch (motion_status[i]){
 9782              		.loc 1 2734 0 discriminator 3
 9783 041e 4B4B     		ldr	r3, .L685+12
 9784 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9785 0422 002B     		cmp	r3, #0
 9786 0424 03D1     		bne	.L650
2734:..\src/interruptions.c ****         switch (motion_status[i]){
 9787              		.loc 1 2734 0 discriminator 4
 9788 0426 4A4B     		ldr	r3, .L685+16
 9789 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9790 042a 002B     		cmp	r3, #0
 9791 042c 9CD0     		beq	.L651
 9792              	.L650:
2756:..\src/interruptions.c ****         }
2757:..\src/interruptions.c ****     }
2758:..\src/interruptions.c ****     
2759:..\src/interruptions.c ****     // State machine - Evaluate EMG excessive activity counter update
2760:..\src/interruptions.c ****     for (i=0; i<2 && emg_1_status == NORMAL && emg_2_status == NORMAL; i++){
 9793              		.loc 1 2760 0 is_stmt 1
 9794 042e 0023     		movs	r3, #0
 9795 0430 FB75     		strb	r3, [r7, #23]
 9796 0432 A3E0     		b	.L652
 9797              	.L663:
2761:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9798              		.loc 1 2761 0
 9799 0434 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9800 0436 494A     		ldr	r2, .L685+28
 9801 0438 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9802 043a 012B     		cmp	r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 225


 9803 043c 19D0     		beq	.L654
 9804 043e 022B     		cmp	r3, #2
 9805 0440 68D0     		beq	.L655
 9806 0442 002B     		cmp	r3, #0
 9807 0444 40F09780 		bne	.L653
2762:..\src/interruptions.c ****             case STATE_INACTIVE:
2763:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] > exc_act_thr){
 9808              		.loc 1 2763 0
 9809 0448 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9810 044a 3E4A     		ldr	r2, .L685+4
 9811 044c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9812 0450 434B     		ldr	r3, .L685+32
 9813 0452 1B68     		ldr	r3, [r3]
 9814 0454 9A42     		cmp	r2, r3
 9815 0456 70DD     		ble	.L679
2764:..\src/interruptions.c ****                     timer_exc_s[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9816              		.loc 1 2764 0
 9817 0458 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9818 045a FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9819 045e 0346     		mov	r3, r0
 9820 0460 1A46     		mov	r2, r3
 9821 0462 404B     		ldr	r3, .L685+36
 9822 0464 43F82420 		str	r2, [r3, r4, lsl #2]
2765:..\src/interruptions.c ****                     emg_excess_status[i] = STATE_ACTIVE;
 9823              		.loc 1 2765 0
 9824 0468 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9825 046a 3C4A     		ldr	r2, .L685+28
 9826 046c 0121     		movs	r1, #1
 9827 046e D154     		strb	r1, [r2, r3]
2766:..\src/interruptions.c ****                 }
2767:..\src/interruptions.c ****                 break;
 9828              		.loc 1 2767 0
 9829 0470 63E0     		b	.L679
 9830              	.L654:
2768:..\src/interruptions.c ****             case STATE_ACTIVE:
2769:..\src/interruptions.c ****                 if (g_adc_meas.emg[i] < exc_act_thr-10){
 9831              		.loc 1 2769 0
 9832 0472 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9833 0474 334A     		ldr	r2, .L685+4
 9834 0476 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9835 047a 394B     		ldr	r3, .L685+32
 9836 047c 1B68     		ldr	r3, [r3]
 9837 047e 0A3B     		subs	r3, r3, #10
 9838 0480 9A42     		cmp	r2, r3
 9839 0482 77DA     		bge	.L680
2770:..\src/interruptions.c ****                     timer_exc_e[i] = (uint32)CYCLES_TIMER_ReadCounter();
 9840              		.loc 1 2770 0
 9841 0484 FC7D     		ldrb	r4, [r7, #23]	@ zero_extendqisi2
 9842 0486 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9843 048a 0346     		mov	r3, r0
 9844 048c 1A46     		mov	r2, r3
 9845 048e 364B     		ldr	r3, .L685+40
 9846 0490 43F82420 		str	r2, [r3, r4, lsl #2]
2771:..\src/interruptions.c ****                     if (timer_exc_s[i] < timer_exc_e[i]) {
 9847              		.loc 1 2771 0
 9848 0494 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9849 0496 334A     		ldr	r2, .L685+36
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 226


 9850 0498 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9851 049c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9852 049e 3249     		ldr	r1, .L685+40
 9853 04a0 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9854 04a4 9A42     		cmp	r2, r3
 9855 04a6 0AD2     		bcs	.L659
2772:..\src/interruptions.c ****                         timer_exc_s[i] = timer_exc_s[i] + (uint32)6000;
 9856              		.loc 1 2772 0
 9857 04a8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 9858 04aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9859 04ac 2D49     		ldr	r1, .L685+36
 9860 04ae 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9861 04b2 03F5BB53 		add	r3, r3, #5984
 9862 04b6 1033     		adds	r3, r3, #16
 9863 04b8 2A49     		ldr	r1, .L685+36
 9864 04ba 41F82230 		str	r3, [r1, r2, lsl #2]
 9865              	.L659:
2773:..\src/interruptions.c ****                     }
2774:..\src/interruptions.c ****                     if (((float)(timer_exc_s[i] - timer_exc_e[i])/50.0) > 4.0){      //50 timers ti
 9866              		.loc 1 2774 0
 9867 04be FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9868 04c0 284A     		ldr	r2, .L685+36
 9869 04c2 52F82320 		ldr	r2, [r2, r3, lsl #2]
 9870 04c6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9871 04c8 2749     		ldr	r1, .L685+40
 9872 04ca 51F82330 		ldr	r3, [r1, r3, lsl #2]
 9873 04ce D31A     		subs	r3, r2, r3
 9874 04d0 1846     		mov	r0, r3
 9875 04d2 FFF7FEFF 		bl	__aeabi_ui2f
 9876 04d6 0346     		mov	r3, r0
 9877 04d8 1846     		mov	r0, r3
 9878 04da FFF7FEFF 		bl	__aeabi_f2d
 9879 04de 4FF00002 		mov	r2, #0
 9880 04e2 224B     		ldr	r3, .L685+44
 9881 04e4 FFF7FEFF 		bl	__aeabi_ddiv
 9882 04e8 0346     		mov	r3, r0
 9883 04ea 0C46     		mov	r4, r1
 9884 04ec 1846     		mov	r0, r3
 9885 04ee 2146     		mov	r1, r4
 9886 04f0 4FF00002 		mov	r2, #0
 9887 04f4 1E4B     		ldr	r3, .L685+48
 9888 04f6 FFF7FEFF 		bl	__aeabi_dcmpgt
 9889 04fa 0346     		mov	r3, r0
 9890 04fc 002B     		cmp	r3, #0
 9891 04fe 04D0     		beq	.L672
2775:..\src/interruptions.c ****                         emg_excess_status[i] = COUNTER_INC;
 9892              		.loc 1 2775 0
 9893 0500 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9894 0502 164A     		ldr	r2, .L685+28
 9895 0504 0221     		movs	r1, #2
 9896 0506 D154     		strb	r1, [r2, r3]
2776:..\src/interruptions.c ****                     }
2777:..\src/interruptions.c ****                     else {
2778:..\src/interruptions.c ****                         emg_excess_status[i] = STATE_INACTIVE;
2779:..\src/interruptions.c ****                     }
2780:..\src/interruptions.c ****                 }
2781:..\src/interruptions.c ****                 break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 227


 9897              		.loc 1 2781 0
 9898 0508 34E0     		b	.L680
 9899              	.L672:
2778:..\src/interruptions.c ****                     }
 9900              		.loc 1 2778 0
 9901 050a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9902 050c 134A     		ldr	r2, .L685+28
 9903 050e 0021     		movs	r1, #0
 9904 0510 D154     		strb	r1, [r2, r3]
 9905              		.loc 1 2781 0
 9906 0512 2FE0     		b	.L680
 9907              	.L655:
2782:..\src/interruptions.c ****             case COUNTER_INC:
2783:..\src/interruptions.c ****                 g_mem.cnt.excessive_signal_activity[i] = g_mem.cnt.excessive_signal_activity[i] + 1
 9908              		.loc 1 2783 0
 9909 0514 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 9910 0516 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9911 0518 0B4A     		ldr	r2, .L685+8
 9912 051a 1833     		adds	r3, r3, #24
 9913 051c 9B00     		lsls	r3, r3, #2
 9914 051e 1344     		add	r3, r3, r2
 9915 0520 5B68     		ldr	r3, [r3, #4]
 9916 0522 5A1C     		adds	r2, r3, #1
 9917 0524 0848     		ldr	r0, .L685+8
 9918 0526 01F11803 		add	r3, r1, #24
 9919 052a 9B00     		lsls	r3, r3, #2
 9920 052c 0344     		add	r3, r3, r0
 9921 052e 5A60     		str	r2, [r3, #4]
2784:..\src/interruptions.c ****                 emg_excess_status[i] = STATE_INACTIVE;
 9922              		.loc 1 2784 0
 9923 0530 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9924 0532 0A4A     		ldr	r2, .L685+28
 9925 0534 0021     		movs	r1, #0
 9926 0536 D154     		strb	r1, [r2, r3]
2785:..\src/interruptions.c ****                 break;
 9927              		.loc 1 2785 0
 9928 0538 1DE0     		b	.L653
 9929              	.L679:
2767:..\src/interruptions.c ****             case STATE_ACTIVE:
 9930              		.loc 1 2767 0
 9931 053a 00BF     		nop
 9932 053c 1BE0     		b	.L653
 9933              	.L686:
 9934 053e 00BF     		.align	2
 9935              	.L685:
 9936 0540 94010000 		.word	emg_cycle_status.10743
 9937 0544 00000000 		.word	g_adc_meas
 9938 0548 00000000 		.word	g_mem
 9939 054c 00000000 		.word	emg_1_status
 9940 0550 00000000 		.word	emg_2_status
 9941 0554 98010000 		.word	motion_status.10744
 9942 0558 9C010000 		.word	start_emg_pos.10764
 9943 055c A4010000 		.word	emg_excess_status.10745
 9944 0560 14000000 		.word	exc_act_thr.10748
 9945 0564 A8010000 		.word	timer_exc_s.10762
 9946 0568 B0010000 		.word	timer_exc_e.10763
 9947 056c 00004940 		.word	1078525952
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 228


 9948 0570 00001040 		.word	1074790400
 9949              	.L680:
2781:..\src/interruptions.c ****             case COUNTER_INC:
 9950              		.loc 1 2781 0
 9951 0574 00BF     		nop
 9952              	.L653:
2760:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9953              		.loc 1 2760 0 discriminator 2
 9954 0576 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9955 0578 0133     		adds	r3, r3, #1
 9956 057a FB75     		strb	r3, [r7, #23]
 9957              	.L652:
2760:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9958              		.loc 1 2760 0 is_stmt 0 discriminator 1
 9959 057c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 9960 057e 012B     		cmp	r3, #1
 9961 0580 08D8     		bhi	.L662
2760:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9962              		.loc 1 2760 0 discriminator 3
 9963 0582 2D4B     		ldr	r3, .L687
 9964 0584 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9965 0586 002B     		cmp	r3, #0
 9966 0588 04D1     		bne	.L662
2760:..\src/interruptions.c ****         switch (emg_excess_status[i]){
 9967              		.loc 1 2760 0 discriminator 4
 9968 058a 2C4B     		ldr	r3, .L687+4
 9969 058c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9970 058e 002B     		cmp	r3, #0
 9971 0590 3FF450AF 		beq	.L663
 9972              	.L662:
2786:..\src/interruptions.c ****         }
2787:..\src/interruptions.c ****     }
2788:..\src/interruptions.c ****     
2789:..\src/interruptions.c ****     // State machine - Evaluate rest counter update
2790:..\src/interruptions.c ****     switch (rest_cycle_status){
 9973              		.loc 1 2790 0 is_stmt 1
 9974 0594 2A4B     		ldr	r3, .L687+8
 9975 0596 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9976 0598 012B     		cmp	r3, #1
 9977 059a 11D0     		beq	.L665
 9978 059c 022B     		cmp	r3, #2
 9979 059e 2AD0     		beq	.L666
 9980 05a0 002B     		cmp	r3, #0
 9981 05a2 42D1     		bne	.L664
2791:..\src/interruptions.c ****         case STATE_INACTIVE:
2792:..\src/interruptions.c ****             if (rest_enabled){
 9982              		.loc 1 2792 0
 9983 05a4 274B     		ldr	r3, .L687+12
 9984 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9985 05a8 002B     		cmp	r3, #0
 9986 05aa 3BD0     		beq	.L681
2793:..\src/interruptions.c ****                 timer_value_s = (uint32)CYCLES_TIMER_ReadCounter();
 9987              		.loc 1 2793 0
 9988 05ac FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 9989 05b0 0346     		mov	r3, r0
 9990 05b2 1A46     		mov	r2, r3
 9991 05b4 244B     		ldr	r3, .L687+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 229


 9992 05b6 1A60     		str	r2, [r3]
2794:..\src/interruptions.c ****                 rest_cycle_status = STATE_ACTIVE;
 9993              		.loc 1 2794 0
 9994 05b8 214B     		ldr	r3, .L687+8
 9995 05ba 0122     		movs	r2, #1
 9996 05bc 1A70     		strb	r2, [r3]
2795:..\src/interruptions.c ****             }
2796:..\src/interruptions.c ****             break;
 9997              		.loc 1 2796 0
 9998 05be 31E0     		b	.L681
 9999              	.L665:
2797:..\src/interruptions.c ****         case STATE_ACTIVE:
2798:..\src/interruptions.c ****             if (!rest_enabled){
 10000              		.loc 1 2798 0
 10001 05c0 204B     		ldr	r3, .L687+12
 10002 05c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10003 05c4 002B     		cmp	r3, #0
 10004 05c6 2FD1     		bne	.L682
2799:..\src/interruptions.c ****                 timer_value_e = (uint32)CYCLES_TIMER_ReadCounter();
 10005              		.loc 1 2799 0
 10006 05c8 FFF7FEFF 		bl	CYCLES_TIMER_ReadCounter
 10007 05cc 0346     		mov	r3, r0
 10008 05ce 1A46     		mov	r2, r3
 10009 05d0 1E4B     		ldr	r3, .L687+20
 10010 05d2 1A60     		str	r2, [r3]
2800:..\src/interruptions.c ****                 if (timer_value_s < timer_value_e) {
 10011              		.loc 1 2800 0
 10012 05d4 1C4B     		ldr	r3, .L687+16
 10013 05d6 1A68     		ldr	r2, [r3]
 10014 05d8 1C4B     		ldr	r3, .L687+20
 10015 05da 1B68     		ldr	r3, [r3]
 10016 05dc 9A42     		cmp	r2, r3
 10017 05de 06D2     		bcs	.L670
2801:..\src/interruptions.c ****                     timer_value_s = timer_value_s + (uint32)6000;
 10018              		.loc 1 2801 0
 10019 05e0 194B     		ldr	r3, .L687+16
 10020 05e2 1B68     		ldr	r3, [r3]
 10021 05e4 03F5BB53 		add	r3, r3, #5984
 10022 05e8 1033     		adds	r3, r3, #16
 10023 05ea 174A     		ldr	r2, .L687+16
 10024 05ec 1360     		str	r3, [r2]
 10025              	.L670:
2802:..\src/interruptions.c ****                 }
2803:..\src/interruptions.c ****                 rest_cycle_status = COUNTER_INC;
 10026              		.loc 1 2803 0
 10027 05ee 144B     		ldr	r3, .L687+8
 10028 05f0 0222     		movs	r2, #2
 10029 05f2 1A70     		strb	r2, [r3]
2804:..\src/interruptions.c ****             }
2805:..\src/interruptions.c ****             break;
 10030              		.loc 1 2805 0
 10031 05f4 18E0     		b	.L682
 10032              	.L666:
2806:..\src/interruptions.c ****         case COUNTER_INC: 
2807:..\src/interruptions.c ****             g_mem.cnt.total_time_rest = g_mem.cnt.total_time_rest + (uint32)((timer_value_s - timer
 10033              		.loc 1 2807 0
 10034 05f6 164B     		ldr	r3, .L687+24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 230


 10035 05f8 DA6D     		ldr	r2, [r3, #92]
 10036 05fa 134B     		ldr	r3, .L687+16
 10037 05fc 1968     		ldr	r1, [r3]
 10038 05fe 134B     		ldr	r3, .L687+20
 10039 0600 1B68     		ldr	r3, [r3]
 10040 0602 CB1A     		subs	r3, r1, r3
 10041 0604 1349     		ldr	r1, .L687+28
 10042 0606 A1FB0313 		umull	r1, r3, r1, r3
 10043 060a 1B09     		lsrs	r3, r3, #4
 10044 060c 1344     		add	r3, r3, r2
 10045 060e 104A     		ldr	r2, .L687+24
 10046 0610 D365     		str	r3, [r2, #92]
2808:..\src/interruptions.c ****             g_mem.cnt.rest_counter = g_mem.cnt.rest_counter + 1;
 10047              		.loc 1 2808 0
 10048 0612 0F4B     		ldr	r3, .L687+24
 10049 0614 1B6D     		ldr	r3, [r3, #80]
 10050 0616 0133     		adds	r3, r3, #1
 10051 0618 0D4A     		ldr	r2, .L687+24
 10052 061a 1365     		str	r3, [r2, #80]
2809:..\src/interruptions.c ****             rest_cycle_status = STATE_INACTIVE;
 10053              		.loc 1 2809 0
 10054 061c 084B     		ldr	r3, .L687+8
 10055 061e 0022     		movs	r2, #0
 10056 0620 1A70     		strb	r2, [r3]
2810:..\src/interruptions.c ****             break;
 10057              		.loc 1 2810 0
 10058 0622 02E0     		b	.L664
 10059              	.L681:
2796:..\src/interruptions.c ****         case STATE_ACTIVE:
 10060              		.loc 1 2796 0
 10061 0624 00BF     		nop
 10062 0626 00E0     		b	.L664
 10063              	.L682:
2805:..\src/interruptions.c ****         case COUNTER_INC: 
 10064              		.loc 1 2805 0
 10065 0628 00BF     		nop
 10066              	.L664:
2811:..\src/interruptions.c ****     }
2812:..\src/interruptions.c ****           
2813:..\src/interruptions.c ****     // This function writes rows [row_start, row_end] on EEPROM
2814:..\src/interruptions.c ****     save_cycles_eeprom();
 10067              		.loc 1 2814 0
 10068 062a FFF7FEFF 		bl	save_cycles_eeprom
2815:..\src/interruptions.c ****     
2816:..\src/interruptions.c **** }
 10069              		.loc 1 2816 0
 10070 062e 00BF     		nop
 10071 0630 1C37     		adds	r7, r7, #28
 10072              		.cfi_def_cfa_offset 12
 10073 0632 BD46     		mov	sp, r7
 10074              		.cfi_def_cfa_register 13
 10075              		@ sp needed
 10076 0634 90BD     		pop	{r4, r7, pc}
 10077              	.L688:
 10078 0636 00BF     		.align	2
 10079              	.L687:
 10080 0638 00000000 		.word	emg_1_status
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 231


 10081 063c 00000000 		.word	emg_2_status
 10082 0640 B8010000 		.word	rest_cycle_status.10746
 10083 0644 00000000 		.word	rest_enabled
 10084 0648 BC010000 		.word	timer_value_s.10760
 10085 064c C0010000 		.word	timer_value_e.10761
 10086 0650 00000000 		.word	g_mem
 10087 0654 1F85EB51 		.word	1374389535
 10088              		.cfi_endproc
 10089              	.LFE77:
 10090              		.size	cycles_counter_update, .-cycles_counter_update
 10091              		.section	.text.save_cycles_eeprom,"ax",%progbits
 10092              		.align	2
 10093              		.global	save_cycles_eeprom
 10094              		.thumb
 10095              		.thumb_func
 10096              		.type	save_cycles_eeprom, %function
 10097              	save_cycles_eeprom:
 10098              	.LFB78:
2817:..\src/interruptions.c **** 
2818:..\src/interruptions.c **** //==============================================================================
2819:..\src/interruptions.c **** //                                                            SAVE CYCLES EEPROM
2820:..\src/interruptions.c **** //==============================================================================
2821:..\src/interruptions.c **** 
2822:..\src/interruptions.c **** void save_cycles_eeprom() {
 10099              		.loc 1 2822 0
 10100              		.cfi_startproc
 10101              		@ args = 0, pretend = 0, frame = 24
 10102              		@ frame_needed = 1, uses_anonymous_args = 0
 10103 0000 80B5     		push	{r7, lr}
 10104              		.cfi_def_cfa_offset 8
 10105              		.cfi_offset 7, -8
 10106              		.cfi_offset 14, -4
 10107 0002 86B0     		sub	sp, sp, #24
 10108              		.cfi_def_cfa_offset 32
 10109 0004 00AF     		add	r7, sp, #0
 10110              		.cfi_def_cfa_register 7
2823:..\src/interruptions.c **** 
2824:..\src/interruptions.c ****     cystatus status;
2825:..\src/interruptions.c ****     static uint8 row_number;
2826:..\src/interruptions.c ****     uint8 row_start = 1;
 10111              		.loc 1 2826 0
 10112 0006 0123     		movs	r3, #1
 10113 0008 FB75     		strb	r3, [r7, #23]
2827:..\src/interruptions.c ****     uint8* addr_start   = (uint8*)&g_mem.cnt.emg_act_counter[0];    //Data at beginning of the row 
 10114              		.loc 1 2827 0
 10115 000a 394B     		ldr	r3, .L705
 10116 000c 3B61     		str	r3, [r7, #16]
2828:..\src/interruptions.c ****     uint8* addr_start_c = (uint8*)&c_mem.cnt.emg_act_counter[0];
 10117              		.loc 1 2828 0
 10118 000e 394B     		ldr	r3, .L705+4
 10119 0010 FB60     		str	r3, [r7, #12]
2829:..\src/interruptions.c ****     uint8 row_end   = row_start + EEPROM_COUNTERS_ROWS - 1;
 10120              		.loc 1 2829 0
 10121 0012 FB7D     		ldrb	r3, [r7, #23]
 10122 0014 0633     		adds	r3, r3, #6
 10123 0016 FB72     		strb	r3, [r7, #11]
2830:..\src/interruptions.c ****     static uint8* m_addr = NULL; 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 232


2831:..\src/interruptions.c **** 
2832:..\src/interruptions.c ****     // This part of code writes rows [row_start, row_end] on EEPROM    
2833:..\src/interruptions.c ****     switch(cycles_status) {
 10124              		.loc 1 2833 0
 10125 0018 374B     		ldr	r3, .L705+8
 10126 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10127 001c 042B     		cmp	r3, #4
 10128 001e 63D8     		bhi	.L701
 10129 0020 01A2     		adr	r2, .L692
 10130 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 10131 0026 00BF     		.p2align 2
 10132              	.L692:
 10133 0028 3D000000 		.word	.L691+1
 10134 002c 5B000000 		.word	.L693+1
 10135 0030 8B000000 		.word	.L694+1
 10136 0034 C7000000 		.word	.L695+1
 10137 0038 DF000000 		.word	.L702+1
 10138              		.p2align 1
 10139              	.L691:
2834:..\src/interruptions.c ****         case PREPARE_DATA:
2835:..\src/interruptions.c ****             // Store data in c_mem structure to have consistent counters
2836:..\src/interruptions.c ****             memcpy( addr_start_c, addr_start, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );            
 10140              		.loc 1 2836 0
 10141 003c 7022     		movs	r2, #112
 10142 003e 3969     		ldr	r1, [r7, #16]
 10143 0040 F868     		ldr	r0, [r7, #12]
 10144 0042 FFF7FEFF 		bl	memcpy
2837:..\src/interruptions.c ****             m_addr = addr_start;
 10145              		.loc 1 2837 0
 10146 0046 2D4A     		ldr	r2, .L705+12
 10147 0048 3B69     		ldr	r3, [r7, #16]
 10148 004a 1360     		str	r3, [r2]
2838:..\src/interruptions.c ****             row_number = row_start;
 10149              		.loc 1 2838 0
 10150 004c 2C4A     		ldr	r2, .L705+16
 10151 004e FB7D     		ldrb	r3, [r7, #23]
 10152 0050 1370     		strb	r3, [r2]
2839:..\src/interruptions.c ****             cycles_status = WRITE_CYCLES;
 10153              		.loc 1 2839 0
 10154 0052 294B     		ldr	r3, .L705+8
 10155 0054 0122     		movs	r2, #1
 10156 0056 1A70     		strb	r2, [r3]
2840:..\src/interruptions.c ****             break;
 10157              		.loc 1 2840 0
 10158 0058 46E0     		b	.L690
 10159              	.L693:
2841:..\src/interruptions.c ****             
2842:..\src/interruptions.c ****         case WRITE_CYCLES:
2843:..\src/interruptions.c ****             EEPROM_UpdateTemperature();     //Check temperature of chip before writing
 10160              		.loc 1 2843 0
 10161 005a FFF7FEFF 		bl	EEPROM_UpdateTemperature
2844:..\src/interruptions.c ****             status = EEPROM_StartWrite((uint8*) m_addr, row_number);           
 10162              		.loc 1 2844 0
 10163 005e 274B     		ldr	r3, .L705+12
 10164 0060 1A68     		ldr	r2, [r3]
 10165 0062 274B     		ldr	r3, .L705+16
 10166 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 233


 10167 0066 1946     		mov	r1, r3
 10168 0068 1046     		mov	r0, r2
 10169 006a FFF7FEFF 		bl	EEPROM_StartWrite
 10170 006e 7860     		str	r0, [r7, #4]
2845:..\src/interruptions.c ****             if(status == CYRET_STARTED || status == CYRET_SUCCESS) {
 10171              		.loc 1 2845 0
 10172 0070 7B68     		ldr	r3, [r7, #4]
 10173 0072 072B     		cmp	r3, #7
 10174 0074 02D0     		beq	.L697
 10175              		.loc 1 2845 0 is_stmt 0 discriminator 1
 10176 0076 7B68     		ldr	r3, [r7, #4]
 10177 0078 002B     		cmp	r3, #0
 10178 007a 32D1     		bne	.L703
 10179              	.L697:
2846:..\src/interruptions.c ****                 cycles_status = WAIT_QUERY;
 10180              		.loc 1 2846 0 is_stmt 1
 10181 007c 1E4B     		ldr	r3, .L705+8
 10182 007e 0222     		movs	r2, #2
 10183 0080 1A70     		strb	r2, [r3]
2847:..\src/interruptions.c ****                 can_write = FALSE;
 10184              		.loc 1 2847 0
 10185 0082 204B     		ldr	r3, .L705+20
 10186 0084 0022     		movs	r2, #0
 10187 0086 1A70     		strb	r2, [r3]
2848:..\src/interruptions.c ****             }
2849:..\src/interruptions.c ****             break;
 10188              		.loc 1 2849 0
 10189 0088 2BE0     		b	.L703
 10190              	.L694:
2850:..\src/interruptions.c ****             
2851:..\src/interruptions.c ****         case WAIT_QUERY:
2852:..\src/interruptions.c ****             status = EEPROM_Query();
 10191              		.loc 1 2852 0
 10192 008a FFF7FEFF 		bl	EEPROM_Query
 10193 008e 7860     		str	r0, [r7, #4]
2853:..\src/interruptions.c ****             if(status == CYRET_SUCCESS) {
 10194              		.loc 1 2853 0
 10195 0090 7B68     		ldr	r3, [r7, #4]
 10196 0092 002B     		cmp	r3, #0
 10197 0094 27D1     		bne	.L704
2854:..\src/interruptions.c ****                 if (row_number < row_end) {
 10198              		.loc 1 2854 0
 10199 0096 1A4B     		ldr	r3, .L705+16
 10200 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10201 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 10202 009c 9A42     		cmp	r2, r3
 10203 009e 0ED9     		bls	.L700
2855:..\src/interruptions.c ****                     m_addr = m_addr + EEPROM_BYTES_ROW;
 10204              		.loc 1 2855 0
 10205 00a0 164B     		ldr	r3, .L705+12
 10206 00a2 1B68     		ldr	r3, [r3]
 10207 00a4 1033     		adds	r3, r3, #16
 10208 00a6 154A     		ldr	r2, .L705+12
 10209 00a8 1360     		str	r3, [r2]
2856:..\src/interruptions.c ****                     row_number = row_number + 1;
 10210              		.loc 1 2856 0
 10211 00aa 154B     		ldr	r3, .L705+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 234


 10212 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10213 00ae 0133     		adds	r3, r3, #1
 10214 00b0 DAB2     		uxtb	r2, r3
 10215 00b2 134B     		ldr	r3, .L705+16
 10216 00b4 1A70     		strb	r2, [r3]
2857:..\src/interruptions.c ****                     cycles_status = WRITE_CYCLES;
 10217              		.loc 1 2857 0
 10218 00b6 104B     		ldr	r3, .L705+8
 10219 00b8 0122     		movs	r2, #1
 10220 00ba 1A70     		strb	r2, [r3]
2858:..\src/interruptions.c ****                 }
2859:..\src/interruptions.c ****                 else {
2860:..\src/interruptions.c ****                     cycles_status = WRITE_END;
2861:..\src/interruptions.c ****                 }
2862:..\src/interruptions.c ****             }
2863:..\src/interruptions.c ****             break;
 10221              		.loc 1 2863 0
 10222 00bc 13E0     		b	.L704
 10223              	.L700:
2860:..\src/interruptions.c ****                 }
 10224              		.loc 1 2860 0
 10225 00be 0E4B     		ldr	r3, .L705+8
 10226 00c0 0322     		movs	r2, #3
 10227 00c2 1A70     		strb	r2, [r3]
 10228              		.loc 1 2863 0
 10229 00c4 0FE0     		b	.L704
 10230              	.L695:
2864:..\src/interruptions.c ****            
2865:..\src/interruptions.c ****         case WRITE_END:
2866:..\src/interruptions.c ****             can_write = TRUE;            
 10231              		.loc 1 2866 0
 10232 00c6 0F4B     		ldr	r3, .L705+20
 10233 00c8 0122     		movs	r2, #1
 10234 00ca 1A70     		strb	r2, [r3]
2867:..\src/interruptions.c ****             cycles_status = NONE;
 10235              		.loc 1 2867 0
 10236 00cc 0A4B     		ldr	r3, .L705+8
 10237 00ce 0422     		movs	r2, #4
 10238 00d0 1A70     		strb	r2, [r3]
2868:..\src/interruptions.c ****             
2869:..\src/interruptions.c ****             // Restore data saved in c_mem structure
2870:..\src/interruptions.c ****             memcpy( addr_start, addr_start_c, EEPROM_BYTES_ROW*EEPROM_COUNTERS_ROWS );
 10239              		.loc 1 2870 0
 10240 00d2 7022     		movs	r2, #112
 10241 00d4 F968     		ldr	r1, [r7, #12]
 10242 00d6 3869     		ldr	r0, [r7, #16]
 10243 00d8 FFF7FEFF 		bl	memcpy
2871:..\src/interruptions.c ****             break;
 10244              		.loc 1 2871 0
 10245 00dc 04E0     		b	.L690
 10246              	.L702:
2872:..\src/interruptions.c ****             
2873:..\src/interruptions.c ****         case NONE:
2874:..\src/interruptions.c ****             break;
 10247              		.loc 1 2874 0
 10248 00de 00BF     		nop
 10249 00e0 02E0     		b	.L701
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 235


 10250              	.L703:
2849:..\src/interruptions.c ****             
 10251              		.loc 1 2849 0
 10252 00e2 00BF     		nop
 10253 00e4 00E0     		b	.L701
 10254              	.L704:
2863:..\src/interruptions.c ****            
 10255              		.loc 1 2863 0
 10256 00e6 00BF     		nop
 10257              	.L690:
 10258              	.L701:
2875:..\src/interruptions.c ****     }
2876:..\src/interruptions.c ****     
2877:..\src/interruptions.c **** }
 10259              		.loc 1 2877 0
 10260 00e8 00BF     		nop
 10261 00ea 1837     		adds	r7, r7, #24
 10262              		.cfi_def_cfa_offset 8
 10263 00ec BD46     		mov	sp, r7
 10264              		.cfi_def_cfa_register 13
 10265              		@ sp needed
 10266 00ee 80BD     		pop	{r7, pc}
 10267              	.L706:
 10268              		.align	2
 10269              	.L705:
 10270 00f0 10000000 		.word	g_mem+16
 10271 00f4 10000000 		.word	c_mem+16
 10272 00f8 00000000 		.word	cycles_status
 10273 00fc C4010000 		.word	m_addr.10805
 10274 0100 C8010000 		.word	row_number.10800
 10275 0104 00000000 		.word	can_write
 10276              		.cfi_endproc
 10277              	.LFE78:
 10278              		.size	save_cycles_eeprom, .-save_cycles_eeprom
 10279              		.bss
 10280              	state.10464:
 10281 0000 00       		.space	1
 10282 0001 000000   		.align	2
 10283              	rx_queue.10468:
 10284 0004 000000   		.space	3
 10285              	data_packet_length.10466:
 10286 0007 00       		.space	1
 10287              	data_packet_index.10465:
 10288 0008 00       		.space	1
 10289 0009 000000   		.align	2
 10290              	data_packet_buffer.10467:
 10291 000c 00000000 		.space	128
 10291      00000000 
 10291      00000000 
 10291      00000000 
 10291      00000000 
 10292              		.data
 10293              		.align	1
 10294              		.type	counter_calibration.10484, %object
 10295              		.size	counter_calibration.10484, 2
 10296              	counter_calibration.10484:
 10297 0000 0100     		.short	1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 236


 10298              		.align	1
 10299              		.type	counter_tension_func.10485, %object
 10300              		.size	counter_tension_func.10485, 2
 10301              	counter_tension_func.10485:
 10302 0002 0100     		.short	1
 10303              		.bss
 10304              		.align	2
 10305              	current_emg.10510:
 10306 008c 0000     		.space	2
 10307              	fsm_state.10547:
 10308 008e 00       		.space	1
 10309 008f 00       		.align	2
 10310              	pos_error_sum.10574:
 10311 0090 00000000 		.space	4
 10312              		.align	2
 10313              	prev_pos_err.10576:
 10314 0094 00000000 		.space	4
 10315              	motor_dir.10579:
 10316 0098 00       		.space	1
 10317 0099 000000   		.align	2
 10318              	curr_error_sum.10575:
 10319 009c 00000000 		.space	4
 10320              		.align	2
 10321              	prev_curr_err.10577:
 10322 00a0 00000000 		.space	4
 10323              		.align	2
 10324              	prev_pwm.10578:
 10325 00a4 00000000 		.space	4
 10326              		.align	2
 10327              	position_counter.10580:
 10328 00a8 00000000 		.space	4
 10329              		.align	2
 10330              	pos_error_sum.10607:
 10331 00ac 00000000 		.space	8
 10331      00000000 
 10332              		.align	2
 10333              	prev_pos_err.10609:
 10334 00b4 00000000 		.space	8
 10334      00000000 
 10335              		.align	2
 10336              	motor_dir.10612:
 10337 00bc 0000     		.space	2
 10338 00be 0000     		.align	2
 10339              	curr_error_sum.10608:
 10340 00c0 00000000 		.space	8
 10340      00000000 
 10341              		.align	2
 10342              	prev_curr_err.10610:
 10343 00c8 00000000 		.space	8
 10343      00000000 
 10344              		.align	2
 10345              	prev_pwm.10611:
 10346 00d0 00000000 		.space	8
 10346      00000000 
 10347              		.align	2
 10348              	position_counter.10613:
 10349 00d8 00000000 		.space	8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 237


 10349      00000000 
 10350              		.align	2
 10351              	last_value_encoder.10636:
 10352 00e0 00000000 		.space	24
 10352      00000000 
 10352      00000000 
 10352      00000000 
 10352      00000000 
 10353              		.align	2
 10354              	comp_value_encoder.10637:
 10355 00f8 00000000 		.space	24
 10355      00000000 
 10355      00000000 
 10355      00000000 
 10355      00000000 
 10356              		.data
 10357              		.align	2
 10358              		.type	only_first_time.10639, %object
 10359              		.size	only_first_time.10639, 2
 10360              	only_first_time.10639:
 10361 0004 01       		.byte	1
 10362 0005 01       		.byte	1
 10363              		.bss
 10364              		.align	2
 10365              	error.10638:
 10366 0110 00000000 		.space	6
 10366      0000
 10367 0116 0000     		.align	2
 10368              	v_value.10643:
 10369 0118 00000000 		.space	24
 10369      00000000 
 10369      00000000 
 10369      00000000 
 10369      00000000 
 10370              		.align	2
 10371              	vv_value.10644:
 10372 0130 00000000 		.space	24
 10372      00000000 
 10372      00000000 
 10372      00000000 
 10372      00000000 
 10373              		.align	2
 10374              	vvv_value.10645:
 10375 0148 00000000 		.space	24
 10375      00000000 
 10375      00000000 
 10375      00000000 
 10375      00000000 
 10376              		.align	2
 10377              	one_time_execute.10641:
 10378 0160 0000     		.space	2
 10379 0162 0000     		.align	2
 10380              	safe_startup_motor_activation.10640:
 10381 0164 0000     		.space	2
 10382 0166 0000     		.align	2
 10383              	count_startup_motor.10642:
 10384 0168 00000000 		.space	8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 238


 10384      00000000 
 10385              		.data
 10386 0006 0000     		.align	2
 10387              		.type	detect_power_cycle_prev.10669, %object
 10388              		.size	detect_power_cycle_prev.10669, 4
 10389              	detect_power_cycle_prev.10669:
 10390 0008 FDFFFFFF 		.word	-3
 10391              		.type	first_tension_valid.10668, %object
 10392              		.size	first_tension_valid.10668, 1
 10393              	first_tension_valid.10668:
 10394 000c 01       		.byte	1
 10395              		.bss
 10396              		.align	1
 10397              	count.10670:
 10398 0170 0000     		.space	2
 10399              	idx.10672:
 10400 0172 00       		.space	1
 10401 0173 00       		.align	2
 10402              	v_count.10671:
 10403 0174 00000000 		.space	4
 10404              		.align	1
 10405              	emg_counter_1.10662:
 10406 0178 0000     		.space	2
 10407              		.align	1
 10408              	emg_counter_2.10663:
 10409 017a 0000     		.space	2
 10410              		.align	2
 10411              	UD_mean_value.10666:
 10412 017c 00000000 		.space	4
 10413              		.align	1
 10414              	UD_counter.10664:
 10415 0180 0000     		.space	2
 10416 0182 0000     		.align	2
 10417              	LR_mean_value.10667:
 10418 0184 00000000 		.space	4
 10419              		.align	1
 10420              	LR_counter.10665:
 10421 0188 0000     		.space	2
 10422              	pos_cycle_status.10742:
 10423 018a 00       		.space	1
 10424 018b 00       		.align	2
 10425              	thr_pos.10749:
 10426 018c 00000000 		.space	4
 10427              		.align	2
 10428              	max_pos.10750:
 10429 0190 00000000 		.space	4
 10430              		.data
 10431 000d 000000   		.align	2
 10432              		.type	bin_threshold.10747, %object
 10433              		.size	bin_threshold.10747, 4
 10434              	bin_threshold.10747:
 10435 0010 FA000000 		.word	250
 10436              		.bss
 10437              		.align	2
 10438              	emg_cycle_status.10743:
 10439 0194 0000     		.space	2
 10440 0196 0000     		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 239


 10441              	motion_status.10744:
 10442 0198 0000     		.space	2
 10443 019a 0000     		.align	2
 10444              	start_emg_pos.10764:
 10445 019c 00000000 		.space	8
 10445      00000000 
 10446              		.align	2
 10447              	emg_excess_status.10745:
 10448 01a4 0000     		.space	2
 10449              		.data
 10450              		.align	2
 10451              		.type	exc_act_thr.10748, %object
 10452              		.size	exc_act_thr.10748, 4
 10453              	exc_act_thr.10748:
 10454 0014 D4030000 		.word	980
 10455              		.bss
 10456 01a6 0000     		.align	2
 10457              	timer_exc_s.10762:
 10458 01a8 00000000 		.space	8
 10458      00000000 
 10459              		.align	2
 10460              	timer_exc_e.10763:
 10461 01b0 00000000 		.space	8
 10461      00000000 
 10462              	rest_cycle_status.10746:
 10463 01b8 00       		.space	1
 10464 01b9 000000   		.align	2
 10465              	timer_value_s.10760:
 10466 01bc 00000000 		.space	4
 10467              		.align	2
 10468              	timer_value_e.10761:
 10469 01c0 00000000 		.space	4
 10470              		.align	2
 10471              	m_addr.10805:
 10472 01c4 00000000 		.space	4
 10473              	row_number.10800:
 10474 01c8 00       		.space	1
 10475              		.text
 10476              	.Letext0:
 10477              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10478              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 10479              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 10480              		.file 5 "..\\src\\commands.h"
 10481              		.file 6 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 10482              		.file 7 "..\\src\\globals.h"
 10483              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 10484              		.section	.debug_info,"",%progbits
 10485              	.Ldebug_info0:
 10486 0000 DD1B0000 		.4byte	0x1bdd
 10487 0004 0400     		.2byte	0x4
 10488 0006 00000000 		.4byte	.Ldebug_abbrev0
 10489 000a 04       		.byte	0x4
 10490 000b 01       		.uleb128 0x1
 10491 000c BC080000 		.4byte	.LASF355
 10492 0010 0C       		.byte	0xc
 10493 0011 B8110000 		.4byte	.LASF356
 10494 0015 BF0A0000 		.4byte	.LASF357
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 240


 10495 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 10496 001d 00000000 		.4byte	0
 10497 0021 00000000 		.4byte	.Ldebug_line0
 10498 0025 02       		.uleb128 0x2
 10499 0026 01       		.byte	0x1
 10500 0027 06       		.byte	0x6
 10501 0028 F9030000 		.4byte	.LASF0
 10502 002c 02       		.uleb128 0x2
 10503 002d 01       		.byte	0x1
 10504 002e 08       		.byte	0x8
 10505 002f 76040000 		.4byte	.LASF1
 10506 0033 02       		.uleb128 0x2
 10507 0034 02       		.byte	0x2
 10508 0035 05       		.byte	0x5
 10509 0036 890F0000 		.4byte	.LASF2
 10510 003a 02       		.uleb128 0x2
 10511 003b 02       		.byte	0x2
 10512 003c 07       		.byte	0x7
 10513 003d 5C110000 		.4byte	.LASF3
 10514 0041 03       		.uleb128 0x3
 10515 0042 4E120000 		.4byte	.LASF9
 10516 0046 02       		.byte	0x2
 10517 0047 3F       		.byte	0x3f
 10518 0048 4C000000 		.4byte	0x4c
 10519 004c 02       		.uleb128 0x2
 10520 004d 04       		.byte	0x4
 10521 004e 05       		.byte	0x5
 10522 004f D6020000 		.4byte	.LASF4
 10523 0053 02       		.uleb128 0x2
 10524 0054 04       		.byte	0x4
 10525 0055 07       		.byte	0x7
 10526 0056 A4070000 		.4byte	.LASF5
 10527 005a 02       		.uleb128 0x2
 10528 005b 08       		.byte	0x8
 10529 005c 05       		.byte	0x5
 10530 005d 82090000 		.4byte	.LASF6
 10531 0061 02       		.uleb128 0x2
 10532 0062 08       		.byte	0x8
 10533 0063 07       		.byte	0x7
 10534 0064 130D0000 		.4byte	.LASF7
 10535 0068 04       		.uleb128 0x4
 10536 0069 04       		.byte	0x4
 10537 006a 05       		.byte	0x5
 10538 006b 696E7400 		.ascii	"int\000"
 10539 006f 02       		.uleb128 0x2
 10540 0070 04       		.byte	0x4
 10541 0071 07       		.byte	0x7
 10542 0072 AA0A0000 		.4byte	.LASF8
 10543 0076 03       		.uleb128 0x3
 10544 0077 8B000000 		.4byte	.LASF10
 10545 007b 03       		.byte	0x3
 10546 007c 2C       		.byte	0x2c
 10547 007d 41000000 		.4byte	0x41
 10548 0081 05       		.uleb128 0x5
 10549 0082 630F0000 		.4byte	.LASF11
 10550 0086 04       		.byte	0x4
 10551 0087 E401     		.2byte	0x1e4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 241


 10552 0089 2C000000 		.4byte	0x2c
 10553 008d 05       		.uleb128 0x5
 10554 008e AB120000 		.4byte	.LASF12
 10555 0092 04       		.byte	0x4
 10556 0093 E501     		.2byte	0x1e5
 10557 0095 3A000000 		.4byte	0x3a
 10558 0099 05       		.uleb128 0x5
 10559 009a BF000000 		.4byte	.LASF13
 10560 009e 04       		.byte	0x4
 10561 009f E601     		.2byte	0x1e6
 10562 00a1 53000000 		.4byte	0x53
 10563 00a5 05       		.uleb128 0x5
 10564 00a6 A3010000 		.4byte	.LASF14
 10565 00aa 04       		.byte	0x4
 10566 00ab E701     		.2byte	0x1e7
 10567 00ad 25000000 		.4byte	0x25
 10568 00b1 05       		.uleb128 0x5
 10569 00b2 48100000 		.4byte	.LASF15
 10570 00b6 04       		.byte	0x4
 10571 00b7 E801     		.2byte	0x1e8
 10572 00b9 33000000 		.4byte	0x33
 10573 00bd 05       		.uleb128 0x5
 10574 00be DB110000 		.4byte	.LASF16
 10575 00c2 04       		.byte	0x4
 10576 00c3 E901     		.2byte	0x1e9
 10577 00c5 4C000000 		.4byte	0x4c
 10578 00c9 05       		.uleb128 0x5
 10579 00ca A1030000 		.4byte	.LASF17
 10580 00ce 04       		.byte	0x4
 10581 00cf EA01     		.2byte	0x1ea
 10582 00d1 D5000000 		.4byte	0xd5
 10583 00d5 02       		.uleb128 0x2
 10584 00d6 04       		.byte	0x4
 10585 00d7 04       		.byte	0x4
 10586 00d8 6A0A0000 		.4byte	.LASF18
 10587 00dc 02       		.uleb128 0x2
 10588 00dd 08       		.byte	0x8
 10589 00de 04       		.byte	0x4
 10590 00df C5090000 		.4byte	.LASF19
 10591 00e3 02       		.uleb128 0x2
 10592 00e4 01       		.byte	0x1
 10593 00e5 08       		.byte	0x8
 10594 00e6 08050000 		.4byte	.LASF20
 10595 00ea 05       		.uleb128 0x5
 10596 00eb 740B0000 		.4byte	.LASF21
 10597 00ef 04       		.byte	0x4
 10598 00f0 8602     		.2byte	0x286
 10599 00f2 53000000 		.4byte	0x53
 10600 00f6 05       		.uleb128 0x5
 10601 00f7 DF0D0000 		.4byte	.LASF22
 10602 00fb 04       		.byte	0x4
 10603 00fc 8E02     		.2byte	0x28e
 10604 00fe 02010000 		.4byte	0x102
 10605 0102 06       		.uleb128 0x6
 10606 0103 81000000 		.4byte	0x81
 10607 0107 02       		.uleb128 0x2
 10608 0108 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 242


 10609 0109 04       		.byte	0x4
 10610 010a 260C0000 		.4byte	.LASF23
 10611 010e 02       		.uleb128 0x2
 10612 010f 04       		.byte	0x4
 10613 0110 07       		.byte	0x7
 10614 0111 10000000 		.4byte	.LASF24
 10615 0115 07       		.uleb128 0x7
 10616 0116 E3000000 		.4byte	0xe3
 10617 011a 25010000 		.4byte	0x125
 10618 011e 08       		.uleb128 0x8
 10619 011f 0E010000 		.4byte	0x10e
 10620 0123 07       		.byte	0x7
 10621 0124 00       		.byte	0
 10622 0125 09       		.uleb128 0x9
 10623 0126 88120000 		.4byte	.LASF33
 10624 012a 01       		.byte	0x1
 10625 012b 2C000000 		.4byte	0x2c
 10626 012f 05       		.byte	0x5
 10627 0130 8F       		.byte	0x8f
 10628 0131 66010000 		.4byte	0x166
 10629 0135 0A       		.uleb128 0xa
 10630 0136 17070000 		.4byte	.LASF25
 10631 013a 00       		.byte	0
 10632 013b 0A       		.uleb128 0xa
 10633 013c 7D0B0000 		.4byte	.LASF26
 10634 0140 01       		.byte	0x1
 10635 0141 0A       		.uleb128 0xa
 10636 0142 2E020000 		.4byte	.LASF27
 10637 0146 02       		.byte	0x2
 10638 0147 0A       		.uleb128 0xa
 10639 0148 71010000 		.4byte	.LASF28
 10640 014c 03       		.byte	0x3
 10641 014d 0A       		.uleb128 0xa
 10642 014e 2B010000 		.4byte	.LASF29
 10643 0152 04       		.byte	0x4
 10644 0153 0A       		.uleb128 0xa
 10645 0154 53000000 		.4byte	.LASF30
 10646 0158 05       		.byte	0x5
 10647 0159 0A       		.uleb128 0xa
 10648 015a E6070000 		.4byte	.LASF31
 10649 015e 06       		.byte	0x6
 10650 015f 0A       		.uleb128 0xa
 10651 0160 030F0000 		.4byte	.LASF32
 10652 0164 07       		.byte	0x7
 10653 0165 00       		.byte	0
 10654 0166 09       		.uleb128 0x9
 10655 0167 90090000 		.4byte	.LASF34
 10656 016b 01       		.byte	0x1
 10657 016c 2C000000 		.4byte	0x2c
 10658 0170 05       		.byte	0x5
 10659 0171 A3       		.byte	0xa3
 10660 0172 8F010000 		.4byte	0x18f
 10661 0176 0A       		.uleb128 0xa
 10662 0177 40120000 		.4byte	.LASF35
 10663 017b 00       		.byte	0
 10664 017c 0A       		.uleb128 0xa
 10665 017d 81080000 		.4byte	.LASF36
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 243


 10666 0181 01       		.byte	0x1
 10667 0182 0A       		.uleb128 0xa
 10668 0183 160C0000 		.4byte	.LASF37
 10669 0187 02       		.byte	0x2
 10670 0188 0A       		.uleb128 0xa
 10671 0189 87070000 		.4byte	.LASF38
 10672 018d 03       		.byte	0x3
 10673 018e 00       		.byte	0
 10674 018f 03       		.uleb128 0x3
 10675 0190 0B120000 		.4byte	.LASF39
 10676 0194 06       		.byte	0x6
 10677 0195 7E       		.byte	0x7e
 10678 0196 9A010000 		.4byte	0x19a
 10679 019a 0B       		.uleb128 0xb
 10680 019b 0B120000 		.4byte	.LASF39
 10681 019f 0C       		.uleb128 0xc
 10682 01a0 04       		.byte	0x4
 10683 01a1 8F010000 		.4byte	0x18f
 10684 01a5 0D       		.uleb128 0xd
 10685 01a6 4A090000 		.4byte	.LASF42
 10686 01aa 10       		.byte	0x10
 10687 01ab 07       		.byte	0x7
 10688 01ac E5       		.byte	0xe5
 10689 01ad E2010000 		.4byte	0x1e2
 10690 01b1 0E       		.uleb128 0xe
 10691 01b2 706F7300 		.ascii	"pos\000"
 10692 01b6 07       		.byte	0x7
 10693 01b7 E6       		.byte	0xe6
 10694 01b8 BD000000 		.4byte	0xbd
 10695 01bc 00       		.byte	0
 10696 01bd 0F       		.uleb128 0xf
 10697 01be 66080000 		.4byte	.LASF40
 10698 01c2 07       		.byte	0x7
 10699 01c3 E7       		.byte	0xe7
 10700 01c4 BD000000 		.4byte	0xbd
 10701 01c8 04       		.byte	0x4
 10702 01c9 0E       		.uleb128 0xe
 10703 01ca 70776D00 		.ascii	"pwm\000"
 10704 01ce 07       		.byte	0x7
 10705 01cf E8       		.byte	0xe8
 10706 01d0 BD000000 		.4byte	0xbd
 10707 01d4 08       		.byte	0x8
 10708 01d5 0F       		.uleb128 0xf
 10709 01d6 760D0000 		.4byte	.LASF41
 10710 01da 07       		.byte	0x7
 10711 01db E9       		.byte	0xe9
 10712 01dc 81000000 		.4byte	0x81
 10713 01e0 0C       		.byte	0xc
 10714 01e1 00       		.byte	0
 10715 01e2 0D       		.uleb128 0xd
 10716 01e3 CA0E0000 		.4byte	.LASF43
 10717 01e7 34       		.byte	0x34
 10718 01e8 07       		.byte	0x7
 10719 01e9 F0       		.byte	0xf0
 10720 01ea 43020000 		.4byte	0x243
 10721 01ee 0E       		.uleb128 0xe
 10722 01ef 706F7300 		.ascii	"pos\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 244


 10723 01f3 07       		.byte	0x7
 10724 01f4 F1       		.byte	0xf1
 10725 01f5 43020000 		.4byte	0x243
 10726 01f9 00       		.byte	0
 10727 01fa 0F       		.uleb128 0xf
 10728 01fb 66080000 		.4byte	.LASF40
 10729 01ff 07       		.byte	0x7
 10730 0200 F2       		.byte	0xf2
 10731 0201 BD000000 		.4byte	0xbd
 10732 0205 0C       		.byte	0xc
 10733 0206 0F       		.uleb128 0xf
 10734 0207 8B100000 		.4byte	.LASF44
 10735 020b 07       		.byte	0x7
 10736 020c F3       		.byte	0xf3
 10737 020d BD000000 		.4byte	0xbd
 10738 0211 10       		.byte	0x10
 10739 0212 0F       		.uleb128 0xf
 10740 0213 DC070000 		.4byte	.LASF45
 10741 0217 07       		.byte	0x7
 10742 0218 F4       		.byte	0xf4
 10743 0219 BD000000 		.4byte	0xbd
 10744 021d 14       		.byte	0x14
 10745 021e 0E       		.uleb128 0xe
 10746 021f 726F7400 		.ascii	"rot\000"
 10747 0223 07       		.byte	0x7
 10748 0224 F5       		.byte	0xf5
 10749 0225 53020000 		.4byte	0x253
 10750 0229 18       		.byte	0x18
 10751 022a 0E       		.uleb128 0xe
 10752 022b 76656C00 		.ascii	"vel\000"
 10753 022f 07       		.byte	0x7
 10754 0230 F6       		.byte	0xf6
 10755 0231 43020000 		.4byte	0x243
 10756 0235 1C       		.byte	0x1c
 10757 0236 0E       		.uleb128 0xe
 10758 0237 61636300 		.ascii	"acc\000"
 10759 023b 07       		.byte	0x7
 10760 023c F7       		.byte	0xf7
 10761 023d 43020000 		.4byte	0x243
 10762 0241 28       		.byte	0x28
 10763 0242 00       		.byte	0
 10764 0243 07       		.uleb128 0x7
 10765 0244 BD000000 		.4byte	0xbd
 10766 0248 53020000 		.4byte	0x253
 10767 024c 08       		.uleb128 0x8
 10768 024d 0E010000 		.4byte	0x10e
 10769 0251 02       		.byte	0x2
 10770 0252 00       		.byte	0
 10771 0253 07       		.uleb128 0x7
 10772 0254 A5000000 		.4byte	0xa5
 10773 0258 63020000 		.4byte	0x263
 10774 025c 08       		.uleb128 0x8
 10775 025d 0E010000 		.4byte	0x10e
 10776 0261 02       		.byte	0x2
 10777 0262 00       		.byte	0
 10778 0263 0D       		.uleb128 0xd
 10779 0264 7F0A0000 		.4byte	.LASF46
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 245


 10780 0268 28       		.byte	0x28
 10781 0269 07       		.byte	0x7
 10782 026a FA       		.byte	0xfa
 10783 026b 94020000 		.4byte	0x294
 10784 026f 0E       		.uleb128 0xe
 10785 0270 656D6700 		.ascii	"emg\000"
 10786 0274 07       		.byte	0x7
 10787 0275 FB       		.byte	0xfb
 10788 0276 94020000 		.4byte	0x294
 10789 027a 00       		.byte	0
 10790 027b 0F       		.uleb128 0xf
 10791 027c C70B0000 		.4byte	.LASF47
 10792 0280 07       		.byte	0x7
 10793 0281 FC       		.byte	0xfc
 10794 0282 A4020000 		.4byte	0x2a4
 10795 0286 08       		.byte	0x8
 10796 0287 0F       		.uleb128 0xf
 10797 0288 A80F0000 		.4byte	.LASF48
 10798 028c 07       		.byte	0x7
 10799 028d FD       		.byte	0xfd
 10800 028e 94020000 		.4byte	0x294
 10801 0292 20       		.byte	0x20
 10802 0293 00       		.byte	0
 10803 0294 07       		.uleb128 0x7
 10804 0295 BD000000 		.4byte	0xbd
 10805 0299 A4020000 		.4byte	0x2a4
 10806 029d 08       		.uleb128 0x8
 10807 029e 0E010000 		.4byte	0x10e
 10808 02a2 01       		.byte	0x1
 10809 02a3 00       		.byte	0
 10810 02a4 07       		.uleb128 0x7
 10811 02a5 BD000000 		.4byte	0xbd
 10812 02a9 B4020000 		.4byte	0x2b4
 10813 02ad 08       		.uleb128 0x8
 10814 02ae 0E010000 		.4byte	0x10e
 10815 02b2 05       		.byte	0x5
 10816 02b3 00       		.byte	0
 10817 02b4 10       		.uleb128 0x10
 10818 02b5 A9000000 		.4byte	.LASF49
 10819 02b9 86       		.byte	0x86
 10820 02ba 07       		.byte	0x7
 10821 02bb 0801     		.2byte	0x108
 10822 02bd F6020000 		.4byte	0x2f6
 10823 02c1 11       		.uleb128 0x11
 10824 02c2 21060000 		.4byte	.LASF50
 10825 02c6 07       		.byte	0x7
 10826 02c7 0901     		.2byte	0x109
 10827 02c9 F6020000 		.4byte	0x2f6
 10828 02cd 00       		.byte	0
 10829 02ce 11       		.uleb128 0x11
 10830 02cf 590D0000 		.4byte	.LASF51
 10831 02d3 07       		.byte	0x7
 10832 02d4 0A01     		.2byte	0x10a
 10833 02d6 B1000000 		.4byte	0xb1
 10834 02da 80       		.byte	0x80
 10835 02db 12       		.uleb128 0x12
 10836 02dc 696E6400 		.ascii	"ind\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 246


 10837 02e0 07       		.byte	0x7
 10838 02e1 0B01     		.2byte	0x10b
 10839 02e3 B1000000 		.4byte	0xb1
 10840 02e7 82       		.byte	0x82
 10841 02e8 11       		.uleb128 0x11
 10842 02e9 01020000 		.4byte	.LASF52
 10843 02ed 07       		.byte	0x7
 10844 02ee 0C01     		.2byte	0x10c
 10845 02f0 81000000 		.4byte	0x81
 10846 02f4 84       		.byte	0x84
 10847 02f5 00       		.byte	0
 10848 02f6 07       		.uleb128 0x7
 10849 02f7 81000000 		.4byte	0x81
 10850 02fb 06030000 		.4byte	0x306
 10851 02ff 08       		.uleb128 0x8
 10852 0300 0E010000 		.4byte	0x10e
 10853 0304 7F       		.byte	0x7f
 10854 0305 00       		.byte	0
 10855 0306 10       		.uleb128 0x10
 10856 0307 7F030000 		.4byte	.LASF53
 10857 030b 70       		.byte	0x70
 10858 030c 07       		.byte	0x7
 10859 030d 1501     		.2byte	0x115
 10860 030f A3030000 		.4byte	0x3a3
 10861 0313 11       		.uleb128 0x11
 10862 0314 00000000 		.4byte	.LASF54
 10863 0318 07       		.byte	0x7
 10864 0319 1601     		.2byte	0x116
 10865 031b A3030000 		.4byte	0x3a3
 10866 031f 00       		.byte	0
 10867 0320 11       		.uleb128 0x11
 10868 0321 BE010000 		.4byte	.LASF55
 10869 0325 07       		.byte	0x7
 10870 0326 1701     		.2byte	0x117
 10871 0328 B3030000 		.4byte	0x3b3
 10872 032c 08       		.byte	0x8
 10873 032d 11       		.uleb128 0x11
 10874 032e 090C0000 		.4byte	.LASF56
 10875 0332 07       		.byte	0x7
 10876 0333 1801     		.2byte	0x118
 10877 0335 C3030000 		.4byte	0x3c3
 10878 0339 30       		.byte	0x30
 10879 033a 11       		.uleb128 0x11
 10880 033b 55010000 		.4byte	.LASF57
 10881 033f 07       		.byte	0x7
 10882 0340 1901     		.2byte	0x119
 10883 0342 99000000 		.4byte	0x99
 10884 0346 40       		.byte	0x40
 10885 0347 11       		.uleb128 0x11
 10886 0348 58120000 		.4byte	.LASF58
 10887 034c 07       		.byte	0x7
 10888 034d 1A01     		.2byte	0x11a
 10889 034f 99000000 		.4byte	0x99
 10890 0353 44       		.byte	0x44
 10891 0354 11       		.uleb128 0x11
 10892 0355 B1000000 		.4byte	.LASF59
 10893 0359 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 247


 10894 035a 1B01     		.2byte	0x11b
 10895 035c 99000000 		.4byte	0x99
 10896 0360 48       		.byte	0x48
 10897 0361 11       		.uleb128 0x11
 10898 0362 FA070000 		.4byte	.LASF60
 10899 0366 07       		.byte	0x7
 10900 0367 1C01     		.2byte	0x11c
 10901 0369 99000000 		.4byte	0x99
 10902 036d 4C       		.byte	0x4c
 10903 036e 11       		.uleb128 0x11
 10904 036f 19000000 		.4byte	.LASF61
 10905 0373 07       		.byte	0x7
 10906 0374 1D01     		.2byte	0x11d
 10907 0376 99000000 		.4byte	0x99
 10908 037a 50       		.byte	0x50
 10909 037b 11       		.uleb128 0x11
 10910 037c 68020000 		.4byte	.LASF62
 10911 0380 07       		.byte	0x7
 10912 0381 1E01     		.2byte	0x11e
 10913 0383 A3030000 		.4byte	0x3a3
 10914 0387 54       		.byte	0x54
 10915 0388 11       		.uleb128 0x11
 10916 0389 5F0C0000 		.4byte	.LASF63
 10917 038d 07       		.byte	0x7
 10918 038e 1F01     		.2byte	0x11f
 10919 0390 A3030000 		.4byte	0x3a3
 10920 0394 5C       		.byte	0x5c
 10921 0395 11       		.uleb128 0x11
 10922 0396 4C030000 		.4byte	.LASF64
 10923 039a 07       		.byte	0x7
 10924 039b 2001     		.2byte	0x120
 10925 039d D3030000 		.4byte	0x3d3
 10926 03a1 64       		.byte	0x64
 10927 03a2 00       		.byte	0
 10928 03a3 07       		.uleb128 0x7
 10929 03a4 99000000 		.4byte	0x99
 10930 03a8 B3030000 		.4byte	0x3b3
 10931 03ac 08       		.uleb128 0x8
 10932 03ad 0E010000 		.4byte	0x10e
 10933 03b1 01       		.byte	0x1
 10934 03b2 00       		.byte	0
 10935 03b3 07       		.uleb128 0x7
 10936 03b4 99000000 		.4byte	0x99
 10937 03b8 C3030000 		.4byte	0x3c3
 10938 03bc 08       		.uleb128 0x8
 10939 03bd 0E010000 		.4byte	0x10e
 10940 03c1 09       		.byte	0x9
 10941 03c2 00       		.byte	0
 10942 03c3 07       		.uleb128 0x7
 10943 03c4 99000000 		.4byte	0x99
 10944 03c8 D3030000 		.4byte	0x3d3
 10945 03cc 08       		.uleb128 0x8
 10946 03cd 0E010000 		.4byte	0x10e
 10947 03d1 03       		.byte	0x3
 10948 03d2 00       		.byte	0
 10949 03d3 07       		.uleb128 0x7
 10950 03d4 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 248


 10951 03d8 E3030000 		.4byte	0x3e3
 10952 03dc 08       		.uleb128 0x8
 10953 03dd 0E010000 		.4byte	0x10e
 10954 03e1 0B       		.byte	0xb
 10955 03e2 00       		.byte	0
 10956 03e3 10       		.uleb128 0x10
 10957 03e4 24020000 		.4byte	.LASF65
 10958 03e8 10       		.byte	0x10
 10959 03e9 07       		.byte	0x7
 10960 03ea 2701     		.2byte	0x127
 10961 03ec 72040000 		.4byte	0x472
 10962 03f0 12       		.uleb128 0x12
 10963 03f1 696400   		.ascii	"id\000"
 10964 03f4 07       		.byte	0x7
 10965 03f5 2801     		.2byte	0x128
 10966 03f7 81000000 		.4byte	0x81
 10967 03fb 00       		.byte	0
 10968 03fc 11       		.uleb128 0x11
 10969 03fd C30F0000 		.4byte	.LASF66
 10970 0401 07       		.byte	0x7
 10971 0402 2901     		.2byte	0x129
 10972 0404 72040000 		.4byte	0x472
 10973 0408 01       		.byte	0x1
 10974 0409 11       		.uleb128 0x11
 10975 040a FF0F0000 		.4byte	.LASF67
 10976 040e 07       		.byte	0x7
 10977 040f 2A01     		.2byte	0x12a
 10978 0411 72040000 		.4byte	0x472
 10979 0415 04       		.byte	0x4
 10980 0416 11       		.uleb128 0x11
 10981 0417 D0040000 		.4byte	.LASF68
 10982 041b 07       		.byte	0x7
 10983 041c 2B01     		.2byte	0x12b
 10984 041e 81000000 		.4byte	0x81
 10985 0422 07       		.byte	0x7
 10986 0423 11       		.uleb128 0x11
 10987 0424 08030000 		.4byte	.LASF69
 10988 0428 07       		.byte	0x7
 10989 0429 2C01     		.2byte	0x12c
 10990 042b 81000000 		.4byte	0x81
 10991 042f 08       		.byte	0x8
 10992 0430 11       		.uleb128 0x11
 10993 0431 4A020000 		.4byte	.LASF70
 10994 0435 07       		.byte	0x7
 10995 0436 2D01     		.2byte	0x12d
 10996 0438 81000000 		.4byte	0x81
 10997 043c 09       		.byte	0x9
 10998 043d 11       		.uleb128 0x11
 10999 043e 30110000 		.4byte	.LASF71
 11000 0442 07       		.byte	0x7
 11001 0443 2E01     		.2byte	0x12e
 11002 0445 81000000 		.4byte	0x81
 11003 0449 0A       		.byte	0xa
 11004 044a 11       		.uleb128 0x11
 11005 044b C4100000 		.4byte	.LASF72
 11006 044f 07       		.byte	0x7
 11007 0450 2F01     		.2byte	0x12f
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 249


 11008 0452 81000000 		.4byte	0x81
 11009 0456 0B       		.byte	0xb
 11010 0457 11       		.uleb128 0x11
 11011 0458 790E0000 		.4byte	.LASF73
 11012 045c 07       		.byte	0x7
 11013 045d 3001     		.2byte	0x130
 11014 045f 81000000 		.4byte	0x81
 11015 0463 0C       		.byte	0xc
 11016 0464 11       		.uleb128 0x11
 11017 0465 4C030000 		.4byte	.LASF64
 11018 0469 07       		.byte	0x7
 11019 046a 3101     		.2byte	0x131
 11020 046c 72040000 		.4byte	0x472
 11021 0470 0D       		.byte	0xd
 11022 0471 00       		.byte	0
 11023 0472 07       		.uleb128 0x7
 11024 0473 81000000 		.4byte	0x81
 11025 0477 82040000 		.4byte	0x482
 11026 047b 08       		.uleb128 0x8
 11027 047c 0E010000 		.4byte	0x10e
 11028 0480 02       		.byte	0x2
 11029 0481 00       		.byte	0
 11030 0482 10       		.uleb128 0x10
 11031 0483 F6110000 		.4byte	.LASF74
 11032 0487 74       		.byte	0x74
 11033 0488 07       		.byte	0x7
 11034 0489 3801     		.2byte	0x138
 11035 048b 09060000 		.4byte	0x609
 11036 048f 12       		.uleb128 0x12
 11037 0490 6B5F7000 		.ascii	"k_p\000"
 11038 0494 07       		.byte	0x7
 11039 0495 3901     		.2byte	0x139
 11040 0497 BD000000 		.4byte	0xbd
 11041 049b 00       		.byte	0
 11042 049c 12       		.uleb128 0x12
 11043 049d 6B5F6900 		.ascii	"k_i\000"
 11044 04a1 07       		.byte	0x7
 11045 04a2 3A01     		.2byte	0x13a
 11046 04a4 BD000000 		.4byte	0xbd
 11047 04a8 04       		.byte	0x4
 11048 04a9 12       		.uleb128 0x12
 11049 04aa 6B5F6400 		.ascii	"k_d\000"
 11050 04ae 07       		.byte	0x7
 11051 04af 3B01     		.2byte	0x13b
 11052 04b1 BD000000 		.4byte	0xbd
 11053 04b5 08       		.byte	0x8
 11054 04b6 11       		.uleb128 0x11
 11055 04b7 B20D0000 		.4byte	.LASF75
 11056 04bb 07       		.byte	0x7
 11057 04bc 3C01     		.2byte	0x13c
 11058 04be BD000000 		.4byte	0xbd
 11059 04c2 0C       		.byte	0xc
 11060 04c3 11       		.uleb128 0x11
 11061 04c4 89050000 		.4byte	.LASF76
 11062 04c8 07       		.byte	0x7
 11063 04c9 3D01     		.2byte	0x13d
 11064 04cb BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 250


 11065 04cf 10       		.byte	0x10
 11066 04d0 11       		.uleb128 0x11
 11067 04d1 71050000 		.4byte	.LASF77
 11068 04d5 07       		.byte	0x7
 11069 04d6 3E01     		.2byte	0x13e
 11070 04d8 BD000000 		.4byte	0xbd
 11071 04dc 14       		.byte	0x14
 11072 04dd 11       		.uleb128 0x11
 11073 04de 84100000 		.4byte	.LASF78
 11074 04e2 07       		.byte	0x7
 11075 04e3 3F01     		.2byte	0x13f
 11076 04e5 BD000000 		.4byte	0xbd
 11077 04e9 18       		.byte	0x18
 11078 04ea 11       		.uleb128 0x11
 11079 04eb 1A060000 		.4byte	.LASF79
 11080 04ef 07       		.byte	0x7
 11081 04f0 4001     		.2byte	0x140
 11082 04f2 BD000000 		.4byte	0xbd
 11083 04f6 1C       		.byte	0x1c
 11084 04f7 11       		.uleb128 0x11
 11085 04f8 930F0000 		.4byte	.LASF80
 11086 04fc 07       		.byte	0x7
 11087 04fd 4101     		.2byte	0x141
 11088 04ff BD000000 		.4byte	0xbd
 11089 0503 20       		.byte	0x20
 11090 0504 11       		.uleb128 0x11
 11091 0505 28060000 		.4byte	.LASF81
 11092 0509 07       		.byte	0x7
 11093 050a 4201     		.2byte	0x142
 11094 050c BD000000 		.4byte	0xbd
 11095 0510 24       		.byte	0x24
 11096 0511 11       		.uleb128 0x11
 11097 0512 70070000 		.4byte	.LASF82
 11098 0516 07       		.byte	0x7
 11099 0517 4301     		.2byte	0x143
 11100 0519 BD000000 		.4byte	0xbd
 11101 051d 28       		.byte	0x28
 11102 051e 11       		.uleb128 0x11
 11103 051f D0120000 		.4byte	.LASF83
 11104 0523 07       		.byte	0x7
 11105 0524 4401     		.2byte	0x144
 11106 0526 BD000000 		.4byte	0xbd
 11107 052a 2C       		.byte	0x2c
 11108 052b 11       		.uleb128 0x11
 11109 052c 0A080000 		.4byte	.LASF84
 11110 0530 07       		.byte	0x7
 11111 0531 4501     		.2byte	0x145
 11112 0533 81000000 		.4byte	0x81
 11113 0537 30       		.byte	0x30
 11114 0538 11       		.uleb128 0x11
 11115 0539 6D100000 		.4byte	.LASF85
 11116 053d 07       		.byte	0x7
 11117 053e 4601     		.2byte	0x146
 11118 0540 81000000 		.4byte	0x81
 11119 0544 31       		.byte	0x31
 11120 0545 11       		.uleb128 0x11
 11121 0546 C40D0000 		.4byte	.LASF86
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 251


 11122 054a 07       		.byte	0x7
 11123 054b 4701     		.2byte	0x147
 11124 054d 81000000 		.4byte	0x81
 11125 0551 32       		.byte	0x32
 11126 0552 11       		.uleb128 0x11
 11127 0553 13120000 		.4byte	.LASF87
 11128 0557 07       		.byte	0x7
 11129 0558 4801     		.2byte	0x148
 11130 055a 81000000 		.4byte	0x81
 11131 055e 33       		.byte	0x33
 11132 055f 11       		.uleb128 0x11
 11133 0560 D6000000 		.4byte	.LASF88
 11134 0564 07       		.byte	0x7
 11135 0565 4901     		.2byte	0x149
 11136 0567 BD000000 		.4byte	0xbd
 11137 056b 34       		.byte	0x34
 11138 056c 11       		.uleb128 0x11
 11139 056d AE050000 		.4byte	.LASF89
 11140 0571 07       		.byte	0x7
 11141 0572 4A01     		.2byte	0x14a
 11142 0574 BD000000 		.4byte	0xbd
 11143 0578 38       		.byte	0x38
 11144 0579 11       		.uleb128 0x11
 11145 057a 3B0A0000 		.4byte	.LASF90
 11146 057e 07       		.byte	0x7
 11147 057f 4B01     		.2byte	0x14b
 11148 0581 BD000000 		.4byte	0xbd
 11149 0585 3C       		.byte	0x3c
 11150 0586 11       		.uleb128 0x11
 11151 0587 25050000 		.4byte	.LASF91
 11152 058b 07       		.byte	0x7
 11153 058c 4C01     		.2byte	0x14c
 11154 058e BD000000 		.4byte	0xbd
 11155 0592 40       		.byte	0x40
 11156 0593 11       		.uleb128 0x11
 11157 0594 3F010000 		.4byte	.LASF92
 11158 0598 07       		.byte	0x7
 11159 0599 4D01     		.2byte	0x14d
 11160 059b 09060000 		.4byte	0x609
 11161 059f 44       		.byte	0x44
 11162 05a0 11       		.uleb128 0x11
 11163 05a1 7A120000 		.4byte	.LASF93
 11164 05a5 07       		.byte	0x7
 11165 05a6 4E01     		.2byte	0x14e
 11166 05a8 B1000000 		.4byte	0xb1
 11167 05ac 5C       		.byte	0x5c
 11168 05ad 11       		.uleb128 0x11
 11169 05ae 76080000 		.4byte	.LASF94
 11170 05b2 07       		.byte	0x7
 11171 05b3 4F01     		.2byte	0x14f
 11172 05b5 81000000 		.4byte	0x81
 11173 05b9 5E       		.byte	0x5e
 11174 05ba 11       		.uleb128 0x11
 11175 05bb 670B0000 		.4byte	.LASF95
 11176 05bf 07       		.byte	0x7
 11177 05c0 5001     		.2byte	0x150
 11178 05c2 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 252


 11179 05c6 5F       		.byte	0x5f
 11180 05c7 11       		.uleb128 0x11
 11181 05c8 DB040000 		.4byte	.LASF96
 11182 05cc 07       		.byte	0x7
 11183 05cd 5101     		.2byte	0x151
 11184 05cf 81000000 		.4byte	0x81
 11185 05d3 60       		.byte	0x60
 11186 05d4 11       		.uleb128 0x11
 11187 05d5 60050000 		.4byte	.LASF97
 11188 05d9 07       		.byte	0x7
 11189 05da 5201     		.2byte	0x152
 11190 05dc 81000000 		.4byte	0x81
 11191 05e0 61       		.byte	0x61
 11192 05e1 11       		.uleb128 0x11
 11193 05e2 84040000 		.4byte	.LASF98
 11194 05e6 07       		.byte	0x7
 11195 05e7 5301     		.2byte	0x153
 11196 05e9 81000000 		.4byte	0x81
 11197 05ed 62       		.byte	0x62
 11198 05ee 11       		.uleb128 0x11
 11199 05ef A0050000 		.4byte	.LASF99
 11200 05f3 07       		.byte	0x7
 11201 05f4 5401     		.2byte	0x154
 11202 05f6 8D000000 		.4byte	0x8d
 11203 05fa 64       		.byte	0x64
 11204 05fb 11       		.uleb128 0x11
 11205 05fc 4C030000 		.4byte	.LASF64
 11206 0600 07       		.byte	0x7
 11207 0601 5501     		.2byte	0x155
 11208 0603 19060000 		.4byte	0x619
 11209 0607 66       		.byte	0x66
 11210 0608 00       		.byte	0
 11211 0609 07       		.uleb128 0x7
 11212 060a D5000000 		.4byte	0xd5
 11213 060e 19060000 		.4byte	0x619
 11214 0612 08       		.uleb128 0x8
 11215 0613 0E010000 		.4byte	0x10e
 11216 0617 05       		.byte	0x5
 11217 0618 00       		.byte	0
 11218 0619 07       		.uleb128 0x7
 11219 061a 81000000 		.4byte	0x81
 11220 061e 29060000 		.4byte	0x629
 11221 0622 08       		.uleb128 0x8
 11222 0623 0E010000 		.4byte	0x10e
 11223 0627 0A       		.byte	0xa
 11224 0628 00       		.byte	0
 11225 0629 10       		.uleb128 0x10
 11226 062a 6F110000 		.4byte	.LASF100
 11227 062e 30       		.byte	0x30
 11228 062f 07       		.byte	0x7
 11229 0630 5C01     		.2byte	0x15c
 11230 0632 AC060000 		.4byte	0x6ac
 11231 0636 11       		.uleb128 0x11
 11232 0637 F5090000 		.4byte	.LASF101
 11233 063b 07       		.byte	0x7
 11234 063c 5D01     		.2byte	0x15d
 11235 063e AC060000 		.4byte	0x6ac
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 253


 11236 0642 00       		.byte	0
 11237 0643 12       		.uleb128 0x12
 11238 0644 72657300 		.ascii	"res\000"
 11239 0648 07       		.byte	0x7
 11240 0649 5E01     		.2byte	0x15e
 11241 064b 72040000 		.4byte	0x472
 11242 064f 05       		.byte	0x5
 11243 0650 11       		.uleb128 0x11
 11244 0651 36080000 		.4byte	.LASF102
 11245 0655 07       		.byte	0x7
 11246 0656 5F01     		.2byte	0x15f
 11247 0658 43020000 		.4byte	0x243
 11248 065c 08       		.byte	0x8
 11249 065d 11       		.uleb128 0x11
 11250 065e 82050000 		.4byte	.LASF103
 11251 0662 07       		.byte	0x7
 11252 0663 6001     		.2byte	0x160
 11253 0665 BC060000 		.4byte	0x6bc
 11254 0669 14       		.byte	0x14
 11255 066a 11       		.uleb128 0x11
 11256 066b AA0C0000 		.4byte	.LASF104
 11257 066f 07       		.byte	0x7
 11258 0670 6101     		.2byte	0x161
 11259 0672 81000000 		.4byte	0x81
 11260 0676 20       		.byte	0x20
 11261 0677 11       		.uleb128 0x11
 11262 0678 07020000 		.4byte	.LASF105
 11263 067c 07       		.byte	0x7
 11264 067d 6201     		.2byte	0x162
 11265 067f 72040000 		.4byte	0x472
 11266 0683 21       		.byte	0x21
 11267 0684 11       		.uleb128 0x11
 11268 0685 F60B0000 		.4byte	.LASF106
 11269 0689 07       		.byte	0x7
 11270 068a 6301     		.2byte	0x163
 11271 068c A5000000 		.4byte	0xa5
 11272 0690 24       		.byte	0x24
 11273 0691 11       		.uleb128 0x11
 11274 0692 9B0E0000 		.4byte	.LASF107
 11275 0696 07       		.byte	0x7
 11276 0697 6401     		.2byte	0x164
 11277 0699 53020000 		.4byte	0x253
 11278 069d 25       		.byte	0x25
 11279 069e 11       		.uleb128 0x11
 11280 069f 4C030000 		.4byte	.LASF64
 11281 06a3 07       		.byte	0x7
 11282 06a4 6501     		.2byte	0x165
 11283 06a6 CC060000 		.4byte	0x6cc
 11284 06aa 28       		.byte	0x28
 11285 06ab 00       		.byte	0
 11286 06ac 07       		.uleb128 0x7
 11287 06ad 81000000 		.4byte	0x81
 11288 06b1 BC060000 		.4byte	0x6bc
 11289 06b5 08       		.uleb128 0x8
 11290 06b6 0E010000 		.4byte	0x10e
 11291 06ba 04       		.byte	0x4
 11292 06bb 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 254


 11293 06bc 07       		.uleb128 0x7
 11294 06bd C9000000 		.4byte	0xc9
 11295 06c1 CC060000 		.4byte	0x6cc
 11296 06c5 08       		.uleb128 0x8
 11297 06c6 0E010000 		.4byte	0x10e
 11298 06ca 02       		.byte	0x2
 11299 06cb 00       		.byte	0
 11300 06cc 07       		.uleb128 0x7
 11301 06cd 81000000 		.4byte	0x81
 11302 06d1 DC060000 		.4byte	0x6dc
 11303 06d5 08       		.uleb128 0x8
 11304 06d6 0E010000 		.4byte	0x10e
 11305 06da 07       		.byte	0x7
 11306 06db 00       		.byte	0
 11307 06dc 10       		.uleb128 0x10
 11308 06dd B7010000 		.4byte	.LASF108
 11309 06e1 10       		.byte	0x10
 11310 06e2 07       		.byte	0x7
 11311 06e3 6C01     		.2byte	0x16c
 11312 06e5 2B070000 		.4byte	0x72b
 11313 06e9 11       		.uleb128 0x11
 11314 06ea D50B0000 		.4byte	.LASF109
 11315 06ee 07       		.byte	0x7
 11316 06ef 6D01     		.2byte	0x16d
 11317 06f1 2B070000 		.4byte	0x72b
 11318 06f5 00       		.byte	0
 11319 06f6 11       		.uleb128 0x11
 11320 06f7 6C120000 		.4byte	.LASF110
 11321 06fb 07       		.byte	0x7
 11322 06fc 6E01     		.2byte	0x16e
 11323 06fe A3030000 		.4byte	0x3a3
 11324 0702 04       		.byte	0x4
 11325 0703 11       		.uleb128 0x11
 11326 0704 C4050000 		.4byte	.LASF111
 11327 0708 07       		.byte	0x7
 11328 0709 6F01     		.2byte	0x16f
 11329 070b 3B070000 		.4byte	0x73b
 11330 070f 0C       		.byte	0xc
 11331 0710 11       		.uleb128 0x11
 11332 0711 B50E0000 		.4byte	.LASF112
 11333 0715 07       		.byte	0x7
 11334 0716 7001     		.2byte	0x170
 11335 0718 81000000 		.4byte	0x81
 11336 071c 0E       		.byte	0xe
 11337 071d 11       		.uleb128 0x11
 11338 071e 33040000 		.4byte	.LASF113
 11339 0722 07       		.byte	0x7
 11340 0723 7101     		.2byte	0x171
 11341 0725 81000000 		.4byte	0x81
 11342 0729 0F       		.byte	0xf
 11343 072a 00       		.byte	0
 11344 072b 07       		.uleb128 0x7
 11345 072c 8D000000 		.4byte	0x8d
 11346 0730 3B070000 		.4byte	0x73b
 11347 0734 08       		.uleb128 0x8
 11348 0735 0E010000 		.4byte	0x10e
 11349 0739 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 255


 11350 073a 00       		.byte	0
 11351 073b 07       		.uleb128 0x7
 11352 073c 81000000 		.4byte	0x81
 11353 0740 4B070000 		.4byte	0x74b
 11354 0744 08       		.uleb128 0x8
 11355 0745 0E010000 		.4byte	0x10e
 11356 0749 01       		.byte	0x1
 11357 074a 00       		.byte	0
 11358 074b 10       		.uleb128 0x10
 11359 074c 910B0000 		.4byte	.LASF114
 11360 0750 20       		.byte	0x20
 11361 0751 07       		.byte	0x7
 11362 0752 7801     		.2byte	0x178
 11363 0754 8D070000 		.4byte	0x78d
 11364 0758 11       		.uleb128 0x11
 11365 0759 8F020000 		.4byte	.LASF115
 11366 075d 07       		.byte	0x7
 11367 075e 7901     		.2byte	0x179
 11368 0760 81000000 		.4byte	0x81
 11369 0764 00       		.byte	0
 11370 0765 11       		.uleb128 0x11
 11371 0766 4D110000 		.4byte	.LASF116
 11372 076a 07       		.byte	0x7
 11373 076b 7A01     		.2byte	0x17a
 11374 076d 81000000 		.4byte	0x81
 11375 0771 01       		.byte	0x1
 11376 0772 11       		.uleb128 0x11
 11377 0773 700A0000 		.4byte	.LASF117
 11378 0777 07       		.byte	0x7
 11379 0778 7B01     		.2byte	0x17b
 11380 077a 8D070000 		.4byte	0x78d
 11381 077e 02       		.byte	0x2
 11382 077f 11       		.uleb128 0x11
 11383 0780 4C030000 		.4byte	.LASF64
 11384 0784 07       		.byte	0x7
 11385 0785 7C01     		.2byte	0x17c
 11386 0787 AC060000 		.4byte	0x6ac
 11387 078b 1B       		.byte	0x1b
 11388 078c 00       		.byte	0
 11389 078d 07       		.uleb128 0x7
 11390 078e 81000000 		.4byte	0x81
 11391 0792 A3070000 		.4byte	0x7a3
 11392 0796 08       		.uleb128 0x8
 11393 0797 0E010000 		.4byte	0x10e
 11394 079b 04       		.byte	0x4
 11395 079c 08       		.uleb128 0x8
 11396 079d 0E010000 		.4byte	0x10e
 11397 07a1 04       		.byte	0x4
 11398 07a2 00       		.byte	0
 11399 07a3 10       		.uleb128 0x10
 11400 07a4 A80E0000 		.4byte	.LASF118
 11401 07a8 20       		.byte	0x20
 11402 07a9 07       		.byte	0x7
 11403 07aa 8301     		.2byte	0x183
 11404 07ac FF070000 		.4byte	0x7ff
 11405 07b0 11       		.uleb128 0x11
 11406 07b1 A00C0000 		.4byte	.LASF119
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 256


 11407 07b5 07       		.byte	0x7
 11408 07b6 8401     		.2byte	0x184
 11409 07b8 FF070000 		.4byte	0x7ff
 11410 07bc 00       		.byte	0
 11411 07bd 11       		.uleb128 0x11
 11412 07be 4E100000 		.4byte	.LASF120
 11413 07c2 07       		.byte	0x7
 11414 07c3 8501     		.2byte	0x185
 11415 07c5 81000000 		.4byte	0x81
 11416 07c9 06       		.byte	0x6
 11417 07ca 11       		.uleb128 0x11
 11418 07cb 6B000000 		.4byte	.LASF121
 11419 07cf 07       		.byte	0x7
 11420 07d0 8601     		.2byte	0x186
 11421 07d2 81000000 		.4byte	0x81
 11422 07d6 07       		.byte	0x7
 11423 07d7 11       		.uleb128 0x11
 11424 07d8 03060000 		.4byte	.LASF122
 11425 07dc 07       		.byte	0x7
 11426 07dd 8701     		.2byte	0x187
 11427 07df D3030000 		.4byte	0x3d3
 11428 07e3 08       		.byte	0x8
 11429 07e4 11       		.uleb128 0x11
 11430 07e5 9D020000 		.4byte	.LASF123
 11431 07e9 07       		.byte	0x7
 11432 07ea 8801     		.2byte	0x188
 11433 07ec 81000000 		.4byte	0x81
 11434 07f0 14       		.byte	0x14
 11435 07f1 11       		.uleb128 0x11
 11436 07f2 4C030000 		.4byte	.LASF64
 11437 07f6 07       		.byte	0x7
 11438 07f7 8901     		.2byte	0x189
 11439 07f9 19060000 		.4byte	0x619
 11440 07fd 15       		.byte	0x15
 11441 07fe 00       		.byte	0
 11442 07ff 07       		.uleb128 0x7
 11443 0800 81000000 		.4byte	0x81
 11444 0804 0F080000 		.4byte	0x80f
 11445 0808 08       		.uleb128 0x8
 11446 0809 0E010000 		.4byte	0x10e
 11447 080d 05       		.byte	0x5
 11448 080e 00       		.byte	0
 11449 080f 10       		.uleb128 0x10
 11450 0810 930E0000 		.4byte	.LASF124
 11451 0814 20       		.byte	0x20
 11452 0815 07       		.byte	0x7
 11453 0816 9001     		.2byte	0x190
 11454 0818 44080000 		.4byte	0x844
 11455 081c 11       		.uleb128 0x11
 11456 081d 05040000 		.4byte	.LASF125
 11457 0821 07       		.byte	0x7
 11458 0822 9101     		.2byte	0x191
 11459 0824 15010000 		.4byte	0x115
 11460 0828 00       		.byte	0
 11461 0829 11       		.uleb128 0x11
 11462 082a 25030000 		.4byte	.LASF126
 11463 082e 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 257


 11464 082f 9201     		.2byte	0x192
 11465 0831 DC060000 		.4byte	0x6dc
 11466 0835 08       		.byte	0x8
 11467 0836 11       		.uleb128 0x11
 11468 0837 4C030000 		.4byte	.LASF64
 11469 083b 07       		.byte	0x7
 11470 083c 9301     		.2byte	0x193
 11471 083e CC060000 		.4byte	0x6cc
 11472 0842 18       		.byte	0x18
 11473 0843 00       		.byte	0
 11474 0844 10       		.uleb128 0x10
 11475 0845 5E090000 		.4byte	.LASF127
 11476 0849 10       		.byte	0x10
 11477 084a 07       		.byte	0x7
 11478 084b 9A01     		.2byte	0x19a
 11479 084d 93080000 		.4byte	0x893
 11480 0851 11       		.uleb128 0x11
 11481 0852 5D080000 		.4byte	.LASF128
 11482 0856 07       		.byte	0x7
 11483 0857 9B01     		.2byte	0x19b
 11484 0859 BD000000 		.4byte	0xbd
 11485 085d 00       		.byte	0
 11486 085e 11       		.uleb128 0x11
 11487 085f B2120000 		.4byte	.LASF129
 11488 0863 07       		.byte	0x7
 11489 0864 9C01     		.2byte	0x19c
 11490 0866 BD000000 		.4byte	0xbd
 11491 086a 04       		.byte	0x4
 11492 086b 11       		.uleb128 0x11
 11493 086c CE050000 		.4byte	.LASF130
 11494 0870 07       		.byte	0x7
 11495 0871 9D01     		.2byte	0x19d
 11496 0873 BD000000 		.4byte	0xbd
 11497 0877 08       		.byte	0x8
 11498 0878 11       		.uleb128 0x11
 11499 0879 46070000 		.4byte	.LASF131
 11500 087d 07       		.byte	0x7
 11501 087e 9E01     		.2byte	0x19e
 11502 0880 81000000 		.4byte	0x81
 11503 0884 0C       		.byte	0xc
 11504 0885 11       		.uleb128 0x11
 11505 0886 4C030000 		.4byte	.LASF64
 11506 088a 07       		.byte	0x7
 11507 088b 9F01     		.2byte	0x19f
 11508 088d 72040000 		.4byte	0x472
 11509 0891 0D       		.byte	0xd
 11510 0892 00       		.byte	0
 11511 0893 10       		.uleb128 0x10
 11512 0894 690F0000 		.4byte	.LASF132
 11513 0898 10       		.byte	0x10
 11514 0899 07       		.byte	0x7
 11515 089a A601     		.2byte	0x1a6
 11516 089c D5080000 		.4byte	0x8d5
 11517 08a0 11       		.uleb128 0x11
 11518 08a1 59070000 		.4byte	.LASF133
 11519 08a5 07       		.byte	0x7
 11520 08a6 A701     		.2byte	0x1a7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 258


 11521 08a8 8D000000 		.4byte	0x8d
 11522 08ac 00       		.byte	0
 11523 08ad 11       		.uleb128 0x11
 11524 08ae F00E0000 		.4byte	.LASF134
 11525 08b2 07       		.byte	0x7
 11526 08b3 A801     		.2byte	0x1a8
 11527 08b5 B1000000 		.4byte	0xb1
 11528 08b9 02       		.byte	0x2
 11529 08ba 11       		.uleb128 0x11
 11530 08bb CD070000 		.4byte	.LASF135
 11531 08bf 07       		.byte	0x7
 11532 08c0 A901     		.2byte	0x1a9
 11533 08c2 2B070000 		.4byte	0x72b
 11534 08c6 04       		.byte	0x4
 11535 08c7 11       		.uleb128 0x11
 11536 08c8 4C030000 		.4byte	.LASF64
 11537 08cc 07       		.byte	0x7
 11538 08cd AA01     		.2byte	0x1aa
 11539 08cf CC060000 		.4byte	0x6cc
 11540 08d3 08       		.byte	0x8
 11541 08d4 00       		.byte	0
 11542 08d5 10       		.uleb128 0x10
 11543 08d6 62010000 		.4byte	.LASF136
 11544 08da 10       		.byte	0x10
 11545 08db 07       		.byte	0x7
 11546 08dc B101     		.2byte	0x1b1
 11547 08de 0A090000 		.4byte	0x90a
 11548 08e2 11       		.uleb128 0x11
 11549 08e3 3E0E0000 		.4byte	.LASF137
 11550 08e7 07       		.byte	0x7
 11551 08e8 B201     		.2byte	0x1b2
 11552 08ea 81000000 		.4byte	0x81
 11553 08ee 00       		.byte	0
 11554 08ef 11       		.uleb128 0x11
 11555 08f0 5C0A0000 		.4byte	.LASF138
 11556 08f4 07       		.byte	0x7
 11557 08f5 B301     		.2byte	0x1b3
 11558 08f7 81000000 		.4byte	0x81
 11559 08fb 01       		.byte	0x1
 11560 08fc 11       		.uleb128 0x11
 11561 08fd 4C030000 		.4byte	.LASF64
 11562 0901 07       		.byte	0x7
 11563 0902 B401     		.2byte	0x1b4
 11564 0904 0A090000 		.4byte	0x90a
 11565 0908 02       		.byte	0x2
 11566 0909 00       		.byte	0
 11567 090a 07       		.uleb128 0x7
 11568 090b 81000000 		.4byte	0x81
 11569 090f 1A090000 		.4byte	0x91a
 11570 0913 08       		.uleb128 0x8
 11571 0914 0E010000 		.4byte	0x10e
 11572 0918 0D       		.byte	0xd
 11573 0919 00       		.byte	0
 11574 091a 10       		.uleb128 0x10
 11575 091b 77090000 		.4byte	.LASF139
 11576 091f 10       		.byte	0x10
 11577 0920 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 259


 11578 0921 BB01     		.2byte	0x1bb
 11579 0923 5C090000 		.4byte	0x95c
 11580 0927 11       		.uleb128 0x11
 11581 0928 85110000 		.4byte	.LASF140
 11582 092c 07       		.byte	0x7
 11583 092d BC01     		.2byte	0x1bc
 11584 092f BD000000 		.4byte	0xbd
 11585 0933 00       		.byte	0
 11586 0934 11       		.uleb128 0x11
 11587 0935 31070000 		.4byte	.LASF141
 11588 0939 07       		.byte	0x7
 11589 093a BD01     		.2byte	0x1bd
 11590 093c D5000000 		.4byte	0xd5
 11591 0940 04       		.byte	0x4
 11592 0941 11       		.uleb128 0x11
 11593 0942 F60D0000 		.4byte	.LASF142
 11594 0946 07       		.byte	0x7
 11595 0947 BE01     		.2byte	0x1be
 11596 0949 D5000000 		.4byte	0xd5
 11597 094d 08       		.byte	0x8
 11598 094e 11       		.uleb128 0x11
 11599 094f 4C030000 		.4byte	.LASF64
 11600 0953 07       		.byte	0x7
 11601 0954 BF01     		.2byte	0x1bf
 11602 0956 5C090000 		.4byte	0x95c
 11603 095a 0C       		.byte	0xc
 11604 095b 00       		.byte	0
 11605 095c 07       		.uleb128 0x7
 11606 095d 81000000 		.4byte	0x81
 11607 0961 6C090000 		.4byte	0x96c
 11608 0965 08       		.uleb128 0x8
 11609 0966 0E010000 		.4byte	0x10e
 11610 096a 03       		.byte	0x3
 11611 096b 00       		.byte	0
 11612 096c 10       		.uleb128 0x10
 11613 096d EC010000 		.4byte	.LASF143
 11614 0971 12       		.byte	0x12
 11615 0972 07       		.byte	0x7
 11616 0973 C601     		.2byte	0x1c6
 11617 0975 AE090000 		.4byte	0x9ae
 11618 0979 11       		.uleb128 0x11
 11619 097a 9B120000 		.4byte	.LASF144
 11620 097e 07       		.byte	0x7
 11621 097f C701     		.2byte	0x1c7
 11622 0981 81000000 		.4byte	0x81
 11623 0985 00       		.byte	0
 11624 0986 11       		.uleb128 0x11
 11625 0987 3A110000 		.4byte	.LASF145
 11626 098b 07       		.byte	0x7
 11627 098c C801     		.2byte	0x1c8
 11628 098e 2B070000 		.4byte	0x72b
 11629 0992 02       		.byte	0x2
 11630 0993 11       		.uleb128 0x11
 11631 0994 37000000 		.4byte	.LASF146
 11632 0998 07       		.byte	0x7
 11633 0999 C901     		.2byte	0x1c9
 11634 099b 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 260


 11635 099f 06       		.byte	0x6
 11636 09a0 11       		.uleb128 0x11
 11637 09a1 4C030000 		.4byte	.LASF64
 11638 09a5 07       		.byte	0x7
 11639 09a6 CA01     		.2byte	0x1ca
 11640 09a8 AE090000 		.4byte	0x9ae
 11641 09ac 07       		.byte	0x7
 11642 09ad 00       		.byte	0
 11643 09ae 07       		.uleb128 0x7
 11644 09af 81000000 		.4byte	0x81
 11645 09b3 BE090000 		.4byte	0x9be
 11646 09b7 08       		.uleb128 0x8
 11647 09b8 0E010000 		.4byte	0x10e
 11648 09bc 09       		.byte	0x9
 11649 09bd 00       		.byte	0
 11650 09be 13       		.uleb128 0x13
 11651 09bf A0110000 		.4byte	.LASF147
 11652 09c3 FC02     		.2byte	0x2fc
 11653 09c5 07       		.byte	0x7
 11654 09c6 D301     		.2byte	0x1d3
 11655 09c8 A30A0000 		.4byte	0xaa3
 11656 09cc 11       		.uleb128 0x11
 11657 09cd 620B0000 		.4byte	.LASF148
 11658 09d1 07       		.byte	0x7
 11659 09d2 D501     		.2byte	0x1d5
 11660 09d4 81000000 		.4byte	0x81
 11661 09d8 00       		.byte	0
 11662 09d9 11       		.uleb128 0x11
 11663 09da 4C030000 		.4byte	.LASF64
 11664 09de 07       		.byte	0x7
 11665 09df D601     		.2byte	0x1d6
 11666 09e1 A30A0000 		.4byte	0xaa3
 11667 09e5 01       		.byte	0x1
 11668 09e6 12       		.uleb128 0x12
 11669 09e7 636E7400 		.ascii	"cnt\000"
 11670 09eb 07       		.byte	0x7
 11671 09ec D701     		.2byte	0x1d7
 11672 09ee 06030000 		.4byte	0x306
 11673 09f2 10       		.byte	0x10
 11674 09f3 11       		.uleb128 0x11
 11675 09f4 DF020000 		.4byte	.LASF149
 11676 09f8 07       		.byte	0x7
 11677 09f9 D801     		.2byte	0x1d8
 11678 09fb B30A0000 		.4byte	0xab3
 11679 09ff 80       		.byte	0x80
 11680 0a00 12       		.uleb128 0x12
 11681 0a01 64657600 		.ascii	"dev\000"
 11682 0a05 07       		.byte	0x7
 11683 0a06 D901     		.2byte	0x1d9
 11684 0a08 E3030000 		.4byte	0x3e3
 11685 0a0c A0       		.byte	0xa0
 11686 0a0d 11       		.uleb128 0x11
 11687 0a0e B10F0000 		.4byte	.LASF150
 11688 0a12 07       		.byte	0x7
 11689 0a13 DA01     		.2byte	0x1da
 11690 0a15 C30A0000 		.4byte	0xac3
 11691 0a19 B0       		.byte	0xb0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 261


 11692 0a1a 14       		.uleb128 0x14
 11693 0a1b 656E6300 		.ascii	"enc\000"
 11694 0a1f 07       		.byte	0x7
 11695 0a20 DB01     		.2byte	0x1db
 11696 0a22 D30A0000 		.4byte	0xad3
 11697 0a26 9801     		.2byte	0x198
 11698 0a28 14       		.uleb128 0x14
 11699 0a29 656D6700 		.ascii	"emg\000"
 11700 0a2d 07       		.byte	0x7
 11701 0a2e DC01     		.2byte	0x1dc
 11702 0a30 DC060000 		.4byte	0x6dc
 11703 0a34 F801     		.2byte	0x1f8
 11704 0a36 14       		.uleb128 0x14
 11705 0a37 696D7500 		.ascii	"imu\000"
 11706 0a3b 07       		.byte	0x7
 11707 0a3c DD01     		.2byte	0x1dd
 11708 0a3e 4B070000 		.4byte	0x74b
 11709 0a42 0802     		.2byte	0x208
 11710 0a44 14       		.uleb128 0x14
 11711 0a45 65787000 		.ascii	"exp\000"
 11712 0a49 07       		.byte	0x7
 11713 0a4a DE01     		.2byte	0x1de
 11714 0a4c A3070000 		.4byte	0x7a3
 11715 0a50 2802     		.2byte	0x228
 11716 0a52 15       		.uleb128 0x15
 11717 0a53 86000000 		.4byte	.LASF151
 11718 0a57 07       		.byte	0x7
 11719 0a58 DF01     		.2byte	0x1df
 11720 0a5a E30A0000 		.4byte	0xae3
 11721 0a5e 4802     		.2byte	0x248
 11722 0a60 14       		.uleb128 0x14
 11723 0a61 534800   		.ascii	"SH\000"
 11724 0a64 07       		.byte	0x7
 11725 0a65 E101     		.2byte	0x1e1
 11726 0a67 44080000 		.4byte	0x844
 11727 0a6b A802     		.2byte	0x2a8
 11728 0a6d 15       		.uleb128 0x15
 11729 0a6e CD000000 		.4byte	.LASF152
 11730 0a72 07       		.byte	0x7
 11731 0a73 E201     		.2byte	0x1e2
 11732 0a75 93080000 		.4byte	0x893
 11733 0a79 B802     		.2byte	0x2b8
 11734 0a7b 14       		.uleb128 0x14
 11735 0a7c 4D5300   		.ascii	"MS\000"
 11736 0a7f 07       		.byte	0x7
 11737 0a80 E301     		.2byte	0x1e3
 11738 0a82 D5080000 		.4byte	0x8d5
 11739 0a86 C802     		.2byte	0x2c8
 11740 0a88 14       		.uleb128 0x14
 11741 0a89 464200   		.ascii	"FB\000"
 11742 0a8c 07       		.byte	0x7
 11743 0a8d E401     		.2byte	0x1e4
 11744 0a8f 1A090000 		.4byte	0x91a
 11745 0a93 D802     		.2byte	0x2d8
 11746 0a95 14       		.uleb128 0x14
 11747 0a96 575200   		.ascii	"WR\000"
 11748 0a99 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 262


 11749 0a9a E501     		.2byte	0x1e5
 11750 0a9c 6C090000 		.4byte	0x96c
 11751 0aa0 E802     		.2byte	0x2e8
 11752 0aa2 00       		.byte	0
 11753 0aa3 07       		.uleb128 0x7
 11754 0aa4 81000000 		.4byte	0x81
 11755 0aa8 B30A0000 		.4byte	0xab3
 11756 0aac 08       		.uleb128 0x8
 11757 0aad 0E010000 		.4byte	0x10e
 11758 0ab1 0E       		.byte	0xe
 11759 0ab2 00       		.byte	0
 11760 0ab3 07       		.uleb128 0x7
 11761 0ab4 81000000 		.4byte	0x81
 11762 0ab8 C30A0000 		.4byte	0xac3
 11763 0abc 08       		.uleb128 0x8
 11764 0abd 0E010000 		.4byte	0x10e
 11765 0ac1 1F       		.byte	0x1f
 11766 0ac2 00       		.byte	0
 11767 0ac3 07       		.uleb128 0x7
 11768 0ac4 82040000 		.4byte	0x482
 11769 0ac8 D30A0000 		.4byte	0xad3
 11770 0acc 08       		.uleb128 0x8
 11771 0acd 0E010000 		.4byte	0x10e
 11772 0ad1 01       		.byte	0x1
 11773 0ad2 00       		.byte	0
 11774 0ad3 07       		.uleb128 0x7
 11775 0ad4 29060000 		.4byte	0x629
 11776 0ad8 E30A0000 		.4byte	0xae3
 11777 0adc 08       		.uleb128 0x8
 11778 0add 0E010000 		.4byte	0x10e
 11779 0ae1 01       		.byte	0x1
 11780 0ae2 00       		.byte	0
 11781 0ae3 07       		.uleb128 0x7
 11782 0ae4 0F080000 		.4byte	0x80f
 11783 0ae8 F30A0000 		.4byte	0xaf3
 11784 0aec 08       		.uleb128 0x8
 11785 0aed 0E010000 		.4byte	0x10e
 11786 0af1 02       		.byte	0x2
 11787 0af2 00       		.byte	0
 11788 0af3 10       		.uleb128 0x10
 11789 0af4 600D0000 		.4byte	.LASF153
 11790 0af8 28       		.byte	0x28
 11791 0af9 07       		.byte	0x7
 11792 0afa F001     		.2byte	0x1f0
 11793 0afc 4F0B0000 		.4byte	0xb4f
 11794 0b00 11       		.uleb128 0x11
 11795 0b01 F5040000 		.4byte	.LASF154
 11796 0b05 07       		.byte	0x7
 11797 0b06 F101     		.2byte	0x1f1
 11798 0b08 81000000 		.4byte	0x81
 11799 0b0c 00       		.byte	0
 11800 0b0d 11       		.uleb128 0x11
 11801 0b0e 59030000 		.4byte	.LASF155
 11802 0b12 07       		.byte	0x7
 11803 0b13 F201     		.2byte	0x1f2
 11804 0b15 4F0B0000 		.4byte	0xb4f
 11805 0b19 02       		.byte	0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 263


 11806 0b1a 11       		.uleb128 0x11
 11807 0b1b 950C0000 		.4byte	.LASF156
 11808 0b1f 07       		.byte	0x7
 11809 0b20 F301     		.2byte	0x1f3
 11810 0b22 4F0B0000 		.4byte	0xb4f
 11811 0b26 08       		.byte	0x8
 11812 0b27 11       		.uleb128 0x11
 11813 0b28 6C0D0000 		.4byte	.LASF157
 11814 0b2c 07       		.byte	0x7
 11815 0b2d F401     		.2byte	0x1f4
 11816 0b2f 4F0B0000 		.4byte	0xb4f
 11817 0b33 0E       		.byte	0xe
 11818 0b34 11       		.uleb128 0x11
 11819 0b35 52080000 		.4byte	.LASF158
 11820 0b39 07       		.byte	0x7
 11821 0b3a F501     		.2byte	0x1f5
 11822 0b3c 5F0B0000 		.4byte	0xb5f
 11823 0b40 14       		.byte	0x14
 11824 0b41 11       		.uleb128 0x11
 11825 0b42 D9010000 		.4byte	.LASF159
 11826 0b46 07       		.byte	0x7
 11827 0b47 F601     		.2byte	0x1f6
 11828 0b49 B1000000 		.4byte	0xb1
 11829 0b4d 24       		.byte	0x24
 11830 0b4e 00       		.byte	0
 11831 0b4f 07       		.uleb128 0x7
 11832 0b50 B1000000 		.4byte	0xb1
 11833 0b54 5F0B0000 		.4byte	0xb5f
 11834 0b58 08       		.uleb128 0x8
 11835 0b59 0E010000 		.4byte	0x10e
 11836 0b5d 02       		.byte	0x2
 11837 0b5e 00       		.byte	0
 11838 0b5f 07       		.uleb128 0x7
 11839 0b60 D5000000 		.4byte	0xd5
 11840 0b64 6F0B0000 		.4byte	0xb6f
 11841 0b68 08       		.uleb128 0x8
 11842 0b69 0E010000 		.4byte	0x10e
 11843 0b6d 03       		.byte	0x3
 11844 0b6e 00       		.byte	0
 11845 0b6f 10       		.uleb128 0x10
 11846 0b70 BD120000 		.4byte	.LASF160
 11847 0b74 08       		.byte	0x8
 11848 0b75 07       		.byte	0x7
 11849 0b76 FD01     		.2byte	0x1fd
 11850 0b78 970B0000 		.4byte	0xb97
 11851 0b7c 11       		.uleb128 0x11
 11852 0b7d BA050000 		.4byte	.LASF161
 11853 0b81 07       		.byte	0x7
 11854 0b82 FE01     		.2byte	0x1fe
 11855 0b84 BD000000 		.4byte	0xbd
 11856 0b88 00       		.byte	0
 11857 0b89 11       		.uleb128 0x11
 11858 0b8a 1F020000 		.4byte	.LASF162
 11859 0b8e 07       		.byte	0x7
 11860 0b8f FF01     		.2byte	0x1ff
 11861 0b91 BD000000 		.4byte	0xbd
 11862 0b95 04       		.byte	0x4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 264


 11863 0b96 00       		.byte	0
 11864 0b97 10       		.uleb128 0x10
 11865 0b98 16040000 		.4byte	.LASF163
 11866 0b9c 06       		.byte	0x6
 11867 0b9d 07       		.byte	0x7
 11868 0b9e 0602     		.2byte	0x206
 11869 0ba0 D90B0000 		.4byte	0xbd9
 11870 0ba4 11       		.uleb128 0x11
 11871 0ba5 9C070000 		.4byte	.LASF164
 11872 0ba9 07       		.byte	0x7
 11873 0baa 0702     		.2byte	0x207
 11874 0bac 81000000 		.4byte	0x81
 11875 0bb0 00       		.byte	0
 11876 0bb1 11       		.uleb128 0x11
 11877 0bb2 D9120000 		.4byte	.LASF165
 11878 0bb6 07       		.byte	0x7
 11879 0bb7 0802     		.2byte	0x208
 11880 0bb9 81000000 		.4byte	0x81
 11881 0bbd 01       		.byte	0x1
 11882 0bbe 11       		.uleb128 0x11
 11883 0bbf 47060000 		.4byte	.LASF166
 11884 0bc3 07       		.byte	0x7
 11885 0bc4 0902     		.2byte	0x209
 11886 0bc6 B1000000 		.4byte	0xb1
 11887 0bca 02       		.byte	0x2
 11888 0bcb 11       		.uleb128 0x11
 11889 0bcc 2F0A0000 		.4byte	.LASF167
 11890 0bd0 07       		.byte	0x7
 11891 0bd1 0A02     		.2byte	0x20a
 11892 0bd3 B1000000 		.4byte	0xb1
 11893 0bd7 04       		.byte	0x4
 11894 0bd8 00       		.byte	0
 11895 0bd9 16       		.uleb128 0x16
 11896 0bda 01       		.byte	0x1
 11897 0bdb 2C000000 		.4byte	0x2c
 11898 0bdf 07       		.byte	0x7
 11899 0be0 0E02     		.2byte	0x20e
 11900 0be2 0B0C0000 		.4byte	0xc0b
 11901 0be6 0A       		.uleb128 0xa
 11902 0be7 D7050000 		.4byte	.LASF168
 11903 0beb 00       		.byte	0
 11904 0bec 0A       		.uleb128 0xa
 11905 0bed 380E0000 		.4byte	.LASF169
 11906 0bf1 01       		.byte	0x1
 11907 0bf2 0A       		.uleb128 0xa
 11908 0bf3 320C0000 		.4byte	.LASF170
 11909 0bf7 02       		.byte	0x2
 11910 0bf8 0A       		.uleb128 0xa
 11911 0bf9 82020000 		.4byte	.LASF171
 11912 0bfd 03       		.byte	0x3
 11913 0bfe 0A       		.uleb128 0xa
 11914 0bff 650A0000 		.4byte	.LASF172
 11915 0c03 04       		.byte	0x4
 11916 0c04 0A       		.uleb128 0xa
 11917 0c05 D60D0000 		.4byte	.LASF173
 11918 0c09 05       		.byte	0x5
 11919 0c0a 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 265


 11920 0c0b 05       		.uleb128 0x5
 11921 0c0c 77050000 		.4byte	.LASF174
 11922 0c10 07       		.byte	0x7
 11923 0c11 1602     		.2byte	0x216
 11924 0c13 D90B0000 		.4byte	0xbd9
 11925 0c17 16       		.uleb128 0x16
 11926 0c18 01       		.byte	0x1
 11927 0c19 2C000000 		.4byte	0x2c
 11928 0c1d 07       		.byte	0x7
 11929 0c1e 1802     		.2byte	0x218
 11930 0c20 430C0000 		.4byte	0xc43
 11931 0c24 0A       		.uleb128 0xa
 11932 0c25 CC010000 		.4byte	.LASF175
 11933 0c29 00       		.byte	0
 11934 0c2a 0A       		.uleb128 0xa
 11935 0c2b C0070000 		.4byte	.LASF176
 11936 0c2f 01       		.byte	0x1
 11937 0c30 0A       		.uleb128 0xa
 11938 0c31 6B080000 		.4byte	.LASF177
 11939 0c35 02       		.byte	0x2
 11940 0c36 0A       		.uleb128 0xa
 11941 0c37 C3030000 		.4byte	.LASF178
 11942 0c3b 03       		.byte	0x3
 11943 0c3c 0A       		.uleb128 0xa
 11944 0c3d 96120000 		.4byte	.LASF179
 11945 0c41 04       		.byte	0x4
 11946 0c42 00       		.byte	0
 11947 0c43 05       		.uleb128 0x5
 11948 0c44 220F0000 		.4byte	.LASF180
 11949 0c48 07       		.byte	0x7
 11950 0c49 1F02     		.2byte	0x21f
 11951 0c4b 170C0000 		.4byte	0xc17
 11952 0c4f 17       		.uleb128 0x17
 11953 0c50 A3080000 		.4byte	.LASF181
 11954 0c54 01       		.byte	0x1
 11955 0c55 62       		.byte	0x62
 11956 0c56 00000000 		.4byte	.LFB64
 11957 0c5a 18000000 		.4byte	.LFE64-.LFB64
 11958 0c5e 01       		.uleb128 0x1
 11959 0c5f 9C       		.byte	0x9c
 11960 0c60 17       		.uleb128 0x17
 11961 0c61 1D110000 		.4byte	.LASF182
 11962 0c65 01       		.byte	0x1
 11963 0c66 6D       		.byte	0x6d
 11964 0c67 00000000 		.4byte	.LFB65
 11965 0c6b 20000000 		.4byte	.LFE65-.LFB65
 11966 0c6f 01       		.uleb128 0x1
 11967 0c70 9C       		.byte	0x9c
 11968 0c71 18       		.uleb128 0x18
 11969 0c72 E3090000 		.4byte	.LASF214
 11970 0c76 01       		.byte	0x1
 11971 0c77 86       		.byte	0x86
 11972 0c78 00000000 		.4byte	.LFB66
 11973 0c7c F4010000 		.4byte	.LFE66-.LFB66
 11974 0c80 01       		.uleb128 0x1
 11975 0c81 9C       		.byte	0x9c
 11976 0c82 060D0000 		.4byte	0xd06
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 266


 11977 0c86 19       		.uleb128 0x19
 11978 0c87 FA000000 		.4byte	.LASF183
 11979 0c8b 01       		.byte	0x1
 11980 0c8c 8B       		.byte	0x8b
 11981 0c8d 81000000 		.4byte	0x81
 11982 0c91 05       		.uleb128 0x5
 11983 0c92 03       		.byte	0x3
 11984 0c93 00000000 		.4byte	state.10464
 11985 0c97 19       		.uleb128 0x19
 11986 0c98 6C060000 		.4byte	.LASF184
 11987 0c9c 01       		.byte	0x1
 11988 0c9d 8E       		.byte	0x8e
 11989 0c9e 81000000 		.4byte	0x81
 11990 0ca2 05       		.uleb128 0x5
 11991 0ca3 03       		.byte	0x3
 11992 0ca4 08000000 		.4byte	data_packet_index.10465
 11993 0ca8 19       		.uleb128 0x19
 11994 0ca9 9F0D0000 		.4byte	.LASF185
 11995 0cad 01       		.byte	0x1
 11996 0cae 8F       		.byte	0x8f
 11997 0caf 81000000 		.4byte	0x81
 11998 0cb3 05       		.uleb128 0x5
 11999 0cb4 03       		.byte	0x3
 12000 0cb5 07000000 		.4byte	data_packet_length.10466
 12001 0cb9 19       		.uleb128 0x19
 12002 0cba 7E060000 		.4byte	.LASF186
 12003 0cbe 01       		.byte	0x1
 12004 0cbf 90       		.byte	0x90
 12005 0cc0 F6020000 		.4byte	0x2f6
 12006 0cc4 05       		.uleb128 0x5
 12007 0cc5 03       		.byte	0x3
 12008 0cc6 0C000000 		.4byte	data_packet_buffer.10467
 12009 0cca 19       		.uleb128 0x19
 12010 0ccb A40B0000 		.4byte	.LASF187
 12011 0ccf 01       		.byte	0x1
 12012 0cd0 91       		.byte	0x91
 12013 0cd1 72040000 		.4byte	0x472
 12014 0cd5 05       		.uleb128 0x5
 12015 0cd6 03       		.byte	0x3
 12016 0cd7 04000000 		.4byte	rx_queue.10468
 12017 0cdb 19       		.uleb128 0x19
 12018 0cdc 91010000 		.4byte	.LASF188
 12019 0ce0 01       		.byte	0x1
 12020 0ce1 94       		.byte	0x94
 12021 0ce2 81000000 		.4byte	0x81
 12022 0ce6 02       		.uleb128 0x2
 12023 0ce7 91       		.byte	0x91
 12024 0ce8 75       		.sleb128 -11
 12025 0ce9 19       		.uleb128 0x19
 12026 0cea 31060000 		.4byte	.LASF189
 12027 0cee 01       		.byte	0x1
 12028 0cef 95       		.byte	0x95
 12029 0cf0 81000000 		.4byte	0x81
 12030 0cf4 02       		.uleb128 0x2
 12031 0cf5 91       		.byte	0x91
 12032 0cf6 77       		.sleb128 -9
 12033 0cf7 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 267


 12034 0cf8 79070000 		.4byte	.LASF190
 12035 0cfc 01       		.byte	0x1
 12036 0cfd 96       		.byte	0x96
 12037 0cfe 81000000 		.4byte	0x81
 12038 0d02 02       		.uleb128 0x2
 12039 0d03 91       		.byte	0x91
 12040 0d04 76       		.sleb128 -10
 12041 0d05 00       		.byte	0
 12042 0d06 1A       		.uleb128 0x1a
 12043 0d07 D10F0000 		.4byte	.LASF197
 12044 0d0b 01       		.byte	0x1
 12045 0d0c 0C01     		.2byte	0x10c
 12046 0d0e 00000000 		.4byte	.LFB67
 12047 0d12 84080000 		.4byte	.LFE67-.LFB67
 12048 0d16 01       		.uleb128 0x1
 12049 0d17 9C       		.byte	0x9c
 12050 0d18 A50D0000 		.4byte	0xda5
 12051 0d1c 1B       		.uleb128 0x1b
 12052 0d1d A8060000 		.4byte	.LASF191
 12053 0d21 01       		.byte	0x1
 12054 0d22 0E01     		.2byte	0x10e
 12055 0d24 8D000000 		.4byte	0x8d
 12056 0d28 05       		.uleb128 0x5
 12057 0d29 03       		.byte	0x3
 12058 0d2a 00000000 		.4byte	counter_calibration.10484
 12059 0d2e 1B       		.uleb128 0x1b
 12060 0d2f E90C0000 		.4byte	.LASF192
 12061 0d33 01       		.byte	0x1
 12062 0d34 0F01     		.2byte	0x10f
 12063 0d36 8D000000 		.4byte	0x8d
 12064 0d3a 05       		.uleb128 0x5
 12065 0d3b 03       		.byte	0x3
 12066 0d3c 02000000 		.4byte	counter_tension_func.10485
 12067 0d40 1B       		.uleb128 0x1b
 12068 0d41 A8010000 		.4byte	.LASF193
 12069 0d45 01       		.byte	0x1
 12070 0d46 1001     		.2byte	0x110
 12071 0d48 A50D0000 		.4byte	0xda5
 12072 0d4c 03       		.uleb128 0x3
 12073 0d4d 91       		.byte	0x91
 12074 0d4e A86C     		.sleb128 -2520
 12075 0d50 1B       		.uleb128 0x1b
 12076 0d51 CC0C0000 		.4byte	.LASF194
 12077 0d55 01       		.byte	0x1
 12078 0d56 1201     		.2byte	0x112
 12079 0d58 81000000 		.4byte	0x81
 12080 0d5c 02       		.uleb128 0x2
 12081 0d5d 91       		.byte	0x91
 12082 0d5e 6E       		.sleb128 -18
 12083 0d5f 1B       		.uleb128 0x1b
 12084 0d60 A0090000 		.4byte	.LASF195
 12085 0d64 01       		.byte	0x1
 12086 0d65 1301     		.2byte	0x113
 12087 0d67 81000000 		.4byte	0x81
 12088 0d6b 02       		.uleb128 0x2
 12089 0d6c 91       		.byte	0x91
 12090 0d6d 6D       		.sleb128 -19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 268


 12091 0d6e 1C       		.uleb128 0x1c
 12092 0d6f 8E010000 		.4byte	.LBB2
 12093 0d73 30010000 		.4byte	.LBE2-.LBB2
 12094 0d77 890D0000 		.4byte	0xd89
 12095 0d7b 1D       		.uleb128 0x1d
 12096 0d7c 6900     		.ascii	"i\000"
 12097 0d7e 01       		.byte	0x1
 12098 0d7f 4D01     		.2byte	0x14d
 12099 0d81 81000000 		.4byte	0x81
 12100 0d85 02       		.uleb128 0x2
 12101 0d86 91       		.byte	0x91
 12102 0d87 6F       		.sleb128 -17
 12103 0d88 00       		.byte	0
 12104 0d89 1E       		.uleb128 0x1e
 12105 0d8a 5C060000 		.4byte	.LBB3
 12106 0d8e 50000000 		.4byte	.LBE3-.LBB3
 12107 0d92 1B       		.uleb128 0x1b
 12108 0d93 ED020000 		.4byte	.LASF196
 12109 0d97 01       		.byte	0x1
 12110 0d98 4002     		.2byte	0x240
 12111 0d9a B60D0000 		.4byte	0xdb6
 12112 0d9e 04       		.uleb128 0x4
 12113 0d9f 91       		.byte	0x91
 12114 0da0 90F77E   		.sleb128 -17520
 12115 0da3 00       		.byte	0
 12116 0da4 00       		.byte	0
 12117 0da5 07       		.uleb128 0x7
 12118 0da6 E3000000 		.4byte	0xe3
 12119 0daa B60D0000 		.4byte	0xdb6
 12120 0dae 1F       		.uleb128 0x1f
 12121 0daf 0E010000 		.4byte	0x10e
 12122 0db3 C309     		.2byte	0x9c3
 12123 0db5 00       		.byte	0
 12124 0db6 07       		.uleb128 0x7
 12125 0db7 E3000000 		.4byte	0xe3
 12126 0dbb C70D0000 		.4byte	0xdc7
 12127 0dbf 1F       		.uleb128 0x1f
 12128 0dc0 0E010000 		.4byte	0x10e
 12129 0dc4 973A     		.2byte	0x3a97
 12130 0dc6 00       		.byte	0
 12131 0dc7 1A       		.uleb128 0x1a
 12132 0dc8 E40F0000 		.4byte	.LASF198
 12133 0dcc 01       		.byte	0x1
 12134 0dcd 9402     		.2byte	0x294
 12135 0dcf 00000000 		.4byte	.LFB68
 12136 0dd3 C4050000 		.4byte	.LFE68-.LFB68
 12137 0dd7 01       		.uleb128 0x1
 12138 0dd8 9C       		.byte	0x9c
 12139 0dd9 7D0E0000 		.4byte	0xe7d
 12140 0ddd 20       		.uleb128 0x20
 12141 0dde 2C080000 		.4byte	.LASF199
 12142 0de2 01       		.byte	0x1
 12143 0de3 9402     		.2byte	0x294
 12144 0de5 81000000 		.4byte	0x81
 12145 0de9 02       		.uleb128 0x2
 12146 0dea 91       		.byte	0x91
 12147 0deb 5F       		.sleb128 -33
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 269


 12148 0dec 20       		.uleb128 0x20
 12149 0ded 91060000 		.4byte	.LASF200
 12150 0df1 01       		.byte	0x1
 12151 0df2 9402     		.2byte	0x294
 12152 0df4 7D0E0000 		.4byte	0xe7d
 12153 0df8 02       		.uleb128 0x2
 12154 0df9 91       		.byte	0x91
 12155 0dfa 58       		.sleb128 -40
 12156 0dfb 20       		.uleb128 0x20
 12157 0dfc CF110000 		.4byte	.LASF201
 12158 0e00 01       		.byte	0x1
 12159 0e01 9402     		.2byte	0x294
 12160 0e03 7D0E0000 		.4byte	0xe7d
 12161 0e07 02       		.uleb128 0x2
 12162 0e08 91       		.byte	0x91
 12163 0e09 54       		.sleb128 -44
 12164 0e0a 1B       		.uleb128 0x1b
 12165 0e0b FB040000 		.4byte	.LASF202
 12166 0e0f 01       		.byte	0x1
 12167 0e10 9602     		.2byte	0x296
 12168 0e12 BD000000 		.4byte	0xbd
 12169 0e16 02       		.uleb128 0x2
 12170 0e17 91       		.byte	0x91
 12171 0e18 74       		.sleb128 -12
 12172 0e19 1B       		.uleb128 0x1b
 12173 0e1a 1F040000 		.4byte	.LASF203
 12174 0e1e 01       		.byte	0x1
 12175 0e1f 9702     		.2byte	0x297
 12176 0e21 BD000000 		.4byte	0xbd
 12177 0e25 02       		.uleb128 0x2
 12178 0e26 91       		.byte	0x91
 12179 0e27 68       		.sleb128 -24
 12180 0e28 1B       		.uleb128 0x1b
 12181 0e29 29040000 		.4byte	.LASF204
 12182 0e2d 01       		.byte	0x1
 12183 0e2e 9702     		.2byte	0x297
 12184 0e30 BD000000 		.4byte	0xbd
 12185 0e34 02       		.uleb128 0x2
 12186 0e35 91       		.byte	0x91
 12187 0e36 64       		.sleb128 -28
 12188 0e37 1D       		.uleb128 0x1d
 12189 0e38 4D4F5400 		.ascii	"MOT\000"
 12190 0e3c 01       		.byte	0x1
 12191 0e3d 9802     		.2byte	0x298
 12192 0e3f 830E0000 		.4byte	0xe83
 12193 0e43 02       		.uleb128 0x2
 12194 0e44 91       		.byte	0x91
 12195 0e45 70       		.sleb128 -16
 12196 0e46 1B       		.uleb128 0x1b
 12197 0e47 9A110000 		.4byte	.LASF205
 12198 0e4b 01       		.byte	0x1
 12199 0e4c 9902     		.2byte	0x299
 12200 0e4e 81000000 		.4byte	0x81
 12201 0e52 02       		.uleb128 0x2
 12202 0e53 91       		.byte	0x91
 12203 0e54 6F       		.sleb128 -17
 12204 0e55 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 270


 12205 0e56 980B0000 		.4byte	.LASF206
 12206 0e5a 01       		.byte	0x1
 12207 0e5b 9B02     		.2byte	0x29b
 12208 0e5d 3B070000 		.4byte	0x73b
 12209 0e61 05       		.uleb128 0x5
 12210 0e62 03       		.byte	0x3
 12211 0e63 8C000000 		.4byte	current_emg.10510
 12212 0e67 21       		.uleb128 0x21
 12213 0e68 00000000 		.4byte	.Ldebug_ranges0+0
 12214 0e6c 1B       		.uleb128 0x1b
 12215 0e6d F0000000 		.4byte	.LASF207
 12216 0e71 01       		.byte	0x1
 12217 0e72 C002     		.2byte	0x2c0
 12218 0e74 BD000000 		.4byte	0xbd
 12219 0e78 02       		.uleb128 0x2
 12220 0e79 91       		.byte	0x91
 12221 0e7a 60       		.sleb128 -32
 12222 0e7b 00       		.byte	0
 12223 0e7c 00       		.byte	0
 12224 0e7d 0C       		.uleb128 0xc
 12225 0e7e 04       		.byte	0x4
 12226 0e7f A5010000 		.4byte	0x1a5
 12227 0e83 0C       		.uleb128 0xc
 12228 0e84 04       		.byte	0x4
 12229 0e85 82040000 		.4byte	0x482
 12230 0e89 22       		.uleb128 0x22
 12231 0e8a DE100000 		.4byte	.LASF208
 12232 0e8e 01       		.byte	0x1
 12233 0e8f 7303     		.2byte	0x373
 12234 0e91 00000000 		.4byte	.LFB69
 12235 0e95 34030000 		.4byte	.LFE69-.LFB69
 12236 0e99 01       		.uleb128 0x1
 12237 0e9a 9C       		.byte	0x9c
 12238 0e9b 190F0000 		.4byte	0xf19
 12239 0e9f 20       		.uleb128 0x20
 12240 0ea0 2C080000 		.4byte	.LASF199
 12241 0ea4 01       		.byte	0x1
 12242 0ea5 7303     		.2byte	0x373
 12243 0ea7 81000000 		.4byte	0x81
 12244 0eab 02       		.uleb128 0x2
 12245 0eac 91       		.byte	0x91
 12246 0ead 67       		.sleb128 -25
 12247 0eae 20       		.uleb128 0x20
 12248 0eaf 91060000 		.4byte	.LASF200
 12249 0eb3 01       		.byte	0x1
 12250 0eb4 7303     		.2byte	0x373
 12251 0eb6 7D0E0000 		.4byte	0xe7d
 12252 0eba 02       		.uleb128 0x2
 12253 0ebb 91       		.byte	0x91
 12254 0ebc 60       		.sleb128 -32
 12255 0ebd 20       		.uleb128 0x20
 12256 0ebe CF110000 		.4byte	.LASF201
 12257 0ec2 01       		.byte	0x1
 12258 0ec3 7303     		.2byte	0x373
 12259 0ec5 7D0E0000 		.4byte	0xe7d
 12260 0ec9 02       		.uleb128 0x2
 12261 0eca 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 271


 12262 0ecb 5C       		.sleb128 -36
 12263 0ecc 23       		.uleb128 0x23
 12264 0ecd 18000000 		.4byte	.Ldebug_ranges0+0x18
 12265 0ed1 F40E0000 		.4byte	0xef4
 12266 0ed5 1B       		.uleb128 0x1b
 12267 0ed6 F0000000 		.4byte	.LASF207
 12268 0eda 01       		.byte	0x1
 12269 0edb 7A03     		.2byte	0x37a
 12270 0edd BD000000 		.4byte	0xbd
 12271 0ee1 02       		.uleb128 0x2
 12272 0ee2 91       		.byte	0x91
 12273 0ee3 74       		.sleb128 -12
 12274 0ee4 1B       		.uleb128 0x1b
 12275 0ee5 F7010000 		.4byte	.LASF209
 12276 0ee9 01       		.byte	0x1
 12277 0eea 7B03     		.2byte	0x37b
 12278 0eec BD000000 		.4byte	0xbd
 12279 0ef0 02       		.uleb128 0x2
 12280 0ef1 91       		.byte	0x91
 12281 0ef2 70       		.sleb128 -16
 12282 0ef3 00       		.byte	0
 12283 0ef4 21       		.uleb128 0x21
 12284 0ef5 30000000 		.4byte	.Ldebug_ranges0+0x30
 12285 0ef9 1B       		.uleb128 0x1b
 12286 0efa 070E0000 		.4byte	.LASF210
 12287 0efe 01       		.byte	0x1
 12288 0eff A003     		.2byte	0x3a0
 12289 0f01 BD000000 		.4byte	0xbd
 12290 0f05 02       		.uleb128 0x2
 12291 0f06 91       		.byte	0x91
 12292 0f07 6C       		.sleb128 -20
 12293 0f08 1B       		.uleb128 0x1b
 12294 0f09 DB090000 		.4byte	.LASF211
 12295 0f0d 01       		.byte	0x1
 12296 0f0e A103     		.2byte	0x3a1
 12297 0f10 BD000000 		.4byte	0xbd
 12298 0f14 02       		.uleb128 0x2
 12299 0f15 91       		.byte	0x91
 12300 0f16 68       		.sleb128 -24
 12301 0f17 00       		.byte	0
 12302 0f18 00       		.byte	0
 12303 0f19 1A       		.uleb128 0x1a
 12304 0f1a 070A0000 		.4byte	.LASF212
 12305 0f1e 01       		.byte	0x1
 12306 0f1f CC03     		.2byte	0x3cc
 12307 0f21 00000000 		.4byte	.LFB70
 12308 0f25 B0010000 		.4byte	.LFE70-.LFB70
 12309 0f29 01       		.uleb128 0x1
 12310 0f2a 9C       		.byte	0x9c
 12311 0f2b 8D0F0000 		.4byte	0xf8d
 12312 0f2f 20       		.uleb128 0x20
 12313 0f30 2C080000 		.4byte	.LASF199
 12314 0f34 01       		.byte	0x1
 12315 0f35 CC03     		.2byte	0x3cc
 12316 0f37 81000000 		.4byte	0x81
 12317 0f3b 02       		.uleb128 0x2
 12318 0f3c 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 272


 12319 0f3d 77       		.sleb128 -9
 12320 0f3e 20       		.uleb128 0x20
 12321 0f3f 91060000 		.4byte	.LASF200
 12322 0f43 01       		.byte	0x1
 12323 0f44 CC03     		.2byte	0x3cc
 12324 0f46 7D0E0000 		.4byte	0xe7d
 12325 0f4a 02       		.uleb128 0x2
 12326 0f4b 91       		.byte	0x91
 12327 0f4c 70       		.sleb128 -16
 12328 0f4d 20       		.uleb128 0x20
 12329 0f4e CF110000 		.4byte	.LASF201
 12330 0f52 01       		.byte	0x1
 12331 0f53 CC03     		.2byte	0x3cc
 12332 0f55 7D0E0000 		.4byte	0xe7d
 12333 0f59 02       		.uleb128 0x2
 12334 0f5a 91       		.byte	0x91
 12335 0f5b 6C       		.sleb128 -20
 12336 0f5c 20       		.uleb128 0x20
 12337 0f5d 1F040000 		.4byte	.LASF203
 12338 0f61 01       		.byte	0x1
 12339 0f62 CD03     		.2byte	0x3cd
 12340 0f64 BD000000 		.4byte	0xbd
 12341 0f68 02       		.uleb128 0x2
 12342 0f69 91       		.byte	0x91
 12343 0f6a 68       		.sleb128 -24
 12344 0f6b 20       		.uleb128 0x20
 12345 0f6c 29040000 		.4byte	.LASF204
 12346 0f70 01       		.byte	0x1
 12347 0f71 CD03     		.2byte	0x3cd
 12348 0f73 BD000000 		.4byte	0xbd
 12349 0f77 02       		.uleb128 0x2
 12350 0f78 91       		.byte	0x91
 12351 0f79 00       		.sleb128 0
 12352 0f7a 1B       		.uleb128 0x1b
 12353 0f7b 090D0000 		.4byte	.LASF213
 12354 0f7f 01       		.byte	0x1
 12355 0f80 D003     		.2byte	0x3d0
 12356 0f82 81000000 		.4byte	0x81
 12357 0f86 05       		.uleb128 0x5
 12358 0f87 03       		.byte	0x3
 12359 0f88 8E000000 		.4byte	fsm_state.10547
 12360 0f8c 00       		.byte	0
 12361 0f8d 24       		.uleb128 0x24
 12362 0f8e DE050000 		.4byte	.LASF215
 12363 0f92 01       		.byte	0x1
 12364 0f93 0204     		.2byte	0x402
 12365 0f95 00000000 		.4byte	.LFB71
 12366 0f99 0C070000 		.4byte	.LFE71-.LFB71
 12367 0f9d 01       		.uleb128 0x1
 12368 0f9e 9C       		.byte	0x9c
 12369 0f9f 44110000 		.4byte	0x1144
 12370 0fa3 1B       		.uleb128 0x1b
 12371 0fa4 4B010000 		.4byte	.LASF216
 12372 0fa8 01       		.byte	0x1
 12373 0fa9 0404     		.2byte	0x404
 12374 0fab BD000000 		.4byte	0xbd
 12375 0faf 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 273


 12376 0fb0 91       		.byte	0x91
 12377 0fb1 74       		.sleb128 -12
 12378 0fb2 1B       		.uleb128 0x1b
 12379 0fb3 8B0C0000 		.4byte	.LASF217
 12380 0fb7 01       		.byte	0x1
 12381 0fb8 0504     		.2byte	0x405
 12382 0fba BD000000 		.4byte	0xbd
 12383 0fbe 03       		.uleb128 0x3
 12384 0fbf 91       		.byte	0x91
 12385 0fc0 B07F     		.sleb128 -80
 12386 0fc2 1B       		.uleb128 0x1b
 12387 0fc3 AB100000 		.4byte	.LASF218
 12388 0fc7 01       		.byte	0x1
 12389 0fc8 0604     		.2byte	0x406
 12390 0fca BD000000 		.4byte	0xbd
 12391 0fce 03       		.uleb128 0x3
 12392 0fcf 91       		.byte	0x91
 12393 0fd0 AC7F     		.sleb128 -84
 12394 0fd2 1B       		.uleb128 0x1b
 12395 0fd3 CF0B0000 		.4byte	.LASF219
 12396 0fd7 01       		.byte	0x1
 12397 0fd8 0704     		.2byte	0x407
 12398 0fda BD000000 		.4byte	0xbd
 12399 0fde 02       		.uleb128 0x2
 12400 0fdf 91       		.byte	0x91
 12401 0fe0 70       		.sleb128 -16
 12402 0fe1 1B       		.uleb128 0x1b
 12403 0fe2 CC0C0000 		.4byte	.LASF194
 12404 0fe6 01       		.byte	0x1
 12405 0fe7 0904     		.2byte	0x409
 12406 0fe9 81000000 		.4byte	0x81
 12407 0fed 02       		.uleb128 0x2
 12408 0fee 91       		.byte	0x91
 12409 0fef 6F       		.sleb128 -17
 12410 0ff0 1B       		.uleb128 0x1b
 12411 0ff1 8B030000 		.4byte	.LASF220
 12412 0ff5 01       		.byte	0x1
 12413 0ff6 0B04     		.2byte	0x40b
 12414 0ff8 830E0000 		.4byte	0xe83
 12415 0ffc 02       		.uleb128 0x2
 12416 0ffd 91       		.byte	0x91
 12417 0ffe 68       		.sleb128 -24
 12418 0fff 1B       		.uleb128 0x1b
 12419 1000 FF020000 		.4byte	.LASF221
 12420 1004 01       		.byte	0x1
 12421 1005 0C04     		.2byte	0x40c
 12422 1007 81000000 		.4byte	0x81
 12423 100b 02       		.uleb128 0x2
 12424 100c 91       		.byte	0x91
 12425 100d 67       		.sleb128 -25
 12426 100e 1D       		.uleb128 0x1d
 12427 100f 6B5F7000 		.ascii	"k_p\000"
 12428 1013 01       		.byte	0x1
 12429 1014 0E04     		.2byte	0x40e
 12430 1016 BD000000 		.4byte	0xbd
 12431 101a 02       		.uleb128 0x2
 12432 101b 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 274


 12433 101c 60       		.sleb128 -32
 12434 101d 1D       		.uleb128 0x1d
 12435 101e 6B5F6900 		.ascii	"k_i\000"
 12436 1022 01       		.byte	0x1
 12437 1023 0F04     		.2byte	0x40f
 12438 1025 BD000000 		.4byte	0xbd
 12439 1029 02       		.uleb128 0x2
 12440 102a 91       		.byte	0x91
 12441 102b 5C       		.sleb128 -36
 12442 102c 1D       		.uleb128 0x1d
 12443 102d 6B5F6400 		.ascii	"k_d\000"
 12444 1031 01       		.byte	0x1
 12445 1032 1004     		.2byte	0x410
 12446 1034 BD000000 		.4byte	0xbd
 12447 1038 02       		.uleb128 0x2
 12448 1039 91       		.byte	0x91
 12449 103a 58       		.sleb128 -40
 12450 103b 1B       		.uleb128 0x1b
 12451 103c B20D0000 		.4byte	.LASF75
 12452 1040 01       		.byte	0x1
 12453 1041 1204     		.2byte	0x412
 12454 1043 BD000000 		.4byte	0xbd
 12455 1047 02       		.uleb128 0x2
 12456 1048 91       		.byte	0x91
 12457 1049 54       		.sleb128 -44
 12458 104a 1B       		.uleb128 0x1b
 12459 104b 89050000 		.4byte	.LASF76
 12460 104f 01       		.byte	0x1
 12461 1050 1304     		.2byte	0x413
 12462 1052 BD000000 		.4byte	0xbd
 12463 1056 02       		.uleb128 0x2
 12464 1057 91       		.byte	0x91
 12465 1058 50       		.sleb128 -48
 12466 1059 1B       		.uleb128 0x1b
 12467 105a 71050000 		.4byte	.LASF77
 12468 105e 01       		.byte	0x1
 12469 105f 1404     		.2byte	0x414
 12470 1061 BD000000 		.4byte	0xbd
 12471 1065 02       		.uleb128 0x2
 12472 1066 91       		.byte	0x91
 12473 1067 4C       		.sleb128 -52
 12474 1068 1B       		.uleb128 0x1b
 12475 1069 84100000 		.4byte	.LASF78
 12476 106d 01       		.byte	0x1
 12477 106e 1604     		.2byte	0x416
 12478 1070 BD000000 		.4byte	0xbd
 12479 1074 02       		.uleb128 0x2
 12480 1075 91       		.byte	0x91
 12481 1076 48       		.sleb128 -56
 12482 1077 1B       		.uleb128 0x1b
 12483 1078 1A060000 		.4byte	.LASF79
 12484 107c 01       		.byte	0x1
 12485 107d 1704     		.2byte	0x417
 12486 107f BD000000 		.4byte	0xbd
 12487 1083 02       		.uleb128 0x2
 12488 1084 91       		.byte	0x91
 12489 1085 44       		.sleb128 -60
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 275


 12490 1086 1B       		.uleb128 0x1b
 12491 1087 930F0000 		.4byte	.LASF80
 12492 108b 01       		.byte	0x1
 12493 108c 1804     		.2byte	0x418
 12494 108e BD000000 		.4byte	0xbd
 12495 1092 02       		.uleb128 0x2
 12496 1093 91       		.byte	0x91
 12497 1094 40       		.sleb128 -64
 12498 1095 1B       		.uleb128 0x1b
 12499 1096 28060000 		.4byte	.LASF81
 12500 109a 01       		.byte	0x1
 12501 109b 1A04     		.2byte	0x41a
 12502 109d BD000000 		.4byte	0xbd
 12503 10a1 03       		.uleb128 0x3
 12504 10a2 91       		.byte	0x91
 12505 10a3 BC7F     		.sleb128 -68
 12506 10a5 1B       		.uleb128 0x1b
 12507 10a6 70070000 		.4byte	.LASF82
 12508 10aa 01       		.byte	0x1
 12509 10ab 1B04     		.2byte	0x41b
 12510 10ad BD000000 		.4byte	0xbd
 12511 10b1 03       		.uleb128 0x3
 12512 10b2 91       		.byte	0x91
 12513 10b3 B87F     		.sleb128 -72
 12514 10b5 1B       		.uleb128 0x1b
 12515 10b6 D0120000 		.4byte	.LASF83
 12516 10ba 01       		.byte	0x1
 12517 10bb 1C04     		.2byte	0x41c
 12518 10bd BD000000 		.4byte	0xbd
 12519 10c1 03       		.uleb128 0x3
 12520 10c2 91       		.byte	0x91
 12521 10c3 B47F     		.sleb128 -76
 12522 10c5 1B       		.uleb128 0x1b
 12523 10c6 F5050000 		.4byte	.LASF222
 12524 10ca 01       		.byte	0x1
 12525 10cb 2004     		.2byte	0x420
 12526 10cd BD000000 		.4byte	0xbd
 12527 10d1 05       		.uleb128 0x5
 12528 10d2 03       		.byte	0x3
 12529 10d3 90000000 		.4byte	pos_error_sum.10574
 12530 10d7 1B       		.uleb128 0x1b
 12531 10d8 67040000 		.4byte	.LASF223
 12532 10dc 01       		.byte	0x1
 12533 10dd 2104     		.2byte	0x421
 12534 10df BD000000 		.4byte	0xbd
 12535 10e3 05       		.uleb128 0x5
 12536 10e4 03       		.byte	0x3
 12537 10e5 9C000000 		.4byte	curr_error_sum.10575
 12538 10e9 1B       		.uleb128 0x1b
 12539 10ea 3A0C0000 		.4byte	.LASF224
 12540 10ee 01       		.byte	0x1
 12541 10ef 2304     		.2byte	0x423
 12542 10f1 BD000000 		.4byte	0xbd
 12543 10f5 05       		.uleb128 0x5
 12544 10f6 03       		.byte	0x3
 12545 10f7 94000000 		.4byte	prev_pos_err.10576
 12546 10fb 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 276


 12547 10fc 910D0000 		.4byte	.LASF225
 12548 1100 01       		.byte	0x1
 12549 1101 2404     		.2byte	0x424
 12550 1103 BD000000 		.4byte	0xbd
 12551 1107 05       		.uleb128 0x5
 12552 1108 03       		.byte	0x3
 12553 1109 A0000000 		.4byte	prev_curr_err.10577
 12554 110d 1B       		.uleb128 0x1b
 12555 110e F60F0000 		.4byte	.LASF226
 12556 1112 01       		.byte	0x1
 12557 1113 2504     		.2byte	0x425
 12558 1115 BD000000 		.4byte	0xbd
 12559 1119 05       		.uleb128 0x5
 12560 111a 03       		.byte	0x3
 12561 111b A4000000 		.4byte	prev_pwm.10578
 12562 111f 1B       		.uleb128 0x1b
 12563 1120 8F050000 		.4byte	.LASF227
 12564 1124 01       		.byte	0x1
 12565 1125 2704     		.2byte	0x427
 12566 1127 81000000 		.4byte	0x81
 12567 112b 05       		.uleb128 0x5
 12568 112c 03       		.byte	0x3
 12569 112d 98000000 		.4byte	motor_dir.10579
 12570 1131 1B       		.uleb128 0x1b
 12571 1132 4D060000 		.4byte	.LASF228
 12572 1136 01       		.byte	0x1
 12573 1137 2804     		.2byte	0x428
 12574 1139 99000000 		.4byte	0x99
 12575 113d 05       		.uleb128 0x5
 12576 113e 03       		.byte	0x3
 12577 113f A8000000 		.4byte	position_counter.10580
 12578 1143 00       		.byte	0
 12579 1144 1A       		.uleb128 0x1a
 12580 1145 3B050000 		.4byte	.LASF229
 12581 1149 01       		.byte	0x1
 12582 114a 3205     		.2byte	0x532
 12583 114c 00000000 		.4byte	.LFB72
 12584 1150 4C090000 		.4byte	.LFE72-.LFB72
 12585 1154 01       		.uleb128 0x1
 12586 1155 9C       		.byte	0x9c
 12587 1156 FB120000 		.4byte	0x12fb
 12588 115a 25       		.uleb128 0x25
 12589 115b 69647800 		.ascii	"idx\000"
 12590 115f 01       		.byte	0x1
 12591 1160 3205     		.2byte	0x532
 12592 1162 81000000 		.4byte	0x81
 12593 1166 03       		.uleb128 0x3
 12594 1167 91       		.byte	0x91
 12595 1168 AF7F     		.sleb128 -81
 12596 116a 1B       		.uleb128 0x1b
 12597 116b 4B010000 		.4byte	.LASF216
 12598 116f 01       		.byte	0x1
 12599 1170 3405     		.2byte	0x534
 12600 1172 BD000000 		.4byte	0xbd
 12601 1176 02       		.uleb128 0x2
 12602 1177 91       		.byte	0x91
 12603 1178 74       		.sleb128 -12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 277


 12604 1179 1B       		.uleb128 0x1b
 12605 117a 8B0C0000 		.4byte	.LASF217
 12606 117e 01       		.byte	0x1
 12607 117f 3505     		.2byte	0x535
 12608 1181 BD000000 		.4byte	0xbd
 12609 1185 03       		.uleb128 0x3
 12610 1186 91       		.byte	0x91
 12611 1187 B47F     		.sleb128 -76
 12612 1189 1B       		.uleb128 0x1b
 12613 118a AB100000 		.4byte	.LASF218
 12614 118e 01       		.byte	0x1
 12615 118f 3605     		.2byte	0x536
 12616 1191 BD000000 		.4byte	0xbd
 12617 1195 03       		.uleb128 0x3
 12618 1196 91       		.byte	0x91
 12619 1197 B07F     		.sleb128 -80
 12620 1199 1B       		.uleb128 0x1b
 12621 119a CF0B0000 		.4byte	.LASF219
 12622 119e 01       		.byte	0x1
 12623 119f 3705     		.2byte	0x537
 12624 11a1 BD000000 		.4byte	0xbd
 12625 11a5 02       		.uleb128 0x2
 12626 11a6 91       		.byte	0x91
 12627 11a7 70       		.sleb128 -16
 12628 11a8 1D       		.uleb128 0x1d
 12629 11a9 4D4F5400 		.ascii	"MOT\000"
 12630 11ad 01       		.byte	0x1
 12631 11ae 3905     		.2byte	0x539
 12632 11b0 830E0000 		.4byte	0xe83
 12633 11b4 02       		.uleb128 0x2
 12634 11b5 91       		.byte	0x91
 12635 11b6 6C       		.sleb128 -20
 12636 11b7 1B       		.uleb128 0x1b
 12637 11b8 9A110000 		.4byte	.LASF205
 12638 11bc 01       		.byte	0x1
 12639 11bd 3A05     		.2byte	0x53a
 12640 11bf 81000000 		.4byte	0x81
 12641 11c3 02       		.uleb128 0x2
 12642 11c4 91       		.byte	0x91
 12643 11c5 6B       		.sleb128 -21
 12644 11c6 1D       		.uleb128 0x1d
 12645 11c7 6B5F7000 		.ascii	"k_p\000"
 12646 11cb 01       		.byte	0x1
 12647 11cc 3C05     		.2byte	0x53c
 12648 11ce BD000000 		.4byte	0xbd
 12649 11d2 02       		.uleb128 0x2
 12650 11d3 91       		.byte	0x91
 12651 11d4 64       		.sleb128 -28
 12652 11d5 1D       		.uleb128 0x1d
 12653 11d6 6B5F6900 		.ascii	"k_i\000"
 12654 11da 01       		.byte	0x1
 12655 11db 3D05     		.2byte	0x53d
 12656 11dd BD000000 		.4byte	0xbd
 12657 11e1 02       		.uleb128 0x2
 12658 11e2 91       		.byte	0x91
 12659 11e3 60       		.sleb128 -32
 12660 11e4 1D       		.uleb128 0x1d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 278


 12661 11e5 6B5F6400 		.ascii	"k_d\000"
 12662 11e9 01       		.byte	0x1
 12663 11ea 3E05     		.2byte	0x53e
 12664 11ec BD000000 		.4byte	0xbd
 12665 11f0 02       		.uleb128 0x2
 12666 11f1 91       		.byte	0x91
 12667 11f2 5C       		.sleb128 -36
 12668 11f3 1B       		.uleb128 0x1b
 12669 11f4 B20D0000 		.4byte	.LASF75
 12670 11f8 01       		.byte	0x1
 12671 11f9 4005     		.2byte	0x540
 12672 11fb BD000000 		.4byte	0xbd
 12673 11ff 02       		.uleb128 0x2
 12674 1200 91       		.byte	0x91
 12675 1201 58       		.sleb128 -40
 12676 1202 1B       		.uleb128 0x1b
 12677 1203 89050000 		.4byte	.LASF76
 12678 1207 01       		.byte	0x1
 12679 1208 4105     		.2byte	0x541
 12680 120a BD000000 		.4byte	0xbd
 12681 120e 02       		.uleb128 0x2
 12682 120f 91       		.byte	0x91
 12683 1210 54       		.sleb128 -44
 12684 1211 1B       		.uleb128 0x1b
 12685 1212 71050000 		.4byte	.LASF77
 12686 1216 01       		.byte	0x1
 12687 1217 4205     		.2byte	0x542
 12688 1219 BD000000 		.4byte	0xbd
 12689 121d 02       		.uleb128 0x2
 12690 121e 91       		.byte	0x91
 12691 121f 50       		.sleb128 -48
 12692 1220 1B       		.uleb128 0x1b
 12693 1221 84100000 		.4byte	.LASF78
 12694 1225 01       		.byte	0x1
 12695 1226 4405     		.2byte	0x544
 12696 1228 BD000000 		.4byte	0xbd
 12697 122c 02       		.uleb128 0x2
 12698 122d 91       		.byte	0x91
 12699 122e 4C       		.sleb128 -52
 12700 122f 1B       		.uleb128 0x1b
 12701 1230 1A060000 		.4byte	.LASF79
 12702 1234 01       		.byte	0x1
 12703 1235 4505     		.2byte	0x545
 12704 1237 BD000000 		.4byte	0xbd
 12705 123b 02       		.uleb128 0x2
 12706 123c 91       		.byte	0x91
 12707 123d 48       		.sleb128 -56
 12708 123e 1B       		.uleb128 0x1b
 12709 123f 930F0000 		.4byte	.LASF80
 12710 1243 01       		.byte	0x1
 12711 1244 4605     		.2byte	0x546
 12712 1246 BD000000 		.4byte	0xbd
 12713 124a 02       		.uleb128 0x2
 12714 124b 91       		.byte	0x91
 12715 124c 44       		.sleb128 -60
 12716 124d 1B       		.uleb128 0x1b
 12717 124e 28060000 		.4byte	.LASF81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 279


 12718 1252 01       		.byte	0x1
 12719 1253 4805     		.2byte	0x548
 12720 1255 BD000000 		.4byte	0xbd
 12721 1259 02       		.uleb128 0x2
 12722 125a 91       		.byte	0x91
 12723 125b 40       		.sleb128 -64
 12724 125c 1B       		.uleb128 0x1b
 12725 125d 70070000 		.4byte	.LASF82
 12726 1261 01       		.byte	0x1
 12727 1262 4905     		.2byte	0x549
 12728 1264 BD000000 		.4byte	0xbd
 12729 1268 03       		.uleb128 0x3
 12730 1269 91       		.byte	0x91
 12731 126a BC7F     		.sleb128 -68
 12732 126c 1B       		.uleb128 0x1b
 12733 126d D0120000 		.4byte	.LASF83
 12734 1271 01       		.byte	0x1
 12735 1272 4A05     		.2byte	0x54a
 12736 1274 BD000000 		.4byte	0xbd
 12737 1278 03       		.uleb128 0x3
 12738 1279 91       		.byte	0x91
 12739 127a B87F     		.sleb128 -72
 12740 127c 1B       		.uleb128 0x1b
 12741 127d F5050000 		.4byte	.LASF222
 12742 1281 01       		.byte	0x1
 12743 1282 4E05     		.2byte	0x54e
 12744 1284 94020000 		.4byte	0x294
 12745 1288 05       		.uleb128 0x5
 12746 1289 03       		.byte	0x3
 12747 128a AC000000 		.4byte	pos_error_sum.10607
 12748 128e 1B       		.uleb128 0x1b
 12749 128f 67040000 		.4byte	.LASF223
 12750 1293 01       		.byte	0x1
 12751 1294 4F05     		.2byte	0x54f
 12752 1296 94020000 		.4byte	0x294
 12753 129a 05       		.uleb128 0x5
 12754 129b 03       		.byte	0x3
 12755 129c C0000000 		.4byte	curr_error_sum.10608
 12756 12a0 1B       		.uleb128 0x1b
 12757 12a1 3A0C0000 		.4byte	.LASF224
 12758 12a5 01       		.byte	0x1
 12759 12a6 5105     		.2byte	0x551
 12760 12a8 94020000 		.4byte	0x294
 12761 12ac 05       		.uleb128 0x5
 12762 12ad 03       		.byte	0x3
 12763 12ae B4000000 		.4byte	prev_pos_err.10609
 12764 12b2 1B       		.uleb128 0x1b
 12765 12b3 910D0000 		.4byte	.LASF225
 12766 12b7 01       		.byte	0x1
 12767 12b8 5205     		.2byte	0x552
 12768 12ba 94020000 		.4byte	0x294
 12769 12be 05       		.uleb128 0x5
 12770 12bf 03       		.byte	0x3
 12771 12c0 C8000000 		.4byte	prev_curr_err.10610
 12772 12c4 1B       		.uleb128 0x1b
 12773 12c5 F60F0000 		.4byte	.LASF226
 12774 12c9 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 280


 12775 12ca 5305     		.2byte	0x553
 12776 12cc 94020000 		.4byte	0x294
 12777 12d0 05       		.uleb128 0x5
 12778 12d1 03       		.byte	0x3
 12779 12d2 D0000000 		.4byte	prev_pwm.10611
 12780 12d6 1B       		.uleb128 0x1b
 12781 12d7 8F050000 		.4byte	.LASF227
 12782 12db 01       		.byte	0x1
 12783 12dc 5505     		.2byte	0x555
 12784 12de 3B070000 		.4byte	0x73b
 12785 12e2 05       		.uleb128 0x5
 12786 12e3 03       		.byte	0x3
 12787 12e4 BC000000 		.4byte	motor_dir.10612
 12788 12e8 1B       		.uleb128 0x1b
 12789 12e9 4D060000 		.4byte	.LASF228
 12790 12ed 01       		.byte	0x1
 12791 12ee 5605     		.2byte	0x556
 12792 12f0 A3030000 		.4byte	0x3a3
 12793 12f4 05       		.uleb128 0x5
 12794 12f5 03       		.byte	0x3
 12795 12f6 D8000000 		.4byte	position_counter.10613
 12796 12fa 00       		.byte	0
 12797 12fb 1A       		.uleb128 0x1a
 12798 12fc A9030000 		.4byte	.LASF230
 12799 1300 01       		.byte	0x1
 12800 1301 AF06     		.2byte	0x6af
 12801 1303 00000000 		.4byte	.LFB73
 12802 1307 14080000 		.4byte	.LFE73-.LFB73
 12803 130b 01       		.uleb128 0x1
 12804 130c 9C       		.byte	0x9c
 12805 130d 83140000 		.4byte	0x1483
 12806 1311 20       		.uleb128 0x20
 12807 1312 C6000000 		.4byte	.LASF231
 12808 1316 01       		.byte	0x1
 12809 1317 AF06     		.2byte	0x6af
 12810 1319 81000000 		.4byte	0x81
 12811 131d 03       		.uleb128 0x3
 12812 131e 91       		.byte	0x91
 12813 131f BF7F     		.sleb128 -65
 12814 1321 20       		.uleb128 0x20
 12815 1322 BB0B0000 		.4byte	.LASF232
 12816 1326 01       		.byte	0x1
 12817 1327 AF06     		.2byte	0x6af
 12818 1329 81000000 		.4byte	0x81
 12819 132d 03       		.uleb128 0x3
 12820 132e 91       		.byte	0x91
 12821 132f BE7F     		.sleb128 -66
 12822 1331 1B       		.uleb128 0x1b
 12823 1332 2B070000 		.4byte	.LASF233
 12824 1336 01       		.byte	0x1
 12825 1337 B106     		.2byte	0x6b1
 12826 1339 81000000 		.4byte	0x81
 12827 133d 02       		.uleb128 0x2
 12828 133e 91       		.byte	0x91
 12829 133f 67       		.sleb128 -25
 12830 1340 1D       		.uleb128 0x1d
 12831 1341 6A6A00   		.ascii	"jj\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 281


 12832 1344 01       		.byte	0x1
 12833 1345 B406     		.2byte	0x6b4
 12834 1347 81000000 		.4byte	0x81
 12835 134b 02       		.uleb128 0x2
 12836 134c 91       		.byte	0x91
 12837 134d 66       		.sleb128 -26
 12838 134e 1B       		.uleb128 0x1b
 12839 134f 73030000 		.4byte	.LASF234
 12840 1353 01       		.byte	0x1
 12841 1354 B606     		.2byte	0x6b6
 12842 1356 83140000 		.4byte	0x1483
 12843 135a 02       		.uleb128 0x2
 12844 135b 91       		.byte	0x91
 12845 135c 40       		.sleb128 -64
 12846 135d 1B       		.uleb128 0x1b
 12847 135e 0B110000 		.4byte	.LASF235
 12848 1362 01       		.byte	0x1
 12849 1363 B706     		.2byte	0x6b7
 12850 1365 B1000000 		.4byte	0xb1
 12851 1369 02       		.uleb128 0x2
 12852 136a 91       		.byte	0x91
 12853 136b 64       		.sleb128 -28
 12854 136c 1B       		.uleb128 0x1b
 12855 136d 7C0D0000 		.4byte	.LASF236
 12856 1371 01       		.byte	0x1
 12857 1372 B806     		.2byte	0x6b8
 12858 1374 BD000000 		.4byte	0xbd
 12859 1378 02       		.uleb128 0x2
 12860 1379 91       		.byte	0x91
 12861 137a 54       		.sleb128 -44
 12862 137b 1B       		.uleb128 0x1b
 12863 137c 9A0F0000 		.4byte	.LASF237
 12864 1380 01       		.byte	0x1
 12865 1381 B906     		.2byte	0x6b9
 12866 1383 BD000000 		.4byte	0xbd
 12867 1387 02       		.uleb128 0x2
 12868 1388 91       		.byte	0x91
 12869 1389 60       		.sleb128 -32
 12870 138a 1B       		.uleb128 0x1b
 12871 138b B0040000 		.4byte	.LASF238
 12872 138f 01       		.byte	0x1
 12873 1390 BA06     		.2byte	0x6ba
 12874 1392 BD000000 		.4byte	0xbd
 12875 1396 02       		.uleb128 0x2
 12876 1397 91       		.byte	0x91
 12877 1398 4C       		.sleb128 -52
 12878 1399 1B       		.uleb128 0x1b
 12879 139a 750F0000 		.4byte	.LASF239
 12880 139e 01       		.byte	0x1
 12881 139f BB06     		.2byte	0x6bb
 12882 13a1 BD000000 		.4byte	0xbd
 12883 13a5 02       		.uleb128 0x2
 12884 13a6 91       		.byte	0x91
 12885 13a7 50       		.sleb128 -48
 12886 13a8 1B       		.uleb128 0x1b
 12887 13a9 470C0000 		.4byte	.LASF240
 12888 13ad 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 282


 12889 13ae BC06     		.2byte	0x6bc
 12890 13b0 A5000000 		.4byte	0xa5
 12891 13b4 02       		.uleb128 0x2
 12892 13b5 91       		.byte	0x91
 12893 13b6 5F       		.sleb128 -33
 12894 13b7 1B       		.uleb128 0x1b
 12895 13b8 D60C0000 		.4byte	.LASF241
 12896 13bc 01       		.byte	0x1
 12897 13bd BE06     		.2byte	0x6be
 12898 13bf 93140000 		.4byte	0x1493
 12899 13c3 05       		.uleb128 0x5
 12900 13c4 03       		.byte	0x3
 12901 13c5 E0000000 		.4byte	last_value_encoder.10636
 12902 13c9 1B       		.uleb128 0x1b
 12903 13ca DF060000 		.4byte	.LASF242
 12904 13ce 01       		.byte	0x1
 12905 13cf BF06     		.2byte	0x6bf
 12906 13d1 93140000 		.4byte	0x1493
 12907 13d5 05       		.uleb128 0x5
 12908 13d6 03       		.byte	0x3
 12909 13d7 F8000000 		.4byte	comp_value_encoder.10637
 12910 13db 1B       		.uleb128 0x1b
 12911 13dc BD030000 		.4byte	.LASF243
 12912 13e0 01       		.byte	0x1
 12913 13e1 C006     		.2byte	0x6c0
 12914 13e3 A9140000 		.4byte	0x14a9
 12915 13e7 05       		.uleb128 0x5
 12916 13e8 03       		.byte	0x3
 12917 13e9 10010000 		.4byte	error.10638
 12918 13ed 1B       		.uleb128 0x1b
 12919 13ee 530F0000 		.4byte	.LASF244
 12920 13f2 01       		.byte	0x1
 12921 13f3 C206     		.2byte	0x6c2
 12922 13f5 3B070000 		.4byte	0x73b
 12923 13f9 05       		.uleb128 0x5
 12924 13fa 03       		.byte	0x3
 12925 13fb 04000000 		.4byte	only_first_time.10639
 12926 13ff 1B       		.uleb128 0x1b
 12927 1400 2E030000 		.4byte	.LASF245
 12928 1404 01       		.byte	0x1
 12929 1405 C306     		.2byte	0x6c3
 12930 1407 3B070000 		.4byte	0x73b
 12931 140b 05       		.uleb128 0x5
 12932 140c 03       		.byte	0x3
 12933 140d 64010000 		.4byte	safe_startup_motor_activation.10640
 12934 1411 1B       		.uleb128 0x1b
 12935 1412 98000000 		.4byte	.LASF246
 12936 1416 01       		.byte	0x1
 12937 1417 C406     		.2byte	0x6c4
 12938 1419 3B070000 		.4byte	0x73b
 12939 141d 05       		.uleb128 0x5
 12940 141e 03       		.byte	0x3
 12941 141f 60010000 		.4byte	one_time_execute.10641
 12942 1423 1B       		.uleb128 0x1b
 12943 1424 480A0000 		.4byte	.LASF247
 12944 1428 01       		.byte	0x1
 12945 1429 C506     		.2byte	0x6c5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 283


 12946 142b A3030000 		.4byte	0x3a3
 12947 142f 05       		.uleb128 0x5
 12948 1430 03       		.byte	0x3
 12949 1431 68010000 		.4byte	count_startup_motor.10642
 12950 1435 1B       		.uleb128 0x1b
 12951 1436 69090000 		.4byte	.LASF248
 12952 143a 01       		.byte	0x1
 12953 143b C706     		.2byte	0x6c7
 12954 143d 93140000 		.4byte	0x1493
 12955 1441 05       		.uleb128 0x5
 12956 1442 03       		.byte	0x3
 12957 1443 18010000 		.4byte	v_value.10643
 12958 1447 1B       		.uleb128 0x1b
 12959 1448 C7120000 		.4byte	.LASF249
 12960 144c 01       		.byte	0x1
 12961 144d C806     		.2byte	0x6c8
 12962 144f 93140000 		.4byte	0x1493
 12963 1453 05       		.uleb128 0x5
 12964 1454 03       		.byte	0x3
 12965 1455 30010000 		.4byte	vv_value.10644
 12966 1459 1B       		.uleb128 0x1b
 12967 145a 99010000 		.4byte	.LASF250
 12968 145e 01       		.byte	0x1
 12969 145f C906     		.2byte	0x6c9
 12970 1461 93140000 		.4byte	0x1493
 12971 1465 05       		.uleb128 0x5
 12972 1466 03       		.byte	0x3
 12973 1467 48010000 		.4byte	vvv_value.10645
 12974 146b 1E       		.uleb128 0x1e
 12975 146c 98000000 		.4byte	.LBB10
 12976 1470 6A000000 		.4byte	.LBE10-.LBB10
 12977 1474 1D       		.uleb128 0x1d
 12978 1475 6A00     		.ascii	"j\000"
 12979 1477 01       		.byte	0x1
 12980 1478 D906     		.2byte	0x6d9
 12981 147a 68000000 		.4byte	0x68
 12982 147e 02       		.uleb128 0x2
 12983 147f 91       		.byte	0x91
 12984 1480 58       		.sleb128 -40
 12985 1481 00       		.byte	0
 12986 1482 00       		.byte	0
 12987 1483 07       		.uleb128 0x7
 12988 1484 99000000 		.4byte	0x99
 12989 1488 93140000 		.4byte	0x1493
 12990 148c 08       		.uleb128 0x8
 12991 148d 0E010000 		.4byte	0x10e
 12992 1491 02       		.byte	0x2
 12993 1492 00       		.byte	0
 12994 1493 07       		.uleb128 0x7
 12995 1494 BD000000 		.4byte	0xbd
 12996 1498 A9140000 		.4byte	0x14a9
 12997 149c 08       		.uleb128 0x8
 12998 149d 0E010000 		.4byte	0x10e
 12999 14a1 01       		.byte	0x1
 13000 14a2 08       		.uleb128 0x8
 13001 14a3 0E010000 		.4byte	0x10e
 13002 14a7 02       		.byte	0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 284


 13003 14a8 00       		.byte	0
 13004 14a9 07       		.uleb128 0x7
 13005 14aa 81000000 		.4byte	0x81
 13006 14ae BF140000 		.4byte	0x14bf
 13007 14b2 08       		.uleb128 0x8
 13008 14b3 0E010000 		.4byte	0x10e
 13009 14b7 01       		.byte	0x1
 13010 14b8 08       		.uleb128 0x8
 13011 14b9 0E010000 		.4byte	0x10e
 13012 14bd 02       		.byte	0x2
 13013 14be 00       		.byte	0
 13014 14bf 24       		.uleb128 0x24
 13015 14c0 500E0000 		.4byte	.LASF251
 13016 14c4 01       		.byte	0x1
 13017 14c5 8C07     		.2byte	0x78c
 13018 14c7 00000000 		.4byte	.LFB74
 13019 14cb 54120000 		.4byte	.LFE74-.LFB74
 13020 14cf 01       		.uleb128 0x1
 13021 14d0 9C       		.byte	0x9c
 13022 14d1 AB150000 		.4byte	0x15ab
 13023 14d5 1B       		.uleb128 0x1b
 13024 14d6 F00D0000 		.4byte	.LASF252
 13025 14da 01       		.byte	0x1
 13026 14db A007     		.2byte	0x7a0
 13027 14dd BD000000 		.4byte	0xbd
 13028 14e1 02       		.uleb128 0x2
 13029 14e2 91       		.byte	0x91
 13030 14e3 64       		.sleb128 -28
 13031 14e4 1B       		.uleb128 0x1b
 13032 14e5 370F0000 		.4byte	.LASF253
 13033 14e9 01       		.byte	0x1
 13034 14ea A207     		.2byte	0x7a2
 13035 14ec 8D000000 		.4byte	0x8d
 13036 14f0 05       		.uleb128 0x5
 13037 14f1 03       		.byte	0x3
 13038 14f2 78010000 		.4byte	emg_counter_1.10662
 13039 14f6 1B       		.uleb128 0x1b
 13040 14f7 450F0000 		.4byte	.LASF254
 13041 14fb 01       		.byte	0x1
 13042 14fc A307     		.2byte	0x7a3
 13043 14fe 8D000000 		.4byte	0x8d
 13044 1502 05       		.uleb128 0x5
 13045 1503 03       		.byte	0x3
 13046 1504 7A010000 		.4byte	emg_counter_2.10663
 13047 1508 1B       		.uleb128 0x1b
 13048 1509 5D020000 		.4byte	.LASF255
 13049 150d 01       		.byte	0x1
 13050 150e A407     		.2byte	0x7a4
 13051 1510 8D000000 		.4byte	0x8d
 13052 1514 05       		.uleb128 0x5
 13053 1515 03       		.byte	0x3
 13054 1516 80010000 		.4byte	UD_counter.10664
 13055 151a 1B       		.uleb128 0x1b
 13056 151b CD030000 		.4byte	.LASF256
 13057 151f 01       		.byte	0x1
 13058 1520 A507     		.2byte	0x7a5
 13059 1522 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 285


 13060 1526 05       		.uleb128 0x5
 13061 1527 03       		.byte	0x3
 13062 1528 88010000 		.4byte	LR_counter.10665
 13063 152c 1B       		.uleb128 0x1b
 13064 152d AD0B0000 		.4byte	.LASF257
 13065 1531 01       		.byte	0x1
 13066 1532 A607     		.2byte	0x7a6
 13067 1534 BD000000 		.4byte	0xbd
 13068 1538 05       		.uleb128 0x5
 13069 1539 03       		.byte	0x3
 13070 153a 7C010000 		.4byte	UD_mean_value.10666
 13071 153e 1B       		.uleb128 0x1b
 13072 153f 20120000 		.4byte	.LASF258
 13073 1543 01       		.byte	0x1
 13074 1544 A707     		.2byte	0x7a7
 13075 1546 BD000000 		.4byte	0xbd
 13076 154a 05       		.uleb128 0x5
 13077 154b 03       		.byte	0x3
 13078 154c 84010000 		.4byte	LR_mean_value.10667
 13079 1550 1B       		.uleb128 0x1b
 13080 1551 B6020000 		.4byte	.LASF259
 13081 1555 01       		.byte	0x1
 13082 1556 A807     		.2byte	0x7a8
 13083 1558 81000000 		.4byte	0x81
 13084 155c 05       		.uleb128 0x5
 13085 155d 03       		.byte	0x3
 13086 155e 0C000000 		.4byte	first_tension_valid.10668
 13087 1562 1B       		.uleb128 0x1b
 13088 1563 0D050000 		.4byte	.LASF260
 13089 1567 01       		.byte	0x1
 13090 1568 A907     		.2byte	0x7a9
 13091 156a BD000000 		.4byte	0xbd
 13092 156e 05       		.uleb128 0x5
 13093 156f 03       		.byte	0x3
 13094 1570 08000000 		.4byte	detect_power_cycle_prev.10669
 13095 1574 1B       		.uleb128 0x1b
 13096 1575 790A0000 		.4byte	.LASF261
 13097 1579 01       		.byte	0x1
 13098 157a AA07     		.2byte	0x7aa
 13099 157c 8D000000 		.4byte	0x8d
 13100 1580 05       		.uleb128 0x5
 13101 1581 03       		.byte	0x3
 13102 1582 70010000 		.4byte	count.10670
 13103 1586 1B       		.uleb128 0x1b
 13104 1587 89010000 		.4byte	.LASF262
 13105 158b 01       		.byte	0x1
 13106 158c AB07     		.2byte	0x7ab
 13107 158e 99000000 		.4byte	0x99
 13108 1592 05       		.uleb128 0x5
 13109 1593 03       		.byte	0x3
 13110 1594 74010000 		.4byte	v_count.10671
 13111 1598 1D       		.uleb128 0x1d
 13112 1599 69647800 		.ascii	"idx\000"
 13113 159d 01       		.byte	0x1
 13114 159e AC07     		.2byte	0x7ac
 13115 15a0 81000000 		.4byte	0x81
 13116 15a4 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 286


 13117 15a5 03       		.byte	0x3
 13118 15a6 72010000 		.4byte	idx.10672
 13119 15aa 00       		.byte	0
 13120 15ab 26       		.uleb128 0x26
 13121 15ac 1B0E0000 		.4byte	.LASF263
 13122 15b0 01       		.byte	0x1
 13123 15b1 0F0A     		.2byte	0xa0f
 13124 15b3 00000000 		.4byte	.LFB75
 13125 15b7 04010000 		.4byte	.LFE75-.LFB75
 13126 15bb 01       		.uleb128 0x1
 13127 15bc 9C       		.byte	0x9c
 13128 15bd F2150000 		.4byte	0x15f2
 13129 15c1 1E       		.uleb128 0x1e
 13130 15c2 06000000 		.4byte	.LBB11
 13131 15c6 DE000000 		.4byte	.LBE11-.LBB11
 13132 15ca 1D       		.uleb128 0x1d
 13133 15cb 6900     		.ascii	"i\000"
 13134 15cd 01       		.byte	0x1
 13135 15ce 110A     		.2byte	0xa11
 13136 15d0 81000000 		.4byte	0x81
 13137 15d4 02       		.uleb128 0x2
 13138 15d5 91       		.byte	0x91
 13139 15d6 77       		.sleb128 -9
 13140 15d7 1E       		.uleb128 0x1e
 13141 15d8 24000000 		.4byte	.LBB12
 13142 15dc B4000000 		.4byte	.LBE12-.LBB12
 13143 15e0 1B       		.uleb128 0x1b
 13144 15e1 66080000 		.4byte	.LASF40
 13145 15e5 01       		.byte	0x1
 13146 15e6 130A     		.2byte	0xa13
 13147 15e8 BD000000 		.4byte	0xbd
 13148 15ec 02       		.uleb128 0x2
 13149 15ed 91       		.byte	0x91
 13150 15ee 70       		.sleb128 -16
 13151 15ef 00       		.byte	0
 13152 15f0 00       		.byte	0
 13153 15f1 00       		.byte	0
 13154 15f2 1A       		.uleb128 0x1a
 13155 15f3 E8030000 		.4byte	.LASF264
 13156 15f7 01       		.byte	0x1
 13157 15f8 310A     		.2byte	0xa31
 13158 15fa 00000000 		.4byte	.LFB76
 13159 15fe D8000000 		.4byte	.LFE76-.LFB76
 13160 1602 01       		.uleb128 0x1
 13161 1603 9C       		.byte	0x9c
 13162 1604 36160000 		.4byte	0x1636
 13163 1608 20       		.uleb128 0x20
 13164 1609 500C0000 		.4byte	.LASF265
 13165 160d 01       		.byte	0x1
 13166 160e 310A     		.2byte	0xa31
 13167 1610 81000000 		.4byte	0x81
 13168 1614 02       		.uleb128 0x2
 13169 1615 91       		.byte	0x91
 13170 1616 67       		.sleb128 -25
 13171 1617 1B       		.uleb128 0x1b
 13172 1618 C00C0000 		.4byte	.LASF266
 13173 161c 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 287


 13174 161d 330A     		.2byte	0xa33
 13175 161f 8D000000 		.4byte	0x8d
 13176 1623 02       		.uleb128 0x2
 13177 1624 91       		.byte	0x91
 13178 1625 6E       		.sleb128 -18
 13179 1626 1B       		.uleb128 0x1b
 13180 1627 10080000 		.4byte	.LASF267
 13181 162b 01       		.byte	0x1
 13182 162c 340A     		.2byte	0xa34
 13183 162e 8D000000 		.4byte	0x8d
 13184 1632 02       		.uleb128 0x2
 13185 1633 91       		.byte	0x91
 13186 1634 6C       		.sleb128 -20
 13187 1635 00       		.byte	0
 13188 1636 24       		.uleb128 0x24
 13189 1637 8D080000 		.4byte	.LASF268
 13190 163b 01       		.byte	0x1
 13191 163c 4B0A     		.2byte	0xa4b
 13192 163e 00000000 		.4byte	.LFB77
 13193 1642 58060000 		.4byte	.LFE77-.LFB77
 13194 1646 01       		.uleb128 0x1
 13195 1647 9C       		.byte	0x9c
 13196 1648 CE170000 		.4byte	0x17ce
 13197 164c 1B       		.uleb128 0x1b
 13198 164d 26000000 		.4byte	.LASF269
 13199 1651 01       		.byte	0x1
 13200 1652 4C0A     		.2byte	0xa4c
 13201 1654 81000000 		.4byte	0x81
 13202 1658 05       		.uleb128 0x5
 13203 1659 03       		.byte	0x3
 13204 165a 8A010000 		.4byte	pos_cycle_status.10742
 13205 165e 1B       		.uleb128 0x1b
 13206 165f 820E0000 		.4byte	.LASF270
 13207 1663 01       		.byte	0x1
 13208 1664 4D0A     		.2byte	0xa4d
 13209 1666 3B070000 		.4byte	0x73b
 13210 166a 05       		.uleb128 0x5
 13211 166b 03       		.byte	0x3
 13212 166c 94010000 		.4byte	emg_cycle_status.10743
 13213 1670 1B       		.uleb128 0x1b
 13214 1671 4B0D0000 		.4byte	.LASF271
 13215 1675 01       		.byte	0x1
 13216 1676 4E0A     		.2byte	0xa4e
 13217 1678 3B070000 		.4byte	0x73b
 13218 167c 05       		.uleb128 0x5
 13219 167d 03       		.byte	0x3
 13220 167e 98010000 		.4byte	motion_status.10744
 13221 1682 1B       		.uleb128 0x1b
 13222 1683 8B0A0000 		.4byte	.LASF272
 13223 1687 01       		.byte	0x1
 13224 1688 4F0A     		.2byte	0xa4f
 13225 168a 3B070000 		.4byte	0x73b
 13226 168e 05       		.uleb128 0x5
 13227 168f 03       		.byte	0x3
 13228 1690 A4010000 		.4byte	emg_excess_status.10745
 13229 1694 1B       		.uleb128 0x1b
 13230 1695 CC100000 		.4byte	.LASF273
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 288


 13231 1699 01       		.byte	0x1
 13232 169a 500A     		.2byte	0xa50
 13233 169c 81000000 		.4byte	0x81
 13234 16a0 05       		.uleb128 0x5
 13235 16a1 03       		.byte	0x3
 13236 16a2 B8010000 		.4byte	rest_cycle_status.10746
 13237 16a6 1B       		.uleb128 0x1b
 13238 16a7 17030000 		.4byte	.LASF274
 13239 16ab 01       		.byte	0x1
 13240 16ac 510A     		.2byte	0xa51
 13241 16ae BD000000 		.4byte	0xbd
 13242 16b2 05       		.uleb128 0x5
 13243 16b3 03       		.byte	0x3
 13244 16b4 10000000 		.4byte	bin_threshold.10747
 13245 16b8 1B       		.uleb128 0x1b
 13246 16b9 61100000 		.4byte	.LASF275
 13247 16bd 01       		.byte	0x1
 13248 16be 520A     		.2byte	0xa52
 13249 16c0 BD000000 		.4byte	0xbd
 13250 16c4 05       		.uleb128 0x5
 13251 16c5 03       		.byte	0x3
 13252 16c6 14000000 		.4byte	exc_act_thr.10748
 13253 16ca 1B       		.uleb128 0x1b
 13254 16cb E4010000 		.4byte	.LASF276
 13255 16cf 01       		.byte	0x1
 13256 16d0 530A     		.2byte	0xa53
 13257 16d2 BD000000 		.4byte	0xbd
 13258 16d6 05       		.uleb128 0x5
 13259 16d7 03       		.byte	0x3
 13260 16d8 8C010000 		.4byte	thr_pos.10749
 13261 16dc 1B       		.uleb128 0x1b
 13262 16dd B70A0000 		.4byte	.LASF277
 13263 16e1 01       		.byte	0x1
 13264 16e2 540A     		.2byte	0xa54
 13265 16e4 BD000000 		.4byte	0xbd
 13266 16e8 05       		.uleb128 0x5
 13267 16e9 03       		.byte	0x3
 13268 16ea 90010000 		.4byte	max_pos.10750
 13269 16ee 1D       		.uleb128 0x1d
 13270 16ef 6900     		.ascii	"i\000"
 13271 16f1 01       		.byte	0x1
 13272 16f2 550A     		.2byte	0xa55
 13273 16f4 81000000 		.4byte	0x81
 13274 16f8 02       		.uleb128 0x2
 13275 16f9 91       		.byte	0x91
 13276 16fa 6F       		.sleb128 -17
 13277 16fb 1B       		.uleb128 0x1b
 13278 16fc 99050000 		.4byte	.LASF278
 13279 1700 01       		.byte	0x1
 13280 1701 550A     		.2byte	0xa55
 13281 1703 81000000 		.4byte	0x81
 13282 1707 02       		.uleb128 0x2
 13283 1708 91       		.byte	0x91
 13284 1709 5B       		.sleb128 -37
 13285 170a 1B       		.uleb128 0x1b
 13286 170b 16010000 		.4byte	.LASF279
 13287 170f 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 289


 13288 1710 550A     		.2byte	0xa55
 13289 1712 81000000 		.4byte	0x81
 13290 1716 02       		.uleb128 0x2
 13291 1717 91       		.byte	0x91
 13292 1718 5A       		.sleb128 -38
 13293 1719 1B       		.uleb128 0x1b
 13294 171a E40D0000 		.4byte	.LASF280
 13295 171e 01       		.byte	0x1
 13296 171f 550A     		.2byte	0xa55
 13297 1721 81000000 		.4byte	0x81
 13298 1725 02       		.uleb128 0x2
 13299 1726 91       		.byte	0x91
 13300 1727 59       		.sleb128 -39
 13301 1728 1B       		.uleb128 0x1b
 13302 1729 EA0D0000 		.4byte	.LASF281
 13303 172d 01       		.byte	0x1
 13304 172e 550A     		.2byte	0xa55
 13305 1730 81000000 		.4byte	0x81
 13306 1734 02       		.uleb128 0x2
 13307 1735 91       		.byte	0x91
 13308 1736 58       		.sleb128 -40
 13309 1737 1B       		.uleb128 0x1b
 13310 1738 2F0E0000 		.4byte	.LASF282
 13311 173c 01       		.byte	0x1
 13312 173d 560A     		.2byte	0xa56
 13313 173f BD000000 		.4byte	0xbd
 13314 1743 02       		.uleb128 0x2
 13315 1744 91       		.byte	0x91
 13316 1745 64       		.sleb128 -28
 13317 1746 1B       		.uleb128 0x1b
 13318 1747 C7040000 		.4byte	.LASF283
 13319 174b 01       		.byte	0x1
 13320 174c 560A     		.2byte	0xa56
 13321 174e BD000000 		.4byte	0xbd
 13322 1752 02       		.uleb128 0x2
 13323 1753 91       		.byte	0x91
 13324 1754 60       		.sleb128 -32
 13325 1755 1B       		.uleb128 0x1b
 13326 1756 800F0000 		.4byte	.LASF284
 13327 175a 01       		.byte	0x1
 13328 175b 560A     		.2byte	0xa56
 13329 175d BD000000 		.4byte	0xbd
 13330 1761 02       		.uleb128 0x2
 13331 1762 91       		.byte	0x91
 13332 1763 68       		.sleb128 -24
 13333 1764 1B       		.uleb128 0x1b
 13334 1765 62040000 		.4byte	.LASF285
 13335 1769 01       		.byte	0x1
 13336 176a 570A     		.2byte	0xa57
 13337 176c BD000000 		.4byte	0xbd
 13338 1770 02       		.uleb128 0x2
 13339 1771 91       		.byte	0x91
 13340 1772 5C       		.sleb128 -36
 13341 1773 1B       		.uleb128 0x1b
 13342 1774 C3060000 		.4byte	.LASF286
 13343 1778 01       		.byte	0x1
 13344 1779 580A     		.2byte	0xa58
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 290


 13345 177b 99000000 		.4byte	0x99
 13346 177f 05       		.uleb128 0x5
 13347 1780 03       		.byte	0x3
 13348 1781 BC010000 		.4byte	timer_value_s.10760
 13349 1785 1B       		.uleb128 0x1b
 13350 1786 5E060000 		.4byte	.LASF287
 13351 178a 01       		.byte	0x1
 13352 178b 580A     		.2byte	0xa58
 13353 178d 99000000 		.4byte	0x99
 13354 1791 05       		.uleb128 0x5
 13355 1792 03       		.byte	0x3
 13356 1793 C0010000 		.4byte	timer_value_e.10761
 13357 1797 1B       		.uleb128 0x1b
 13358 1798 3C100000 		.4byte	.LASF288
 13359 179c 01       		.byte	0x1
 13360 179d 590A     		.2byte	0xa59
 13361 179f A3030000 		.4byte	0x3a3
 13362 17a3 05       		.uleb128 0x5
 13363 17a4 03       		.byte	0x3
 13364 17a5 A8010000 		.4byte	timer_exc_s.10762
 13365 17a9 1B       		.uleb128 0x1b
 13366 17aa 17100000 		.4byte	.LASF289
 13367 17ae 01       		.byte	0x1
 13368 17af 590A     		.2byte	0xa59
 13369 17b1 A3030000 		.4byte	0x3a3
 13370 17b5 05       		.uleb128 0x5
 13371 17b6 03       		.byte	0x3
 13372 17b7 B0010000 		.4byte	timer_exc_e.10763
 13373 17bb 1B       		.uleb128 0x1b
 13374 17bc F2060000 		.4byte	.LASF290
 13375 17c0 01       		.byte	0x1
 13376 17c1 5A0A     		.2byte	0xa5a
 13377 17c3 94020000 		.4byte	0x294
 13378 17c7 05       		.uleb128 0x5
 13379 17c8 03       		.byte	0x3
 13380 17c9 9C010000 		.4byte	start_emg_pos.10764
 13381 17cd 00       		.byte	0
 13382 17ce 24       		.uleb128 0x24
 13383 17cf E30B0000 		.4byte	.LASF291
 13384 17d3 01       		.byte	0x1
 13385 17d4 060B     		.2byte	0xb06
 13386 17d6 00000000 		.4byte	.LFB78
 13387 17da 08010000 		.4byte	.LFE78-.LFB78
 13388 17de 01       		.uleb128 0x1
 13389 17df 9C       		.byte	0x9c
 13390 17e0 54180000 		.4byte	0x1854
 13391 17e4 1B       		.uleb128 0x1b
 13392 17e5 A4100000 		.4byte	.LASF292
 13393 17e9 01       		.byte	0x1
 13394 17ea 080B     		.2byte	0xb08
 13395 17ec EA000000 		.4byte	0xea
 13396 17f0 02       		.uleb128 0x2
 13397 17f1 91       		.byte	0x91
 13398 17f2 64       		.sleb128 -28
 13399 17f3 1B       		.uleb128 0x1b
 13400 17f4 100E0000 		.4byte	.LASF293
 13401 17f8 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 291


 13402 17f9 090B     		.2byte	0xb09
 13403 17fb 81000000 		.4byte	0x81
 13404 17ff 05       		.uleb128 0x5
 13405 1800 03       		.byte	0x3
 13406 1801 C8010000 		.4byte	row_number.10800
 13407 1805 1B       		.uleb128 0x1b
 13408 1806 9A040000 		.4byte	.LASF294
 13409 180a 01       		.byte	0x1
 13410 180b 0A0B     		.2byte	0xb0a
 13411 180d 81000000 		.4byte	0x81
 13412 1811 02       		.uleb128 0x2
 13413 1812 91       		.byte	0x91
 13414 1813 77       		.sleb128 -9
 13415 1814 1B       		.uleb128 0x1b
 13416 1815 D20E0000 		.4byte	.LASF295
 13417 1819 01       		.byte	0x1
 13418 181a 0B0B     		.2byte	0xb0b
 13419 181c 54180000 		.4byte	0x1854
 13420 1820 02       		.uleb128 0x2
 13421 1821 91       		.byte	0x91
 13422 1822 70       		.sleb128 -16
 13423 1823 1B       		.uleb128 0x1b
 13424 1824 1E010000 		.4byte	.LASF296
 13425 1828 01       		.byte	0x1
 13426 1829 0C0B     		.2byte	0xb0c
 13427 182b 54180000 		.4byte	0x1854
 13428 182f 02       		.uleb128 0x2
 13429 1830 91       		.byte	0x91
 13430 1831 6C       		.sleb128 -20
 13431 1832 1B       		.uleb128 0x1b
 13432 1833 38120000 		.4byte	.LASF297
 13433 1837 01       		.byte	0x1
 13434 1838 0D0B     		.2byte	0xb0d
 13435 183a 81000000 		.4byte	0x81
 13436 183e 02       		.uleb128 0x2
 13437 183f 91       		.byte	0x91
 13438 1840 6B       		.sleb128 -21
 13439 1841 1B       		.uleb128 0x1b
 13440 1842 9D0A0000 		.4byte	.LASF298
 13441 1846 01       		.byte	0x1
 13442 1847 0E0B     		.2byte	0xb0e
 13443 1849 54180000 		.4byte	0x1854
 13444 184d 05       		.uleb128 0x5
 13445 184e 03       		.byte	0x3
 13446 184f C4010000 		.4byte	m_addr.10805
 13447 1853 00       		.byte	0
 13448 1854 0C       		.uleb128 0xc
 13449 1855 04       		.byte	0x4
 13450 1856 81000000 		.4byte	0x81
 13451 185a 07       		.uleb128 0x7
 13452 185b 6A180000 		.4byte	0x186a
 13453 185f 6A180000 		.4byte	0x186a
 13454 1863 08       		.uleb128 0x8
 13455 1864 0E010000 		.4byte	0x10e
 13456 1868 1C       		.byte	0x1c
 13457 1869 00       		.byte	0
 13458 186a 27       		.uleb128 0x27
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 292


 13459 186b 81000000 		.4byte	0x81
 13460 186f 19       		.uleb128 0x19
 13461 1870 DD0E0000 		.4byte	.LASF299
 13462 1874 01       		.byte	0x1
 13463 1875 40       		.byte	0x40
 13464 1876 80180000 		.4byte	0x1880
 13465 187a 05       		.uleb128 0x5
 13466 187b 03       		.byte	0x3
 13467 187c 00000000 		.4byte	pwm_preload_values
 13468 1880 27       		.uleb128 0x27
 13469 1881 5A180000 		.4byte	0x185a
 13470 1885 28       		.uleb128 0x28
 13471 1886 23100000 		.4byte	.LASF300
 13472 188a 08       		.byte	0x8
 13473 188b 1207     		.2byte	0x712
 13474 188d 91180000 		.4byte	0x1891
 13475 1891 06       		.uleb128 0x6
 13476 1892 76000000 		.4byte	0x76
 13477 1896 07       		.uleb128 0x7
 13478 1897 A5010000 		.4byte	0x1a5
 13479 189b A6180000 		.4byte	0x18a6
 13480 189f 08       		.uleb128 0x8
 13481 18a0 0E010000 		.4byte	0x10e
 13482 18a4 01       		.byte	0x1
 13483 18a5 00       		.byte	0
 13484 18a6 28       		.uleb128 0x28
 13485 18a7 11070000 		.4byte	.LASF301
 13486 18ab 07       		.byte	0x7
 13487 18ac 2302     		.2byte	0x223
 13488 18ae 96180000 		.4byte	0x1896
 13489 18b2 28       		.uleb128 0x28
 13490 18b3 BE040000 		.4byte	.LASF302
 13491 18b7 07       		.byte	0x7
 13492 18b8 2302     		.2byte	0x223
 13493 18ba 96180000 		.4byte	0x1896
 13494 18be 28       		.uleb128 0x28
 13495 18bf 820C0000 		.4byte	.LASF303
 13496 18c3 07       		.byte	0x7
 13497 18c4 2302     		.2byte	0x223
 13498 18c6 96180000 		.4byte	0x1896
 13499 18ca 07       		.uleb128 0x7
 13500 18cb E2010000 		.4byte	0x1e2
 13501 18cf DA180000 		.4byte	0x18da
 13502 18d3 08       		.uleb128 0x8
 13503 18d4 0E010000 		.4byte	0x10e
 13504 18d8 01       		.byte	0x1
 13505 18d9 00       		.byte	0
 13506 18da 28       		.uleb128 0x28
 13507 18db BC060000 		.4byte	.LASF304
 13508 18df 07       		.byte	0x7
 13509 18e0 2402     		.2byte	0x224
 13510 18e2 CA180000 		.4byte	0x18ca
 13511 18e6 28       		.uleb128 0x28
 13512 18e7 2E120000 		.4byte	.LASF305
 13513 18eb 07       		.byte	0x7
 13514 18ec 2402     		.2byte	0x224
 13515 18ee CA180000 		.4byte	0x18ca
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 293


 13516 18f2 28       		.uleb128 0x28
 13517 18f3 7A110000 		.4byte	.LASF306
 13518 18f7 07       		.byte	0x7
 13519 18f8 2502     		.2byte	0x225
 13520 18fa 63020000 		.4byte	0x263
 13521 18fe 28       		.uleb128 0x28
 13522 18ff 65030000 		.4byte	.LASF307
 13523 1903 07       		.byte	0x7
 13524 1904 2502     		.2byte	0x225
 13525 1906 63020000 		.4byte	0x263
 13526 190a 28       		.uleb128 0x28
 13527 190b 93000000 		.4byte	.LASF308
 13528 190f 07       		.byte	0x7
 13529 1910 2702     		.2byte	0x227
 13530 1912 B4020000 		.4byte	0x2b4
 13531 1916 28       		.uleb128 0x28
 13532 1917 310F0000 		.4byte	.LASF309
 13533 191b 07       		.byte	0x7
 13534 191c 2802     		.2byte	0x228
 13535 191e BE090000 		.4byte	0x9be
 13536 1922 28       		.uleb128 0x28
 13537 1923 A40A0000 		.4byte	.LASF310
 13538 1927 07       		.byte	0x7
 13539 1928 2802     		.2byte	0x228
 13540 192a BE090000 		.4byte	0x9be
 13541 192e 28       		.uleb128 0x28
 13542 192f 71090000 		.4byte	.LASF311
 13543 1933 07       		.byte	0x7
 13544 1934 2902     		.2byte	0x229
 13545 1936 970B0000 		.4byte	0xb97
 13546 193a 07       		.uleb128 0x7
 13547 193b 6F0B0000 		.4byte	0xb6f
 13548 193f 4A190000 		.4byte	0x194a
 13549 1943 08       		.uleb128 0x8
 13550 1944 0E010000 		.4byte	0x10e
 13551 1948 01       		.byte	0x1
 13552 1949 00       		.byte	0
 13553 194a 28       		.uleb128 0x28
 13554 194b 6E0C0000 		.4byte	.LASF312
 13555 194f 07       		.byte	0x7
 13556 1950 2A02     		.2byte	0x22a
 13557 1952 3A190000 		.4byte	0x193a
 13558 1956 28       		.uleb128 0x28
 13559 1957 CC090000 		.4byte	.LASF313
 13560 195b 07       		.byte	0x7
 13561 195c 2A02     		.2byte	0x22a
 13562 195e 3A190000 		.4byte	0x193a
 13563 1962 28       		.uleb128 0x28
 13564 1963 580C0000 		.4byte	.LASF314
 13565 1967 07       		.byte	0x7
 13566 1968 2A02     		.2byte	0x22a
 13567 196a 3A190000 		.4byte	0x193a
 13568 196e 07       		.uleb128 0x7
 13569 196f 6F0B0000 		.4byte	0xb6f
 13570 1973 7E190000 		.4byte	0x197e
 13571 1977 08       		.uleb128 0x8
 13572 1978 0E010000 		.4byte	0x10e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 294


 13573 197c 02       		.byte	0x2
 13574 197d 00       		.byte	0
 13575 197e 28       		.uleb128 0x28
 13576 197f 57050000 		.4byte	.LASF315
 13577 1983 07       		.byte	0x7
 13578 1984 2B02     		.2byte	0x22b
 13579 1986 6E190000 		.4byte	0x196e
 13580 198a 07       		.uleb128 0x7
 13581 198b 6F0B0000 		.4byte	0xb6f
 13582 198f 9A190000 		.4byte	0x199a
 13583 1993 08       		.uleb128 0x8
 13584 1994 0E010000 		.4byte	0x10e
 13585 1998 07       		.byte	0x7
 13586 1999 00       		.byte	0
 13587 199a 28       		.uleb128 0x28
 13588 199b AE010000 		.4byte	.LASF316
 13589 199f 07       		.byte	0x7
 13590 19a0 2C02     		.2byte	0x22c
 13591 19a2 8A190000 		.4byte	0x198a
 13592 19a6 28       		.uleb128 0x28
 13593 19a7 92030000 		.4byte	.LASF317
 13594 19ab 07       		.byte	0x7
 13595 19ac 2D02     		.2byte	0x22d
 13596 19ae 6F0B0000 		.4byte	0xb6f
 13597 19b2 28       		.uleb128 0x28
 13598 19b3 CA020000 		.4byte	.LASF318
 13599 19b7 07       		.byte	0x7
 13600 19b8 2F02     		.2byte	0x22f
 13601 19ba 8D000000 		.4byte	0x8d
 13602 19be 28       		.uleb128 0x28
 13603 19bf 51090000 		.4byte	.LASF319
 13604 19c3 07       		.byte	0x7
 13605 19c4 3002     		.2byte	0x230
 13606 19c6 8D000000 		.4byte	0x8d
 13607 19ca 28       		.uleb128 0x28
 13608 19cb FE0C0000 		.4byte	.LASF320
 13609 19cf 07       		.byte	0x7
 13610 19d0 3102     		.2byte	0x231
 13611 19d2 D5000000 		.4byte	0xd5
 13612 19d6 28       		.uleb128 0x28
 13613 19d7 B80D0000 		.4byte	.LASF321
 13614 19db 07       		.byte	0x7
 13615 19dc 3302     		.2byte	0x233
 13616 19de 94020000 		.4byte	0x294
 13617 19e2 28       		.uleb128 0x28
 13618 19e3 96100000 		.4byte	.LASF322
 13619 19e7 07       		.byte	0x7
 13620 19e8 3402     		.2byte	0x234
 13621 19ea 2B070000 		.4byte	0x72b
 13622 19ee 28       		.uleb128 0x28
 13623 19ef B70F0000 		.4byte	.LASF323
 13624 19f3 07       		.byte	0x7
 13625 19f4 3502     		.2byte	0x235
 13626 19f6 2B070000 		.4byte	0x72b
 13627 19fa 28       		.uleb128 0x28
 13628 19fb 0C060000 		.4byte	.LASF324
 13629 19ff 07       		.byte	0x7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 295


 13630 1a00 3602     		.2byte	0x236
 13631 1a02 94020000 		.4byte	0x294
 13632 1a06 28       		.uleb128 0x28
 13633 1a07 30100000 		.4byte	.LASF325
 13634 1a0b 07       		.byte	0x7
 13635 1a0c 3702     		.2byte	0x237
 13636 1a0e 94020000 		.4byte	0x294
 13637 1a12 28       		.uleb128 0x28
 13638 1a13 2A0D0000 		.4byte	.LASF326
 13639 1a17 07       		.byte	0x7
 13640 1a18 3802     		.2byte	0x238
 13641 1a1a BD000000 		.4byte	0xbd
 13642 1a1e 28       		.uleb128 0x28
 13643 1a1f 9A060000 		.4byte	.LASF327
 13644 1a23 07       		.byte	0x7
 13645 1a24 3A02     		.2byte	0x23a
 13646 1a26 430C0000 		.4byte	0xc43
 13647 1a2a 28       		.uleb128 0x28
 13648 1a2b E8040000 		.4byte	.LASF328
 13649 1a2f 07       		.byte	0x7
 13650 1a30 3B02     		.2byte	0x23b
 13651 1a32 0B0C0000 		.4byte	0xc0b
 13652 1a36 28       		.uleb128 0x28
 13653 1a37 3E040000 		.4byte	.LASF329
 13654 1a3b 07       		.byte	0x7
 13655 1a3c 3C02     		.2byte	0x23c
 13656 1a3e 0B0C0000 		.4byte	0xc0b
 13657 1a42 28       		.uleb128 0x28
 13658 1a43 3D0D0000 		.4byte	.LASF330
 13659 1a47 07       		.byte	0x7
 13660 1a48 3D02     		.2byte	0x23d
 13661 1a4a 0B0C0000 		.4byte	0xc0b
 13662 1a4e 28       		.uleb128 0x28
 13663 1a4f AA110000 		.4byte	.LASF331
 13664 1a53 07       		.byte	0x7
 13665 1a54 3E02     		.2byte	0x23e
 13666 1a56 0B0C0000 		.4byte	0xc0b
 13667 1a5a 28       		.uleb128 0x28
 13668 1a5b 3C080000 		.4byte	.LASF332
 13669 1a5f 07       		.byte	0x7
 13670 1a60 4102     		.2byte	0x241
 13671 1a62 3B070000 		.4byte	0x73b
 13672 1a66 28       		.uleb128 0x28
 13673 1a67 E2000000 		.4byte	.LASF333
 13674 1a6b 07       		.byte	0x7
 13675 1a6c 4202     		.2byte	0x242
 13676 1a6e 81000000 		.4byte	0x81
 13677 1a72 28       		.uleb128 0x28
 13678 1a73 53040000 		.4byte	.LASF334
 13679 1a77 07       		.byte	0x7
 13680 1a78 4302     		.2byte	0x243
 13681 1a7a 81000000 		.4byte	0x81
 13682 1a7e 28       		.uleb128 0x28
 13683 1a7f 00010000 		.4byte	.LASF335
 13684 1a83 07       		.byte	0x7
 13685 1a84 4402     		.2byte	0x244
 13686 1a86 81000000 		.4byte	0x81
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 296


 13687 1a8a 28       		.uleb128 0x28
 13688 1a8b 62120000 		.4byte	.LASF336
 13689 1a8f 07       		.byte	0x7
 13690 1a90 4602     		.2byte	0x246
 13691 1a92 81000000 		.4byte	0x81
 13692 1a96 28       		.uleb128 0x28
 13693 1a97 750C0000 		.4byte	.LASF337
 13694 1a9b 07       		.byte	0x7
 13695 1a9c 4702     		.2byte	0x247
 13696 1a9e 81000000 		.4byte	0x81
 13697 1aa2 28       		.uleb128 0x28
 13698 1aa3 A4040000 		.4byte	.LASF338
 13699 1aa7 07       		.byte	0x7
 13700 1aa8 4802     		.2byte	0x248
 13701 1aaa 81000000 		.4byte	0x81
 13702 1aae 28       		.uleb128 0x28
 13703 1aaf 1C080000 		.4byte	.LASF339
 13704 1ab3 07       		.byte	0x7
 13705 1ab4 4902     		.2byte	0x249
 13706 1ab6 81000000 		.4byte	0x81
 13707 1aba 28       		.uleb128 0x28
 13708 1abb B1090000 		.4byte	.LASF340
 13709 1abf 07       		.byte	0x7
 13710 1ac0 4A02     		.2byte	0x24a
 13711 1ac2 3B070000 		.4byte	0x73b
 13712 1ac6 07       		.uleb128 0x7
 13713 1ac7 B1000000 		.4byte	0xb1
 13714 1acb D61A0000 		.4byte	0x1ad6
 13715 1acf 08       		.uleb128 0x8
 13716 1ad0 0E010000 		.4byte	0x10e
 13717 1ad4 0B       		.byte	0xb
 13718 1ad5 00       		.byte	0
 13719 1ad6 28       		.uleb128 0x28
 13720 1ad7 4B040000 		.4byte	.LASF341
 13721 1adb 07       		.byte	0x7
 13722 1adc 4E02     		.2byte	0x24e
 13723 1ade C61A0000 		.4byte	0x1ac6
 13724 1ae2 28       		.uleb128 0x28
 13725 1ae3 E1110000 		.4byte	.LASF342
 13726 1ae7 07       		.byte	0x7
 13727 1ae8 4F02     		.2byte	0x24f
 13728 1aea 81000000 		.4byte	0x81
 13729 1aee 07       		.uleb128 0x7
 13730 1aef A5000000 		.4byte	0xa5
 13731 1af3 FE1A0000 		.4byte	0x1afe
 13732 1af7 08       		.uleb128 0x8
 13733 1af8 0E010000 		.4byte	0x10e
 13734 1afc 01       		.byte	0x1
 13735 1afd 00       		.byte	0
 13736 1afe 28       		.uleb128 0x28
 13737 1aff 32050000 		.4byte	.LASF343
 13738 1b03 07       		.byte	0x7
 13739 1b04 5202     		.2byte	0x252
 13740 1b06 EE1A0000 		.4byte	0x1aee
 13741 1b0a 07       		.uleb128 0x7
 13742 1b0b 99000000 		.4byte	0x99
 13743 1b0f 201B0000 		.4byte	0x1b20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 297


 13744 1b13 08       		.uleb128 0x8
 13745 1b14 0E010000 		.4byte	0x10e
 13746 1b18 01       		.byte	0x1
 13747 1b19 08       		.uleb128 0x8
 13748 1b1a 0E010000 		.4byte	0x10e
 13749 1b1e 04       		.byte	0x4
 13750 1b1f 00       		.byte	0
 13751 1b20 28       		.uleb128 0x28
 13752 1b21 00070000 		.4byte	.LASF344
 13753 1b25 07       		.byte	0x7
 13754 1b26 5502     		.2byte	0x255
 13755 1b28 0A1B0000 		.4byte	0x1b0a
 13756 1b2c 28       		.uleb128 0x28
 13757 1b2d 600E0000 		.4byte	.LASF345
 13758 1b31 07       		.byte	0x7
 13759 1b32 5602     		.2byte	0x256
 13760 1b34 3B070000 		.4byte	0x73b
 13761 1b38 07       		.uleb128 0x7
 13762 1b39 8D000000 		.4byte	0x8d
 13763 1b3d 4E1B0000 		.4byte	0x1b4e
 13764 1b41 08       		.uleb128 0x8
 13765 1b42 0E010000 		.4byte	0x10e
 13766 1b46 01       		.byte	0x1
 13767 1b47 08       		.uleb128 0x8
 13768 1b48 0E010000 		.4byte	0x10e
 13769 1b4c 04       		.byte	0x4
 13770 1b4d 00       		.byte	0
 13771 1b4e 28       		.uleb128 0x28
 13772 1b4f B6100000 		.4byte	.LASF346
 13773 1b53 07       		.byte	0x7
 13774 1b54 5702     		.2byte	0x257
 13775 1b56 381B0000 		.4byte	0x1b38
 13776 1b5a 07       		.uleb128 0x7
 13777 1b5b 81000000 		.4byte	0x81
 13778 1b5f 701B0000 		.4byte	0x1b70
 13779 1b63 08       		.uleb128 0x8
 13780 1b64 0E010000 		.4byte	0x10e
 13781 1b68 01       		.byte	0x1
 13782 1b69 08       		.uleb128 0x8
 13783 1b6a 0E010000 		.4byte	0x10e
 13784 1b6e 04       		.byte	0x4
 13785 1b6f 00       		.byte	0
 13786 1b70 28       		.uleb128 0x28
 13787 1b71 D1060000 		.4byte	.LASF347
 13788 1b75 07       		.byte	0x7
 13789 1b76 5802     		.2byte	0x258
 13790 1b78 5A1B0000 		.4byte	0x1b5a
 13791 1b7c 28       		.uleb128 0x28
 13792 1b7d D8030000 		.4byte	.LASF348
 13793 1b81 07       		.byte	0x7
 13794 1b82 5902     		.2byte	0x259
 13795 1b84 3B070000 		.4byte	0x73b
 13796 1b88 28       		.uleb128 0x28
 13797 1b89 500B0000 		.4byte	.LASF349
 13798 1b8d 07       		.byte	0x7
 13799 1b8e 5C02     		.2byte	0x25c
 13800 1b90 BD000000 		.4byte	0xbd
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 298


 13801 1b94 28       		.uleb128 0x28
 13802 1b95 EF050000 		.4byte	.LASF350
 13803 1b99 07       		.byte	0x7
 13804 1b9a 5F02     		.2byte	0x25f
 13805 1b9c 9F010000 		.4byte	0x19f
 13806 1ba0 28       		.uleb128 0x28
 13807 1ba1 B6070000 		.4byte	.LASF351
 13808 1ba5 07       		.byte	0x7
 13809 1ba6 6202     		.2byte	0x262
 13810 1ba8 9F010000 		.4byte	0x19f
 13811 1bac 07       		.uleb128 0x7
 13812 1bad F30A0000 		.4byte	0xaf3
 13813 1bb1 BC1B0000 		.4byte	0x1bbc
 13814 1bb5 08       		.uleb128 0x8
 13815 1bb6 0E010000 		.4byte	0x10e
 13816 1bba 04       		.byte	0x4
 13817 1bbb 00       		.byte	0
 13818 1bbc 28       		.uleb128 0x28
 13819 1bbd 51050000 		.4byte	.LASF352
 13820 1bc1 07       		.byte	0x7
 13821 1bc2 6B02     		.2byte	0x26b
 13822 1bc4 AC1B0000 		.4byte	0x1bac
 13823 1bc8 28       		.uleb128 0x28
 13824 1bc9 3E060000 		.4byte	.LASF353
 13825 1bcd 07       		.byte	0x7
 13826 1bce 6B02     		.2byte	0x26b
 13827 1bd0 AC1B0000 		.4byte	0x1bac
 13828 1bd4 28       		.uleb128 0x28
 13829 1bd5 FF110000 		.4byte	.LASF354
 13830 1bd9 07       		.byte	0x7
 13831 1bda 7402     		.2byte	0x274
 13832 1bdc 81000000 		.4byte	0x81
 13833 1be0 00       		.byte	0
 13834              		.section	.debug_abbrev,"",%progbits
 13835              	.Ldebug_abbrev0:
 13836 0000 01       		.uleb128 0x1
 13837 0001 11       		.uleb128 0x11
 13838 0002 01       		.byte	0x1
 13839 0003 25       		.uleb128 0x25
 13840 0004 0E       		.uleb128 0xe
 13841 0005 13       		.uleb128 0x13
 13842 0006 0B       		.uleb128 0xb
 13843 0007 03       		.uleb128 0x3
 13844 0008 0E       		.uleb128 0xe
 13845 0009 1B       		.uleb128 0x1b
 13846 000a 0E       		.uleb128 0xe
 13847 000b 55       		.uleb128 0x55
 13848 000c 17       		.uleb128 0x17
 13849 000d 11       		.uleb128 0x11
 13850 000e 01       		.uleb128 0x1
 13851 000f 10       		.uleb128 0x10
 13852 0010 17       		.uleb128 0x17
 13853 0011 00       		.byte	0
 13854 0012 00       		.byte	0
 13855 0013 02       		.uleb128 0x2
 13856 0014 24       		.uleb128 0x24
 13857 0015 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 299


 13858 0016 0B       		.uleb128 0xb
 13859 0017 0B       		.uleb128 0xb
 13860 0018 3E       		.uleb128 0x3e
 13861 0019 0B       		.uleb128 0xb
 13862 001a 03       		.uleb128 0x3
 13863 001b 0E       		.uleb128 0xe
 13864 001c 00       		.byte	0
 13865 001d 00       		.byte	0
 13866 001e 03       		.uleb128 0x3
 13867 001f 16       		.uleb128 0x16
 13868 0020 00       		.byte	0
 13869 0021 03       		.uleb128 0x3
 13870 0022 0E       		.uleb128 0xe
 13871 0023 3A       		.uleb128 0x3a
 13872 0024 0B       		.uleb128 0xb
 13873 0025 3B       		.uleb128 0x3b
 13874 0026 0B       		.uleb128 0xb
 13875 0027 49       		.uleb128 0x49
 13876 0028 13       		.uleb128 0x13
 13877 0029 00       		.byte	0
 13878 002a 00       		.byte	0
 13879 002b 04       		.uleb128 0x4
 13880 002c 24       		.uleb128 0x24
 13881 002d 00       		.byte	0
 13882 002e 0B       		.uleb128 0xb
 13883 002f 0B       		.uleb128 0xb
 13884 0030 3E       		.uleb128 0x3e
 13885 0031 0B       		.uleb128 0xb
 13886 0032 03       		.uleb128 0x3
 13887 0033 08       		.uleb128 0x8
 13888 0034 00       		.byte	0
 13889 0035 00       		.byte	0
 13890 0036 05       		.uleb128 0x5
 13891 0037 16       		.uleb128 0x16
 13892 0038 00       		.byte	0
 13893 0039 03       		.uleb128 0x3
 13894 003a 0E       		.uleb128 0xe
 13895 003b 3A       		.uleb128 0x3a
 13896 003c 0B       		.uleb128 0xb
 13897 003d 3B       		.uleb128 0x3b
 13898 003e 05       		.uleb128 0x5
 13899 003f 49       		.uleb128 0x49
 13900 0040 13       		.uleb128 0x13
 13901 0041 00       		.byte	0
 13902 0042 00       		.byte	0
 13903 0043 06       		.uleb128 0x6
 13904 0044 35       		.uleb128 0x35
 13905 0045 00       		.byte	0
 13906 0046 49       		.uleb128 0x49
 13907 0047 13       		.uleb128 0x13
 13908 0048 00       		.byte	0
 13909 0049 00       		.byte	0
 13910 004a 07       		.uleb128 0x7
 13911 004b 01       		.uleb128 0x1
 13912 004c 01       		.byte	0x1
 13913 004d 49       		.uleb128 0x49
 13914 004e 13       		.uleb128 0x13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 300


 13915 004f 01       		.uleb128 0x1
 13916 0050 13       		.uleb128 0x13
 13917 0051 00       		.byte	0
 13918 0052 00       		.byte	0
 13919 0053 08       		.uleb128 0x8
 13920 0054 21       		.uleb128 0x21
 13921 0055 00       		.byte	0
 13922 0056 49       		.uleb128 0x49
 13923 0057 13       		.uleb128 0x13
 13924 0058 2F       		.uleb128 0x2f
 13925 0059 0B       		.uleb128 0xb
 13926 005a 00       		.byte	0
 13927 005b 00       		.byte	0
 13928 005c 09       		.uleb128 0x9
 13929 005d 04       		.uleb128 0x4
 13930 005e 01       		.byte	0x1
 13931 005f 03       		.uleb128 0x3
 13932 0060 0E       		.uleb128 0xe
 13933 0061 0B       		.uleb128 0xb
 13934 0062 0B       		.uleb128 0xb
 13935 0063 49       		.uleb128 0x49
 13936 0064 13       		.uleb128 0x13
 13937 0065 3A       		.uleb128 0x3a
 13938 0066 0B       		.uleb128 0xb
 13939 0067 3B       		.uleb128 0x3b
 13940 0068 0B       		.uleb128 0xb
 13941 0069 01       		.uleb128 0x1
 13942 006a 13       		.uleb128 0x13
 13943 006b 00       		.byte	0
 13944 006c 00       		.byte	0
 13945 006d 0A       		.uleb128 0xa
 13946 006e 28       		.uleb128 0x28
 13947 006f 00       		.byte	0
 13948 0070 03       		.uleb128 0x3
 13949 0071 0E       		.uleb128 0xe
 13950 0072 1C       		.uleb128 0x1c
 13951 0073 0B       		.uleb128 0xb
 13952 0074 00       		.byte	0
 13953 0075 00       		.byte	0
 13954 0076 0B       		.uleb128 0xb
 13955 0077 13       		.uleb128 0x13
 13956 0078 00       		.byte	0
 13957 0079 03       		.uleb128 0x3
 13958 007a 0E       		.uleb128 0xe
 13959 007b 3C       		.uleb128 0x3c
 13960 007c 19       		.uleb128 0x19
 13961 007d 00       		.byte	0
 13962 007e 00       		.byte	0
 13963 007f 0C       		.uleb128 0xc
 13964 0080 0F       		.uleb128 0xf
 13965 0081 00       		.byte	0
 13966 0082 0B       		.uleb128 0xb
 13967 0083 0B       		.uleb128 0xb
 13968 0084 49       		.uleb128 0x49
 13969 0085 13       		.uleb128 0x13
 13970 0086 00       		.byte	0
 13971 0087 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 301


 13972 0088 0D       		.uleb128 0xd
 13973 0089 13       		.uleb128 0x13
 13974 008a 01       		.byte	0x1
 13975 008b 03       		.uleb128 0x3
 13976 008c 0E       		.uleb128 0xe
 13977 008d 0B       		.uleb128 0xb
 13978 008e 0B       		.uleb128 0xb
 13979 008f 3A       		.uleb128 0x3a
 13980 0090 0B       		.uleb128 0xb
 13981 0091 3B       		.uleb128 0x3b
 13982 0092 0B       		.uleb128 0xb
 13983 0093 01       		.uleb128 0x1
 13984 0094 13       		.uleb128 0x13
 13985 0095 00       		.byte	0
 13986 0096 00       		.byte	0
 13987 0097 0E       		.uleb128 0xe
 13988 0098 0D       		.uleb128 0xd
 13989 0099 00       		.byte	0
 13990 009a 03       		.uleb128 0x3
 13991 009b 08       		.uleb128 0x8
 13992 009c 3A       		.uleb128 0x3a
 13993 009d 0B       		.uleb128 0xb
 13994 009e 3B       		.uleb128 0x3b
 13995 009f 0B       		.uleb128 0xb
 13996 00a0 49       		.uleb128 0x49
 13997 00a1 13       		.uleb128 0x13
 13998 00a2 38       		.uleb128 0x38
 13999 00a3 0B       		.uleb128 0xb
 14000 00a4 00       		.byte	0
 14001 00a5 00       		.byte	0
 14002 00a6 0F       		.uleb128 0xf
 14003 00a7 0D       		.uleb128 0xd
 14004 00a8 00       		.byte	0
 14005 00a9 03       		.uleb128 0x3
 14006 00aa 0E       		.uleb128 0xe
 14007 00ab 3A       		.uleb128 0x3a
 14008 00ac 0B       		.uleb128 0xb
 14009 00ad 3B       		.uleb128 0x3b
 14010 00ae 0B       		.uleb128 0xb
 14011 00af 49       		.uleb128 0x49
 14012 00b0 13       		.uleb128 0x13
 14013 00b1 38       		.uleb128 0x38
 14014 00b2 0B       		.uleb128 0xb
 14015 00b3 00       		.byte	0
 14016 00b4 00       		.byte	0
 14017 00b5 10       		.uleb128 0x10
 14018 00b6 13       		.uleb128 0x13
 14019 00b7 01       		.byte	0x1
 14020 00b8 03       		.uleb128 0x3
 14021 00b9 0E       		.uleb128 0xe
 14022 00ba 0B       		.uleb128 0xb
 14023 00bb 0B       		.uleb128 0xb
 14024 00bc 3A       		.uleb128 0x3a
 14025 00bd 0B       		.uleb128 0xb
 14026 00be 3B       		.uleb128 0x3b
 14027 00bf 05       		.uleb128 0x5
 14028 00c0 01       		.uleb128 0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 302


 14029 00c1 13       		.uleb128 0x13
 14030 00c2 00       		.byte	0
 14031 00c3 00       		.byte	0
 14032 00c4 11       		.uleb128 0x11
 14033 00c5 0D       		.uleb128 0xd
 14034 00c6 00       		.byte	0
 14035 00c7 03       		.uleb128 0x3
 14036 00c8 0E       		.uleb128 0xe
 14037 00c9 3A       		.uleb128 0x3a
 14038 00ca 0B       		.uleb128 0xb
 14039 00cb 3B       		.uleb128 0x3b
 14040 00cc 05       		.uleb128 0x5
 14041 00cd 49       		.uleb128 0x49
 14042 00ce 13       		.uleb128 0x13
 14043 00cf 38       		.uleb128 0x38
 14044 00d0 0B       		.uleb128 0xb
 14045 00d1 00       		.byte	0
 14046 00d2 00       		.byte	0
 14047 00d3 12       		.uleb128 0x12
 14048 00d4 0D       		.uleb128 0xd
 14049 00d5 00       		.byte	0
 14050 00d6 03       		.uleb128 0x3
 14051 00d7 08       		.uleb128 0x8
 14052 00d8 3A       		.uleb128 0x3a
 14053 00d9 0B       		.uleb128 0xb
 14054 00da 3B       		.uleb128 0x3b
 14055 00db 05       		.uleb128 0x5
 14056 00dc 49       		.uleb128 0x49
 14057 00dd 13       		.uleb128 0x13
 14058 00de 38       		.uleb128 0x38
 14059 00df 0B       		.uleb128 0xb
 14060 00e0 00       		.byte	0
 14061 00e1 00       		.byte	0
 14062 00e2 13       		.uleb128 0x13
 14063 00e3 13       		.uleb128 0x13
 14064 00e4 01       		.byte	0x1
 14065 00e5 03       		.uleb128 0x3
 14066 00e6 0E       		.uleb128 0xe
 14067 00e7 0B       		.uleb128 0xb
 14068 00e8 05       		.uleb128 0x5
 14069 00e9 3A       		.uleb128 0x3a
 14070 00ea 0B       		.uleb128 0xb
 14071 00eb 3B       		.uleb128 0x3b
 14072 00ec 05       		.uleb128 0x5
 14073 00ed 01       		.uleb128 0x1
 14074 00ee 13       		.uleb128 0x13
 14075 00ef 00       		.byte	0
 14076 00f0 00       		.byte	0
 14077 00f1 14       		.uleb128 0x14
 14078 00f2 0D       		.uleb128 0xd
 14079 00f3 00       		.byte	0
 14080 00f4 03       		.uleb128 0x3
 14081 00f5 08       		.uleb128 0x8
 14082 00f6 3A       		.uleb128 0x3a
 14083 00f7 0B       		.uleb128 0xb
 14084 00f8 3B       		.uleb128 0x3b
 14085 00f9 05       		.uleb128 0x5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 303


 14086 00fa 49       		.uleb128 0x49
 14087 00fb 13       		.uleb128 0x13
 14088 00fc 38       		.uleb128 0x38
 14089 00fd 05       		.uleb128 0x5
 14090 00fe 00       		.byte	0
 14091 00ff 00       		.byte	0
 14092 0100 15       		.uleb128 0x15
 14093 0101 0D       		.uleb128 0xd
 14094 0102 00       		.byte	0
 14095 0103 03       		.uleb128 0x3
 14096 0104 0E       		.uleb128 0xe
 14097 0105 3A       		.uleb128 0x3a
 14098 0106 0B       		.uleb128 0xb
 14099 0107 3B       		.uleb128 0x3b
 14100 0108 05       		.uleb128 0x5
 14101 0109 49       		.uleb128 0x49
 14102 010a 13       		.uleb128 0x13
 14103 010b 38       		.uleb128 0x38
 14104 010c 05       		.uleb128 0x5
 14105 010d 00       		.byte	0
 14106 010e 00       		.byte	0
 14107 010f 16       		.uleb128 0x16
 14108 0110 04       		.uleb128 0x4
 14109 0111 01       		.byte	0x1
 14110 0112 0B       		.uleb128 0xb
 14111 0113 0B       		.uleb128 0xb
 14112 0114 49       		.uleb128 0x49
 14113 0115 13       		.uleb128 0x13
 14114 0116 3A       		.uleb128 0x3a
 14115 0117 0B       		.uleb128 0xb
 14116 0118 3B       		.uleb128 0x3b
 14117 0119 05       		.uleb128 0x5
 14118 011a 01       		.uleb128 0x1
 14119 011b 13       		.uleb128 0x13
 14120 011c 00       		.byte	0
 14121 011d 00       		.byte	0
 14122 011e 17       		.uleb128 0x17
 14123 011f 2E       		.uleb128 0x2e
 14124 0120 00       		.byte	0
 14125 0121 3F       		.uleb128 0x3f
 14126 0122 19       		.uleb128 0x19
 14127 0123 03       		.uleb128 0x3
 14128 0124 0E       		.uleb128 0xe
 14129 0125 3A       		.uleb128 0x3a
 14130 0126 0B       		.uleb128 0xb
 14131 0127 3B       		.uleb128 0x3b
 14132 0128 0B       		.uleb128 0xb
 14133 0129 27       		.uleb128 0x27
 14134 012a 19       		.uleb128 0x19
 14135 012b 11       		.uleb128 0x11
 14136 012c 01       		.uleb128 0x1
 14137 012d 12       		.uleb128 0x12
 14138 012e 06       		.uleb128 0x6
 14139 012f 40       		.uleb128 0x40
 14140 0130 18       		.uleb128 0x18
 14141 0131 9742     		.uleb128 0x2117
 14142 0133 19       		.uleb128 0x19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 304


 14143 0134 00       		.byte	0
 14144 0135 00       		.byte	0
 14145 0136 18       		.uleb128 0x18
 14146 0137 2E       		.uleb128 0x2e
 14147 0138 01       		.byte	0x1
 14148 0139 3F       		.uleb128 0x3f
 14149 013a 19       		.uleb128 0x19
 14150 013b 03       		.uleb128 0x3
 14151 013c 0E       		.uleb128 0xe
 14152 013d 3A       		.uleb128 0x3a
 14153 013e 0B       		.uleb128 0xb
 14154 013f 3B       		.uleb128 0x3b
 14155 0140 0B       		.uleb128 0xb
 14156 0141 11       		.uleb128 0x11
 14157 0142 01       		.uleb128 0x1
 14158 0143 12       		.uleb128 0x12
 14159 0144 06       		.uleb128 0x6
 14160 0145 40       		.uleb128 0x40
 14161 0146 18       		.uleb128 0x18
 14162 0147 9642     		.uleb128 0x2116
 14163 0149 19       		.uleb128 0x19
 14164 014a 01       		.uleb128 0x1
 14165 014b 13       		.uleb128 0x13
 14166 014c 00       		.byte	0
 14167 014d 00       		.byte	0
 14168 014e 19       		.uleb128 0x19
 14169 014f 34       		.uleb128 0x34
 14170 0150 00       		.byte	0
 14171 0151 03       		.uleb128 0x3
 14172 0152 0E       		.uleb128 0xe
 14173 0153 3A       		.uleb128 0x3a
 14174 0154 0B       		.uleb128 0xb
 14175 0155 3B       		.uleb128 0x3b
 14176 0156 0B       		.uleb128 0xb
 14177 0157 49       		.uleb128 0x49
 14178 0158 13       		.uleb128 0x13
 14179 0159 02       		.uleb128 0x2
 14180 015a 18       		.uleb128 0x18
 14181 015b 00       		.byte	0
 14182 015c 00       		.byte	0
 14183 015d 1A       		.uleb128 0x1a
 14184 015e 2E       		.uleb128 0x2e
 14185 015f 01       		.byte	0x1
 14186 0160 3F       		.uleb128 0x3f
 14187 0161 19       		.uleb128 0x19
 14188 0162 03       		.uleb128 0x3
 14189 0163 0E       		.uleb128 0xe
 14190 0164 3A       		.uleb128 0x3a
 14191 0165 0B       		.uleb128 0xb
 14192 0166 3B       		.uleb128 0x3b
 14193 0167 05       		.uleb128 0x5
 14194 0168 27       		.uleb128 0x27
 14195 0169 19       		.uleb128 0x19
 14196 016a 11       		.uleb128 0x11
 14197 016b 01       		.uleb128 0x1
 14198 016c 12       		.uleb128 0x12
 14199 016d 06       		.uleb128 0x6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 305


 14200 016e 40       		.uleb128 0x40
 14201 016f 18       		.uleb128 0x18
 14202 0170 9642     		.uleb128 0x2116
 14203 0172 19       		.uleb128 0x19
 14204 0173 01       		.uleb128 0x1
 14205 0174 13       		.uleb128 0x13
 14206 0175 00       		.byte	0
 14207 0176 00       		.byte	0
 14208 0177 1B       		.uleb128 0x1b
 14209 0178 34       		.uleb128 0x34
 14210 0179 00       		.byte	0
 14211 017a 03       		.uleb128 0x3
 14212 017b 0E       		.uleb128 0xe
 14213 017c 3A       		.uleb128 0x3a
 14214 017d 0B       		.uleb128 0xb
 14215 017e 3B       		.uleb128 0x3b
 14216 017f 05       		.uleb128 0x5
 14217 0180 49       		.uleb128 0x49
 14218 0181 13       		.uleb128 0x13
 14219 0182 02       		.uleb128 0x2
 14220 0183 18       		.uleb128 0x18
 14221 0184 00       		.byte	0
 14222 0185 00       		.byte	0
 14223 0186 1C       		.uleb128 0x1c
 14224 0187 0B       		.uleb128 0xb
 14225 0188 01       		.byte	0x1
 14226 0189 11       		.uleb128 0x11
 14227 018a 01       		.uleb128 0x1
 14228 018b 12       		.uleb128 0x12
 14229 018c 06       		.uleb128 0x6
 14230 018d 01       		.uleb128 0x1
 14231 018e 13       		.uleb128 0x13
 14232 018f 00       		.byte	0
 14233 0190 00       		.byte	0
 14234 0191 1D       		.uleb128 0x1d
 14235 0192 34       		.uleb128 0x34
 14236 0193 00       		.byte	0
 14237 0194 03       		.uleb128 0x3
 14238 0195 08       		.uleb128 0x8
 14239 0196 3A       		.uleb128 0x3a
 14240 0197 0B       		.uleb128 0xb
 14241 0198 3B       		.uleb128 0x3b
 14242 0199 05       		.uleb128 0x5
 14243 019a 49       		.uleb128 0x49
 14244 019b 13       		.uleb128 0x13
 14245 019c 02       		.uleb128 0x2
 14246 019d 18       		.uleb128 0x18
 14247 019e 00       		.byte	0
 14248 019f 00       		.byte	0
 14249 01a0 1E       		.uleb128 0x1e
 14250 01a1 0B       		.uleb128 0xb
 14251 01a2 01       		.byte	0x1
 14252 01a3 11       		.uleb128 0x11
 14253 01a4 01       		.uleb128 0x1
 14254 01a5 12       		.uleb128 0x12
 14255 01a6 06       		.uleb128 0x6
 14256 01a7 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 306


 14257 01a8 00       		.byte	0
 14258 01a9 1F       		.uleb128 0x1f
 14259 01aa 21       		.uleb128 0x21
 14260 01ab 00       		.byte	0
 14261 01ac 49       		.uleb128 0x49
 14262 01ad 13       		.uleb128 0x13
 14263 01ae 2F       		.uleb128 0x2f
 14264 01af 05       		.uleb128 0x5
 14265 01b0 00       		.byte	0
 14266 01b1 00       		.byte	0
 14267 01b2 20       		.uleb128 0x20
 14268 01b3 05       		.uleb128 0x5
 14269 01b4 00       		.byte	0
 14270 01b5 03       		.uleb128 0x3
 14271 01b6 0E       		.uleb128 0xe
 14272 01b7 3A       		.uleb128 0x3a
 14273 01b8 0B       		.uleb128 0xb
 14274 01b9 3B       		.uleb128 0x3b
 14275 01ba 05       		.uleb128 0x5
 14276 01bb 49       		.uleb128 0x49
 14277 01bc 13       		.uleb128 0x13
 14278 01bd 02       		.uleb128 0x2
 14279 01be 18       		.uleb128 0x18
 14280 01bf 00       		.byte	0
 14281 01c0 00       		.byte	0
 14282 01c1 21       		.uleb128 0x21
 14283 01c2 0B       		.uleb128 0xb
 14284 01c3 01       		.byte	0x1
 14285 01c4 55       		.uleb128 0x55
 14286 01c5 17       		.uleb128 0x17
 14287 01c6 00       		.byte	0
 14288 01c7 00       		.byte	0
 14289 01c8 22       		.uleb128 0x22
 14290 01c9 2E       		.uleb128 0x2e
 14291 01ca 01       		.byte	0x1
 14292 01cb 3F       		.uleb128 0x3f
 14293 01cc 19       		.uleb128 0x19
 14294 01cd 03       		.uleb128 0x3
 14295 01ce 0E       		.uleb128 0xe
 14296 01cf 3A       		.uleb128 0x3a
 14297 01d0 0B       		.uleb128 0xb
 14298 01d1 3B       		.uleb128 0x3b
 14299 01d2 05       		.uleb128 0x5
 14300 01d3 27       		.uleb128 0x27
 14301 01d4 19       		.uleb128 0x19
 14302 01d5 11       		.uleb128 0x11
 14303 01d6 01       		.uleb128 0x1
 14304 01d7 12       		.uleb128 0x12
 14305 01d8 06       		.uleb128 0x6
 14306 01d9 40       		.uleb128 0x40
 14307 01da 18       		.uleb128 0x18
 14308 01db 9742     		.uleb128 0x2117
 14309 01dd 19       		.uleb128 0x19
 14310 01de 01       		.uleb128 0x1
 14311 01df 13       		.uleb128 0x13
 14312 01e0 00       		.byte	0
 14313 01e1 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 307


 14314 01e2 23       		.uleb128 0x23
 14315 01e3 0B       		.uleb128 0xb
 14316 01e4 01       		.byte	0x1
 14317 01e5 55       		.uleb128 0x55
 14318 01e6 17       		.uleb128 0x17
 14319 01e7 01       		.uleb128 0x1
 14320 01e8 13       		.uleb128 0x13
 14321 01e9 00       		.byte	0
 14322 01ea 00       		.byte	0
 14323 01eb 24       		.uleb128 0x24
 14324 01ec 2E       		.uleb128 0x2e
 14325 01ed 01       		.byte	0x1
 14326 01ee 3F       		.uleb128 0x3f
 14327 01ef 19       		.uleb128 0x19
 14328 01f0 03       		.uleb128 0x3
 14329 01f1 0E       		.uleb128 0xe
 14330 01f2 3A       		.uleb128 0x3a
 14331 01f3 0B       		.uleb128 0xb
 14332 01f4 3B       		.uleb128 0x3b
 14333 01f5 05       		.uleb128 0x5
 14334 01f6 11       		.uleb128 0x11
 14335 01f7 01       		.uleb128 0x1
 14336 01f8 12       		.uleb128 0x12
 14337 01f9 06       		.uleb128 0x6
 14338 01fa 40       		.uleb128 0x40
 14339 01fb 18       		.uleb128 0x18
 14340 01fc 9642     		.uleb128 0x2116
 14341 01fe 19       		.uleb128 0x19
 14342 01ff 01       		.uleb128 0x1
 14343 0200 13       		.uleb128 0x13
 14344 0201 00       		.byte	0
 14345 0202 00       		.byte	0
 14346 0203 25       		.uleb128 0x25
 14347 0204 05       		.uleb128 0x5
 14348 0205 00       		.byte	0
 14349 0206 03       		.uleb128 0x3
 14350 0207 08       		.uleb128 0x8
 14351 0208 3A       		.uleb128 0x3a
 14352 0209 0B       		.uleb128 0xb
 14353 020a 3B       		.uleb128 0x3b
 14354 020b 05       		.uleb128 0x5
 14355 020c 49       		.uleb128 0x49
 14356 020d 13       		.uleb128 0x13
 14357 020e 02       		.uleb128 0x2
 14358 020f 18       		.uleb128 0x18
 14359 0210 00       		.byte	0
 14360 0211 00       		.byte	0
 14361 0212 26       		.uleb128 0x26
 14362 0213 2E       		.uleb128 0x2e
 14363 0214 01       		.byte	0x1
 14364 0215 3F       		.uleb128 0x3f
 14365 0216 19       		.uleb128 0x19
 14366 0217 03       		.uleb128 0x3
 14367 0218 0E       		.uleb128 0xe
 14368 0219 3A       		.uleb128 0x3a
 14369 021a 0B       		.uleb128 0xb
 14370 021b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 308


 14371 021c 05       		.uleb128 0x5
 14372 021d 11       		.uleb128 0x11
 14373 021e 01       		.uleb128 0x1
 14374 021f 12       		.uleb128 0x12
 14375 0220 06       		.uleb128 0x6
 14376 0221 40       		.uleb128 0x40
 14377 0222 18       		.uleb128 0x18
 14378 0223 9742     		.uleb128 0x2117
 14379 0225 19       		.uleb128 0x19
 14380 0226 01       		.uleb128 0x1
 14381 0227 13       		.uleb128 0x13
 14382 0228 00       		.byte	0
 14383 0229 00       		.byte	0
 14384 022a 27       		.uleb128 0x27
 14385 022b 26       		.uleb128 0x26
 14386 022c 00       		.byte	0
 14387 022d 49       		.uleb128 0x49
 14388 022e 13       		.uleb128 0x13
 14389 022f 00       		.byte	0
 14390 0230 00       		.byte	0
 14391 0231 28       		.uleb128 0x28
 14392 0232 34       		.uleb128 0x34
 14393 0233 00       		.byte	0
 14394 0234 03       		.uleb128 0x3
 14395 0235 0E       		.uleb128 0xe
 14396 0236 3A       		.uleb128 0x3a
 14397 0237 0B       		.uleb128 0xb
 14398 0238 3B       		.uleb128 0x3b
 14399 0239 05       		.uleb128 0x5
 14400 023a 49       		.uleb128 0x49
 14401 023b 13       		.uleb128 0x13
 14402 023c 3F       		.uleb128 0x3f
 14403 023d 19       		.uleb128 0x19
 14404 023e 3C       		.uleb128 0x3c
 14405 023f 19       		.uleb128 0x19
 14406 0240 00       		.byte	0
 14407 0241 00       		.byte	0
 14408 0242 00       		.byte	0
 14409              		.section	.debug_aranges,"",%progbits
 14410 0000 8C000000 		.4byte	0x8c
 14411 0004 0200     		.2byte	0x2
 14412 0006 00000000 		.4byte	.Ldebug_info0
 14413 000a 04       		.byte	0x4
 14414 000b 00       		.byte	0
 14415 000c 0000     		.2byte	0
 14416 000e 0000     		.2byte	0
 14417 0010 00000000 		.4byte	.LFB64
 14418 0014 18000000 		.4byte	.LFE64-.LFB64
 14419 0018 00000000 		.4byte	.LFB65
 14420 001c 20000000 		.4byte	.LFE65-.LFB65
 14421 0020 00000000 		.4byte	.LFB66
 14422 0024 F4010000 		.4byte	.LFE66-.LFB66
 14423 0028 00000000 		.4byte	.LFB67
 14424 002c 84080000 		.4byte	.LFE67-.LFB67
 14425 0030 00000000 		.4byte	.LFB68
 14426 0034 C4050000 		.4byte	.LFE68-.LFB68
 14427 0038 00000000 		.4byte	.LFB69
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 309


 14428 003c 34030000 		.4byte	.LFE69-.LFB69
 14429 0040 00000000 		.4byte	.LFB70
 14430 0044 B0010000 		.4byte	.LFE70-.LFB70
 14431 0048 00000000 		.4byte	.LFB71
 14432 004c 0C070000 		.4byte	.LFE71-.LFB71
 14433 0050 00000000 		.4byte	.LFB72
 14434 0054 4C090000 		.4byte	.LFE72-.LFB72
 14435 0058 00000000 		.4byte	.LFB73
 14436 005c 14080000 		.4byte	.LFE73-.LFB73
 14437 0060 00000000 		.4byte	.LFB74
 14438 0064 54120000 		.4byte	.LFE74-.LFB74
 14439 0068 00000000 		.4byte	.LFB75
 14440 006c 04010000 		.4byte	.LFE75-.LFB75
 14441 0070 00000000 		.4byte	.LFB76
 14442 0074 D8000000 		.4byte	.LFE76-.LFB76
 14443 0078 00000000 		.4byte	.LFB77
 14444 007c 58060000 		.4byte	.LFE77-.LFB77
 14445 0080 00000000 		.4byte	.LFB78
 14446 0084 08010000 		.4byte	.LFE78-.LFB78
 14447 0088 00000000 		.4byte	0
 14448 008c 00000000 		.4byte	0
 14449              		.section	.debug_ranges,"",%progbits
 14450              	.Ldebug_ranges0:
 14451 0000 68010000 		.4byte	.LBB4
 14452 0004 AA010000 		.4byte	.LBE4
 14453 0008 AC010000 		.4byte	.LBB5
 14454 000c F2010000 		.4byte	.LBE5
 14455 0010 00000000 		.4byte	0
 14456 0014 00000000 		.4byte	0
 14457 0018 3A000000 		.4byte	.LBB6
 14458 001c 40010000 		.4byte	.LBE6
 14459 0020 42010000 		.4byte	.LBB7
 14460 0024 BC010000 		.4byte	.LBE7
 14461 0028 00000000 		.4byte	0
 14462 002c 00000000 		.4byte	0
 14463 0030 BE010000 		.4byte	.LBB8
 14464 0034 20030000 		.4byte	.LBE8
 14465 0038 22030000 		.4byte	.LBB9
 14466 003c 24030000 		.4byte	.LBE9
 14467 0040 00000000 		.4byte	0
 14468 0044 00000000 		.4byte	0
 14469 0048 00000000 		.4byte	.LFB64
 14470 004c 18000000 		.4byte	.LFE64
 14471 0050 00000000 		.4byte	.LFB65
 14472 0054 20000000 		.4byte	.LFE65
 14473 0058 00000000 		.4byte	.LFB66
 14474 005c F4010000 		.4byte	.LFE66
 14475 0060 00000000 		.4byte	.LFB67
 14476 0064 84080000 		.4byte	.LFE67
 14477 0068 00000000 		.4byte	.LFB68
 14478 006c C4050000 		.4byte	.LFE68
 14479 0070 00000000 		.4byte	.LFB69
 14480 0074 34030000 		.4byte	.LFE69
 14481 0078 00000000 		.4byte	.LFB70
 14482 007c B0010000 		.4byte	.LFE70
 14483 0080 00000000 		.4byte	.LFB71
 14484 0084 0C070000 		.4byte	.LFE71
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 310


 14485 0088 00000000 		.4byte	.LFB72
 14486 008c 4C090000 		.4byte	.LFE72
 14487 0090 00000000 		.4byte	.LFB73
 14488 0094 14080000 		.4byte	.LFE73
 14489 0098 00000000 		.4byte	.LFB74
 14490 009c 54120000 		.4byte	.LFE74
 14491 00a0 00000000 		.4byte	.LFB75
 14492 00a4 04010000 		.4byte	.LFE75
 14493 00a8 00000000 		.4byte	.LFB76
 14494 00ac D8000000 		.4byte	.LFE76
 14495 00b0 00000000 		.4byte	.LFB77
 14496 00b4 58060000 		.4byte	.LFE77
 14497 00b8 00000000 		.4byte	.LFB78
 14498 00bc 08010000 		.4byte	.LFE78
 14499 00c0 00000000 		.4byte	0
 14500 00c4 00000000 		.4byte	0
 14501              		.section	.debug_line,"",%progbits
 14502              	.Ldebug_line0:
 14503 0000 510C0000 		.section	.debug_str,"MS",%progbits,1
 14503      0200AC01 
 14503      00000201 
 14503      FB0E0D00 
 14503      01010101 
 14504              	.LASF54:
 14505 0000 656D675F 		.ascii	"emg_act_counter\000"
 14505      6163745F 
 14505      636F756E 
 14505      74657200 
 14506              	.LASF24:
 14507 0010 73697A65 		.ascii	"sizetype\000"
 14507      74797065 
 14507      00
 14508              	.LASF61:
 14509 0019 706F7765 		.ascii	"power_cycles\000"
 14509      725F6379 
 14509      636C6573 
 14509      00
 14510              	.LASF269:
 14511 0026 706F735F 		.ascii	"pos_cycle_status\000"
 14511      6379636C 
 14511      655F7374 
 14511      61747573 
 14511      00
 14512              	.LASF146:
 14513 0037 77726973 		.ascii	"wrist_direction_association\000"
 14513      745F6469 
 14513      72656374 
 14513      696F6E5F 
 14513      6173736F 
 14514              	.LASF30:
 14515 0053 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 14515      545F4D4F 
 14515      44455F45 
 14515      4D475F46 
 14515      4346535F 
 14516              	.LASF121:
 14517 006b 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 311


 14517      5F414443 
 14517      5F73656E 
 14517      736F7273 
 14517      5F706F72 
 14518              	.LASF151:
 14519 0086 75736572 		.ascii	"user\000"
 14519      00
 14520              	.LASF10:
 14521 008b 696E7433 		.ascii	"int32_t\000"
 14521      325F7400 
 14522              	.LASF308:
 14523 0093 675F7278 		.ascii	"g_rx\000"
 14523      00
 14524              	.LASF246:
 14525 0098 6F6E655F 		.ascii	"one_time_execute\000"
 14525      74696D65 
 14525      5F657865 
 14525      63757465 
 14525      00
 14526              	.LASF49:
 14527 00a9 73745F64 		.ascii	"st_data\000"
 14527      61746100 
 14528              	.LASF59:
 14529 00b1 746F7461 		.ascii	"total_runtime\000"
 14529      6C5F7275 
 14529      6E74696D 
 14529      6500
 14530              	.LASF13:
 14531 00bf 75696E74 		.ascii	"uint32\000"
 14531      333200
 14532              	.LASF231:
 14533 00c6 6E5F6C69 		.ascii	"n_line\000"
 14533      6E6500
 14534              	.LASF152:
 14535 00cd 4A4F595F 		.ascii	"JOY_spec\000"
 14535      73706563 
 14535      00
 14536              	.LASF88:
 14537 00d6 706F735F 		.ascii	"pos_lim_inf\000"
 14537      6C696D5F 
 14537      696E6600 
 14538              	.LASF333:
 14539 00e2 74656E73 		.ascii	"tension_valid\000"
 14539      696F6E5F 
 14539      76616C69 
 14539      6400
 14540              	.LASF207:
 14541 00f0 6572725F 		.ascii	"err_joy_1\000"
 14541      6A6F795F 
 14541      3100
 14542              	.LASF183:
 14543 00fa 73746174 		.ascii	"state\000"
 14543      6500
 14544              	.LASF335:
 14545 0100 6379636C 		.ascii	"cycles_interrupt_flag\000"
 14545      65735F69 
 14545      6E746572 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 312


 14545      72757074 
 14545      5F666C61 
 14546              	.LASF279:
 14547 0116 62696E5F 		.ascii	"bin_max\000"
 14547      6D617800 
 14548              	.LASF296:
 14549 011e 61646472 		.ascii	"addr_start_c\000"
 14549      5F737461 
 14549      72745F63 
 14549      00
 14550              	.LASF29:
 14551 012b 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 14551      545F4D4F 
 14551      44455F45 
 14551      4D475F46 
 14551      43465300 
 14552              	.LASF92:
 14553 013f 63757272 		.ascii	"curr_lookup\000"
 14553      5F6C6F6F 
 14553      6B757000 
 14554              	.LASF216:
 14555 014b 70776D5F 		.ascii	"pwm_input\000"
 14555      696E7075 
 14555      7400
 14556              	.LASF57:
 14557 0155 72657374 		.ascii	"rest_counter\000"
 14557      5F636F75 
 14557      6E746572 
 14557      00
 14558              	.LASF136:
 14559 0162 73745F4D 		.ascii	"st_MASTER_spec\000"
 14559      41535445 
 14559      525F7370 
 14559      656300
 14560              	.LASF28:
 14561 0171 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 14561      545F4D4F 
 14561      44455F45 
 14561      4D475F49 
 14561      4E544547 
 14562              	.LASF262:
 14563 0189 765F636F 		.ascii	"v_count\000"
 14563      756E7400 
 14564              	.LASF188:
 14565 0191 72785F64 		.ascii	"rx_data\000"
 14565      61746100 
 14566              	.LASF250:
 14567 0199 7676765F 		.ascii	"vvv_value\000"
 14567      76616C75 
 14567      6500
 14568              	.LASF14:
 14569 01a3 696E7438 		.ascii	"int8\000"
 14569      00
 14570              	.LASF193:
 14571 01a8 696E666F 		.ascii	"info_\000"
 14571      5F00
 14572              	.LASF316:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 313


 14573 01ae 66696C74 		.ascii	"filt_emg\000"
 14573      5F656D67 
 14573      00
 14574              	.LASF108:
 14575 01b7 73745F65 		.ascii	"st_emg\000"
 14575      6D6700
 14576              	.LASF55:
 14577 01be 706F7369 		.ascii	"position_hist\000"
 14577      74696F6E 
 14577      5F686973 
 14577      7400
 14578              	.LASF175:
 14579 01cc 50524550 		.ascii	"PREPARE_DATA\000"
 14579      4152455F 
 14579      44415441 
 14579      00
 14580              	.LASF159:
 14581 01d9 74656D70 		.ascii	"temp_value\000"
 14581      5F76616C 
 14581      756500
 14582              	.LASF276:
 14583 01e4 7468725F 		.ascii	"thr_pos\000"
 14583      706F7300 
 14584              	.LASF143:
 14585 01ec 73745F57 		.ascii	"st_WR_spec\000"
 14585      525F7370 
 14585      656300
 14586              	.LASF209:
 14587 01f7 6572725F 		.ascii	"err_joy_2\000"
 14587      6A6F795F 
 14587      3200
 14588              	.LASF52:
 14589 0201 72656164 		.ascii	"ready\000"
 14589      7900
 14590              	.LASF105:
 14591 0207 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 14591      6964785F 
 14591      7573655F 
 14591      666F725F 
 14591      636F6E74 
 14592              	.LASF162:
 14593 021f 6761696E 		.ascii	"gain\000"
 14593      00
 14594              	.LASF65:
 14595 0224 73745F64 		.ascii	"st_device\000"
 14595      65766963 
 14595      6500
 14596              	.LASF27:
 14597 022e 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 14597      545F4D4F 
 14597      44455F45 
 14597      4D475F50 
 14597      524F504F 
 14598              	.LASF70:
 14599 024a 7573655F 		.ascii	"use_2nd_motor_flag\000"
 14599      326E645F 
 14599      6D6F746F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 314


 14599      725F666C 
 14599      616700
 14600              	.LASF255:
 14601 025d 55445F63 		.ascii	"UD_counter\000"
 14601      6F756E74 
 14601      657200
 14602              	.LASF62:
 14603 0268 65786365 		.ascii	"excessive_signal_activity\000"
 14603      73736976 
 14603      655F7369 
 14603      676E616C 
 14603      5F616374 
 14604              	.LASF171:
 14605 0282 53554D5F 		.ascii	"SUM_AND_MEAN\000"
 14605      414E445F 
 14605      4D45414E 
 14605      00
 14606              	.LASF115:
 14607 028f 72656164 		.ascii	"read_imu_flag\000"
 14607      5F696D75 
 14607      5F666C61 
 14607      6700
 14608              	.LASF123:
 14609 029d 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 14609      72645F45 
 14609      4D475F68 
 14609      6973746F 
 14609      72795F6F 
 14610              	.LASF259:
 14611 02b6 66697273 		.ascii	"first_tension_valid\000"
 14611      745F7465 
 14611      6E73696F 
 14611      6E5F7661 
 14611      6C696400 
 14612              	.LASF318:
 14613 02ca 74696D65 		.ascii	"timer_value\000"
 14613      725F7661 
 14613      6C756500 
 14614              	.LASF4:
 14615 02d6 6C6F6E67 		.ascii	"long int\000"
 14615      20696E74 
 14615      00
 14616              	.LASF149:
 14617 02df 756E7573 		.ascii	"unused_bytes1\000"
 14617      65645F62 
 14617      79746573 
 14617      3100
 14618              	.LASF196:
 14619 02ed 454D475F 		.ascii	"EMG_history_info_\000"
 14619      68697374 
 14619      6F72795F 
 14619      696E666F 
 14619      5F00
 14620              	.LASF221:
 14621 02ff 53485F45 		.ascii	"SH_ENC_L\000"
 14621      4E435F4C 
 14621      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 315


 14622              	.LASF69:
 14623 0308 72657365 		.ascii	"reset_counters\000"
 14623      745F636F 
 14623      756E7465 
 14623      727300
 14624              	.LASF274:
 14625 0317 62696E5F 		.ascii	"bin_threshold\000"
 14625      74687265 
 14625      73686F6C 
 14625      6400
 14626              	.LASF126:
 14627 0325 75736572 		.ascii	"user_emg\000"
 14627      5F656D67 
 14627      00
 14628              	.LASF245:
 14629 032e 73616665 		.ascii	"safe_startup_motor_activation\000"
 14629      5F737461 
 14629      72747570 
 14629      5F6D6F74 
 14629      6F725F61 
 14630              	.LASF64:
 14631 034c 756E7573 		.ascii	"unused_bytes\000"
 14631      65645F62 
 14631      79746573 
 14631      00
 14632              	.LASF155:
 14633 0359 61636365 		.ascii	"accel_value\000"
 14633      6C5F7661 
 14633      6C756500 
 14634              	.LASF307:
 14635 0365 675F6164 		.ascii	"g_adc_measOld\000"
 14635      635F6D65 
 14635      61734F6C 
 14635      6400
 14636              	.LASF234:
 14637 0373 6175785F 		.ascii	"aux_encoder\000"
 14637      656E636F 
 14637      64657200 
 14638              	.LASF53:
 14639 037f 73745F63 		.ascii	"st_counters\000"
 14639      6F756E74 
 14639      65727300 
 14640              	.LASF220:
 14641 038b 53485F4D 		.ascii	"SH_MOT\000"
 14641      4F5400
 14642              	.LASF317:
 14643 0392 66696C74 		.ascii	"filt_detect_pc\000"
 14643      5F646574 
 14643      6563745F 
 14643      706300
 14644              	.LASF17:
 14645 03a1 666C6F61 		.ascii	"float32\000"
 14645      74333200 
 14646              	.LASF230:
 14647 03a9 656E636F 		.ascii	"encoder_reading_SPI\000"
 14647      6465725F 
 14647      72656164 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 316


 14647      696E675F 
 14647      53504900 
 14648              	.LASF243:
 14649 03bd 6572726F 		.ascii	"error\000"
 14649      7200
 14650              	.LASF178:
 14651 03c3 57524954 		.ascii	"WRITE_END\000"
 14651      455F454E 
 14651      4400
 14652              	.LASF256:
 14653 03cd 4C525F63 		.ascii	"LR_counter\000"
 14653      6F756E74 
 14653      657200
 14654              	.LASF348:
 14655 03d8 706F735F 		.ascii	"pos_reconstruct\000"
 14655      7265636F 
 14655      6E737472 
 14655      75637400 
 14656              	.LASF264:
 14657 03e8 70776D5F 		.ascii	"pwm_limit_search\000"
 14657      6C696D69 
 14657      745F7365 
 14657      61726368 
 14657      00
 14658              	.LASF0:
 14659 03f9 7369676E 		.ascii	"signed char\000"
 14659      65642063 
 14659      68617200 
 14660              	.LASF125:
 14661 0405 75736572 		.ascii	"user_code_string\000"
 14661      5F636F64 
 14661      655F7374 
 14661      72696E67 
 14661      00
 14662              	.LASF163:
 14663 0416 73745F63 		.ascii	"st_calib\000"
 14663      616C6962 
 14663      00
 14664              	.LASF203:
 14665 041f 6572725F 		.ascii	"err_emg_1\000"
 14665      656D675F 
 14665      3100
 14666              	.LASF204:
 14667 0429 6572725F 		.ascii	"err_emg_2\000"
 14667      656D675F 
 14667      3200
 14668              	.LASF113:
 14669 0433 73776974 		.ascii	"switch_emg\000"
 14669      63685F65 
 14669      6D6700
 14670              	.LASF329:
 14671 043e 656D675F 		.ascii	"emg_2_status\000"
 14671      325F7374 
 14671      61747573 
 14671      00
 14672              	.LASF341:
 14673 044b 4144435F 		.ascii	"ADC_buf\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 317


 14673      62756600 
 14674              	.LASF334:
 14675 0453 696E7465 		.ascii	"interrupt_flag\000"
 14675      72727570 
 14675      745F666C 
 14675      616700
 14676              	.LASF285:
 14677 0462 73746570 		.ascii	"step\000"
 14677      00
 14678              	.LASF223:
 14679 0467 63757272 		.ascii	"curr_error_sum\000"
 14679      5F657272 
 14679      6F725F73 
 14679      756D00
 14680              	.LASF1:
 14681 0476 756E7369 		.ascii	"unsigned char\000"
 14681      676E6564 
 14681      20636861 
 14681      7200
 14682              	.LASF98:
 14683 0484 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 14683      72657665 
 14683      72735F6D 
 14683      6F746F72 
 14683      5F666C61 
 14684              	.LASF294:
 14685 049a 726F775F 		.ascii	"row_start\000"
 14685      73746172 
 14685      7400
 14686              	.LASF338:
 14687 04a4 666F7263 		.ascii	"forced_open\000"
 14687      65645F6F 
 14687      70656E00 
 14688              	.LASF238:
 14689 04b0 73706565 		.ascii	"speed_encoder\000"
 14689      645F656E 
 14689      636F6465 
 14689      7200
 14690              	.LASF302:
 14691 04be 675F7265 		.ascii	"g_refNew\000"
 14691      664E6577 
 14691      00
 14692              	.LASF283:
 14693 04c7 63757272 		.ascii	"curr_off\000"
 14693      5F6F6666 
 14693      00
 14694              	.LASF68:
 14695 04d0 72696768 		.ascii	"right_left\000"
 14695      745F6C65 
 14695      667400
 14696              	.LASF96:
 14697 04db 656E636F 		.ascii	"encoder_line\000"
 14697      6465725F 
 14697      6C696E65 
 14697      00
 14698              	.LASF328:
 14699 04e8 656D675F 		.ascii	"emg_1_status\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 318


 14699      315F7374 
 14699      61747573 
 14699      00
 14700              	.LASF154:
 14701 04f5 666C6167 		.ascii	"flags\000"
 14701      7300
 14702              	.LASF202:
 14703 04fb 68616E64 		.ascii	"handle_value\000"
 14703      6C655F76 
 14703      616C7565 
 14703      00
 14704              	.LASF20:
 14705 0508 63686172 		.ascii	"char\000"
 14705      00
 14706              	.LASF260:
 14707 050d 64657465 		.ascii	"detect_power_cycle_prev\000"
 14707      63745F70 
 14707      6F776572 
 14707      5F637963 
 14707      6C655F70 
 14708              	.LASF91:
 14709 0525 6D61785F 		.ascii	"max_step_pos\000"
 14709      73746570 
 14709      5F706F73 
 14709      00
 14710              	.LASF343:
 14711 0532 70776D5F 		.ascii	"pwm_sign\000"
 14711      7369676E 
 14711      00
 14712              	.LASF229:
 14713 053b 6D6F746F 		.ascii	"motor_control_generic\000"
 14713      725F636F 
 14713      6E74726F 
 14713      6C5F6765 
 14713      6E657269 
 14714              	.LASF352:
 14715 0551 675F696D 		.ascii	"g_imu\000"
 14715      7500
 14716              	.LASF315:
 14717 0557 66696C74 		.ascii	"filt_vel\000"
 14717      5F76656C 
 14717      00
 14718              	.LASF97:
 14719 0560 70776D5F 		.ascii	"pwm_rate_limiter\000"
 14719      72617465 
 14719      5F6C696D 
 14719      69746572 
 14719      00
 14720              	.LASF77:
 14721 0571 6B5F645F 		.ascii	"k_d_c\000"
 14721      6300
 14722              	.LASF174:
 14723 0577 6164635F 		.ascii	"adc_status\000"
 14723      73746174 
 14723      757300
 14724              	.LASF103:
 14725 0582 6D5F6D75 		.ascii	"m_mult\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 319


 14725      6C7400
 14726              	.LASF76:
 14727 0589 6B5F695F 		.ascii	"k_i_c\000"
 14727      6300
 14728              	.LASF227:
 14729 058f 6D6F746F 		.ascii	"motor_dir\000"
 14729      725F6469 
 14729      7200
 14730              	.LASF278:
 14731 0599 62696E5F 		.ascii	"bin_st\000"
 14731      737400
 14732              	.LASF99:
 14733 05a0 6D6F746F 		.ascii	"motor_voltage\000"
 14733      725F766F 
 14733      6C746167 
 14733      6500
 14734              	.LASF89:
 14735 05ae 706F735F 		.ascii	"pos_lim_sup\000"
 14735      6C696D5F 
 14735      73757000 
 14736              	.LASF161:
 14737 05ba 6F6C645F 		.ascii	"old_value\000"
 14737      76616C75 
 14737      6500
 14738              	.LASF111:
 14739 05c4 656D675F 		.ascii	"emg_speed\000"
 14739      73706565 
 14739      6400
 14740              	.LASF130:
 14741 05ce 72657374 		.ascii	"rest_vel\000"
 14741      5F76656C 
 14741      00
 14742              	.LASF168:
 14743 05d7 4E4F524D 		.ascii	"NORMAL\000"
 14743      414C00
 14744              	.LASF215:
 14745 05de 6D6F746F 		.ascii	"motor_control_SH\000"
 14745      725F636F 
 14745      6E74726F 
 14745      6C5F5348 
 14745      00
 14746              	.LASF350:
 14747 05ef 7046696C 		.ascii	"pFile\000"
 14747      6500
 14748              	.LASF222:
 14749 05f5 706F735F 		.ascii	"pos_error_sum\000"
 14749      6572726F 
 14749      725F7375 
 14749      6D00
 14750              	.LASF122:
 14751 0603 4144435F 		.ascii	"ADC_conf\000"
 14751      636F6E66 
 14751      00
 14752              	.LASF324:
 14753 060c 6465765F 		.ascii	"dev_tension_f\000"
 14753      74656E73 
 14753      696F6E5F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 320


 14753      6600
 14754              	.LASF79:
 14755 061a 6B5F695F 		.ascii	"k_i_dl\000"
 14755      646C00
 14756              	.LASF50:
 14757 0621 62756666 		.ascii	"buffer\000"
 14757      657200
 14758              	.LASF81:
 14759 0628 6B5F705F 		.ascii	"k_p_c_dl\000"
 14759      635F646C 
 14759      00
 14760              	.LASF189:
 14761 0631 72785F64 		.ascii	"rx_data_type\000"
 14761      6174615F 
 14761      74797065 
 14761      00
 14762              	.LASF353:
 14763 063e 675F696D 		.ascii	"g_imuNew\000"
 14763      754E6577 
 14763      00
 14764              	.LASF166:
 14765 0647 73706565 		.ascii	"speed\000"
 14765      6400
 14766              	.LASF228:
 14767 064d 706F7369 		.ascii	"position_counter\000"
 14767      74696F6E 
 14767      5F636F75 
 14767      6E746572 
 14767      00
 14768              	.LASF287:
 14769 065e 74696D65 		.ascii	"timer_value_e\000"
 14769      725F7661 
 14769      6C75655F 
 14769      6500
 14770              	.LASF184:
 14771 066c 64617461 		.ascii	"data_packet_index\000"
 14771      5F706163 
 14771      6B65745F 
 14771      696E6465 
 14771      7800
 14772              	.LASF186:
 14773 067e 64617461 		.ascii	"data_packet_buffer\000"
 14773      5F706163 
 14773      6B65745F 
 14773      62756666 
 14773      657200
 14774              	.LASF200:
 14775 0691 73745F72 		.ascii	"st_ref_p\000"
 14775      65665F70 
 14775      00
 14776              	.LASF327:
 14777 069a 6379636C 		.ascii	"cycles_status\000"
 14777      65735F73 
 14777      74617475 
 14777      7300
 14778              	.LASF191:
 14779 06a8 636F756E 		.ascii	"counter_calibration\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 321


 14779      7465725F 
 14779      63616C69 
 14779      62726174 
 14779      696F6E00 
 14780              	.LASF304:
 14781 06bc 675F6D65 		.ascii	"g_meas\000"
 14781      617300
 14782              	.LASF286:
 14783 06c3 74696D65 		.ascii	"timer_value_s\000"
 14783      725F7661 
 14783      6C75655F 
 14783      7300
 14784              	.LASF347:
 14785 06d1 456E636F 		.ascii	"Encoder_Check\000"
 14785      6465725F 
 14785      43686563 
 14785      6B00
 14786              	.LASF242:
 14787 06df 636F6D70 		.ascii	"comp_value_encoder\000"
 14787      5F76616C 
 14787      75655F65 
 14787      6E636F64 
 14787      657200
 14788              	.LASF290:
 14789 06f2 73746172 		.ascii	"start_emg_pos\000"
 14789      745F656D 
 14789      675F706F 
 14789      7300
 14790              	.LASF344:
 14791 0700 64617461 		.ascii	"data_encoder_raw\000"
 14791      5F656E63 
 14791      6F646572 
 14791      5F726177 
 14791      00
 14792              	.LASF301:
 14793 0711 675F7265 		.ascii	"g_ref\000"
 14793      6600
 14794              	.LASF25:
 14795 0717 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 14795      545F4D4F 
 14795      44455F45 
 14795      58544552 
 14795      4E414C00 
 14796              	.LASF233:
 14797 072b 696E6465 		.ascii	"index\000"
 14797      7800
 14798              	.LASF141:
 14799 0731 6D617869 		.ascii	"maximum_pressure_kPa\000"
 14799      6D756D5F 
 14799      70726573 
 14799      73757265 
 14799      5F6B5061 
 14800              	.LASF131:
 14801 0746 72657374 		.ascii	"rest_position_flag\000"
 14801      5F706F73 
 14801      6974696F 
 14801      6E5F666C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 322


 14801      616700
 14802              	.LASF133:
 14803 0759 6A6F7973 		.ascii	"joystick_closure_speed\000"
 14803      7469636B 
 14803      5F636C6F 
 14803      73757265 
 14803      5F737065 
 14804              	.LASF82:
 14805 0770 6B5F695F 		.ascii	"k_i_c_dl\000"
 14805      635F646C 
 14805      00
 14806              	.LASF190:
 14807 0779 7061636B 		.ascii	"package_count\000"
 14807      6167655F 
 14807      636F756E 
 14807      7400
 14808              	.LASF38:
 14809 0787 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 14809      5F414E44 
 14809      5F504F53 
 14809      5F434F4E 
 14809      54524F4C 
 14810              	.LASF164:
 14811 079c 656E6162 		.ascii	"enabled\000"
 14811      6C656400 
 14812              	.LASF5:
 14813 07a4 6C6F6E67 		.ascii	"long unsigned int\000"
 14813      20756E73 
 14813      69676E65 
 14813      6420696E 
 14813      7400
 14814              	.LASF351:
 14815 07b6 70454D47 		.ascii	"pEMGHFile\000"
 14815      4846696C 
 14815      6500
 14816              	.LASF176:
 14817 07c0 57524954 		.ascii	"WRITE_CYCLES\000"
 14817      455F4359 
 14817      434C4553 
 14817      00
 14818              	.LASF135:
 14819 07cd 6A6F7973 		.ascii	"joystick_gains\000"
 14819      7469636B 
 14819      5F676169 
 14819      6E7300
 14820              	.LASF45:
 14821 07dc 686F6C64 		.ascii	"hold_curr\000"
 14821      5F637572 
 14821      7200
 14822              	.LASF31:
 14823 07e6 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 14823      545F4D4F 
 14823      44455F4A 
 14823      4F595354 
 14823      49434B00 
 14824              	.LASF60:
 14825 07fa 746F7461 		.ascii	"total_time_rest\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 323


 14825      6C5F7469 
 14825      6D655F72 
 14825      65737400 
 14826              	.LASF84:
 14827 080a 61637469 		.ascii	"activ\000"
 14827      7600
 14828              	.LASF267:
 14829 0810 6D696E5F 		.ascii	"min_tension\000"
 14829      74656E73 
 14829      696F6E00 
 14830              	.LASF339:
 14831 081c 62617474 		.ascii	"battery_low_SoC\000"
 14831      6572795F 
 14831      6C6F775F 
 14831      536F4300 
 14832              	.LASF199:
 14833 082c 6D6F746F 		.ascii	"motor_idx\000"
 14833      725F6964 
 14833      7800
 14834              	.LASF102:
 14835 0836 6D5F6F66 		.ascii	"m_off\000"
 14835      6600
 14836              	.LASF332:
 14837 083c 72657365 		.ascii	"reset_last_value_flag\000"
 14837      745F6C61 
 14837      73745F76 
 14837      616C7565 
 14837      5F666C61 
 14838              	.LASF158:
 14839 0852 71756174 		.ascii	"quat_value\000"
 14839      5F76616C 
 14839      756500
 14840              	.LASF128:
 14841 085d 72657374 		.ascii	"rest_pos\000"
 14841      5F706F73 
 14841      00
 14842              	.LASF40:
 14843 0866 63757272 		.ascii	"curr\000"
 14843      00
 14844              	.LASF177:
 14845 086b 57414954 		.ascii	"WAIT_QUERY\000"
 14845      5F515545 
 14845      525900
 14846              	.LASF94:
 14847 0876 696E7075 		.ascii	"input_mode\000"
 14847      745F6D6F 
 14847      646500
 14848              	.LASF36:
 14849 0881 434F4E54 		.ascii	"CONTROL_PWM\000"
 14849      524F4C5F 
 14849      50574D00 
 14850              	.LASF268:
 14851 088d 6379636C 		.ascii	"cycles_counter_update\000"
 14851      65735F63 
 14851      6F756E74 
 14851      65725F75 
 14851      70646174 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 324


 14852              	.LASF181:
 14853 08a3 4953525F 		.ascii	"ISR_RS485_RX_ExInterrupt\000"
 14853      52533438 
 14853      355F5258 
 14853      5F457849 
 14853      6E746572 
 14854              	.LASF355:
 14855 08bc 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14855      43313120 
 14855      352E342E 
 14855      31203230 
 14855      31363036 
 14856 08ef 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14856      20726576 
 14856      6973696F 
 14856      6E203233 
 14856      37373135 
 14857 0922 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14857      66756E63 
 14857      74696F6E 
 14857      2D736563 
 14857      74696F6E 
 14858              	.LASF42:
 14859 094a 73745F72 		.ascii	"st_ref\000"
 14859      656600
 14860              	.LASF319:
 14861 0951 74696D65 		.ascii	"timer_value0\000"
 14861      725F7661 
 14861      6C756530 
 14861      00
 14862              	.LASF127:
 14863 095e 73745F53 		.ascii	"st_SH_spec\000"
 14863      485F7370 
 14863      656300
 14864              	.LASF248:
 14865 0969 765F7661 		.ascii	"v_value\000"
 14865      6C756500 
 14866              	.LASF311:
 14867 0971 63616C69 		.ascii	"calib\000"
 14867      6200
 14868              	.LASF139:
 14869 0977 73745F46 		.ascii	"st_FB_spec\000"
 14869      425F7370 
 14869      656300
 14870              	.LASF6:
 14871 0982 6C6F6E67 		.ascii	"long long int\000"
 14871      206C6F6E 
 14871      6720696E 
 14871      7400
 14872              	.LASF34:
 14873 0990 53485F63 		.ascii	"SH_control_mode\000"
 14873      6F6E7472 
 14873      6F6C5F6D 
 14873      6F646500 
 14874              	.LASF195:
 14875 09a0 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 14875      4E445F4D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 325


 14875      4F544F52 
 14875      5F494458 
 14875      00
 14876              	.LASF340:
 14877 09b1 6368616E 		.ascii	"change_ext_ref_flag\000"
 14877      67655F65 
 14877      78745F72 
 14877      65665F66 
 14877      6C616700 
 14878              	.LASF19:
 14879 09c5 646F7562 		.ascii	"double\000"
 14879      6C6500
 14880              	.LASF313:
 14881 09cc 66696C74 		.ascii	"filt_curr_diff\000"
 14881      5F637572 
 14881      725F6469 
 14881      666600
 14882              	.LASF211:
 14883 09db 706F735F 		.ascii	"pos_sum\000"
 14883      73756D00 
 14884              	.LASF214:
 14885 09e3 696E7465 		.ascii	"interrupt_manager\000"
 14885      72727570 
 14885      745F6D61 
 14885      6E616765 
 14885      7200
 14886              	.LASF101:
 14887 09f5 456E635F 		.ascii	"Enc_raw_read_conf\000"
 14887      7261775F 
 14887      72656164 
 14887      5F636F6E 
 14887      6600
 14888              	.LASF212:
 14889 0a07 636F6D70 		.ascii	"compute_SoftHand_2_motors_emg_reference\000"
 14889      7574655F 
 14889      536F6674 
 14889      48616E64 
 14889      5F325F6D 
 14890              	.LASF167:
 14891 0a2f 72657065 		.ascii	"repetitions\000"
 14891      74697469 
 14891      6F6E7300 
 14892              	.LASF90:
 14893 0a3b 6D61785F 		.ascii	"max_step_neg\000"
 14893      73746570 
 14893      5F6E6567 
 14893      00
 14894              	.LASF247:
 14895 0a48 636F756E 		.ascii	"count_startup_motor\000"
 14895      745F7374 
 14895      61727475 
 14895      705F6D6F 
 14895      746F7200 
 14896              	.LASF138:
 14897 0a5c 736C6176 		.ascii	"slave_ID\000"
 14897      655F4944 
 14897      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 326


 14898              	.LASF172:
 14899 0a65 57414954 		.ascii	"WAIT\000"
 14899      00
 14900              	.LASF18:
 14901 0a6a 666C6F61 		.ascii	"float\000"
 14901      7400
 14902              	.LASF117:
 14903 0a70 494D555F 		.ascii	"IMU_conf\000"
 14903      636F6E66 
 14903      00
 14904              	.LASF261:
 14905 0a79 636F756E 		.ascii	"count\000"
 14905      7400
 14906              	.LASF46:
 14907 0a7f 73745F61 		.ascii	"st_adc_meas\000"
 14907      64635F6D 
 14907      65617300 
 14908              	.LASF272:
 14909 0a8b 656D675F 		.ascii	"emg_excess_status\000"
 14909      65786365 
 14909      73735F73 
 14909      74617475 
 14909      7300
 14910              	.LASF298:
 14911 0a9d 6D5F6164 		.ascii	"m_addr\000"
 14911      647200
 14912              	.LASF310:
 14913 0aa4 635F6D65 		.ascii	"c_mem\000"
 14913      6D00
 14914              	.LASF8:
 14915 0aaa 756E7369 		.ascii	"unsigned int\000"
 14915      676E6564 
 14915      20696E74 
 14915      00
 14916              	.LASF277:
 14917 0ab7 6D61785F 		.ascii	"max_pos\000"
 14917      706F7300 
 14918              	.LASF357:
 14919 0abf 433A5C55 		.ascii	"C:\\Users\\mgnocco\\Documents\\Git\\PSoC5\\PSoC5_FW"
 14919      73657273 
 14919      5C6D676E 
 14919      6F63636F 
 14919      5C446F63 
 14920 0aec 5F47656E 		.ascii	"_Generic_ParametricPWMRescaling\\Generic_Parametric"
 14920      65726963 
 14920      5F506172 
 14920      616D6574 
 14920      72696350 
 14921 0b1e 50574D52 		.ascii	"PWMRescaling\\Generic_ParametricPWMRescaling.cydsn\000"
 14921      65736361 
 14921      6C696E67 
 14921      5C47656E 
 14921      65726963 
 14922              	.LASF349:
 14923 0b50 72657374 		.ascii	"rest_pos_curr_ref\000"
 14923      5F706F73 
 14923      5F637572 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 327


 14923      725F7265 
 14923      6600
 14924              	.LASF148:
 14925 0b62 666C6167 		.ascii	"flag\000"
 14925      00
 14926              	.LASF95:
 14927 0b67 636F6E74 		.ascii	"control_mode\000"
 14927      726F6C5F 
 14927      6D6F6465 
 14927      00
 14928              	.LASF21:
 14929 0b74 63797374 		.ascii	"cystatus\000"
 14929      61747573 
 14929      00
 14930              	.LASF26:
 14931 0b7d 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 14931      545F4D4F 
 14931      44455F45 
 14931      4E434F44 
 14931      45523300 
 14932              	.LASF114:
 14933 0b91 73745F69 		.ascii	"st_imu\000"
 14933      6D7500
 14934              	.LASF206:
 14935 0b98 63757272 		.ascii	"current_emg\000"
 14935      656E745F 
 14935      656D6700 
 14936              	.LASF187:
 14937 0ba4 72785F71 		.ascii	"rx_queue\000"
 14937      75657565 
 14937      00
 14938              	.LASF257:
 14939 0bad 55445F6D 		.ascii	"UD_mean_value\000"
 14939      65616E5F 
 14939      76616C75 
 14939      6500
 14940              	.LASF232:
 14941 0bbb 6173736F 		.ascii	"assoc_motor\000"
 14941      635F6D6F 
 14941      746F7200 
 14942              	.LASF47:
 14943 0bc7 6164645F 		.ascii	"add_emg\000"
 14943      656D6700 
 14944              	.LASF219:
 14945 0bcf 695F7265 		.ascii	"i_ref\000"
 14945      6600
 14946              	.LASF109:
 14947 0bd5 656D675F 		.ascii	"emg_threshold\000"
 14947      74687265 
 14947      73686F6C 
 14947      6400
 14948              	.LASF291:
 14949 0be3 73617665 		.ascii	"save_cycles_eeprom\000"
 14949      5F637963 
 14949      6C65735F 
 14949      65657072 
 14949      6F6D00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 328


 14950              	.LASF106:
 14951 0bf6 6D6F746F 		.ascii	"motor_handle_ratio\000"
 14951      725F6861 
 14951      6E646C65 
 14951      5F726174 
 14951      696F00
 14952              	.LASF56:
 14953 0c09 63757272 		.ascii	"current_hist\000"
 14953      656E745F 
 14953      68697374 
 14953      00
 14954              	.LASF37:
 14955 0c16 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 14955      524F4C5F 
 14955      43555252 
 14955      454E5400 
 14956              	.LASF23:
 14957 0c26 6C6F6E67 		.ascii	"long double\000"
 14957      20646F75 
 14957      626C6500 
 14958              	.LASF170:
 14959 0c32 44495343 		.ascii	"DISCARD\000"
 14959      41524400 
 14960              	.LASF224:
 14961 0c3a 70726576 		.ascii	"prev_pos_err\000"
 14961      5F706F73 
 14961      5F657272 
 14961      00
 14962              	.LASF240:
 14963 0c47 696E6974 		.ascii	"init_rot\000"
 14963      5F726F74 
 14963      00
 14964              	.LASF265:
 14965 0c50 6D6F745F 		.ascii	"mot_idx\000"
 14965      69647800 
 14966              	.LASF314:
 14967 0c58 66696C74 		.ascii	"filt_i\000"
 14967      5F6900
 14968              	.LASF63:
 14969 0c5f 6D6F7469 		.ascii	"motion_counter\000"
 14969      6F6E5F63 
 14969      6F756E74 
 14969      657200
 14970              	.LASF312:
 14971 0c6e 66696C74 		.ascii	"filt_v\000"
 14971      5F7600
 14972              	.LASF337:
 14973 0c75 72657374 		.ascii	"rest_enabled\000"
 14973      5F656E61 
 14973      626C6564 
 14973      00
 14974              	.LASF303:
 14975 0c82 675F7265 		.ascii	"g_refOld\000"
 14975      664F6C64 
 14975      00
 14976              	.LASF217:
 14977 0c8b 706F735F 		.ascii	"pos_error\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 329


 14977      6572726F 
 14977      7200
 14978              	.LASF156:
 14979 0c95 6779726F 		.ascii	"gyro_value\000"
 14979      5F76616C 
 14979      756500
 14980              	.LASF119:
 14981 0ca0 63757272 		.ascii	"curr_time\000"
 14981      5F74696D 
 14981      6500
 14982              	.LASF104:
 14983 0caa 646F7562 		.ascii	"double_encoder_on_off\000"
 14983      6C655F65 
 14983      6E636F64 
 14983      65725F6F 
 14983      6E5F6F66 
 14984              	.LASF266:
 14985 0cc0 6D61785F 		.ascii	"max_tension\000"
 14985      74656E73 
 14985      696F6E00 
 14986              	.LASF194:
 14987 0ccc 4D4F544F 		.ascii	"MOTOR_IDX\000"
 14987      525F4944 
 14987      5800
 14988              	.LASF241:
 14989 0cd6 6C617374 		.ascii	"last_value_encoder\000"
 14989      5F76616C 
 14989      75655F65 
 14989      6E636F64 
 14989      657200
 14990              	.LASF192:
 14991 0ce9 636F756E 		.ascii	"counter_tension_func\000"
 14991      7465725F 
 14991      74656E73 
 14991      696F6E5F 
 14991      66756E63 
 14992              	.LASF320:
 14993 0cfe 6379636C 		.ascii	"cycle_time\000"
 14993      655F7469 
 14993      6D6500
 14994              	.LASF213:
 14995 0d09 66736D5F 		.ascii	"fsm_state\000"
 14995      73746174 
 14995      6500
 14996              	.LASF7:
 14997 0d13 6C6F6E67 		.ascii	"long long unsigned int\000"
 14997      206C6F6E 
 14997      6720756E 
 14997      7369676E 
 14997      65642069 
 14998              	.LASF326:
 14999 0d2a 64657465 		.ascii	"detect_power_cycle\000"
 14999      63745F70 
 14999      6F776572 
 14999      5F637963 
 14999      6C6500
 15000              	.LASF330:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 330


 15001 0d3d 6A6F795F 		.ascii	"joy_UD_status\000"
 15001      55445F73 
 15001      74617475 
 15001      7300
 15002              	.LASF271:
 15003 0d4b 6D6F7469 		.ascii	"motion_status\000"
 15003      6F6E5F73 
 15003      74617475 
 15003      7300
 15004              	.LASF51:
 15005 0d59 6C656E67 		.ascii	"length\000"
 15005      746800
 15006              	.LASF153:
 15007 0d60 73745F69 		.ascii	"st_imu_data\000"
 15007      6D755F64 
 15007      61746100 
 15008              	.LASF157:
 15009 0d6c 6D61675F 		.ascii	"mag_value\000"
 15009      76616C75 
 15009      6500
 15010              	.LASF41:
 15011 0d76 6F6E6F66 		.ascii	"onoff\000"
 15011      6600
 15012              	.LASF236:
 15013 0d7c 746D705F 		.ascii	"tmp_value_encoder_32\000"
 15013      76616C75 
 15013      655F656E 
 15013      636F6465 
 15013      725F3332 
 15014              	.LASF225:
 15015 0d91 70726576 		.ascii	"prev_curr_err\000"
 15015      5F637572 
 15015      725F6572 
 15015      7200
 15016              	.LASF185:
 15017 0d9f 64617461 		.ascii	"data_packet_length\000"
 15017      5F706163 
 15017      6B65745F 
 15017      6C656E67 
 15017      746800
 15018              	.LASF75:
 15019 0db2 6B5F705F 		.ascii	"k_p_c\000"
 15019      6300
 15020              	.LASF321:
 15021 0db8 6465765F 		.ascii	"dev_tension\000"
 15021      74656E73 
 15021      696F6E00 
 15022              	.LASF86:
 15023 0dc4 6D6F746F 		.ascii	"motor_driver_type\000"
 15023      725F6472 
 15023      69766572 
 15023      5F747970 
 15023      6500
 15024              	.LASF173:
 15025 0dd6 57414954 		.ascii	"WAIT_EoC\000"
 15025      5F456F43 
 15025      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 331


 15026              	.LASF22:
 15027 0ddf 72656738 		.ascii	"reg8\000"
 15027      00
 15028              	.LASF280:
 15029 0de4 62696E5F 		.ascii	"bin_1\000"
 15029      3100
 15030              	.LASF281:
 15031 0dea 62696E5F 		.ascii	"bin_2\000"
 15031      3200
 15032              	.LASF252:
 15033 0df0 695F6175 		.ascii	"i_aux\000"
 15033      7800
 15034              	.LASF142:
 15035 0df6 70726F70 		.ascii	"prop_err_fb_gain\000"
 15035      5F657272 
 15035      5F66625F 
 15035      6761696E 
 15035      00
 15036              	.LASF210:
 15037 0e07 706F735F 		.ascii	"pos_diff\000"
 15037      64696666 
 15037      00
 15038              	.LASF293:
 15039 0e10 726F775F 		.ascii	"row_number\000"
 15039      6E756D62 
 15039      657200
 15040              	.LASF263:
 15041 0e1b 6F766572 		.ascii	"overcurrent_control\000"
 15041      63757272 
 15041      656E745F 
 15041      636F6E74 
 15041      726F6C00 
 15042              	.LASF282:
 15043 0e2f 63757272 		.ascii	"curr_pos\000"
 15043      5F706F73 
 15043      00
 15044              	.LASF169:
 15045 0e38 52455345 		.ascii	"RESET\000"
 15045      5400
 15046              	.LASF137:
 15047 0e3e 736C6176 		.ascii	"slave_comm_active\000"
 15047      655F636F 
 15047      6D6D5F61 
 15047      63746976 
 15047      6500
 15048              	.LASF251:
 15049 0e50 616E616C 		.ascii	"analog_read_end\000"
 15049      6F675F72 
 15049      6561645F 
 15049      656E6400 
 15050              	.LASF345:
 15051 0e60 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 15051      636F6465 
 15051      725F4C69 
 15051      6E655F43 
 15051      6F6E6E65 
 15052              	.LASF73:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 332


 15053 0e79 6465765F 		.ascii	"dev_type\000"
 15053      74797065 
 15053      00
 15054              	.LASF270:
 15055 0e82 656D675F 		.ascii	"emg_cycle_status\000"
 15055      6379636C 
 15055      655F7374 
 15055      61747573 
 15055      00
 15056              	.LASF124:
 15057 0e93 73745F75 		.ascii	"st_user\000"
 15057      73657200 
 15058              	.LASF107:
 15059 0e9b 67656172 		.ascii	"gears_params\000"
 15059      735F7061 
 15059      72616D73 
 15059      00
 15060              	.LASF118:
 15061 0ea8 73745F65 		.ascii	"st_expansion\000"
 15061      7870616E 
 15061      73696F6E 
 15061      00
 15062              	.LASF112:
 15063 0eb5 656D675F 		.ascii	"emg_calibration_flag\000"
 15063      63616C69 
 15063      62726174 
 15063      696F6E5F 
 15063      666C6167 
 15064              	.LASF43:
 15065 0eca 73745F6D 		.ascii	"st_meas\000"
 15065      65617300 
 15066              	.LASF295:
 15067 0ed2 61646472 		.ascii	"addr_start\000"
 15067      5F737461 
 15067      727400
 15068              	.LASF299:
 15069 0edd 70776D5F 		.ascii	"pwm_preload_values\000"
 15069      7072656C 
 15069      6F61645F 
 15069      76616C75 
 15069      657300
 15070              	.LASF134:
 15071 0ef0 6A6F7973 		.ascii	"joystick_threshold\000"
 15071      7469636B 
 15071      5F746872 
 15071      6573686F 
 15071      6C6400
 15072              	.LASF32:
 15073 0f03 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 15073      545F4D4F 
 15073      44455F45 
 15073      4D475F50 
 15073      524F504F 
 15074              	.LASF180:
 15075 0f22 636F756E 		.ascii	"counter_status\000"
 15075      7465725F 
 15075      73746174 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 333


 15075      757300
 15076              	.LASF309:
 15077 0f31 675F6D65 		.ascii	"g_mem\000"
 15077      6D00
 15078              	.LASF253:
 15079 0f37 656D675F 		.ascii	"emg_counter_1\000"
 15079      636F756E 
 15079      7465725F 
 15079      3100
 15080              	.LASF254:
 15081 0f45 656D675F 		.ascii	"emg_counter_2\000"
 15081      636F756E 
 15081      7465725F 
 15081      3200
 15082              	.LASF244:
 15083 0f53 6F6E6C79 		.ascii	"only_first_time\000"
 15083      5F666972 
 15083      73745F74 
 15083      696D6500 
 15084              	.LASF11:
 15085 0f63 75696E74 		.ascii	"uint8\000"
 15085      3800
 15086              	.LASF132:
 15087 0f69 73745F4A 		.ascii	"st_JOY_spec\000"
 15087      4F595F73 
 15087      70656300 
 15088              	.LASF239:
 15089 0f75 76616C75 		.ascii	"value_diff\000"
 15089      655F6469 
 15089      666600
 15090              	.LASF284:
 15091 0f80 63757272 		.ascii	"curr_ref\000"
 15091      5F726566 
 15091      00
 15092              	.LASF2:
 15093 0f89 73686F72 		.ascii	"short int\000"
 15093      7420696E 
 15093      7400
 15094              	.LASF80:
 15095 0f93 6B5F645F 		.ascii	"k_d_dl\000"
 15095      646C00
 15096              	.LASF237:
 15097 0f9a 76616C75 		.ascii	"value_encoder\000"
 15097      655F656E 
 15097      636F6465 
 15097      7200
 15098              	.LASF48:
 15099 0fa8 6A6F7973 		.ascii	"joystick\000"
 15099      7469636B 
 15099      00
 15100              	.LASF150:
 15101 0fb1 6D6F746F 		.ascii	"motor\000"
 15101      7200
 15102              	.LASF323:
 15103 0fb7 6465765F 		.ascii	"dev_pwm_sat\000"
 15103      70776D5F 
 15103      73617400 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 334


 15104              	.LASF66:
 15105 0fc3 68775F6D 		.ascii	"hw_maint_date\000"
 15105      61696E74 
 15105      5F646174 
 15105      6500
 15106              	.LASF197:
 15107 0fd1 66756E63 		.ascii	"function_scheduler\000"
 15107      74696F6E 
 15107      5F736368 
 15107      6564756C 
 15107      657200
 15108              	.LASF198:
 15109 0fe4 636F6D70 		.ascii	"compute_reference\000"
 15109      7574655F 
 15109      72656665 
 15109      72656E63 
 15109      6500
 15110              	.LASF226:
 15111 0ff6 70726576 		.ascii	"prev_pwm\000"
 15111      5F70776D 
 15111      00
 15112              	.LASF67:
 15113 0fff 73746174 		.ascii	"stats_period_begin_date\000"
 15113      735F7065 
 15113      72696F64 
 15113      5F626567 
 15113      696E5F64 
 15114              	.LASF289:
 15115 1017 74696D65 		.ascii	"timer_exc_e\000"
 15115      725F6578 
 15115      635F6500 
 15116              	.LASF300:
 15117 1023 49544D5F 		.ascii	"ITM_RxBuffer\000"
 15117      52784275 
 15117      66666572 
 15117      00
 15118              	.LASF325:
 15119 1030 706F775F 		.ascii	"pow_tension\000"
 15119      74656E73 
 15119      696F6E00 
 15120              	.LASF288:
 15121 103c 74696D65 		.ascii	"timer_exc_s\000"
 15121      725F6578 
 15121      635F7300 
 15122              	.LASF15:
 15123 1048 696E7431 		.ascii	"int16\000"
 15123      3600
 15124              	.LASF120:
 15125 104e 72656164 		.ascii	"read_exp_port_flag\000"
 15125      5F657870 
 15125      5F706F72 
 15125      745F666C 
 15125      616700
 15126              	.LASF275:
 15127 1061 6578635F 		.ascii	"exc_act_thr\000"
 15127      6163745F 
 15127      74687200 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 335


 15128              	.LASF85:
 15129 106d 61637469 		.ascii	"activate_pwm_rescaling\000"
 15129      76617465 
 15129      5F70776D 
 15129      5F726573 
 15129      63616C69 
 15130              	.LASF78:
 15131 1084 6B5F705F 		.ascii	"k_p_dl\000"
 15131      646C00
 15132              	.LASF44:
 15133 108b 65737469 		.ascii	"estim_curr\000"
 15133      6D5F6375 
 15133      727200
 15134              	.LASF322:
 15135 1096 6465765F 		.ascii	"dev_pwm_limit\000"
 15135      70776D5F 
 15135      6C696D69 
 15135      7400
 15136              	.LASF292:
 15137 10a4 73746174 		.ascii	"status\000"
 15137      757300
 15138              	.LASF218:
 15139 10ab 63757272 		.ascii	"curr_error\000"
 15139      5F657272 
 15139      6F7200
 15140              	.LASF346:
 15141 10b6 456E636F 		.ascii	"Encoder_Value\000"
 15141      6465725F 
 15141      56616C75 
 15141      6500
 15142              	.LASF72:
 15143 10c4 75736572 		.ascii	"user_id\000"
 15143      5F696400 
 15144              	.LASF273:
 15145 10cc 72657374 		.ascii	"rest_cycle_status\000"
 15145      5F637963 
 15145      6C655F73 
 15145      74617475 
 15145      7300
 15146              	.LASF208:
 15147 10de 636F6D70 		.ascii	"compute_SoftHand_2_motors_joystick_reference\000"
 15147      7574655F 
 15147      536F6674 
 15147      48616E64 
 15147      5F325F6D 
 15148              	.LASF235:
 15149 110b 746D705F 		.ascii	"tmp_value_encoder\000"
 15149      76616C75 
 15149      655F656E 
 15149      636F6465 
 15149      7200
 15150              	.LASF182:
 15151 111d 4953525F 		.ascii	"ISR_CYCLES_Handler\000"
 15151      4359434C 
 15151      45535F48 
 15151      616E646C 
 15151      657200
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 336


 15152              	.LASF71:
 15153 1130 62617564 		.ascii	"baud_rate\000"
 15153      5F726174 
 15153      6500
 15154              	.LASF145:
 15155 113a 66617374 		.ascii	"fast_act_threshold\000"
 15155      5F616374 
 15155      5F746872 
 15155      6573686F 
 15155      6C6400
 15156              	.LASF116:
 15157 114d 5350495F 		.ascii	"SPI_read_delay\000"
 15157      72656164 
 15157      5F64656C 
 15157      617900
 15158              	.LASF3:
 15159 115c 73686F72 		.ascii	"short unsigned int\000"
 15159      7420756E 
 15159      7369676E 
 15159      65642069 
 15159      6E7400
 15160              	.LASF100:
 15161 116f 73745F65 		.ascii	"st_encoder\000"
 15161      6E636F64 
 15161      657200
 15162              	.LASF306:
 15163 117a 675F6164 		.ascii	"g_adc_meas\000"
 15163      635F6D65 
 15163      617300
 15164              	.LASF140:
 15165 1185 6D61785F 		.ascii	"max_residual_current\000"
 15165      72657369 
 15165      6475616C 
 15165      5F637572 
 15165      72656E74 
 15166              	.LASF205:
 15167 119a 454E435F 		.ascii	"ENC_L\000"
 15167      4C00
 15168              	.LASF147:
 15169 11a0 73745F65 		.ascii	"st_eeprom\000"
 15169      6570726F 
 15169      6D00
 15170              	.LASF331:
 15171 11aa 6A6F795F 		.ascii	"joy_LR_status\000"
 15171      4C525F73 
 15171      74617475 
 15171      7300
 15172              	.LASF356:
 15173 11b8 2E2E5C73 		.ascii	"..\\src\\interruptions.c\000"
 15173      72635C69 
 15173      6E746572 
 15173      72757074 
 15173      696F6E73 
 15174              	.LASF201:
 15175 11cf 73745F72 		.ascii	"st_refOld_p\000"
 15175      65664F6C 
 15175      645F7000 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 337


 15176              	.LASF16:
 15177 11db 696E7433 		.ascii	"int32\000"
 15177      3200
 15178              	.LASF342:
 15179 11e1 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 15179      4F465F41 
 15179      4E414C4F 
 15179      475F494E 
 15179      50555453 
 15180              	.LASF74:
 15181 11f6 73745F6D 		.ascii	"st_motor\000"
 15181      6F746F72 
 15181      00
 15182              	.LASF354:
 15183 11ff 6D617374 		.ascii	"master_mode\000"
 15183      65725F6D 
 15183      6F646500 
 15184              	.LASF39:
 15185 120b 46535F46 		.ascii	"FS_FILE\000"
 15185      494C4500 
 15186              	.LASF87:
 15187 1213 706F735F 		.ascii	"pos_lim_flag\000"
 15187      6C696D5F 
 15187      666C6167 
 15187      00
 15188              	.LASF258:
 15189 1220 4C525F6D 		.ascii	"LR_mean_value\000"
 15189      65616E5F 
 15189      76616C75 
 15189      6500
 15190              	.LASF305:
 15191 122e 675F6D65 		.ascii	"g_measOld\000"
 15191      61734F6C 
 15191      6400
 15192              	.LASF297:
 15193 1238 726F775F 		.ascii	"row_end\000"
 15193      656E6400 
 15194              	.LASF35:
 15195 1240 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 15195      524F4C5F 
 15195      414E474C 
 15195      4500
 15196              	.LASF9:
 15197 124e 5F5F696E 		.ascii	"__int32_t\000"
 15197      7433325F 
 15197      7400
 15198              	.LASF58:
 15199 1258 77697265 		.ascii	"wire_disp\000"
 15199      5F646973 
 15199      7000
 15200              	.LASF336:
 15201 1262 63616E5F 		.ascii	"can_write\000"
 15201      77726974 
 15201      6500
 15202              	.LASF110:
 15203 126c 656D675F 		.ascii	"emg_max_value\000"
 15203      6D61785F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccZk5p5d.s 			page 338


 15203      76616C75 
 15203      6500
 15204              	.LASF93:
 15205 127a 63757272 		.ascii	"current_limit\000"
 15205      656E745F 
 15205      6C696D69 
 15205      7400
 15206              	.LASF33:
 15207 1288 53485F69 		.ascii	"SH_input_mode\000"
 15207      6E707574 
 15207      5F6D6F64 
 15207      6500
 15208              	.LASF179:
 15209 1296 4E4F4E45 		.ascii	"NONE\000"
 15209      00
 15210              	.LASF144:
 15211 129b 61637469 		.ascii	"activation_mode\000"
 15211      76617469 
 15211      6F6E5F6D 
 15211      6F646500 
 15212              	.LASF12:
 15213 12ab 75696E74 		.ascii	"uint16\000"
 15213      313600
 15214              	.LASF129:
 15215 12b2 72657374 		.ascii	"rest_delay\000"
 15215      5F64656C 
 15215      617900
 15216              	.LASF160:
 15217 12bd 73745F66 		.ascii	"st_filter\000"
 15217      696C7465 
 15217      7200
 15218              	.LASF249:
 15219 12c7 76765F76 		.ascii	"vv_value\000"
 15219      616C7565 
 15219      00
 15220              	.LASF83:
 15221 12d0 6B5F645F 		.ascii	"k_d_c_dl\000"
 15221      635F646C 
 15221      00
 15222              	.LASF165:
 15223 12d9 64697265 		.ascii	"direction\000"
 15223      6374696F 
 15223      6E00
 15224              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
